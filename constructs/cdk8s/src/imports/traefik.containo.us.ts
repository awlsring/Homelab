// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from "cdk8s";
import { Construct } from "constructs";

/**
 * IngressRoute is the CRD implementation of a Traefik HTTP Router.
 *
 * @schema IngressRoute
 */
export class IngressRoute extends ApiObject {
  /**
   * Returns the apiVersion and kind for "IngressRoute"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: "traefik.containo.us/v1alpha1",
    kind: "IngressRoute",
  };

  /**
   * Renders a Kubernetes manifest for "IngressRoute".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: IngressRouteProps): any {
    return {
      ...IngressRoute.GVK,
      ...toJson_IngressRouteProps(props),
    };
  }

  /**
   * Defines a "IngressRoute" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: IngressRouteProps) {
    super(scope, id, {
      ...IngressRoute.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...IngressRoute.GVK,
      ...toJson_IngressRouteProps(resolved),
    };
  }
}

/**
 * IngressRoute is the CRD implementation of a Traefik HTTP Router.
 *
 * @schema IngressRoute
 */
export interface IngressRouteProps {
  /**
   * @schema IngressRoute#metadata
   */
  readonly metadata: ApiObjectMetadata;

  /**
   * IngressRouteSpec defines the desired state of IngressRoute.
   *
   * @schema IngressRoute#spec
   */
  readonly spec: IngressRouteSpec;
}

/**
 * Converts an object of type 'IngressRouteProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IngressRouteProps(
  obj: IngressRouteProps | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    metadata: obj.metadata,
    spec: toJson_IngressRouteSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * IngressRouteSpec defines the desired state of IngressRoute.
 *
 * @schema IngressRouteSpec
 */
export interface IngressRouteSpec {
  /**
   * EntryPoints defines the list of entry point names to bind to. Entry points have to be configured in the static configuration. More info: https://doc.traefik.io/traefik/v2.10/routing/entrypoints/ Default: all.
   *
   * @schema IngressRouteSpec#entryPoints
   */
  readonly entryPoints?: string[];

  /**
   * Routes defines the list of routes.
   *
   * @schema IngressRouteSpec#routes
   */
  readonly routes: IngressRouteSpecRoutes[];

  /**
   * TLS defines the TLS configuration. More info: https://doc.traefik.io/traefik/v2.10/routing/routers/#tls
   *
   * @schema IngressRouteSpec#tls
   */
  readonly tls?: IngressRouteSpecTls;
}

/**
 * Converts an object of type 'IngressRouteSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IngressRouteSpec(
  obj: IngressRouteSpec | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    entryPoints: obj.entryPoints?.map((y) => y),
    routes: obj.routes?.map((y) => toJson_IngressRouteSpecRoutes(y)),
    tls: toJson_IngressRouteSpecTls(obj.tls),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * Route holds the HTTP route configuration.
 *
 * @schema IngressRouteSpecRoutes
 */
export interface IngressRouteSpecRoutes {
  /**
   * Kind defines the kind of the route. Rule is the only supported kind.
   *
   * @schema IngressRouteSpecRoutes#kind
   */
  readonly kind: IngressRouteSpecRoutesKind;

  /**
   * Match defines the router's rule. More info: https://doc.traefik.io/traefik/v2.10/routing/routers/#rule
   *
   * @schema IngressRouteSpecRoutes#match
   */
  readonly match: string;

  /**
   * Middlewares defines the list of references to Middleware resources. More info: https://doc.traefik.io/traefik/v2.10/routing/providers/kubernetes-crd/#kind-middleware
   *
   * @schema IngressRouteSpecRoutes#middlewares
   */
  readonly middlewares?: IngressRouteSpecRoutesMiddlewares[];

  /**
   * Priority defines the router's priority. More info: https://doc.traefik.io/traefik/v2.10/routing/routers/#priority
   *
   * @schema IngressRouteSpecRoutes#priority
   */
  readonly priority?: number;

  /**
   * Services defines the list of Service. It can contain any combination of TraefikService and/or reference to a Kubernetes Service.
   *
   * @schema IngressRouteSpecRoutes#services
   */
  readonly services?: IngressRouteSpecRoutesServices[];
}

/**
 * Converts an object of type 'IngressRouteSpecRoutes' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IngressRouteSpecRoutes(
  obj: IngressRouteSpecRoutes | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    kind: obj.kind,
    match: obj.match,
    middlewares: obj.middlewares?.map((y) =>
      toJson_IngressRouteSpecRoutesMiddlewares(y),
    ),
    priority: obj.priority,
    services: obj.services?.map((y) =>
      toJson_IngressRouteSpecRoutesServices(y),
    ),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * TLS defines the TLS configuration. More info: https://doc.traefik.io/traefik/v2.10/routing/routers/#tls
 *
 * @schema IngressRouteSpecTls
 */
export interface IngressRouteSpecTls {
  /**
   * CertResolver defines the name of the certificate resolver to use. Cert resolvers have to be configured in the static configuration. More info: https://doc.traefik.io/traefik/v2.10/https/acme/#certificate-resolvers
   *
   * @schema IngressRouteSpecTls#certResolver
   */
  readonly certResolver?: string;

  /**
   * Domains defines the list of domains that will be used to issue certificates. More info: https://doc.traefik.io/traefik/v2.10/routing/routers/#domains
   *
   * @schema IngressRouteSpecTls#domains
   */
  readonly domains?: IngressRouteSpecTlsDomains[];

  /**
   * Options defines the reference to a TLSOption, that specifies the parameters of the TLS connection. If not defined, the `default` TLSOption is used. More info: https://doc.traefik.io/traefik/v2.10/https/tls/#tls-options
   *
   * @schema IngressRouteSpecTls#options
   */
  readonly options?: IngressRouteSpecTlsOptions;

  /**
   * SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.
   *
   * @schema IngressRouteSpecTls#secretName
   */
  readonly secretName?: string;

  /**
   * Store defines the reference to the TLSStore, that will be used to store certificates. Please note that only `default` TLSStore can be used.
   *
   * @schema IngressRouteSpecTls#store
   */
  readonly store?: IngressRouteSpecTlsStore;
}

/**
 * Converts an object of type 'IngressRouteSpecTls' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IngressRouteSpecTls(
  obj: IngressRouteSpecTls | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    certResolver: obj.certResolver,
    domains: obj.domains?.map((y) => toJson_IngressRouteSpecTlsDomains(y)),
    options: toJson_IngressRouteSpecTlsOptions(obj.options),
    secretName: obj.secretName,
    store: toJson_IngressRouteSpecTlsStore(obj.store),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * Kind defines the kind of the route. Rule is the only supported kind.
 *
 * @schema IngressRouteSpecRoutesKind
 */
export enum IngressRouteSpecRoutesKind {
  /** Rule */
  RULE = "Rule",
}

/**
 * MiddlewareRef is a reference to a Middleware resource.
 *
 * @schema IngressRouteSpecRoutesMiddlewares
 */
export interface IngressRouteSpecRoutesMiddlewares {
  /**
   * Name defines the name of the referenced Middleware resource.
   *
   * @schema IngressRouteSpecRoutesMiddlewares#name
   */
  readonly name: string;

  /**
   * Namespace defines the namespace of the referenced Middleware resource.
   *
   * @schema IngressRouteSpecRoutesMiddlewares#namespace
   */
  readonly namespace?: string;
}

/**
 * Converts an object of type 'IngressRouteSpecRoutesMiddlewares' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IngressRouteSpecRoutesMiddlewares(
  obj: IngressRouteSpecRoutesMiddlewares | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    name: obj.name,
    namespace: obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * Service defines an upstream HTTP service to proxy traffic to.
 *
 * @schema IngressRouteSpecRoutesServices
 */
export interface IngressRouteSpecRoutesServices {
  /**
   * Kind defines the kind of the Service.
   *
   * @schema IngressRouteSpecRoutesServices#kind
   */
  readonly kind?: IngressRouteSpecRoutesServicesKind;

  /**
   * Name defines the name of the referenced Kubernetes Service or TraefikService. The differentiation between the two is specified in the Kind field.
   *
   * @schema IngressRouteSpecRoutesServices#name
   */
  readonly name: string;

  /**
   * Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.
   *
   * @schema IngressRouteSpecRoutesServices#namespace
   */
  readonly namespace?: string;

  /**
   * NativeLB controls, when creating the load-balancer, whether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP. The Kubernetes Service itself does load-balance to the pods. By default, NativeLB is false.
   *
   * @schema IngressRouteSpecRoutesServices#nativeLB
   */
  readonly nativeLb?: boolean;

  /**
   * PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service. By default, passHostHeader is true.
   *
   * @schema IngressRouteSpecRoutesServices#passHostHeader
   */
  readonly passHostHeader?: boolean;

  /**
   * Port defines the port of a Kubernetes Service. This can be a reference to a named port.
   *
   * @schema IngressRouteSpecRoutesServices#port
   */
  readonly port?: IngressRouteSpecRoutesServicesPort;

  /**
   * ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
   *
   * @schema IngressRouteSpecRoutesServices#responseForwarding
   */
  readonly responseForwarding?: IngressRouteSpecRoutesServicesResponseForwarding;

  /**
   * Scheme defines the scheme to use for the request to the upstream Kubernetes Service. It defaults to https when Kubernetes Service port is 443, http otherwise.
   *
   * @schema IngressRouteSpecRoutesServices#scheme
   */
  readonly scheme?: string;

  /**
   * ServersTransport defines the name of ServersTransport resource to use. It allows to configure the transport between Traefik and your servers. Can only be used on a Kubernetes Service.
   *
   * @schema IngressRouteSpecRoutesServices#serversTransport
   */
  readonly serversTransport?: string;

  /**
   * Sticky defines the sticky sessions configuration. More info: https://doc.traefik.io/traefik/v2.10/routing/services/#sticky-sessions
   *
   * @schema IngressRouteSpecRoutesServices#sticky
   */
  readonly sticky?: IngressRouteSpecRoutesServicesSticky;

  /**
   * Strategy defines the load balancing strategy between the servers. RoundRobin is the only supported value at the moment.
   *
   * @schema IngressRouteSpecRoutesServices#strategy
   */
  readonly strategy?: string;

  /**
   * Weight defines the weight and should only be specified when Name references a TraefikService object (and to be precise, one that embeds a Weighted Round Robin).
   *
   * @schema IngressRouteSpecRoutesServices#weight
   */
  readonly weight?: number;
}

/**
 * Converts an object of type 'IngressRouteSpecRoutesServices' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IngressRouteSpecRoutesServices(
  obj: IngressRouteSpecRoutesServices | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    kind: obj.kind,
    name: obj.name,
    namespace: obj.namespace,
    nativeLB: obj.nativeLb,
    passHostHeader: obj.passHostHeader,
    port: obj.port?.value,
    responseForwarding: toJson_IngressRouteSpecRoutesServicesResponseForwarding(
      obj.responseForwarding,
    ),
    scheme: obj.scheme,
    serversTransport: obj.serversTransport,
    sticky: toJson_IngressRouteSpecRoutesServicesSticky(obj.sticky),
    strategy: obj.strategy,
    weight: obj.weight,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * Domain holds a domain name with SANs.
 *
 * @schema IngressRouteSpecTlsDomains
 */
export interface IngressRouteSpecTlsDomains {
  /**
   * Main defines the main domain name.
   *
   * @schema IngressRouteSpecTlsDomains#main
   */
  readonly main?: string;

  /**
   * SANs defines the subject alternative domain names.
   *
   * @schema IngressRouteSpecTlsDomains#sans
   */
  readonly sans?: string[];
}

/**
 * Converts an object of type 'IngressRouteSpecTlsDomains' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IngressRouteSpecTlsDomains(
  obj: IngressRouteSpecTlsDomains | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    main: obj.main,
    sans: obj.sans?.map((y) => y),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * Options defines the reference to a TLSOption, that specifies the parameters of the TLS connection. If not defined, the `default` TLSOption is used. More info: https://doc.traefik.io/traefik/v2.10/https/tls/#tls-options
 *
 * @schema IngressRouteSpecTlsOptions
 */
export interface IngressRouteSpecTlsOptions {
  /**
   * Name defines the name of the referenced TLSOption. More info: https://doc.traefik.io/traefik/v2.10/routing/providers/kubernetes-crd/#kind-tlsoption
   *
   * @schema IngressRouteSpecTlsOptions#name
   */
  readonly name: string;

  /**
   * Namespace defines the namespace of the referenced TLSOption. More info: https://doc.traefik.io/traefik/v2.10/routing/providers/kubernetes-crd/#kind-tlsoption
   *
   * @schema IngressRouteSpecTlsOptions#namespace
   */
  readonly namespace?: string;
}

/**
 * Converts an object of type 'IngressRouteSpecTlsOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IngressRouteSpecTlsOptions(
  obj: IngressRouteSpecTlsOptions | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    name: obj.name,
    namespace: obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * Store defines the reference to the TLSStore, that will be used to store certificates. Please note that only `default` TLSStore can be used.
 *
 * @schema IngressRouteSpecTlsStore
 */
export interface IngressRouteSpecTlsStore {
  /**
   * Name defines the name of the referenced TLSStore. More info: https://doc.traefik.io/traefik/v2.10/routing/providers/kubernetes-crd/#kind-tlsstore
   *
   * @schema IngressRouteSpecTlsStore#name
   */
  readonly name: string;

  /**
   * Namespace defines the namespace of the referenced TLSStore. More info: https://doc.traefik.io/traefik/v2.10/routing/providers/kubernetes-crd/#kind-tlsstore
   *
   * @schema IngressRouteSpecTlsStore#namespace
   */
  readonly namespace?: string;
}

/**
 * Converts an object of type 'IngressRouteSpecTlsStore' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IngressRouteSpecTlsStore(
  obj: IngressRouteSpecTlsStore | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    name: obj.name,
    namespace: obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * Kind defines the kind of the Service.
 *
 * @schema IngressRouteSpecRoutesServicesKind
 */
export enum IngressRouteSpecRoutesServicesKind {
  /** Service */
  SERVICE = "Service",
  /** TraefikService */
  TRAEFIK_SERVICE = "TraefikService",
}

/**
 * Port defines the port of a Kubernetes Service. This can be a reference to a named port.
 *
 * @schema IngressRouteSpecRoutesServicesPort
 */
export class IngressRouteSpecRoutesServicesPort {
  public static fromNumber(value: number): IngressRouteSpecRoutesServicesPort {
    return new IngressRouteSpecRoutesServicesPort(value);
  }
  public static fromString(value: string): IngressRouteSpecRoutesServicesPort {
    return new IngressRouteSpecRoutesServicesPort(value);
  }
  private constructor(public readonly value: number | string) {}
}

/**
 * ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
 *
 * @schema IngressRouteSpecRoutesServicesResponseForwarding
 */
export interface IngressRouteSpecRoutesServicesResponseForwarding {
  /**
   * FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body. A negative value means to flush immediately after each write to the client. This configuration is ignored when ReverseProxy recognizes a response as a streaming response; for such responses, writes are flushed to the client immediately. Default: 100ms
   *
   * @schema IngressRouteSpecRoutesServicesResponseForwarding#flushInterval
   */
  readonly flushInterval?: string;
}

/**
 * Converts an object of type 'IngressRouteSpecRoutesServicesResponseForwarding' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IngressRouteSpecRoutesServicesResponseForwarding(
  obj: IngressRouteSpecRoutesServicesResponseForwarding | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    flushInterval: obj.flushInterval,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * Sticky defines the sticky sessions configuration. More info: https://doc.traefik.io/traefik/v2.10/routing/services/#sticky-sessions
 *
 * @schema IngressRouteSpecRoutesServicesSticky
 */
export interface IngressRouteSpecRoutesServicesSticky {
  /**
   * Cookie defines the sticky cookie configuration.
   *
   * @schema IngressRouteSpecRoutesServicesSticky#cookie
   */
  readonly cookie?: IngressRouteSpecRoutesServicesStickyCookie;
}

/**
 * Converts an object of type 'IngressRouteSpecRoutesServicesSticky' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IngressRouteSpecRoutesServicesSticky(
  obj: IngressRouteSpecRoutesServicesSticky | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    cookie: toJson_IngressRouteSpecRoutesServicesStickyCookie(obj.cookie),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * Cookie defines the sticky cookie configuration.
 *
 * @schema IngressRouteSpecRoutesServicesStickyCookie
 */
export interface IngressRouteSpecRoutesServicesStickyCookie {
  /**
   * HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.
   *
   * @schema IngressRouteSpecRoutesServicesStickyCookie#httpOnly
   */
  readonly httpOnly?: boolean;

  /**
   * Name defines the Cookie name.
   *
   * @schema IngressRouteSpecRoutesServicesStickyCookie#name
   */
  readonly name?: string;

  /**
   * SameSite defines the same site policy. More info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite
   *
   * @schema IngressRouteSpecRoutesServicesStickyCookie#sameSite
   */
  readonly sameSite?: string;

  /**
   * Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).
   *
   * @schema IngressRouteSpecRoutesServicesStickyCookie#secure
   */
  readonly secure?: boolean;
}

/**
 * Converts an object of type 'IngressRouteSpecRoutesServicesStickyCookie' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IngressRouteSpecRoutesServicesStickyCookie(
  obj: IngressRouteSpecRoutesServicesStickyCookie | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    httpOnly: obj.httpOnly,
    name: obj.name,
    sameSite: obj.sameSite,
    secure: obj.secure,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * IngressRouteTCP is the CRD implementation of a Traefik TCP Router.
 *
 * @schema IngressRouteTCP
 */
export class IngressRouteTcp extends ApiObject {
  /**
   * Returns the apiVersion and kind for "IngressRouteTCP"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: "traefik.containo.us/v1alpha1",
    kind: "IngressRouteTCP",
  };

  /**
   * Renders a Kubernetes manifest for "IngressRouteTCP".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: IngressRouteTcpProps): any {
    return {
      ...IngressRouteTcp.GVK,
      ...toJson_IngressRouteTcpProps(props),
    };
  }

  /**
   * Defines a "IngressRouteTCP" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(
    scope: Construct,
    id: string,
    props: IngressRouteTcpProps,
  ) {
    super(scope, id, {
      ...IngressRouteTcp.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...IngressRouteTcp.GVK,
      ...toJson_IngressRouteTcpProps(resolved),
    };
  }
}

/**
 * IngressRouteTCP is the CRD implementation of a Traefik TCP Router.
 *
 * @schema IngressRouteTCP
 */
export interface IngressRouteTcpProps {
  /**
   * @schema IngressRouteTCP#metadata
   */
  readonly metadata: ApiObjectMetadata;

  /**
   * IngressRouteTCPSpec defines the desired state of IngressRouteTCP.
   *
   * @schema IngressRouteTCP#spec
   */
  readonly spec: IngressRouteTcpSpec;
}

/**
 * Converts an object of type 'IngressRouteTcpProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IngressRouteTcpProps(
  obj: IngressRouteTcpProps | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    metadata: obj.metadata,
    spec: toJson_IngressRouteTcpSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * IngressRouteTCPSpec defines the desired state of IngressRouteTCP.
 *
 * @schema IngressRouteTcpSpec
 */
export interface IngressRouteTcpSpec {
  /**
   * EntryPoints defines the list of entry point names to bind to. Entry points have to be configured in the static configuration. More info: https://doc.traefik.io/traefik/v2.10/routing/entrypoints/ Default: all.
   *
   * @schema IngressRouteTcpSpec#entryPoints
   */
  readonly entryPoints?: string[];

  /**
   * Routes defines the list of routes.
   *
   * @schema IngressRouteTcpSpec#routes
   */
  readonly routes: IngressRouteTcpSpecRoutes[];

  /**
   * TLS defines the TLS configuration on a layer 4 / TCP Route. More info: https://doc.traefik.io/traefik/v2.10/routing/routers/#tls_1
   *
   * @schema IngressRouteTcpSpec#tls
   */
  readonly tls?: IngressRouteTcpSpecTls;
}

/**
 * Converts an object of type 'IngressRouteTcpSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IngressRouteTcpSpec(
  obj: IngressRouteTcpSpec | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    entryPoints: obj.entryPoints?.map((y) => y),
    routes: obj.routes?.map((y) => toJson_IngressRouteTcpSpecRoutes(y)),
    tls: toJson_IngressRouteTcpSpecTls(obj.tls),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * RouteTCP holds the TCP route configuration.
 *
 * @schema IngressRouteTcpSpecRoutes
 */
export interface IngressRouteTcpSpecRoutes {
  /**
   * Match defines the router's rule. More info: https://doc.traefik.io/traefik/v2.10/routing/routers/#rule_1
   *
   * @schema IngressRouteTcpSpecRoutes#match
   */
  readonly match: string;

  /**
   * Middlewares defines the list of references to MiddlewareTCP resources.
   *
   * @schema IngressRouteTcpSpecRoutes#middlewares
   */
  readonly middlewares?: IngressRouteTcpSpecRoutesMiddlewares[];

  /**
   * Priority defines the router's priority. More info: https://doc.traefik.io/traefik/v2.10/routing/routers/#priority_1
   *
   * @schema IngressRouteTcpSpecRoutes#priority
   */
  readonly priority?: number;

  /**
   * Services defines the list of TCP services.
   *
   * @schema IngressRouteTcpSpecRoutes#services
   */
  readonly services?: IngressRouteTcpSpecRoutesServices[];
}

/**
 * Converts an object of type 'IngressRouteTcpSpecRoutes' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IngressRouteTcpSpecRoutes(
  obj: IngressRouteTcpSpecRoutes | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    match: obj.match,
    middlewares: obj.middlewares?.map((y) =>
      toJson_IngressRouteTcpSpecRoutesMiddlewares(y),
    ),
    priority: obj.priority,
    services: obj.services?.map((y) =>
      toJson_IngressRouteTcpSpecRoutesServices(y),
    ),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * TLS defines the TLS configuration on a layer 4 / TCP Route. More info: https://doc.traefik.io/traefik/v2.10/routing/routers/#tls_1
 *
 * @schema IngressRouteTcpSpecTls
 */
export interface IngressRouteTcpSpecTls {
  /**
   * CertResolver defines the name of the certificate resolver to use. Cert resolvers have to be configured in the static configuration. More info: https://doc.traefik.io/traefik/v2.10/https/acme/#certificate-resolvers
   *
   * @schema IngressRouteTcpSpecTls#certResolver
   */
  readonly certResolver?: string;

  /**
   * Domains defines the list of domains that will be used to issue certificates. More info: https://doc.traefik.io/traefik/v2.10/routing/routers/#domains
   *
   * @schema IngressRouteTcpSpecTls#domains
   */
  readonly domains?: IngressRouteTcpSpecTlsDomains[];

  /**
   * Options defines the reference to a TLSOption, that specifies the parameters of the TLS connection. If not defined, the `default` TLSOption is used. More info: https://doc.traefik.io/traefik/v2.10/https/tls/#tls-options
   *
   * @schema IngressRouteTcpSpecTls#options
   */
  readonly options?: IngressRouteTcpSpecTlsOptions;

  /**
   * Passthrough defines whether a TLS router will terminate the TLS connection.
   *
   * @schema IngressRouteTcpSpecTls#passthrough
   */
  readonly passthrough?: boolean;

  /**
   * SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.
   *
   * @schema IngressRouteTcpSpecTls#secretName
   */
  readonly secretName?: string;

  /**
   * Store defines the reference to the TLSStore, that will be used to store certificates. Please note that only `default` TLSStore can be used.
   *
   * @schema IngressRouteTcpSpecTls#store
   */
  readonly store?: IngressRouteTcpSpecTlsStore;
}

/**
 * Converts an object of type 'IngressRouteTcpSpecTls' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IngressRouteTcpSpecTls(
  obj: IngressRouteTcpSpecTls | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    certResolver: obj.certResolver,
    domains: obj.domains?.map((y) => toJson_IngressRouteTcpSpecTlsDomains(y)),
    options: toJson_IngressRouteTcpSpecTlsOptions(obj.options),
    passthrough: obj.passthrough,
    secretName: obj.secretName,
    store: toJson_IngressRouteTcpSpecTlsStore(obj.store),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * ObjectReference is a generic reference to a Traefik resource.
 *
 * @schema IngressRouteTcpSpecRoutesMiddlewares
 */
export interface IngressRouteTcpSpecRoutesMiddlewares {
  /**
   * Name defines the name of the referenced Traefik resource.
   *
   * @schema IngressRouteTcpSpecRoutesMiddlewares#name
   */
  readonly name: string;

  /**
   * Namespace defines the namespace of the referenced Traefik resource.
   *
   * @schema IngressRouteTcpSpecRoutesMiddlewares#namespace
   */
  readonly namespace?: string;
}

/**
 * Converts an object of type 'IngressRouteTcpSpecRoutesMiddlewares' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IngressRouteTcpSpecRoutesMiddlewares(
  obj: IngressRouteTcpSpecRoutesMiddlewares | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    name: obj.name,
    namespace: obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * ServiceTCP defines an upstream TCP service to proxy traffic to.
 *
 * @schema IngressRouteTcpSpecRoutesServices
 */
export interface IngressRouteTcpSpecRoutesServices {
  /**
   * Name defines the name of the referenced Kubernetes Service.
   *
   * @schema IngressRouteTcpSpecRoutesServices#name
   */
  readonly name: string;

  /**
   * Namespace defines the namespace of the referenced Kubernetes Service.
   *
   * @schema IngressRouteTcpSpecRoutesServices#namespace
   */
  readonly namespace?: string;

  /**
   * NativeLB controls, when creating the load-balancer, whether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP. The Kubernetes Service itself does load-balance to the pods. By default, NativeLB is false.
   *
   * @schema IngressRouteTcpSpecRoutesServices#nativeLB
   */
  readonly nativeLb?: boolean;

  /**
   * Port defines the port of a Kubernetes Service. This can be a reference to a named port.
   *
   * @schema IngressRouteTcpSpecRoutesServices#port
   */
  readonly port: IngressRouteTcpSpecRoutesServicesPort;

  /**
   * ProxyProtocol defines the PROXY protocol configuration. More info: https://doc.traefik.io/traefik/v2.10/routing/services/#proxy-protocol
   *
   * @schema IngressRouteTcpSpecRoutesServices#proxyProtocol
   */
  readonly proxyProtocol?: IngressRouteTcpSpecRoutesServicesProxyProtocol;

  /**
   * TerminationDelay defines the deadline that the proxy sets, after one of its connected peers indicates it has closed the writing capability of its connection, to close the reading capability as well, hence fully terminating the connection. It is a duration in milliseconds, defaulting to 100. A negative value means an infinite deadline (i.e. the reading capability is never closed).
   *
   * @schema IngressRouteTcpSpecRoutesServices#terminationDelay
   */
  readonly terminationDelay?: number;

  /**
   * Weight defines the weight used when balancing requests between multiple Kubernetes Service.
   *
   * @schema IngressRouteTcpSpecRoutesServices#weight
   */
  readonly weight?: number;
}

/**
 * Converts an object of type 'IngressRouteTcpSpecRoutesServices' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IngressRouteTcpSpecRoutesServices(
  obj: IngressRouteTcpSpecRoutesServices | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    name: obj.name,
    namespace: obj.namespace,
    nativeLB: obj.nativeLb,
    port: obj.port?.value,
    proxyProtocol: toJson_IngressRouteTcpSpecRoutesServicesProxyProtocol(
      obj.proxyProtocol,
    ),
    terminationDelay: obj.terminationDelay,
    weight: obj.weight,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * Domain holds a domain name with SANs.
 *
 * @schema IngressRouteTcpSpecTlsDomains
 */
export interface IngressRouteTcpSpecTlsDomains {
  /**
   * Main defines the main domain name.
   *
   * @schema IngressRouteTcpSpecTlsDomains#main
   */
  readonly main?: string;

  /**
   * SANs defines the subject alternative domain names.
   *
   * @schema IngressRouteTcpSpecTlsDomains#sans
   */
  readonly sans?: string[];
}

/**
 * Converts an object of type 'IngressRouteTcpSpecTlsDomains' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IngressRouteTcpSpecTlsDomains(
  obj: IngressRouteTcpSpecTlsDomains | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    main: obj.main,
    sans: obj.sans?.map((y) => y),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * Options defines the reference to a TLSOption, that specifies the parameters of the TLS connection. If not defined, the `default` TLSOption is used. More info: https://doc.traefik.io/traefik/v2.10/https/tls/#tls-options
 *
 * @schema IngressRouteTcpSpecTlsOptions
 */
export interface IngressRouteTcpSpecTlsOptions {
  /**
   * Name defines the name of the referenced Traefik resource.
   *
   * @schema IngressRouteTcpSpecTlsOptions#name
   */
  readonly name: string;

  /**
   * Namespace defines the namespace of the referenced Traefik resource.
   *
   * @schema IngressRouteTcpSpecTlsOptions#namespace
   */
  readonly namespace?: string;
}

/**
 * Converts an object of type 'IngressRouteTcpSpecTlsOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IngressRouteTcpSpecTlsOptions(
  obj: IngressRouteTcpSpecTlsOptions | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    name: obj.name,
    namespace: obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * Store defines the reference to the TLSStore, that will be used to store certificates. Please note that only `default` TLSStore can be used.
 *
 * @schema IngressRouteTcpSpecTlsStore
 */
export interface IngressRouteTcpSpecTlsStore {
  /**
   * Name defines the name of the referenced Traefik resource.
   *
   * @schema IngressRouteTcpSpecTlsStore#name
   */
  readonly name: string;

  /**
   * Namespace defines the namespace of the referenced Traefik resource.
   *
   * @schema IngressRouteTcpSpecTlsStore#namespace
   */
  readonly namespace?: string;
}

/**
 * Converts an object of type 'IngressRouteTcpSpecTlsStore' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IngressRouteTcpSpecTlsStore(
  obj: IngressRouteTcpSpecTlsStore | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    name: obj.name,
    namespace: obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * Port defines the port of a Kubernetes Service. This can be a reference to a named port.
 *
 * @schema IngressRouteTcpSpecRoutesServicesPort
 */
export class IngressRouteTcpSpecRoutesServicesPort {
  public static fromNumber(
    value: number,
  ): IngressRouteTcpSpecRoutesServicesPort {
    return new IngressRouteTcpSpecRoutesServicesPort(value);
  }
  public static fromString(
    value: string,
  ): IngressRouteTcpSpecRoutesServicesPort {
    return new IngressRouteTcpSpecRoutesServicesPort(value);
  }
  private constructor(public readonly value: number | string) {}
}

/**
 * ProxyProtocol defines the PROXY protocol configuration. More info: https://doc.traefik.io/traefik/v2.10/routing/services/#proxy-protocol
 *
 * @schema IngressRouteTcpSpecRoutesServicesProxyProtocol
 */
export interface IngressRouteTcpSpecRoutesServicesProxyProtocol {
  /**
   * Version defines the PROXY Protocol version to use.
   *
   * @schema IngressRouteTcpSpecRoutesServicesProxyProtocol#version
   */
  readonly version?: number;
}

/**
 * Converts an object of type 'IngressRouteTcpSpecRoutesServicesProxyProtocol' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IngressRouteTcpSpecRoutesServicesProxyProtocol(
  obj: IngressRouteTcpSpecRoutesServicesProxyProtocol | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    version: obj.version,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * IngressRouteUDP is a CRD implementation of a Traefik UDP Router.
 *
 * @schema IngressRouteUDP
 */
export class IngressRouteUdp extends ApiObject {
  /**
   * Returns the apiVersion and kind for "IngressRouteUDP"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: "traefik.containo.us/v1alpha1",
    kind: "IngressRouteUDP",
  };

  /**
   * Renders a Kubernetes manifest for "IngressRouteUDP".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: IngressRouteUdpProps): any {
    return {
      ...IngressRouteUdp.GVK,
      ...toJson_IngressRouteUdpProps(props),
    };
  }

  /**
   * Defines a "IngressRouteUDP" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(
    scope: Construct,
    id: string,
    props: IngressRouteUdpProps,
  ) {
    super(scope, id, {
      ...IngressRouteUdp.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...IngressRouteUdp.GVK,
      ...toJson_IngressRouteUdpProps(resolved),
    };
  }
}

/**
 * IngressRouteUDP is a CRD implementation of a Traefik UDP Router.
 *
 * @schema IngressRouteUDP
 */
export interface IngressRouteUdpProps {
  /**
   * @schema IngressRouteUDP#metadata
   */
  readonly metadata: ApiObjectMetadata;

  /**
   * IngressRouteUDPSpec defines the desired state of a IngressRouteUDP.
   *
   * @schema IngressRouteUDP#spec
   */
  readonly spec: IngressRouteUdpSpec;
}

/**
 * Converts an object of type 'IngressRouteUdpProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IngressRouteUdpProps(
  obj: IngressRouteUdpProps | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    metadata: obj.metadata,
    spec: toJson_IngressRouteUdpSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * IngressRouteUDPSpec defines the desired state of a IngressRouteUDP.
 *
 * @schema IngressRouteUdpSpec
 */
export interface IngressRouteUdpSpec {
  /**
   * EntryPoints defines the list of entry point names to bind to. Entry points have to be configured in the static configuration. More info: https://doc.traefik.io/traefik/v2.10/routing/entrypoints/ Default: all.
   *
   * @schema IngressRouteUdpSpec#entryPoints
   */
  readonly entryPoints?: string[];

  /**
   * Routes defines the list of routes.
   *
   * @schema IngressRouteUdpSpec#routes
   */
  readonly routes: IngressRouteUdpSpecRoutes[];
}

/**
 * Converts an object of type 'IngressRouteUdpSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IngressRouteUdpSpec(
  obj: IngressRouteUdpSpec | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    entryPoints: obj.entryPoints?.map((y) => y),
    routes: obj.routes?.map((y) => toJson_IngressRouteUdpSpecRoutes(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * RouteUDP holds the UDP route configuration.
 *
 * @schema IngressRouteUdpSpecRoutes
 */
export interface IngressRouteUdpSpecRoutes {
  /**
   * Services defines the list of UDP services.
   *
   * @schema IngressRouteUdpSpecRoutes#services
   */
  readonly services?: IngressRouteUdpSpecRoutesServices[];
}

/**
 * Converts an object of type 'IngressRouteUdpSpecRoutes' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IngressRouteUdpSpecRoutes(
  obj: IngressRouteUdpSpecRoutes | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    services: obj.services?.map((y) =>
      toJson_IngressRouteUdpSpecRoutesServices(y),
    ),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * ServiceUDP defines an upstream UDP service to proxy traffic to.
 *
 * @schema IngressRouteUdpSpecRoutesServices
 */
export interface IngressRouteUdpSpecRoutesServices {
  /**
   * Name defines the name of the referenced Kubernetes Service.
   *
   * @schema IngressRouteUdpSpecRoutesServices#name
   */
  readonly name: string;

  /**
   * Namespace defines the namespace of the referenced Kubernetes Service.
   *
   * @schema IngressRouteUdpSpecRoutesServices#namespace
   */
  readonly namespace?: string;

  /**
   * NativeLB controls, when creating the load-balancer, whether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP. The Kubernetes Service itself does load-balance to the pods. By default, NativeLB is false.
   *
   * @schema IngressRouteUdpSpecRoutesServices#nativeLB
   */
  readonly nativeLb?: boolean;

  /**
   * Port defines the port of a Kubernetes Service. This can be a reference to a named port.
   *
   * @schema IngressRouteUdpSpecRoutesServices#port
   */
  readonly port: IngressRouteUdpSpecRoutesServicesPort;

  /**
   * Weight defines the weight used when balancing requests between multiple Kubernetes Service.
   *
   * @schema IngressRouteUdpSpecRoutesServices#weight
   */
  readonly weight?: number;
}

/**
 * Converts an object of type 'IngressRouteUdpSpecRoutesServices' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IngressRouteUdpSpecRoutesServices(
  obj: IngressRouteUdpSpecRoutesServices | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    name: obj.name,
    namespace: obj.namespace,
    nativeLB: obj.nativeLb,
    port: obj.port?.value,
    weight: obj.weight,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * Port defines the port of a Kubernetes Service. This can be a reference to a named port.
 *
 * @schema IngressRouteUdpSpecRoutesServicesPort
 */
export class IngressRouteUdpSpecRoutesServicesPort {
  public static fromNumber(
    value: number,
  ): IngressRouteUdpSpecRoutesServicesPort {
    return new IngressRouteUdpSpecRoutesServicesPort(value);
  }
  public static fromString(
    value: string,
  ): IngressRouteUdpSpecRoutesServicesPort {
    return new IngressRouteUdpSpecRoutesServicesPort(value);
  }
  private constructor(public readonly value: number | string) {}
}

/**
 * Middleware is the CRD implementation of a Traefik Middleware. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/overview/
 *
 * @schema Middleware
 */
export class Middleware extends ApiObject {
  /**
   * Returns the apiVersion and kind for "Middleware"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: "traefik.containo.us/v1alpha1",
    kind: "Middleware",
  };

  /**
   * Renders a Kubernetes manifest for "Middleware".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: MiddlewareProps): any {
    return {
      ...Middleware.GVK,
      ...toJson_MiddlewareProps(props),
    };
  }

  /**
   * Defines a "Middleware" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: MiddlewareProps) {
    super(scope, id, {
      ...Middleware.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...Middleware.GVK,
      ...toJson_MiddlewareProps(resolved),
    };
  }
}

/**
 * Middleware is the CRD implementation of a Traefik Middleware. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/overview/
 *
 * @schema Middleware
 */
export interface MiddlewareProps {
  /**
   * @schema Middleware#metadata
   */
  readonly metadata: ApiObjectMetadata;

  /**
   * MiddlewareSpec defines the desired state of a Middleware.
   *
   * @schema Middleware#spec
   */
  readonly spec: MiddlewareSpec;
}

/**
 * Converts an object of type 'MiddlewareProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_MiddlewareProps(
  obj: MiddlewareProps | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    metadata: obj.metadata,
    spec: toJson_MiddlewareSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * MiddlewareSpec defines the desired state of a Middleware.
 *
 * @schema MiddlewareSpec
 */
export interface MiddlewareSpec {
  /**
   * AddPrefix holds the add prefix middleware configuration. This middleware updates the path of a request before forwarding it. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/addprefix/
   *
   * @schema MiddlewareSpec#addPrefix
   */
  readonly addPrefix?: MiddlewareSpecAddPrefix;

  /**
   * BasicAuth holds the basic auth middleware configuration. This middleware restricts access to your services to known users. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/basicauth/
   *
   * @schema MiddlewareSpec#basicAuth
   */
  readonly basicAuth?: MiddlewareSpecBasicAuth;

  /**
   * Buffering holds the buffering middleware configuration. This middleware retries or limits the size of requests that can be forwarded to backends. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/buffering/#maxrequestbodybytes
   *
   * @schema MiddlewareSpec#buffering
   */
  readonly buffering?: MiddlewareSpecBuffering;

  /**
   * Chain holds the configuration of the chain middleware. This middleware enables to define reusable combinations of other pieces of middleware. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/chain/
   *
   * @schema MiddlewareSpec#chain
   */
  readonly chain?: MiddlewareSpecChain;

  /**
   * CircuitBreaker holds the circuit breaker configuration.
   *
   * @schema MiddlewareSpec#circuitBreaker
   */
  readonly circuitBreaker?: MiddlewareSpecCircuitBreaker;

  /**
   * Compress holds the compress middleware configuration. This middleware compresses responses before sending them to the client, using gzip compression. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/compress/
   *
   * @schema MiddlewareSpec#compress
   */
  readonly compress?: MiddlewareSpecCompress;

  /**
   * ContentType holds the content-type middleware configuration. This middleware exists to enable the correct behavior until at least the default one can be changed in a future version.
   *
   * @schema MiddlewareSpec#contentType
   */
  readonly contentType?: MiddlewareSpecContentType;

  /**
   * DigestAuth holds the digest auth middleware configuration. This middleware restricts access to your services to known users. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/digestauth/
   *
   * @schema MiddlewareSpec#digestAuth
   */
  readonly digestAuth?: MiddlewareSpecDigestAuth;

  /**
   * ErrorPage holds the custom error middleware configuration. This middleware returns a custom page in lieu of the default, according to configured ranges of HTTP Status codes. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/errorpages/
   *
   * @schema MiddlewareSpec#errors
   */
  readonly errors?: MiddlewareSpecErrors;

  /**
   * ForwardAuth holds the forward auth middleware configuration. This middleware delegates the request authentication to a Service. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/forwardauth/
   *
   * @schema MiddlewareSpec#forwardAuth
   */
  readonly forwardAuth?: MiddlewareSpecForwardAuth;

  /**
   * Headers holds the headers middleware configuration. This middleware manages the requests and responses headers. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/headers/#customrequestheaders
   *
   * @schema MiddlewareSpec#headers
   */
  readonly headers?: MiddlewareSpecHeaders;

  /**
   * InFlightReq holds the in-flight request middleware configuration. This middleware limits the number of requests being processed and served concurrently. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/inflightreq/
   *
   * @schema MiddlewareSpec#inFlightReq
   */
  readonly inFlightReq?: MiddlewareSpecInFlightReq;

  /**
   * IPWhiteList holds the IP whitelist middleware configuration. This middleware accepts / refuses requests based on the client IP. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/ipwhitelist/
   *
   * @schema MiddlewareSpec#ipWhiteList
   */
  readonly ipWhiteList?: MiddlewareSpecIpWhiteList;

  /**
   * PassTLSClientCert holds the pass TLS client cert middleware configuration. This middleware adds the selected data from the passed client TLS certificate to a header. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/passtlsclientcert/
   *
   * @schema MiddlewareSpec#passTLSClientCert
   */
  readonly passTlsClientCert?: MiddlewareSpecPassTlsClientCert;

  /**
   * Plugin defines the middleware plugin configuration. More info: https://doc.traefik.io/traefik/plugins/
   *
   * @schema MiddlewareSpec#plugin
   */
  readonly plugin?: { [key: string]: any };

  /**
   * RateLimit holds the rate limit configuration. This middleware ensures that services will receive a fair amount of requests, and allows one to define what fair is. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/ratelimit/
   *
   * @schema MiddlewareSpec#rateLimit
   */
  readonly rateLimit?: MiddlewareSpecRateLimit;

  /**
   * RedirectRegex holds the redirect regex middleware configuration. This middleware redirects a request using regex matching and replacement. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/redirectregex/#regex
   *
   * @schema MiddlewareSpec#redirectRegex
   */
  readonly redirectRegex?: MiddlewareSpecRedirectRegex;

  /**
   * RedirectScheme holds the redirect scheme middleware configuration. This middleware redirects requests from a scheme/port to another. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/redirectscheme/
   *
   * @schema MiddlewareSpec#redirectScheme
   */
  readonly redirectScheme?: MiddlewareSpecRedirectScheme;

  /**
   * ReplacePath holds the replace path middleware configuration. This middleware replaces the path of the request URL and store the original path in an X-Replaced-Path header. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/replacepath/
   *
   * @schema MiddlewareSpec#replacePath
   */
  readonly replacePath?: MiddlewareSpecReplacePath;

  /**
   * ReplacePathRegex holds the replace path regex middleware configuration. This middleware replaces the path of a URL using regex matching and replacement. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/replacepathregex/
   *
   * @schema MiddlewareSpec#replacePathRegex
   */
  readonly replacePathRegex?: MiddlewareSpecReplacePathRegex;

  /**
   * Retry holds the retry middleware configuration. This middleware reissues requests a given number of times to a backend server if that server does not reply. As soon as the server answers, the middleware stops retrying, regardless of the response status. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/retry/
   *
   * @schema MiddlewareSpec#retry
   */
  readonly retry?: MiddlewareSpecRetry;

  /**
   * StripPrefix holds the strip prefix middleware configuration. This middleware removes the specified prefixes from the URL path. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/stripprefix/
   *
   * @schema MiddlewareSpec#stripPrefix
   */
  readonly stripPrefix?: MiddlewareSpecStripPrefix;

  /**
   * StripPrefixRegex holds the strip prefix regex middleware configuration. This middleware removes the matching prefixes from the URL path. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/stripprefixregex/
   *
   * @schema MiddlewareSpec#stripPrefixRegex
   */
  readonly stripPrefixRegex?: MiddlewareSpecStripPrefixRegex;
}

/**
 * Converts an object of type 'MiddlewareSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_MiddlewareSpec(
  obj: MiddlewareSpec | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    addPrefix: toJson_MiddlewareSpecAddPrefix(obj.addPrefix),
    basicAuth: toJson_MiddlewareSpecBasicAuth(obj.basicAuth),
    buffering: toJson_MiddlewareSpecBuffering(obj.buffering),
    chain: toJson_MiddlewareSpecChain(obj.chain),
    circuitBreaker: toJson_MiddlewareSpecCircuitBreaker(obj.circuitBreaker),
    compress: toJson_MiddlewareSpecCompress(obj.compress),
    contentType: toJson_MiddlewareSpecContentType(obj.contentType),
    digestAuth: toJson_MiddlewareSpecDigestAuth(obj.digestAuth),
    errors: toJson_MiddlewareSpecErrors(obj.errors),
    forwardAuth: toJson_MiddlewareSpecForwardAuth(obj.forwardAuth),
    headers: toJson_MiddlewareSpecHeaders(obj.headers),
    inFlightReq: toJson_MiddlewareSpecInFlightReq(obj.inFlightReq),
    ipWhiteList: toJson_MiddlewareSpecIpWhiteList(obj.ipWhiteList),
    passTLSClientCert: toJson_MiddlewareSpecPassTlsClientCert(
      obj.passTlsClientCert,
    ),
    plugin:
      obj.plugin === undefined
        ? undefined
        : Object.entries(obj.plugin).reduce(
            (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
            {},
          ),
    rateLimit: toJson_MiddlewareSpecRateLimit(obj.rateLimit),
    redirectRegex: toJson_MiddlewareSpecRedirectRegex(obj.redirectRegex),
    redirectScheme: toJson_MiddlewareSpecRedirectScheme(obj.redirectScheme),
    replacePath: toJson_MiddlewareSpecReplacePath(obj.replacePath),
    replacePathRegex: toJson_MiddlewareSpecReplacePathRegex(
      obj.replacePathRegex,
    ),
    retry: toJson_MiddlewareSpecRetry(obj.retry),
    stripPrefix: toJson_MiddlewareSpecStripPrefix(obj.stripPrefix),
    stripPrefixRegex: toJson_MiddlewareSpecStripPrefixRegex(
      obj.stripPrefixRegex,
    ),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * AddPrefix holds the add prefix middleware configuration. This middleware updates the path of a request before forwarding it. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/addprefix/
 *
 * @schema MiddlewareSpecAddPrefix
 */
export interface MiddlewareSpecAddPrefix {
  /**
   * Prefix is the string to add before the current path in the requested URL. It should include a leading slash (/).
   *
   * @schema MiddlewareSpecAddPrefix#prefix
   */
  readonly prefix?: string;
}

/**
 * Converts an object of type 'MiddlewareSpecAddPrefix' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_MiddlewareSpecAddPrefix(
  obj: MiddlewareSpecAddPrefix | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    prefix: obj.prefix,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * BasicAuth holds the basic auth middleware configuration. This middleware restricts access to your services to known users. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/basicauth/
 *
 * @schema MiddlewareSpecBasicAuth
 */
export interface MiddlewareSpecBasicAuth {
  /**
   * HeaderField defines a header field to store the authenticated user. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/basicauth/#headerfield
   *
   * @schema MiddlewareSpecBasicAuth#headerField
   */
  readonly headerField?: string;

  /**
   * Realm allows the protected resources on a server to be partitioned into a set of protection spaces, each with its own authentication scheme. Default: traefik.
   *
   * @schema MiddlewareSpecBasicAuth#realm
   */
  readonly realm?: string;

  /**
   * RemoveHeader sets the removeHeader option to true to remove the authorization header before forwarding the request to your service. Default: false.
   *
   * @schema MiddlewareSpecBasicAuth#removeHeader
   */
  readonly removeHeader?: boolean;

  /**
   * Secret is the name of the referenced Kubernetes Secret containing user credentials.
   *
   * @schema MiddlewareSpecBasicAuth#secret
   */
  readonly secret?: string;
}

/**
 * Converts an object of type 'MiddlewareSpecBasicAuth' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_MiddlewareSpecBasicAuth(
  obj: MiddlewareSpecBasicAuth | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    headerField: obj.headerField,
    realm: obj.realm,
    removeHeader: obj.removeHeader,
    secret: obj.secret,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * Buffering holds the buffering middleware configuration. This middleware retries or limits the size of requests that can be forwarded to backends. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/buffering/#maxrequestbodybytes
 *
 * @schema MiddlewareSpecBuffering
 */
export interface MiddlewareSpecBuffering {
  /**
   * MaxRequestBodyBytes defines the maximum allowed body size for the request (in bytes). If the request exceeds the allowed size, it is not forwarded to the service, and the client gets a 413 (Request Entity Too Large) response. Default: 0 (no maximum).
   *
   * @schema MiddlewareSpecBuffering#maxRequestBodyBytes
   */
  readonly maxRequestBodyBytes?: number;

  /**
   * MaxResponseBodyBytes defines the maximum allowed response size from the service (in bytes). If the response exceeds the allowed size, it is not forwarded to the client. The client gets a 500 (Internal Server Error) response instead. Default: 0 (no maximum).
   *
   * @schema MiddlewareSpecBuffering#maxResponseBodyBytes
   */
  readonly maxResponseBodyBytes?: number;

  /**
   * MemRequestBodyBytes defines the threshold (in bytes) from which the request will be buffered on disk instead of in memory. Default: 1048576 (1Mi).
   *
   * @schema MiddlewareSpecBuffering#memRequestBodyBytes
   */
  readonly memRequestBodyBytes?: number;

  /**
   * MemResponseBodyBytes defines the threshold (in bytes) from which the response will be buffered on disk instead of in memory. Default: 1048576 (1Mi).
   *
   * @schema MiddlewareSpecBuffering#memResponseBodyBytes
   */
  readonly memResponseBodyBytes?: number;

  /**
   * RetryExpression defines the retry conditions. It is a logical combination of functions with operators AND (&&) and OR (||). More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/buffering/#retryexpression
   *
   * @schema MiddlewareSpecBuffering#retryExpression
   */
  readonly retryExpression?: string;
}

/**
 * Converts an object of type 'MiddlewareSpecBuffering' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_MiddlewareSpecBuffering(
  obj: MiddlewareSpecBuffering | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    maxRequestBodyBytes: obj.maxRequestBodyBytes,
    maxResponseBodyBytes: obj.maxResponseBodyBytes,
    memRequestBodyBytes: obj.memRequestBodyBytes,
    memResponseBodyBytes: obj.memResponseBodyBytes,
    retryExpression: obj.retryExpression,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * Chain holds the configuration of the chain middleware. This middleware enables to define reusable combinations of other pieces of middleware. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/chain/
 *
 * @schema MiddlewareSpecChain
 */
export interface MiddlewareSpecChain {
  /**
   * Middlewares is the list of MiddlewareRef which composes the chain.
   *
   * @schema MiddlewareSpecChain#middlewares
   */
  readonly middlewares?: MiddlewareSpecChainMiddlewares[];
}

/**
 * Converts an object of type 'MiddlewareSpecChain' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_MiddlewareSpecChain(
  obj: MiddlewareSpecChain | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    middlewares: obj.middlewares?.map((y) =>
      toJson_MiddlewareSpecChainMiddlewares(y),
    ),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * CircuitBreaker holds the circuit breaker configuration.
 *
 * @schema MiddlewareSpecCircuitBreaker
 */
export interface MiddlewareSpecCircuitBreaker {
  /**
   * CheckPeriod is the interval between successive checks of the circuit breaker condition (when in standby state).
   *
   * @schema MiddlewareSpecCircuitBreaker#checkPeriod
   */
  readonly checkPeriod?: MiddlewareSpecCircuitBreakerCheckPeriod;

  /**
   * Expression is the condition that triggers the tripped state.
   *
   * @schema MiddlewareSpecCircuitBreaker#expression
   */
  readonly expression?: string;

  /**
   * FallbackDuration is the duration for which the circuit breaker will wait before trying to recover (from a tripped state).
   *
   * @schema MiddlewareSpecCircuitBreaker#fallbackDuration
   */
  readonly fallbackDuration?: MiddlewareSpecCircuitBreakerFallbackDuration;

  /**
   * RecoveryDuration is the duration for which the circuit breaker will try to recover (as soon as it is in recovering state).
   *
   * @schema MiddlewareSpecCircuitBreaker#recoveryDuration
   */
  readonly recoveryDuration?: MiddlewareSpecCircuitBreakerRecoveryDuration;
}

/**
 * Converts an object of type 'MiddlewareSpecCircuitBreaker' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_MiddlewareSpecCircuitBreaker(
  obj: MiddlewareSpecCircuitBreaker | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    checkPeriod: obj.checkPeriod?.value,
    expression: obj.expression,
    fallbackDuration: obj.fallbackDuration?.value,
    recoveryDuration: obj.recoveryDuration?.value,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * Compress holds the compress middleware configuration. This middleware compresses responses before sending them to the client, using gzip compression. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/compress/
 *
 * @schema MiddlewareSpecCompress
 */
export interface MiddlewareSpecCompress {
  /**
   * ExcludedContentTypes defines the list of content types to compare the Content-Type header of the incoming requests and responses before compressing.
   *
   * @schema MiddlewareSpecCompress#excludedContentTypes
   */
  readonly excludedContentTypes?: string[];

  /**
   * MinResponseBodyBytes defines the minimum amount of bytes a response body must have to be compressed. Default: 1024.
   *
   * @schema MiddlewareSpecCompress#minResponseBodyBytes
   */
  readonly minResponseBodyBytes?: number;
}

/**
 * Converts an object of type 'MiddlewareSpecCompress' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_MiddlewareSpecCompress(
  obj: MiddlewareSpecCompress | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    excludedContentTypes: obj.excludedContentTypes?.map((y) => y),
    minResponseBodyBytes: obj.minResponseBodyBytes,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * ContentType holds the content-type middleware configuration. This middleware exists to enable the correct behavior until at least the default one can be changed in a future version.
 *
 * @schema MiddlewareSpecContentType
 */
export interface MiddlewareSpecContentType {
  /**
   * AutoDetect specifies whether to let the `Content-Type` header, if it has not been set by the backend, be automatically set to a value derived from the contents of the response. As a proxy, the default behavior should be to leave the header alone, regardless of what the backend did with it. However, the historic default was to always auto-detect and set the header if it was nil, and it is going to be kept that way in order to support users currently relying on it.
   *
   * @schema MiddlewareSpecContentType#autoDetect
   */
  readonly autoDetect?: boolean;
}

/**
 * Converts an object of type 'MiddlewareSpecContentType' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_MiddlewareSpecContentType(
  obj: MiddlewareSpecContentType | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    autoDetect: obj.autoDetect,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * DigestAuth holds the digest auth middleware configuration. This middleware restricts access to your services to known users. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/digestauth/
 *
 * @schema MiddlewareSpecDigestAuth
 */
export interface MiddlewareSpecDigestAuth {
  /**
   * HeaderField defines a header field to store the authenticated user. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/basicauth/#headerfield
   *
   * @schema MiddlewareSpecDigestAuth#headerField
   */
  readonly headerField?: string;

  /**
   * Realm allows the protected resources on a server to be partitioned into a set of protection spaces, each with its own authentication scheme. Default: traefik.
   *
   * @schema MiddlewareSpecDigestAuth#realm
   */
  readonly realm?: string;

  /**
   * RemoveHeader defines whether to remove the authorization header before forwarding the request to the backend.
   *
   * @schema MiddlewareSpecDigestAuth#removeHeader
   */
  readonly removeHeader?: boolean;

  /**
   * Secret is the name of the referenced Kubernetes Secret containing user credentials.
   *
   * @schema MiddlewareSpecDigestAuth#secret
   */
  readonly secret?: string;
}

/**
 * Converts an object of type 'MiddlewareSpecDigestAuth' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_MiddlewareSpecDigestAuth(
  obj: MiddlewareSpecDigestAuth | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    headerField: obj.headerField,
    realm: obj.realm,
    removeHeader: obj.removeHeader,
    secret: obj.secret,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * ErrorPage holds the custom error middleware configuration. This middleware returns a custom page in lieu of the default, according to configured ranges of HTTP Status codes. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/errorpages/
 *
 * @schema MiddlewareSpecErrors
 */
export interface MiddlewareSpecErrors {
  /**
   * Query defines the URL for the error page (hosted by service). The {status} variable can be used in order to insert the status code in the URL.
   *
   * @schema MiddlewareSpecErrors#query
   */
  readonly query?: string;

  /**
   * Service defines the reference to a Kubernetes Service that will serve the error page. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/errorpages/#service
   *
   * @schema MiddlewareSpecErrors#service
   */
  readonly service?: MiddlewareSpecErrorsService;

  /**
   * Status defines which status or range of statuses should result in an error page. It can be either a status code as a number (500), as multiple comma-separated numbers (500,502), as ranges by separating two codes with a dash (500-599), or a combination of the two (404,418,500-599).
   *
   * @schema MiddlewareSpecErrors#status
   */
  readonly status?: string[];
}

/**
 * Converts an object of type 'MiddlewareSpecErrors' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_MiddlewareSpecErrors(
  obj: MiddlewareSpecErrors | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    query: obj.query,
    service: toJson_MiddlewareSpecErrorsService(obj.service),
    status: obj.status?.map((y) => y),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * ForwardAuth holds the forward auth middleware configuration. This middleware delegates the request authentication to a Service. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/forwardauth/
 *
 * @schema MiddlewareSpecForwardAuth
 */
export interface MiddlewareSpecForwardAuth {
  /**
   * Address defines the authentication server address.
   *
   * @schema MiddlewareSpecForwardAuth#address
   */
  readonly address?: string;

  /**
   * AuthRequestHeaders defines the list of the headers to copy from the request to the authentication server. If not set or empty then all request headers are passed.
   *
   * @schema MiddlewareSpecForwardAuth#authRequestHeaders
   */
  readonly authRequestHeaders?: string[];

  /**
   * AuthResponseHeaders defines the list of headers to copy from the authentication server response and set on forwarded request, replacing any existing conflicting headers.
   *
   * @schema MiddlewareSpecForwardAuth#authResponseHeaders
   */
  readonly authResponseHeaders?: string[];

  /**
   * AuthResponseHeadersRegex defines the regex to match headers to copy from the authentication server response and set on forwarded request, after stripping all headers that match the regex. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/forwardauth/#authresponseheadersregex
   *
   * @schema MiddlewareSpecForwardAuth#authResponseHeadersRegex
   */
  readonly authResponseHeadersRegex?: string;

  /**
   * TLS defines the configuration used to secure the connection to the authentication server.
   *
   * @schema MiddlewareSpecForwardAuth#tls
   */
  readonly tls?: MiddlewareSpecForwardAuthTls;

  /**
   * TrustForwardHeader defines whether to trust (ie: forward) all X-Forwarded-* headers.
   *
   * @schema MiddlewareSpecForwardAuth#trustForwardHeader
   */
  readonly trustForwardHeader?: boolean;
}

/**
 * Converts an object of type 'MiddlewareSpecForwardAuth' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_MiddlewareSpecForwardAuth(
  obj: MiddlewareSpecForwardAuth | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    address: obj.address,
    authRequestHeaders: obj.authRequestHeaders?.map((y) => y),
    authResponseHeaders: obj.authResponseHeaders?.map((y) => y),
    authResponseHeadersRegex: obj.authResponseHeadersRegex,
    tls: toJson_MiddlewareSpecForwardAuthTls(obj.tls),
    trustForwardHeader: obj.trustForwardHeader,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * Headers holds the headers middleware configuration. This middleware manages the requests and responses headers. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/headers/#customrequestheaders
 *
 * @schema MiddlewareSpecHeaders
 */
export interface MiddlewareSpecHeaders {
  /**
   * AccessControlAllowCredentials defines whether the request can include user credentials.
   *
   * @schema MiddlewareSpecHeaders#accessControlAllowCredentials
   */
  readonly accessControlAllowCredentials?: boolean;

  /**
   * AccessControlAllowHeaders defines the Access-Control-Request-Headers values sent in preflight response.
   *
   * @schema MiddlewareSpecHeaders#accessControlAllowHeaders
   */
  readonly accessControlAllowHeaders?: string[];

  /**
   * AccessControlAllowMethods defines the Access-Control-Request-Method values sent in preflight response.
   *
   * @schema MiddlewareSpecHeaders#accessControlAllowMethods
   */
  readonly accessControlAllowMethods?: string[];

  /**
   * AccessControlAllowOriginList is a list of allowable origins. Can also be a wildcard origin "*".
   *
   * @schema MiddlewareSpecHeaders#accessControlAllowOriginList
   */
  readonly accessControlAllowOriginList?: string[];

  /**
   * AccessControlAllowOriginListRegex is a list of allowable origins written following the Regular Expression syntax (https://golang.org/pkg/regexp/).
   *
   * @schema MiddlewareSpecHeaders#accessControlAllowOriginListRegex
   */
  readonly accessControlAllowOriginListRegex?: string[];

  /**
   * AccessControlExposeHeaders defines the Access-Control-Expose-Headers values sent in preflight response.
   *
   * @schema MiddlewareSpecHeaders#accessControlExposeHeaders
   */
  readonly accessControlExposeHeaders?: string[];

  /**
   * AccessControlMaxAge defines the time that a preflight request may be cached.
   *
   * @schema MiddlewareSpecHeaders#accessControlMaxAge
   */
  readonly accessControlMaxAge?: number;

  /**
   * AddVaryHeader defines whether the Vary header is automatically added/updated when the AccessControlAllowOriginList is set.
   *
   * @schema MiddlewareSpecHeaders#addVaryHeader
   */
  readonly addVaryHeader?: boolean;

  /**
   * AllowedHosts defines the fully qualified list of allowed domain names.
   *
   * @schema MiddlewareSpecHeaders#allowedHosts
   */
  readonly allowedHosts?: string[];

  /**
   * BrowserXSSFilter defines whether to add the X-XSS-Protection header with the value 1; mode=block.
   *
   * @schema MiddlewareSpecHeaders#browserXssFilter
   */
  readonly browserXssFilter?: boolean;

  /**
   * ContentSecurityPolicy defines the Content-Security-Policy header value.
   *
   * @schema MiddlewareSpecHeaders#contentSecurityPolicy
   */
  readonly contentSecurityPolicy?: string;

  /**
   * ContentTypeNosniff defines whether to add the X-Content-Type-Options header with the nosniff value.
   *
   * @schema MiddlewareSpecHeaders#contentTypeNosniff
   */
  readonly contentTypeNosniff?: boolean;

  /**
   * CustomBrowserXSSValue defines the X-XSS-Protection header value. This overrides the BrowserXssFilter option.
   *
   * @schema MiddlewareSpecHeaders#customBrowserXSSValue
   */
  readonly customBrowserXssValue?: string;

  /**
   * CustomFrameOptionsValue defines the X-Frame-Options header value. This overrides the FrameDeny option.
   *
   * @schema MiddlewareSpecHeaders#customFrameOptionsValue
   */
  readonly customFrameOptionsValue?: string;

  /**
   * CustomRequestHeaders defines the header names and values to apply to the request.
   *
   * @schema MiddlewareSpecHeaders#customRequestHeaders
   */
  readonly customRequestHeaders?: { [key: string]: string };

  /**
   * CustomResponseHeaders defines the header names and values to apply to the response.
   *
   * @schema MiddlewareSpecHeaders#customResponseHeaders
   */
  readonly customResponseHeaders?: { [key: string]: string };

  /**
   * Deprecated: use PermissionsPolicy instead.
   *
   * @schema MiddlewareSpecHeaders#featurePolicy
   */
  readonly featurePolicy?: string;

  /**
   * ForceSTSHeader defines whether to add the STS header even when the connection is HTTP.
   *
   * @schema MiddlewareSpecHeaders#forceSTSHeader
   */
  readonly forceStsHeader?: boolean;

  /**
   * FrameDeny defines whether to add the X-Frame-Options header with the DENY value.
   *
   * @schema MiddlewareSpecHeaders#frameDeny
   */
  readonly frameDeny?: boolean;

  /**
   * HostsProxyHeaders defines the header keys that may hold a proxied hostname value for the request.
   *
   * @schema MiddlewareSpecHeaders#hostsProxyHeaders
   */
  readonly hostsProxyHeaders?: string[];

  /**
   * IsDevelopment defines whether to mitigate the unwanted effects of the AllowedHosts, SSL, and STS options when developing. Usually testing takes place using HTTP, not HTTPS, and on localhost, not your production domain. If you would like your development environment to mimic production with complete Host blocking, SSL redirects, and STS headers, leave this as false.
   *
   * @schema MiddlewareSpecHeaders#isDevelopment
   */
  readonly isDevelopment?: boolean;

  /**
   * PermissionsPolicy defines the Permissions-Policy header value. This allows sites to control browser features.
   *
   * @schema MiddlewareSpecHeaders#permissionsPolicy
   */
  readonly permissionsPolicy?: string;

  /**
   * PublicKey is the public key that implements HPKP to prevent MITM attacks with forged certificates.
   *
   * @schema MiddlewareSpecHeaders#publicKey
   */
  readonly publicKey?: string;

  /**
   * ReferrerPolicy defines the Referrer-Policy header value. This allows sites to control whether browsers forward the Referer header to other sites.
   *
   * @schema MiddlewareSpecHeaders#referrerPolicy
   */
  readonly referrerPolicy?: string;

  /**
   * Deprecated: use RedirectRegex instead.
   *
   * @schema MiddlewareSpecHeaders#sslForceHost
   */
  readonly sslForceHost?: boolean;

  /**
   * Deprecated: use RedirectRegex instead.
   *
   * @schema MiddlewareSpecHeaders#sslHost
   */
  readonly sslHost?: string;

  /**
   * SSLProxyHeaders defines the header keys with associated values that would indicate a valid HTTPS request. It can be useful when using other proxies (example: "X-Forwarded-Proto": "https").
   *
   * @schema MiddlewareSpecHeaders#sslProxyHeaders
   */
  readonly sslProxyHeaders?: { [key: string]: string };

  /**
   * Deprecated: use EntryPoint redirection or RedirectScheme instead.
   *
   * @schema MiddlewareSpecHeaders#sslRedirect
   */
  readonly sslRedirect?: boolean;

  /**
   * Deprecated: use EntryPoint redirection or RedirectScheme instead.
   *
   * @schema MiddlewareSpecHeaders#sslTemporaryRedirect
   */
  readonly sslTemporaryRedirect?: boolean;

  /**
   * STSIncludeSubdomains defines whether the includeSubDomains directive is appended to the Strict-Transport-Security header.
   *
   * @schema MiddlewareSpecHeaders#stsIncludeSubdomains
   */
  readonly stsIncludeSubdomains?: boolean;

  /**
   * STSPreload defines whether the preload flag is appended to the Strict-Transport-Security header.
   *
   * @schema MiddlewareSpecHeaders#stsPreload
   */
  readonly stsPreload?: boolean;

  /**
   * STSSeconds defines the max-age of the Strict-Transport-Security header. If set to 0, the header is not set.
   *
   * @schema MiddlewareSpecHeaders#stsSeconds
   */
  readonly stsSeconds?: number;
}

/**
 * Converts an object of type 'MiddlewareSpecHeaders' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_MiddlewareSpecHeaders(
  obj: MiddlewareSpecHeaders | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    accessControlAllowCredentials: obj.accessControlAllowCredentials,
    accessControlAllowHeaders: obj.accessControlAllowHeaders?.map((y) => y),
    accessControlAllowMethods: obj.accessControlAllowMethods?.map((y) => y),
    accessControlAllowOriginList: obj.accessControlAllowOriginList?.map(
      (y) => y,
    ),
    accessControlAllowOriginListRegex:
      obj.accessControlAllowOriginListRegex?.map((y) => y),
    accessControlExposeHeaders: obj.accessControlExposeHeaders?.map((y) => y),
    accessControlMaxAge: obj.accessControlMaxAge,
    addVaryHeader: obj.addVaryHeader,
    allowedHosts: obj.allowedHosts?.map((y) => y),
    browserXssFilter: obj.browserXssFilter,
    contentSecurityPolicy: obj.contentSecurityPolicy,
    contentTypeNosniff: obj.contentTypeNosniff,
    customBrowserXSSValue: obj.customBrowserXssValue,
    customFrameOptionsValue: obj.customFrameOptionsValue,
    customRequestHeaders:
      obj.customRequestHeaders === undefined
        ? undefined
        : Object.entries(obj.customRequestHeaders).reduce(
            (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
            {},
          ),
    customResponseHeaders:
      obj.customResponseHeaders === undefined
        ? undefined
        : Object.entries(obj.customResponseHeaders).reduce(
            (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
            {},
          ),
    featurePolicy: obj.featurePolicy,
    forceSTSHeader: obj.forceStsHeader,
    frameDeny: obj.frameDeny,
    hostsProxyHeaders: obj.hostsProxyHeaders?.map((y) => y),
    isDevelopment: obj.isDevelopment,
    permissionsPolicy: obj.permissionsPolicy,
    publicKey: obj.publicKey,
    referrerPolicy: obj.referrerPolicy,
    sslForceHost: obj.sslForceHost,
    sslHost: obj.sslHost,
    sslProxyHeaders:
      obj.sslProxyHeaders === undefined
        ? undefined
        : Object.entries(obj.sslProxyHeaders).reduce(
            (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
            {},
          ),
    sslRedirect: obj.sslRedirect,
    sslTemporaryRedirect: obj.sslTemporaryRedirect,
    stsIncludeSubdomains: obj.stsIncludeSubdomains,
    stsPreload: obj.stsPreload,
    stsSeconds: obj.stsSeconds,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * InFlightReq holds the in-flight request middleware configuration. This middleware limits the number of requests being processed and served concurrently. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/inflightreq/
 *
 * @schema MiddlewareSpecInFlightReq
 */
export interface MiddlewareSpecInFlightReq {
  /**
   * Amount defines the maximum amount of allowed simultaneous in-flight request. The middleware responds with HTTP 429 Too Many Requests if there are already amount requests in progress (based on the same sourceCriterion strategy).
   *
   * @schema MiddlewareSpecInFlightReq#amount
   */
  readonly amount?: number;

  /**
   * SourceCriterion defines what criterion is used to group requests as originating from a common source. If several strategies are defined at the same time, an error will be raised. If none are set, the default is to use the requestHost. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/inflightreq/#sourcecriterion
   *
   * @schema MiddlewareSpecInFlightReq#sourceCriterion
   */
  readonly sourceCriterion?: MiddlewareSpecInFlightReqSourceCriterion;
}

/**
 * Converts an object of type 'MiddlewareSpecInFlightReq' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_MiddlewareSpecInFlightReq(
  obj: MiddlewareSpecInFlightReq | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    amount: obj.amount,
    sourceCriterion: toJson_MiddlewareSpecInFlightReqSourceCriterion(
      obj.sourceCriterion,
    ),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * IPWhiteList holds the IP whitelist middleware configuration. This middleware accepts / refuses requests based on the client IP. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/ipwhitelist/
 *
 * @schema MiddlewareSpecIpWhiteList
 */
export interface MiddlewareSpecIpWhiteList {
  /**
   * IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/ipwhitelist/#ipstrategy
   *
   * @schema MiddlewareSpecIpWhiteList#ipStrategy
   */
  readonly ipStrategy?: MiddlewareSpecIpWhiteListIpStrategy;

  /**
   * SourceRange defines the set of allowed IPs (or ranges of allowed IPs by using CIDR notation).
   *
   * @schema MiddlewareSpecIpWhiteList#sourceRange
   */
  readonly sourceRange?: string[];
}

/**
 * Converts an object of type 'MiddlewareSpecIpWhiteList' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_MiddlewareSpecIpWhiteList(
  obj: MiddlewareSpecIpWhiteList | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    ipStrategy: toJson_MiddlewareSpecIpWhiteListIpStrategy(obj.ipStrategy),
    sourceRange: obj.sourceRange?.map((y) => y),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * PassTLSClientCert holds the pass TLS client cert middleware configuration. This middleware adds the selected data from the passed client TLS certificate to a header. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/passtlsclientcert/
 *
 * @schema MiddlewareSpecPassTlsClientCert
 */
export interface MiddlewareSpecPassTlsClientCert {
  /**
   * Info selects the specific client certificate details you want to add to the X-Forwarded-Tls-Client-Cert-Info header.
   *
   * @schema MiddlewareSpecPassTlsClientCert#info
   */
  readonly info?: MiddlewareSpecPassTlsClientCertInfo;

  /**
   * PEM sets the X-Forwarded-Tls-Client-Cert header with the certificate.
   *
   * @schema MiddlewareSpecPassTlsClientCert#pem
   */
  readonly pem?: boolean;
}

/**
 * Converts an object of type 'MiddlewareSpecPassTlsClientCert' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_MiddlewareSpecPassTlsClientCert(
  obj: MiddlewareSpecPassTlsClientCert | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    info: toJson_MiddlewareSpecPassTlsClientCertInfo(obj.info),
    pem: obj.pem,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * RateLimit holds the rate limit configuration. This middleware ensures that services will receive a fair amount of requests, and allows one to define what fair is. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/ratelimit/
 *
 * @schema MiddlewareSpecRateLimit
 */
export interface MiddlewareSpecRateLimit {
  /**
   * Average is the maximum rate, by default in requests/s, allowed for the given source. It defaults to 0, which means no rate limiting. The rate is actually defined by dividing Average by Period. So for a rate below 1req/s, one needs to define a Period larger than a second.
   *
   * @schema MiddlewareSpecRateLimit#average
   */
  readonly average?: number;

  /**
   * Burst is the maximum number of requests allowed to arrive in the same arbitrarily small period of time. It defaults to 1.
   *
   * @schema MiddlewareSpecRateLimit#burst
   */
  readonly burst?: number;

  /**
   * Period, in combination with Average, defines the actual maximum rate, such as: r = Average / Period. It defaults to a second.
   *
   * @schema MiddlewareSpecRateLimit#period
   */
  readonly period?: MiddlewareSpecRateLimitPeriod;

  /**
   * SourceCriterion defines what criterion is used to group requests as originating from a common source. If several strategies are defined at the same time, an error will be raised. If none are set, the default is to use the request's remote address field (as an ipStrategy).
   *
   * @schema MiddlewareSpecRateLimit#sourceCriterion
   */
  readonly sourceCriterion?: MiddlewareSpecRateLimitSourceCriterion;
}

/**
 * Converts an object of type 'MiddlewareSpecRateLimit' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_MiddlewareSpecRateLimit(
  obj: MiddlewareSpecRateLimit | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    average: obj.average,
    burst: obj.burst,
    period: obj.period?.value,
    sourceCriterion: toJson_MiddlewareSpecRateLimitSourceCriterion(
      obj.sourceCriterion,
    ),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * RedirectRegex holds the redirect regex middleware configuration. This middleware redirects a request using regex matching and replacement. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/redirectregex/#regex
 *
 * @schema MiddlewareSpecRedirectRegex
 */
export interface MiddlewareSpecRedirectRegex {
  /**
   * Permanent defines whether the redirection is permanent (301).
   *
   * @schema MiddlewareSpecRedirectRegex#permanent
   */
  readonly permanent?: boolean;

  /**
   * Regex defines the regex used to match and capture elements from the request URL.
   *
   * @schema MiddlewareSpecRedirectRegex#regex
   */
  readonly regex?: string;

  /**
   * Replacement defines how to modify the URL to have the new target URL.
   *
   * @schema MiddlewareSpecRedirectRegex#replacement
   */
  readonly replacement?: string;
}

/**
 * Converts an object of type 'MiddlewareSpecRedirectRegex' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_MiddlewareSpecRedirectRegex(
  obj: MiddlewareSpecRedirectRegex | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    permanent: obj.permanent,
    regex: obj.regex,
    replacement: obj.replacement,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * RedirectScheme holds the redirect scheme middleware configuration. This middleware redirects requests from a scheme/port to another. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/redirectscheme/
 *
 * @schema MiddlewareSpecRedirectScheme
 */
export interface MiddlewareSpecRedirectScheme {
  /**
   * Permanent defines whether the redirection is permanent (301).
   *
   * @schema MiddlewareSpecRedirectScheme#permanent
   */
  readonly permanent?: boolean;

  /**
   * Port defines the port of the new URL.
   *
   * @schema MiddlewareSpecRedirectScheme#port
   */
  readonly port?: string;

  /**
   * Scheme defines the scheme of the new URL.
   *
   * @schema MiddlewareSpecRedirectScheme#scheme
   */
  readonly scheme?: string;
}

/**
 * Converts an object of type 'MiddlewareSpecRedirectScheme' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_MiddlewareSpecRedirectScheme(
  obj: MiddlewareSpecRedirectScheme | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    permanent: obj.permanent,
    port: obj.port,
    scheme: obj.scheme,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * ReplacePath holds the replace path middleware configuration. This middleware replaces the path of the request URL and store the original path in an X-Replaced-Path header. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/replacepath/
 *
 * @schema MiddlewareSpecReplacePath
 */
export interface MiddlewareSpecReplacePath {
  /**
   * Path defines the path to use as replacement in the request URL.
   *
   * @schema MiddlewareSpecReplacePath#path
   */
  readonly path?: string;
}

/**
 * Converts an object of type 'MiddlewareSpecReplacePath' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_MiddlewareSpecReplacePath(
  obj: MiddlewareSpecReplacePath | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    path: obj.path,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * ReplacePathRegex holds the replace path regex middleware configuration. This middleware replaces the path of a URL using regex matching and replacement. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/replacepathregex/
 *
 * @schema MiddlewareSpecReplacePathRegex
 */
export interface MiddlewareSpecReplacePathRegex {
  /**
   * Regex defines the regular expression used to match and capture the path from the request URL.
   *
   * @schema MiddlewareSpecReplacePathRegex#regex
   */
  readonly regex?: string;

  /**
   * Replacement defines the replacement path format, which can include captured variables.
   *
   * @schema MiddlewareSpecReplacePathRegex#replacement
   */
  readonly replacement?: string;
}

/**
 * Converts an object of type 'MiddlewareSpecReplacePathRegex' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_MiddlewareSpecReplacePathRegex(
  obj: MiddlewareSpecReplacePathRegex | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    regex: obj.regex,
    replacement: obj.replacement,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * Retry holds the retry middleware configuration. This middleware reissues requests a given number of times to a backend server if that server does not reply. As soon as the server answers, the middleware stops retrying, regardless of the response status. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/retry/
 *
 * @schema MiddlewareSpecRetry
 */
export interface MiddlewareSpecRetry {
  /**
   * Attempts defines how many times the request should be retried.
   *
   * @schema MiddlewareSpecRetry#attempts
   */
  readonly attempts?: number;

  /**
   * InitialInterval defines the first wait time in the exponential backoff series. The maximum interval is calculated as twice the initialInterval. If unspecified, requests will be retried immediately. The value of initialInterval should be provided in seconds or as a valid duration format, see https://pkg.go.dev/time#ParseDuration.
   *
   * @schema MiddlewareSpecRetry#initialInterval
   */
  readonly initialInterval?: MiddlewareSpecRetryInitialInterval;
}

/**
 * Converts an object of type 'MiddlewareSpecRetry' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_MiddlewareSpecRetry(
  obj: MiddlewareSpecRetry | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    attempts: obj.attempts,
    initialInterval: obj.initialInterval?.value,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * StripPrefix holds the strip prefix middleware configuration. This middleware removes the specified prefixes from the URL path. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/stripprefix/
 *
 * @schema MiddlewareSpecStripPrefix
 */
export interface MiddlewareSpecStripPrefix {
  /**
   * ForceSlash ensures that the resulting stripped path is not the empty string, by replacing it with / when necessary. Default: true.
   *
   * @schema MiddlewareSpecStripPrefix#forceSlash
   */
  readonly forceSlash?: boolean;

  /**
   * Prefixes defines the prefixes to strip from the request URL.
   *
   * @schema MiddlewareSpecStripPrefix#prefixes
   */
  readonly prefixes?: string[];
}

/**
 * Converts an object of type 'MiddlewareSpecStripPrefix' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_MiddlewareSpecStripPrefix(
  obj: MiddlewareSpecStripPrefix | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    forceSlash: obj.forceSlash,
    prefixes: obj.prefixes?.map((y) => y),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * StripPrefixRegex holds the strip prefix regex middleware configuration. This middleware removes the matching prefixes from the URL path. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/stripprefixregex/
 *
 * @schema MiddlewareSpecStripPrefixRegex
 */
export interface MiddlewareSpecStripPrefixRegex {
  /**
   * Regex defines the regular expression to match the path prefix from the request URL.
   *
   * @schema MiddlewareSpecStripPrefixRegex#regex
   */
  readonly regex?: string[];
}

/**
 * Converts an object of type 'MiddlewareSpecStripPrefixRegex' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_MiddlewareSpecStripPrefixRegex(
  obj: MiddlewareSpecStripPrefixRegex | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    regex: obj.regex?.map((y) => y),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * MiddlewareRef is a reference to a Middleware resource.
 *
 * @schema MiddlewareSpecChainMiddlewares
 */
export interface MiddlewareSpecChainMiddlewares {
  /**
   * Name defines the name of the referenced Middleware resource.
   *
   * @schema MiddlewareSpecChainMiddlewares#name
   */
  readonly name: string;

  /**
   * Namespace defines the namespace of the referenced Middleware resource.
   *
   * @schema MiddlewareSpecChainMiddlewares#namespace
   */
  readonly namespace?: string;
}

/**
 * Converts an object of type 'MiddlewareSpecChainMiddlewares' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_MiddlewareSpecChainMiddlewares(
  obj: MiddlewareSpecChainMiddlewares | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    name: obj.name,
    namespace: obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * CheckPeriod is the interval between successive checks of the circuit breaker condition (when in standby state).
 *
 * @schema MiddlewareSpecCircuitBreakerCheckPeriod
 */
export class MiddlewareSpecCircuitBreakerCheckPeriod {
  public static fromNumber(
    value: number,
  ): MiddlewareSpecCircuitBreakerCheckPeriod {
    return new MiddlewareSpecCircuitBreakerCheckPeriod(value);
  }
  public static fromString(
    value: string,
  ): MiddlewareSpecCircuitBreakerCheckPeriod {
    return new MiddlewareSpecCircuitBreakerCheckPeriod(value);
  }
  private constructor(public readonly value: number | string) {}
}

/**
 * FallbackDuration is the duration for which the circuit breaker will wait before trying to recover (from a tripped state).
 *
 * @schema MiddlewareSpecCircuitBreakerFallbackDuration
 */
export class MiddlewareSpecCircuitBreakerFallbackDuration {
  public static fromNumber(
    value: number,
  ): MiddlewareSpecCircuitBreakerFallbackDuration {
    return new MiddlewareSpecCircuitBreakerFallbackDuration(value);
  }
  public static fromString(
    value: string,
  ): MiddlewareSpecCircuitBreakerFallbackDuration {
    return new MiddlewareSpecCircuitBreakerFallbackDuration(value);
  }
  private constructor(public readonly value: number | string) {}
}

/**
 * RecoveryDuration is the duration for which the circuit breaker will try to recover (as soon as it is in recovering state).
 *
 * @schema MiddlewareSpecCircuitBreakerRecoveryDuration
 */
export class MiddlewareSpecCircuitBreakerRecoveryDuration {
  public static fromNumber(
    value: number,
  ): MiddlewareSpecCircuitBreakerRecoveryDuration {
    return new MiddlewareSpecCircuitBreakerRecoveryDuration(value);
  }
  public static fromString(
    value: string,
  ): MiddlewareSpecCircuitBreakerRecoveryDuration {
    return new MiddlewareSpecCircuitBreakerRecoveryDuration(value);
  }
  private constructor(public readonly value: number | string) {}
}

/**
 * Service defines the reference to a Kubernetes Service that will serve the error page. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/errorpages/#service
 *
 * @schema MiddlewareSpecErrorsService
 */
export interface MiddlewareSpecErrorsService {
  /**
   * Kind defines the kind of the Service.
   *
   * @schema MiddlewareSpecErrorsService#kind
   */
  readonly kind?: MiddlewareSpecErrorsServiceKind;

  /**
   * Name defines the name of the referenced Kubernetes Service or TraefikService. The differentiation between the two is specified in the Kind field.
   *
   * @schema MiddlewareSpecErrorsService#name
   */
  readonly name: string;

  /**
   * Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.
   *
   * @schema MiddlewareSpecErrorsService#namespace
   */
  readonly namespace?: string;

  /**
   * NativeLB controls, when creating the load-balancer, whether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP. The Kubernetes Service itself does load-balance to the pods. By default, NativeLB is false.
   *
   * @schema MiddlewareSpecErrorsService#nativeLB
   */
  readonly nativeLb?: boolean;

  /**
   * PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service. By default, passHostHeader is true.
   *
   * @schema MiddlewareSpecErrorsService#passHostHeader
   */
  readonly passHostHeader?: boolean;

  /**
   * Port defines the port of a Kubernetes Service. This can be a reference to a named port.
   *
   * @schema MiddlewareSpecErrorsService#port
   */
  readonly port?: MiddlewareSpecErrorsServicePort;

  /**
   * ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
   *
   * @schema MiddlewareSpecErrorsService#responseForwarding
   */
  readonly responseForwarding?: MiddlewareSpecErrorsServiceResponseForwarding;

  /**
   * Scheme defines the scheme to use for the request to the upstream Kubernetes Service. It defaults to https when Kubernetes Service port is 443, http otherwise.
   *
   * @schema MiddlewareSpecErrorsService#scheme
   */
  readonly scheme?: string;

  /**
   * ServersTransport defines the name of ServersTransport resource to use. It allows to configure the transport between Traefik and your servers. Can only be used on a Kubernetes Service.
   *
   * @schema MiddlewareSpecErrorsService#serversTransport
   */
  readonly serversTransport?: string;

  /**
   * Sticky defines the sticky sessions configuration. More info: https://doc.traefik.io/traefik/v2.10/routing/services/#sticky-sessions
   *
   * @schema MiddlewareSpecErrorsService#sticky
   */
  readonly sticky?: MiddlewareSpecErrorsServiceSticky;

  /**
   * Strategy defines the load balancing strategy between the servers. RoundRobin is the only supported value at the moment.
   *
   * @schema MiddlewareSpecErrorsService#strategy
   */
  readonly strategy?: string;

  /**
   * Weight defines the weight and should only be specified when Name references a TraefikService object (and to be precise, one that embeds a Weighted Round Robin).
   *
   * @schema MiddlewareSpecErrorsService#weight
   */
  readonly weight?: number;
}

/**
 * Converts an object of type 'MiddlewareSpecErrorsService' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_MiddlewareSpecErrorsService(
  obj: MiddlewareSpecErrorsService | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    kind: obj.kind,
    name: obj.name,
    namespace: obj.namespace,
    nativeLB: obj.nativeLb,
    passHostHeader: obj.passHostHeader,
    port: obj.port?.value,
    responseForwarding: toJson_MiddlewareSpecErrorsServiceResponseForwarding(
      obj.responseForwarding,
    ),
    scheme: obj.scheme,
    serversTransport: obj.serversTransport,
    sticky: toJson_MiddlewareSpecErrorsServiceSticky(obj.sticky),
    strategy: obj.strategy,
    weight: obj.weight,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * TLS defines the configuration used to secure the connection to the authentication server.
 *
 * @schema MiddlewareSpecForwardAuthTls
 */
export interface MiddlewareSpecForwardAuthTls {
  /**
   * @schema MiddlewareSpecForwardAuthTls#caOptional
   */
  readonly caOptional?: boolean;

  /**
   * CASecret is the name of the referenced Kubernetes Secret containing the CA to validate the server certificate. The CA certificate is extracted from key `tls.ca` or `ca.crt`.
   *
   * @schema MiddlewareSpecForwardAuthTls#caSecret
   */
  readonly caSecret?: string;

  /**
   * CertSecret is the name of the referenced Kubernetes Secret containing the client certificate. The client certificate is extracted from the keys `tls.crt` and `tls.key`.
   *
   * @schema MiddlewareSpecForwardAuthTls#certSecret
   */
  readonly certSecret?: string;

  /**
   * InsecureSkipVerify defines whether the server certificates should be validated.
   *
   * @schema MiddlewareSpecForwardAuthTls#insecureSkipVerify
   */
  readonly insecureSkipVerify?: boolean;
}

/**
 * Converts an object of type 'MiddlewareSpecForwardAuthTls' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_MiddlewareSpecForwardAuthTls(
  obj: MiddlewareSpecForwardAuthTls | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    caOptional: obj.caOptional,
    caSecret: obj.caSecret,
    certSecret: obj.certSecret,
    insecureSkipVerify: obj.insecureSkipVerify,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * SourceCriterion defines what criterion is used to group requests as originating from a common source. If several strategies are defined at the same time, an error will be raised. If none are set, the default is to use the requestHost. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/inflightreq/#sourcecriterion
 *
 * @schema MiddlewareSpecInFlightReqSourceCriterion
 */
export interface MiddlewareSpecInFlightReqSourceCriterion {
  /**
   * IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/ipwhitelist/#ipstrategy
   *
   * @schema MiddlewareSpecInFlightReqSourceCriterion#ipStrategy
   */
  readonly ipStrategy?: MiddlewareSpecInFlightReqSourceCriterionIpStrategy;

  /**
   * RequestHeaderName defines the name of the header used to group incoming requests.
   *
   * @schema MiddlewareSpecInFlightReqSourceCriterion#requestHeaderName
   */
  readonly requestHeaderName?: string;

  /**
   * RequestHost defines whether to consider the request Host as the source.
   *
   * @schema MiddlewareSpecInFlightReqSourceCriterion#requestHost
   */
  readonly requestHost?: boolean;
}

/**
 * Converts an object of type 'MiddlewareSpecInFlightReqSourceCriterion' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_MiddlewareSpecInFlightReqSourceCriterion(
  obj: MiddlewareSpecInFlightReqSourceCriterion | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    ipStrategy: toJson_MiddlewareSpecInFlightReqSourceCriterionIpStrategy(
      obj.ipStrategy,
    ),
    requestHeaderName: obj.requestHeaderName,
    requestHost: obj.requestHost,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/ipwhitelist/#ipstrategy
 *
 * @schema MiddlewareSpecIpWhiteListIpStrategy
 */
export interface MiddlewareSpecIpWhiteListIpStrategy {
  /**
   * Depth tells Traefik to use the X-Forwarded-For header and take the IP located at the depth position (starting from the right).
   *
   * @schema MiddlewareSpecIpWhiteListIpStrategy#depth
   */
  readonly depth?: number;

  /**
   * ExcludedIPs configures Traefik to scan the X-Forwarded-For header and select the first IP not in the list.
   *
   * @schema MiddlewareSpecIpWhiteListIpStrategy#excludedIPs
   */
  readonly excludedIPs?: string[];
}

/**
 * Converts an object of type 'MiddlewareSpecIpWhiteListIpStrategy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_MiddlewareSpecIpWhiteListIpStrategy(
  obj: MiddlewareSpecIpWhiteListIpStrategy | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    depth: obj.depth,
    excludedIPs: obj.excludedIPs?.map((y) => y),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * Info selects the specific client certificate details you want to add to the X-Forwarded-Tls-Client-Cert-Info header.
 *
 * @schema MiddlewareSpecPassTlsClientCertInfo
 */
export interface MiddlewareSpecPassTlsClientCertInfo {
  /**
   * Issuer defines the client certificate issuer details to add to the X-Forwarded-Tls-Client-Cert-Info header.
   *
   * @schema MiddlewareSpecPassTlsClientCertInfo#issuer
   */
  readonly issuer?: MiddlewareSpecPassTlsClientCertInfoIssuer;

  /**
   * NotAfter defines whether to add the Not After information from the Validity part.
   *
   * @schema MiddlewareSpecPassTlsClientCertInfo#notAfter
   */
  readonly notAfter?: boolean;

  /**
   * NotBefore defines whether to add the Not Before information from the Validity part.
   *
   * @schema MiddlewareSpecPassTlsClientCertInfo#notBefore
   */
  readonly notBefore?: boolean;

  /**
   * Sans defines whether to add the Subject Alternative Name information from the Subject Alternative Name part.
   *
   * @schema MiddlewareSpecPassTlsClientCertInfo#sans
   */
  readonly sans?: boolean;

  /**
   * SerialNumber defines whether to add the client serialNumber information.
   *
   * @schema MiddlewareSpecPassTlsClientCertInfo#serialNumber
   */
  readonly serialNumber?: boolean;

  /**
   * Subject defines the client certificate subject details to add to the X-Forwarded-Tls-Client-Cert-Info header.
   *
   * @schema MiddlewareSpecPassTlsClientCertInfo#subject
   */
  readonly subject?: MiddlewareSpecPassTlsClientCertInfoSubject;
}

/**
 * Converts an object of type 'MiddlewareSpecPassTlsClientCertInfo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_MiddlewareSpecPassTlsClientCertInfo(
  obj: MiddlewareSpecPassTlsClientCertInfo | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    issuer: toJson_MiddlewareSpecPassTlsClientCertInfoIssuer(obj.issuer),
    notAfter: obj.notAfter,
    notBefore: obj.notBefore,
    sans: obj.sans,
    serialNumber: obj.serialNumber,
    subject: toJson_MiddlewareSpecPassTlsClientCertInfoSubject(obj.subject),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * Period, in combination with Average, defines the actual maximum rate, such as: r = Average / Period. It defaults to a second.
 *
 * @schema MiddlewareSpecRateLimitPeriod
 */
export class MiddlewareSpecRateLimitPeriod {
  public static fromNumber(value: number): MiddlewareSpecRateLimitPeriod {
    return new MiddlewareSpecRateLimitPeriod(value);
  }
  public static fromString(value: string): MiddlewareSpecRateLimitPeriod {
    return new MiddlewareSpecRateLimitPeriod(value);
  }
  private constructor(public readonly value: number | string) {}
}

/**
 * SourceCriterion defines what criterion is used to group requests as originating from a common source. If several strategies are defined at the same time, an error will be raised. If none are set, the default is to use the request's remote address field (as an ipStrategy).
 *
 * @schema MiddlewareSpecRateLimitSourceCriterion
 */
export interface MiddlewareSpecRateLimitSourceCriterion {
  /**
   * IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/ipwhitelist/#ipstrategy
   *
   * @schema MiddlewareSpecRateLimitSourceCriterion#ipStrategy
   */
  readonly ipStrategy?: MiddlewareSpecRateLimitSourceCriterionIpStrategy;

  /**
   * RequestHeaderName defines the name of the header used to group incoming requests.
   *
   * @schema MiddlewareSpecRateLimitSourceCriterion#requestHeaderName
   */
  readonly requestHeaderName?: string;

  /**
   * RequestHost defines whether to consider the request Host as the source.
   *
   * @schema MiddlewareSpecRateLimitSourceCriterion#requestHost
   */
  readonly requestHost?: boolean;
}

/**
 * Converts an object of type 'MiddlewareSpecRateLimitSourceCriterion' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_MiddlewareSpecRateLimitSourceCriterion(
  obj: MiddlewareSpecRateLimitSourceCriterion | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    ipStrategy: toJson_MiddlewareSpecRateLimitSourceCriterionIpStrategy(
      obj.ipStrategy,
    ),
    requestHeaderName: obj.requestHeaderName,
    requestHost: obj.requestHost,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * InitialInterval defines the first wait time in the exponential backoff series. The maximum interval is calculated as twice the initialInterval. If unspecified, requests will be retried immediately. The value of initialInterval should be provided in seconds or as a valid duration format, see https://pkg.go.dev/time#ParseDuration.
 *
 * @schema MiddlewareSpecRetryInitialInterval
 */
export class MiddlewareSpecRetryInitialInterval {
  public static fromNumber(value: number): MiddlewareSpecRetryInitialInterval {
    return new MiddlewareSpecRetryInitialInterval(value);
  }
  public static fromString(value: string): MiddlewareSpecRetryInitialInterval {
    return new MiddlewareSpecRetryInitialInterval(value);
  }
  private constructor(public readonly value: number | string) {}
}

/**
 * Kind defines the kind of the Service.
 *
 * @schema MiddlewareSpecErrorsServiceKind
 */
export enum MiddlewareSpecErrorsServiceKind {
  /** Service */
  SERVICE = "Service",
  /** TraefikService */
  TRAEFIK_SERVICE = "TraefikService",
}

/**
 * Port defines the port of a Kubernetes Service. This can be a reference to a named port.
 *
 * @schema MiddlewareSpecErrorsServicePort
 */
export class MiddlewareSpecErrorsServicePort {
  public static fromNumber(value: number): MiddlewareSpecErrorsServicePort {
    return new MiddlewareSpecErrorsServicePort(value);
  }
  public static fromString(value: string): MiddlewareSpecErrorsServicePort {
    return new MiddlewareSpecErrorsServicePort(value);
  }
  private constructor(public readonly value: number | string) {}
}

/**
 * ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
 *
 * @schema MiddlewareSpecErrorsServiceResponseForwarding
 */
export interface MiddlewareSpecErrorsServiceResponseForwarding {
  /**
   * FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body. A negative value means to flush immediately after each write to the client. This configuration is ignored when ReverseProxy recognizes a response as a streaming response; for such responses, writes are flushed to the client immediately. Default: 100ms
   *
   * @schema MiddlewareSpecErrorsServiceResponseForwarding#flushInterval
   */
  readonly flushInterval?: string;
}

/**
 * Converts an object of type 'MiddlewareSpecErrorsServiceResponseForwarding' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_MiddlewareSpecErrorsServiceResponseForwarding(
  obj: MiddlewareSpecErrorsServiceResponseForwarding | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    flushInterval: obj.flushInterval,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * Sticky defines the sticky sessions configuration. More info: https://doc.traefik.io/traefik/v2.10/routing/services/#sticky-sessions
 *
 * @schema MiddlewareSpecErrorsServiceSticky
 */
export interface MiddlewareSpecErrorsServiceSticky {
  /**
   * Cookie defines the sticky cookie configuration.
   *
   * @schema MiddlewareSpecErrorsServiceSticky#cookie
   */
  readonly cookie?: MiddlewareSpecErrorsServiceStickyCookie;
}

/**
 * Converts an object of type 'MiddlewareSpecErrorsServiceSticky' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_MiddlewareSpecErrorsServiceSticky(
  obj: MiddlewareSpecErrorsServiceSticky | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    cookie: toJson_MiddlewareSpecErrorsServiceStickyCookie(obj.cookie),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/ipwhitelist/#ipstrategy
 *
 * @schema MiddlewareSpecInFlightReqSourceCriterionIpStrategy
 */
export interface MiddlewareSpecInFlightReqSourceCriterionIpStrategy {
  /**
   * Depth tells Traefik to use the X-Forwarded-For header and take the IP located at the depth position (starting from the right).
   *
   * @schema MiddlewareSpecInFlightReqSourceCriterionIpStrategy#depth
   */
  readonly depth?: number;

  /**
   * ExcludedIPs configures Traefik to scan the X-Forwarded-For header and select the first IP not in the list.
   *
   * @schema MiddlewareSpecInFlightReqSourceCriterionIpStrategy#excludedIPs
   */
  readonly excludedIPs?: string[];
}

/**
 * Converts an object of type 'MiddlewareSpecInFlightReqSourceCriterionIpStrategy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_MiddlewareSpecInFlightReqSourceCriterionIpStrategy(
  obj: MiddlewareSpecInFlightReqSourceCriterionIpStrategy | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    depth: obj.depth,
    excludedIPs: obj.excludedIPs?.map((y) => y),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * Issuer defines the client certificate issuer details to add to the X-Forwarded-Tls-Client-Cert-Info header.
 *
 * @schema MiddlewareSpecPassTlsClientCertInfoIssuer
 */
export interface MiddlewareSpecPassTlsClientCertInfoIssuer {
  /**
   * CommonName defines whether to add the organizationalUnit information into the issuer.
   *
   * @schema MiddlewareSpecPassTlsClientCertInfoIssuer#commonName
   */
  readonly commonName?: boolean;

  /**
   * Country defines whether to add the country information into the issuer.
   *
   * @schema MiddlewareSpecPassTlsClientCertInfoIssuer#country
   */
  readonly country?: boolean;

  /**
   * DomainComponent defines whether to add the domainComponent information into the issuer.
   *
   * @schema MiddlewareSpecPassTlsClientCertInfoIssuer#domainComponent
   */
  readonly domainComponent?: boolean;

  /**
   * Locality defines whether to add the locality information into the issuer.
   *
   * @schema MiddlewareSpecPassTlsClientCertInfoIssuer#locality
   */
  readonly locality?: boolean;

  /**
   * Organization defines whether to add the organization information into the issuer.
   *
   * @schema MiddlewareSpecPassTlsClientCertInfoIssuer#organization
   */
  readonly organization?: boolean;

  /**
   * Province defines whether to add the province information into the issuer.
   *
   * @schema MiddlewareSpecPassTlsClientCertInfoIssuer#province
   */
  readonly province?: boolean;

  /**
   * SerialNumber defines whether to add the serialNumber information into the issuer.
   *
   * @schema MiddlewareSpecPassTlsClientCertInfoIssuer#serialNumber
   */
  readonly serialNumber?: boolean;
}

/**
 * Converts an object of type 'MiddlewareSpecPassTlsClientCertInfoIssuer' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_MiddlewareSpecPassTlsClientCertInfoIssuer(
  obj: MiddlewareSpecPassTlsClientCertInfoIssuer | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    commonName: obj.commonName,
    country: obj.country,
    domainComponent: obj.domainComponent,
    locality: obj.locality,
    organization: obj.organization,
    province: obj.province,
    serialNumber: obj.serialNumber,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * Subject defines the client certificate subject details to add to the X-Forwarded-Tls-Client-Cert-Info header.
 *
 * @schema MiddlewareSpecPassTlsClientCertInfoSubject
 */
export interface MiddlewareSpecPassTlsClientCertInfoSubject {
  /**
   * CommonName defines whether to add the organizationalUnit information into the subject.
   *
   * @schema MiddlewareSpecPassTlsClientCertInfoSubject#commonName
   */
  readonly commonName?: boolean;

  /**
   * Country defines whether to add the country information into the subject.
   *
   * @schema MiddlewareSpecPassTlsClientCertInfoSubject#country
   */
  readonly country?: boolean;

  /**
   * DomainComponent defines whether to add the domainComponent information into the subject.
   *
   * @schema MiddlewareSpecPassTlsClientCertInfoSubject#domainComponent
   */
  readonly domainComponent?: boolean;

  /**
   * Locality defines whether to add the locality information into the subject.
   *
   * @schema MiddlewareSpecPassTlsClientCertInfoSubject#locality
   */
  readonly locality?: boolean;

  /**
   * Organization defines whether to add the organization information into the subject.
   *
   * @schema MiddlewareSpecPassTlsClientCertInfoSubject#organization
   */
  readonly organization?: boolean;

  /**
   * OrganizationalUnit defines whether to add the organizationalUnit information into the subject.
   *
   * @schema MiddlewareSpecPassTlsClientCertInfoSubject#organizationalUnit
   */
  readonly organizationalUnit?: boolean;

  /**
   * Province defines whether to add the province information into the subject.
   *
   * @schema MiddlewareSpecPassTlsClientCertInfoSubject#province
   */
  readonly province?: boolean;

  /**
   * SerialNumber defines whether to add the serialNumber information into the subject.
   *
   * @schema MiddlewareSpecPassTlsClientCertInfoSubject#serialNumber
   */
  readonly serialNumber?: boolean;
}

/**
 * Converts an object of type 'MiddlewareSpecPassTlsClientCertInfoSubject' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_MiddlewareSpecPassTlsClientCertInfoSubject(
  obj: MiddlewareSpecPassTlsClientCertInfoSubject | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    commonName: obj.commonName,
    country: obj.country,
    domainComponent: obj.domainComponent,
    locality: obj.locality,
    organization: obj.organization,
    organizationalUnit: obj.organizationalUnit,
    province: obj.province,
    serialNumber: obj.serialNumber,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/ipwhitelist/#ipstrategy
 *
 * @schema MiddlewareSpecRateLimitSourceCriterionIpStrategy
 */
export interface MiddlewareSpecRateLimitSourceCriterionIpStrategy {
  /**
   * Depth tells Traefik to use the X-Forwarded-For header and take the IP located at the depth position (starting from the right).
   *
   * @schema MiddlewareSpecRateLimitSourceCriterionIpStrategy#depth
   */
  readonly depth?: number;

  /**
   * ExcludedIPs configures Traefik to scan the X-Forwarded-For header and select the first IP not in the list.
   *
   * @schema MiddlewareSpecRateLimitSourceCriterionIpStrategy#excludedIPs
   */
  readonly excludedIPs?: string[];
}

/**
 * Converts an object of type 'MiddlewareSpecRateLimitSourceCriterionIpStrategy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_MiddlewareSpecRateLimitSourceCriterionIpStrategy(
  obj: MiddlewareSpecRateLimitSourceCriterionIpStrategy | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    depth: obj.depth,
    excludedIPs: obj.excludedIPs?.map((y) => y),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * Cookie defines the sticky cookie configuration.
 *
 * @schema MiddlewareSpecErrorsServiceStickyCookie
 */
export interface MiddlewareSpecErrorsServiceStickyCookie {
  /**
   * HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.
   *
   * @schema MiddlewareSpecErrorsServiceStickyCookie#httpOnly
   */
  readonly httpOnly?: boolean;

  /**
   * Name defines the Cookie name.
   *
   * @schema MiddlewareSpecErrorsServiceStickyCookie#name
   */
  readonly name?: string;

  /**
   * SameSite defines the same site policy. More info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite
   *
   * @schema MiddlewareSpecErrorsServiceStickyCookie#sameSite
   */
  readonly sameSite?: string;

  /**
   * Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).
   *
   * @schema MiddlewareSpecErrorsServiceStickyCookie#secure
   */
  readonly secure?: boolean;
}

/**
 * Converts an object of type 'MiddlewareSpecErrorsServiceStickyCookie' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_MiddlewareSpecErrorsServiceStickyCookie(
  obj: MiddlewareSpecErrorsServiceStickyCookie | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    httpOnly: obj.httpOnly,
    name: obj.name,
    sameSite: obj.sameSite,
    secure: obj.secure,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * MiddlewareTCP is the CRD implementation of a Traefik TCP middleware. More info: https://doc.traefik.io/traefik/v2.10/middlewares/overview/
 *
 * @schema MiddlewareTCP
 */
export class MiddlewareTcp extends ApiObject {
  /**
   * Returns the apiVersion and kind for "MiddlewareTCP"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: "traefik.containo.us/v1alpha1",
    kind: "MiddlewareTCP",
  };

  /**
   * Renders a Kubernetes manifest for "MiddlewareTCP".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: MiddlewareTcpProps): any {
    return {
      ...MiddlewareTcp.GVK,
      ...toJson_MiddlewareTcpProps(props),
    };
  }

  /**
   * Defines a "MiddlewareTCP" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: MiddlewareTcpProps) {
    super(scope, id, {
      ...MiddlewareTcp.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...MiddlewareTcp.GVK,
      ...toJson_MiddlewareTcpProps(resolved),
    };
  }
}

/**
 * MiddlewareTCP is the CRD implementation of a Traefik TCP middleware. More info: https://doc.traefik.io/traefik/v2.10/middlewares/overview/
 *
 * @schema MiddlewareTCP
 */
export interface MiddlewareTcpProps {
  /**
   * @schema MiddlewareTCP#metadata
   */
  readonly metadata: ApiObjectMetadata;

  /**
   * MiddlewareTCPSpec defines the desired state of a MiddlewareTCP.
   *
   * @schema MiddlewareTCP#spec
   */
  readonly spec: MiddlewareTcpSpec;
}

/**
 * Converts an object of type 'MiddlewareTcpProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_MiddlewareTcpProps(
  obj: MiddlewareTcpProps | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    metadata: obj.metadata,
    spec: toJson_MiddlewareTcpSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * MiddlewareTCPSpec defines the desired state of a MiddlewareTCP.
 *
 * @schema MiddlewareTcpSpec
 */
export interface MiddlewareTcpSpec {
  /**
   * InFlightConn defines the InFlightConn middleware configuration.
   *
   * @schema MiddlewareTcpSpec#inFlightConn
   */
  readonly inFlightConn?: MiddlewareTcpSpecInFlightConn;

  /**
   * IPWhiteList defines the IPWhiteList middleware configuration.
   *
   * @schema MiddlewareTcpSpec#ipWhiteList
   */
  readonly ipWhiteList?: MiddlewareTcpSpecIpWhiteList;
}

/**
 * Converts an object of type 'MiddlewareTcpSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_MiddlewareTcpSpec(
  obj: MiddlewareTcpSpec | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    inFlightConn: toJson_MiddlewareTcpSpecInFlightConn(obj.inFlightConn),
    ipWhiteList: toJson_MiddlewareTcpSpecIpWhiteList(obj.ipWhiteList),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * InFlightConn defines the InFlightConn middleware configuration.
 *
 * @schema MiddlewareTcpSpecInFlightConn
 */
export interface MiddlewareTcpSpecInFlightConn {
  /**
   * Amount defines the maximum amount of allowed simultaneous connections. The middleware closes the connection if there are already amount connections opened.
   *
   * @schema MiddlewareTcpSpecInFlightConn#amount
   */
  readonly amount?: number;
}

/**
 * Converts an object of type 'MiddlewareTcpSpecInFlightConn' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_MiddlewareTcpSpecInFlightConn(
  obj: MiddlewareTcpSpecInFlightConn | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    amount: obj.amount,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * IPWhiteList defines the IPWhiteList middleware configuration.
 *
 * @schema MiddlewareTcpSpecIpWhiteList
 */
export interface MiddlewareTcpSpecIpWhiteList {
  /**
   * SourceRange defines the allowed IPs (or ranges of allowed IPs by using CIDR notation).
   *
   * @schema MiddlewareTcpSpecIpWhiteList#sourceRange
   */
  readonly sourceRange?: string[];
}

/**
 * Converts an object of type 'MiddlewareTcpSpecIpWhiteList' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_MiddlewareTcpSpecIpWhiteList(
  obj: MiddlewareTcpSpecIpWhiteList | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    sourceRange: obj.sourceRange?.map((y) => y),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * ServersTransport is the CRD implementation of a ServersTransport. If no serversTransport is specified, the default@internal will be used. The default@internal serversTransport is created from the static configuration. More info: https://doc.traefik.io/traefik/v2.10/routing/services/#serverstransport_1
 *
 * @schema ServersTransport
 */
export class ServersTransport extends ApiObject {
  /**
   * Returns the apiVersion and kind for "ServersTransport"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: "traefik.containo.us/v1alpha1",
    kind: "ServersTransport",
  };

  /**
   * Renders a Kubernetes manifest for "ServersTransport".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: ServersTransportProps): any {
    return {
      ...ServersTransport.GVK,
      ...toJson_ServersTransportProps(props),
    };
  }

  /**
   * Defines a "ServersTransport" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(
    scope: Construct,
    id: string,
    props: ServersTransportProps,
  ) {
    super(scope, id, {
      ...ServersTransport.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...ServersTransport.GVK,
      ...toJson_ServersTransportProps(resolved),
    };
  }
}

/**
 * ServersTransport is the CRD implementation of a ServersTransport. If no serversTransport is specified, the default@internal will be used. The default@internal serversTransport is created from the static configuration. More info: https://doc.traefik.io/traefik/v2.10/routing/services/#serverstransport_1
 *
 * @schema ServersTransport
 */
export interface ServersTransportProps {
  /**
   * @schema ServersTransport#metadata
   */
  readonly metadata: ApiObjectMetadata;

  /**
   * ServersTransportSpec defines the desired state of a ServersTransport.
   *
   * @schema ServersTransport#spec
   */
  readonly spec: ServersTransportSpec;
}

/**
 * Converts an object of type 'ServersTransportProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ServersTransportProps(
  obj: ServersTransportProps | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    metadata: obj.metadata,
    spec: toJson_ServersTransportSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * ServersTransportSpec defines the desired state of a ServersTransport.
 *
 * @schema ServersTransportSpec
 */
export interface ServersTransportSpec {
  /**
   * CertificatesSecrets defines a list of secret storing client certificates for mTLS.
   *
   * @schema ServersTransportSpec#certificatesSecrets
   */
  readonly certificatesSecrets?: string[];

  /**
   * DisableHTTP2 disables HTTP/2 for connections with backend servers.
   *
   * @schema ServersTransportSpec#disableHTTP2
   */
  readonly disableHttp2?: boolean;

  /**
   * ForwardingTimeouts defines the timeouts for requests forwarded to the backend servers.
   *
   * @schema ServersTransportSpec#forwardingTimeouts
   */
  readonly forwardingTimeouts?: ServersTransportSpecForwardingTimeouts;

  /**
   * InsecureSkipVerify disables SSL certificate verification.
   *
   * @schema ServersTransportSpec#insecureSkipVerify
   */
  readonly insecureSkipVerify?: boolean;

  /**
   * MaxIdleConnsPerHost controls the maximum idle (keep-alive) to keep per-host.
   *
   * @schema ServersTransportSpec#maxIdleConnsPerHost
   */
  readonly maxIdleConnsPerHost?: number;

  /**
   * PeerCertURI defines the peer cert URI used to match against SAN URI during the peer certificate verification.
   *
   * @schema ServersTransportSpec#peerCertURI
   */
  readonly peerCertUri?: string;

  /**
   * RootCAsSecrets defines a list of CA secret used to validate self-signed certificate.
   *
   * @schema ServersTransportSpec#rootCAsSecrets
   */
  readonly rootCAsSecrets?: string[];

  /**
   * ServerName defines the server name used to contact the server.
   *
   * @schema ServersTransportSpec#serverName
   */
  readonly serverName?: string;
}

/**
 * Converts an object of type 'ServersTransportSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ServersTransportSpec(
  obj: ServersTransportSpec | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    certificatesSecrets: obj.certificatesSecrets?.map((y) => y),
    disableHTTP2: obj.disableHttp2,
    forwardingTimeouts: toJson_ServersTransportSpecForwardingTimeouts(
      obj.forwardingTimeouts,
    ),
    insecureSkipVerify: obj.insecureSkipVerify,
    maxIdleConnsPerHost: obj.maxIdleConnsPerHost,
    peerCertURI: obj.peerCertUri,
    rootCAsSecrets: obj.rootCAsSecrets?.map((y) => y),
    serverName: obj.serverName,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * ForwardingTimeouts defines the timeouts for requests forwarded to the backend servers.
 *
 * @schema ServersTransportSpecForwardingTimeouts
 */
export interface ServersTransportSpecForwardingTimeouts {
  /**
   * DialTimeout is the amount of time to wait until a connection to a backend server can be established.
   *
   * @schema ServersTransportSpecForwardingTimeouts#dialTimeout
   */
  readonly dialTimeout?: ServersTransportSpecForwardingTimeoutsDialTimeout;

  /**
   * IdleConnTimeout is the maximum period for which an idle HTTP keep-alive connection will remain open before closing itself.
   *
   * @schema ServersTransportSpecForwardingTimeouts#idleConnTimeout
   */
  readonly idleConnTimeout?: ServersTransportSpecForwardingTimeoutsIdleConnTimeout;

  /**
   * PingTimeout is the timeout after which the HTTP/2 connection will be closed if a response to ping is not received.
   *
   * @schema ServersTransportSpecForwardingTimeouts#pingTimeout
   */
  readonly pingTimeout?: ServersTransportSpecForwardingTimeoutsPingTimeout;

  /**
   * ReadIdleTimeout is the timeout after which a health check using ping frame will be carried out if no frame is received on the HTTP/2 connection.
   *
   * @schema ServersTransportSpecForwardingTimeouts#readIdleTimeout
   */
  readonly readIdleTimeout?: ServersTransportSpecForwardingTimeoutsReadIdleTimeout;

  /**
   * ResponseHeaderTimeout is the amount of time to wait for a server's response headers after fully writing the request (including its body, if any).
   *
   * @schema ServersTransportSpecForwardingTimeouts#responseHeaderTimeout
   */
  readonly responseHeaderTimeout?: ServersTransportSpecForwardingTimeoutsResponseHeaderTimeout;
}

/**
 * Converts an object of type 'ServersTransportSpecForwardingTimeouts' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ServersTransportSpecForwardingTimeouts(
  obj: ServersTransportSpecForwardingTimeouts | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    dialTimeout: obj.dialTimeout?.value,
    idleConnTimeout: obj.idleConnTimeout?.value,
    pingTimeout: obj.pingTimeout?.value,
    readIdleTimeout: obj.readIdleTimeout?.value,
    responseHeaderTimeout: obj.responseHeaderTimeout?.value,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * DialTimeout is the amount of time to wait until a connection to a backend server can be established.
 *
 * @schema ServersTransportSpecForwardingTimeoutsDialTimeout
 */
export class ServersTransportSpecForwardingTimeoutsDialTimeout {
  public static fromNumber(
    value: number,
  ): ServersTransportSpecForwardingTimeoutsDialTimeout {
    return new ServersTransportSpecForwardingTimeoutsDialTimeout(value);
  }
  public static fromString(
    value: string,
  ): ServersTransportSpecForwardingTimeoutsDialTimeout {
    return new ServersTransportSpecForwardingTimeoutsDialTimeout(value);
  }
  private constructor(public readonly value: number | string) {}
}

/**
 * IdleConnTimeout is the maximum period for which an idle HTTP keep-alive connection will remain open before closing itself.
 *
 * @schema ServersTransportSpecForwardingTimeoutsIdleConnTimeout
 */
export class ServersTransportSpecForwardingTimeoutsIdleConnTimeout {
  public static fromNumber(
    value: number,
  ): ServersTransportSpecForwardingTimeoutsIdleConnTimeout {
    return new ServersTransportSpecForwardingTimeoutsIdleConnTimeout(value);
  }
  public static fromString(
    value: string,
  ): ServersTransportSpecForwardingTimeoutsIdleConnTimeout {
    return new ServersTransportSpecForwardingTimeoutsIdleConnTimeout(value);
  }
  private constructor(public readonly value: number | string) {}
}

/**
 * PingTimeout is the timeout after which the HTTP/2 connection will be closed if a response to ping is not received.
 *
 * @schema ServersTransportSpecForwardingTimeoutsPingTimeout
 */
export class ServersTransportSpecForwardingTimeoutsPingTimeout {
  public static fromNumber(
    value: number,
  ): ServersTransportSpecForwardingTimeoutsPingTimeout {
    return new ServersTransportSpecForwardingTimeoutsPingTimeout(value);
  }
  public static fromString(
    value: string,
  ): ServersTransportSpecForwardingTimeoutsPingTimeout {
    return new ServersTransportSpecForwardingTimeoutsPingTimeout(value);
  }
  private constructor(public readonly value: number | string) {}
}

/**
 * ReadIdleTimeout is the timeout after which a health check using ping frame will be carried out if no frame is received on the HTTP/2 connection.
 *
 * @schema ServersTransportSpecForwardingTimeoutsReadIdleTimeout
 */
export class ServersTransportSpecForwardingTimeoutsReadIdleTimeout {
  public static fromNumber(
    value: number,
  ): ServersTransportSpecForwardingTimeoutsReadIdleTimeout {
    return new ServersTransportSpecForwardingTimeoutsReadIdleTimeout(value);
  }
  public static fromString(
    value: string,
  ): ServersTransportSpecForwardingTimeoutsReadIdleTimeout {
    return new ServersTransportSpecForwardingTimeoutsReadIdleTimeout(value);
  }
  private constructor(public readonly value: number | string) {}
}

/**
 * ResponseHeaderTimeout is the amount of time to wait for a server's response headers after fully writing the request (including its body, if any).
 *
 * @schema ServersTransportSpecForwardingTimeoutsResponseHeaderTimeout
 */
export class ServersTransportSpecForwardingTimeoutsResponseHeaderTimeout {
  public static fromNumber(
    value: number,
  ): ServersTransportSpecForwardingTimeoutsResponseHeaderTimeout {
    return new ServersTransportSpecForwardingTimeoutsResponseHeaderTimeout(
      value,
    );
  }
  public static fromString(
    value: string,
  ): ServersTransportSpecForwardingTimeoutsResponseHeaderTimeout {
    return new ServersTransportSpecForwardingTimeoutsResponseHeaderTimeout(
      value,
    );
  }
  private constructor(public readonly value: number | string) {}
}

/**
 * TLSOption is the CRD implementation of a Traefik TLS Option, allowing to configure some parameters of the TLS connection. More info: https://doc.traefik.io/traefik/v2.10/https/tls/#tls-options
 *
 * @schema TLSOption
 */
export class TlsOption extends ApiObject {
  /**
   * Returns the apiVersion and kind for "TLSOption"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: "traefik.containo.us/v1alpha1",
    kind: "TLSOption",
  };

  /**
   * Renders a Kubernetes manifest for "TLSOption".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: TlsOptionProps): any {
    return {
      ...TlsOption.GVK,
      ...toJson_TlsOptionProps(props),
    };
  }

  /**
   * Defines a "TLSOption" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: TlsOptionProps) {
    super(scope, id, {
      ...TlsOption.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...TlsOption.GVK,
      ...toJson_TlsOptionProps(resolved),
    };
  }
}

/**
 * TLSOption is the CRD implementation of a Traefik TLS Option, allowing to configure some parameters of the TLS connection. More info: https://doc.traefik.io/traefik/v2.10/https/tls/#tls-options
 *
 * @schema TLSOption
 */
export interface TlsOptionProps {
  /**
   * @schema TLSOption#metadata
   */
  readonly metadata: ApiObjectMetadata;

  /**
   * TLSOptionSpec defines the desired state of a TLSOption.
   *
   * @schema TLSOption#spec
   */
  readonly spec: TlsOptionSpec;
}

/**
 * Converts an object of type 'TlsOptionProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TlsOptionProps(
  obj: TlsOptionProps | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    metadata: obj.metadata,
    spec: toJson_TlsOptionSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * TLSOptionSpec defines the desired state of a TLSOption.
 *
 * @schema TlsOptionSpec
 */
export interface TlsOptionSpec {
  /**
   * ALPNProtocols defines the list of supported application level protocols for the TLS handshake, in order of preference. More info: https://doc.traefik.io/traefik/v2.10/https/tls/#alpn-protocols
   *
   * @schema TlsOptionSpec#alpnProtocols
   */
  readonly alpnProtocols?: string[];

  /**
   * CipherSuites defines the list of supported cipher suites for TLS versions up to TLS 1.2. More info: https://doc.traefik.io/traefik/v2.10/https/tls/#cipher-suites
   *
   * @schema TlsOptionSpec#cipherSuites
   */
  readonly cipherSuites?: string[];

  /**
   * ClientAuth defines the server's policy for TLS Client Authentication.
   *
   * @schema TlsOptionSpec#clientAuth
   */
  readonly clientAuth?: TlsOptionSpecClientAuth;

  /**
   * CurvePreferences defines the preferred elliptic curves in a specific order. More info: https://doc.traefik.io/traefik/v2.10/https/tls/#curve-preferences
   *
   * @schema TlsOptionSpec#curvePreferences
   */
  readonly curvePreferences?: string[];

  /**
   * MaxVersion defines the maximum TLS version that Traefik will accept. Possible values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13. Default: None.
   *
   * @schema TlsOptionSpec#maxVersion
   */
  readonly maxVersion?: string;

  /**
   * MinVersion defines the minimum TLS version that Traefik will accept. Possible values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13. Default: VersionTLS10.
   *
   * @schema TlsOptionSpec#minVersion
   */
  readonly minVersion?: string;

  /**
   * PreferServerCipherSuites defines whether the server chooses a cipher suite among his own instead of among the client's. It is enabled automatically when minVersion or maxVersion is set. Deprecated: https://github.com/golang/go/issues/45430
   *
   * @schema TlsOptionSpec#preferServerCipherSuites
   */
  readonly preferServerCipherSuites?: boolean;

  /**
   * SniStrict defines whether Traefik allows connections from clients connections that do not specify a server_name extension.
   *
   * @schema TlsOptionSpec#sniStrict
   */
  readonly sniStrict?: boolean;
}

/**
 * Converts an object of type 'TlsOptionSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TlsOptionSpec(
  obj: TlsOptionSpec | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    alpnProtocols: obj.alpnProtocols?.map((y) => y),
    cipherSuites: obj.cipherSuites?.map((y) => y),
    clientAuth: toJson_TlsOptionSpecClientAuth(obj.clientAuth),
    curvePreferences: obj.curvePreferences?.map((y) => y),
    maxVersion: obj.maxVersion,
    minVersion: obj.minVersion,
    preferServerCipherSuites: obj.preferServerCipherSuites,
    sniStrict: obj.sniStrict,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * ClientAuth defines the server's policy for TLS Client Authentication.
 *
 * @schema TlsOptionSpecClientAuth
 */
export interface TlsOptionSpecClientAuth {
  /**
   * ClientAuthType defines the client authentication type to apply.
   *
   * @schema TlsOptionSpecClientAuth#clientAuthType
   */
  readonly clientAuthType?: TlsOptionSpecClientAuthClientAuthType;

  /**
   * SecretNames defines the names of the referenced Kubernetes Secret storing certificate details.
   *
   * @schema TlsOptionSpecClientAuth#secretNames
   */
  readonly secretNames?: string[];
}

/**
 * Converts an object of type 'TlsOptionSpecClientAuth' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TlsOptionSpecClientAuth(
  obj: TlsOptionSpecClientAuth | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    clientAuthType: obj.clientAuthType,
    secretNames: obj.secretNames?.map((y) => y),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * ClientAuthType defines the client authentication type to apply.
 *
 * @schema TlsOptionSpecClientAuthClientAuthType
 */
export enum TlsOptionSpecClientAuthClientAuthType {
  /** NoClientCert */
  NO_CLIENT_CERT = "NoClientCert",
  /** RequestClientCert */
  REQUEST_CLIENT_CERT = "RequestClientCert",
  /** RequireAnyClientCert */
  REQUIRE_ANY_CLIENT_CERT = "RequireAnyClientCert",
  /** VerifyClientCertIfGiven */
  VERIFY_CLIENT_CERT_IF_GIVEN = "VerifyClientCertIfGiven",
  /** RequireAndVerifyClientCert */
  REQUIRE_AND_VERIFY_CLIENT_CERT = "RequireAndVerifyClientCert",
}

/**
 * TLSStore is the CRD implementation of a Traefik TLS Store. For the time being, only the TLSStore named default is supported. This means that you cannot have two stores that are named default in different Kubernetes namespaces. More info: https://doc.traefik.io/traefik/v2.10/https/tls/#certificates-stores
 *
 * @schema TLSStore
 */
export class TlsStore extends ApiObject {
  /**
   * Returns the apiVersion and kind for "TLSStore"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: "traefik.containo.us/v1alpha1",
    kind: "TLSStore",
  };

  /**
   * Renders a Kubernetes manifest for "TLSStore".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: TlsStoreProps): any {
    return {
      ...TlsStore.GVK,
      ...toJson_TlsStoreProps(props),
    };
  }

  /**
   * Defines a "TLSStore" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: TlsStoreProps) {
    super(scope, id, {
      ...TlsStore.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...TlsStore.GVK,
      ...toJson_TlsStoreProps(resolved),
    };
  }
}

/**
 * TLSStore is the CRD implementation of a Traefik TLS Store. For the time being, only the TLSStore named default is supported. This means that you cannot have two stores that are named default in different Kubernetes namespaces. More info: https://doc.traefik.io/traefik/v2.10/https/tls/#certificates-stores
 *
 * @schema TLSStore
 */
export interface TlsStoreProps {
  /**
   * @schema TLSStore#metadata
   */
  readonly metadata: ApiObjectMetadata;

  /**
   * TLSStoreSpec defines the desired state of a TLSStore.
   *
   * @schema TLSStore#spec
   */
  readonly spec: TlsStoreSpec;
}

/**
 * Converts an object of type 'TlsStoreProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TlsStoreProps(
  obj: TlsStoreProps | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    metadata: obj.metadata,
    spec: toJson_TlsStoreSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * TLSStoreSpec defines the desired state of a TLSStore.
 *
 * @schema TlsStoreSpec
 */
export interface TlsStoreSpec {
  /**
   * Certificates is a list of secret names, each secret holding a key/certificate pair to add to the store.
   *
   * @schema TlsStoreSpec#certificates
   */
  readonly certificates?: TlsStoreSpecCertificates[];

  /**
   * DefaultCertificate defines the default certificate configuration.
   *
   * @schema TlsStoreSpec#defaultCertificate
   */
  readonly defaultCertificate?: TlsStoreSpecDefaultCertificate;

  /**
   * DefaultGeneratedCert defines the default generated certificate configuration.
   *
   * @schema TlsStoreSpec#defaultGeneratedCert
   */
  readonly defaultGeneratedCert?: TlsStoreSpecDefaultGeneratedCert;
}

/**
 * Converts an object of type 'TlsStoreSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TlsStoreSpec(
  obj: TlsStoreSpec | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    certificates: obj.certificates?.map((y) =>
      toJson_TlsStoreSpecCertificates(y),
    ),
    defaultCertificate: toJson_TlsStoreSpecDefaultCertificate(
      obj.defaultCertificate,
    ),
    defaultGeneratedCert: toJson_TlsStoreSpecDefaultGeneratedCert(
      obj.defaultGeneratedCert,
    ),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * Certificate holds a secret name for the TLSStore resource.
 *
 * @schema TlsStoreSpecCertificates
 */
export interface TlsStoreSpecCertificates {
  /**
   * SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.
   *
   * @schema TlsStoreSpecCertificates#secretName
   */
  readonly secretName: string;
}

/**
 * Converts an object of type 'TlsStoreSpecCertificates' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TlsStoreSpecCertificates(
  obj: TlsStoreSpecCertificates | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    secretName: obj.secretName,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * DefaultCertificate defines the default certificate configuration.
 *
 * @schema TlsStoreSpecDefaultCertificate
 */
export interface TlsStoreSpecDefaultCertificate {
  /**
   * SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.
   *
   * @schema TlsStoreSpecDefaultCertificate#secretName
   */
  readonly secretName: string;
}

/**
 * Converts an object of type 'TlsStoreSpecDefaultCertificate' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TlsStoreSpecDefaultCertificate(
  obj: TlsStoreSpecDefaultCertificate | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    secretName: obj.secretName,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * DefaultGeneratedCert defines the default generated certificate configuration.
 *
 * @schema TlsStoreSpecDefaultGeneratedCert
 */
export interface TlsStoreSpecDefaultGeneratedCert {
  /**
   * Domain is the domain definition for the DefaultCertificate.
   *
   * @schema TlsStoreSpecDefaultGeneratedCert#domain
   */
  readonly domain?: TlsStoreSpecDefaultGeneratedCertDomain;

  /**
   * Resolver is the name of the resolver that will be used to issue the DefaultCertificate.
   *
   * @schema TlsStoreSpecDefaultGeneratedCert#resolver
   */
  readonly resolver?: string;
}

/**
 * Converts an object of type 'TlsStoreSpecDefaultGeneratedCert' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TlsStoreSpecDefaultGeneratedCert(
  obj: TlsStoreSpecDefaultGeneratedCert | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    domain: toJson_TlsStoreSpecDefaultGeneratedCertDomain(obj.domain),
    resolver: obj.resolver,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * Domain is the domain definition for the DefaultCertificate.
 *
 * @schema TlsStoreSpecDefaultGeneratedCertDomain
 */
export interface TlsStoreSpecDefaultGeneratedCertDomain {
  /**
   * Main defines the main domain name.
   *
   * @schema TlsStoreSpecDefaultGeneratedCertDomain#main
   */
  readonly main?: string;

  /**
   * SANs defines the subject alternative domain names.
   *
   * @schema TlsStoreSpecDefaultGeneratedCertDomain#sans
   */
  readonly sans?: string[];
}

/**
 * Converts an object of type 'TlsStoreSpecDefaultGeneratedCertDomain' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TlsStoreSpecDefaultGeneratedCertDomain(
  obj: TlsStoreSpecDefaultGeneratedCertDomain | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    main: obj.main,
    sans: obj.sans?.map((y) => y),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * TraefikService is the CRD implementation of a Traefik Service. TraefikService object allows to: - Apply weight to Services on load-balancing - Mirror traffic on services More info: https://doc.traefik.io/traefik/v2.10/routing/providers/kubernetes-crd/#kind-traefikservice
 *
 * @schema TraefikService
 */
export class TraefikService extends ApiObject {
  /**
   * Returns the apiVersion and kind for "TraefikService"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: "traefik.containo.us/v1alpha1",
    kind: "TraefikService",
  };

  /**
   * Renders a Kubernetes manifest for "TraefikService".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: TraefikServiceProps): any {
    return {
      ...TraefikService.GVK,
      ...toJson_TraefikServiceProps(props),
    };
  }

  /**
   * Defines a "TraefikService" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: TraefikServiceProps) {
    super(scope, id, {
      ...TraefikService.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...TraefikService.GVK,
      ...toJson_TraefikServiceProps(resolved),
    };
  }
}

/**
 * TraefikService is the CRD implementation of a Traefik Service. TraefikService object allows to: - Apply weight to Services on load-balancing - Mirror traffic on services More info: https://doc.traefik.io/traefik/v2.10/routing/providers/kubernetes-crd/#kind-traefikservice
 *
 * @schema TraefikService
 */
export interface TraefikServiceProps {
  /**
   * @schema TraefikService#metadata
   */
  readonly metadata: ApiObjectMetadata;

  /**
   * TraefikServiceSpec defines the desired state of a TraefikService.
   *
   * @schema TraefikService#spec
   */
  readonly spec: TraefikServiceSpec;
}

/**
 * Converts an object of type 'TraefikServiceProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TraefikServiceProps(
  obj: TraefikServiceProps | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    metadata: obj.metadata,
    spec: toJson_TraefikServiceSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * TraefikServiceSpec defines the desired state of a TraefikService.
 *
 * @schema TraefikServiceSpec
 */
export interface TraefikServiceSpec {
  /**
   * Mirroring defines the Mirroring service configuration.
   *
   * @schema TraefikServiceSpec#mirroring
   */
  readonly mirroring?: TraefikServiceSpecMirroring;

  /**
   * Weighted defines the Weighted Round Robin configuration.
   *
   * @schema TraefikServiceSpec#weighted
   */
  readonly weighted?: TraefikServiceSpecWeighted;
}

/**
 * Converts an object of type 'TraefikServiceSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TraefikServiceSpec(
  obj: TraefikServiceSpec | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    mirroring: toJson_TraefikServiceSpecMirroring(obj.mirroring),
    weighted: toJson_TraefikServiceSpecWeighted(obj.weighted),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * Mirroring defines the Mirroring service configuration.
 *
 * @schema TraefikServiceSpecMirroring
 */
export interface TraefikServiceSpecMirroring {
  /**
   * Kind defines the kind of the Service.
   *
   * @schema TraefikServiceSpecMirroring#kind
   */
  readonly kind?: TraefikServiceSpecMirroringKind;

  /**
   * MaxBodySize defines the maximum size allowed for the body of the request. If the body is larger, the request is not mirrored. Default value is -1, which means unlimited size.
   *
   * @schema TraefikServiceSpecMirroring#maxBodySize
   */
  readonly maxBodySize?: number;

  /**
   * Mirrors defines the list of mirrors where Traefik will duplicate the traffic.
   *
   * @schema TraefikServiceSpecMirroring#mirrors
   */
  readonly mirrors?: TraefikServiceSpecMirroringMirrors[];

  /**
   * Name defines the name of the referenced Kubernetes Service or TraefikService. The differentiation between the two is specified in the Kind field.
   *
   * @schema TraefikServiceSpecMirroring#name
   */
  readonly name: string;

  /**
   * Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.
   *
   * @schema TraefikServiceSpecMirroring#namespace
   */
  readonly namespace?: string;

  /**
   * NativeLB controls, when creating the load-balancer, whether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP. The Kubernetes Service itself does load-balance to the pods. By default, NativeLB is false.
   *
   * @schema TraefikServiceSpecMirroring#nativeLB
   */
  readonly nativeLb?: boolean;

  /**
   * PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service. By default, passHostHeader is true.
   *
   * @schema TraefikServiceSpecMirroring#passHostHeader
   */
  readonly passHostHeader?: boolean;

  /**
   * Port defines the port of a Kubernetes Service. This can be a reference to a named port.
   *
   * @schema TraefikServiceSpecMirroring#port
   */
  readonly port?: TraefikServiceSpecMirroringPort;

  /**
   * ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
   *
   * @schema TraefikServiceSpecMirroring#responseForwarding
   */
  readonly responseForwarding?: TraefikServiceSpecMirroringResponseForwarding;

  /**
   * Scheme defines the scheme to use for the request to the upstream Kubernetes Service. It defaults to https when Kubernetes Service port is 443, http otherwise.
   *
   * @schema TraefikServiceSpecMirroring#scheme
   */
  readonly scheme?: string;

  /**
   * ServersTransport defines the name of ServersTransport resource to use. It allows to configure the transport between Traefik and your servers. Can only be used on a Kubernetes Service.
   *
   * @schema TraefikServiceSpecMirroring#serversTransport
   */
  readonly serversTransport?: string;

  /**
   * Sticky defines the sticky sessions configuration. More info: https://doc.traefik.io/traefik/v2.10/routing/services/#sticky-sessions
   *
   * @schema TraefikServiceSpecMirroring#sticky
   */
  readonly sticky?: TraefikServiceSpecMirroringSticky;

  /**
   * Strategy defines the load balancing strategy between the servers. RoundRobin is the only supported value at the moment.
   *
   * @schema TraefikServiceSpecMirroring#strategy
   */
  readonly strategy?: string;

  /**
   * Weight defines the weight and should only be specified when Name references a TraefikService object (and to be precise, one that embeds a Weighted Round Robin).
   *
   * @schema TraefikServiceSpecMirroring#weight
   */
  readonly weight?: number;
}

/**
 * Converts an object of type 'TraefikServiceSpecMirroring' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TraefikServiceSpecMirroring(
  obj: TraefikServiceSpecMirroring | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    kind: obj.kind,
    maxBodySize: obj.maxBodySize,
    mirrors: obj.mirrors?.map((y) =>
      toJson_TraefikServiceSpecMirroringMirrors(y),
    ),
    name: obj.name,
    namespace: obj.namespace,
    nativeLB: obj.nativeLb,
    passHostHeader: obj.passHostHeader,
    port: obj.port?.value,
    responseForwarding: toJson_TraefikServiceSpecMirroringResponseForwarding(
      obj.responseForwarding,
    ),
    scheme: obj.scheme,
    serversTransport: obj.serversTransport,
    sticky: toJson_TraefikServiceSpecMirroringSticky(obj.sticky),
    strategy: obj.strategy,
    weight: obj.weight,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * Weighted defines the Weighted Round Robin configuration.
 *
 * @schema TraefikServiceSpecWeighted
 */
export interface TraefikServiceSpecWeighted {
  /**
   * Services defines the list of Kubernetes Service and/or TraefikService to load-balance, with weight.
   *
   * @schema TraefikServiceSpecWeighted#services
   */
  readonly services?: TraefikServiceSpecWeightedServices[];

  /**
   * Sticky defines whether sticky sessions are enabled. More info: https://doc.traefik.io/traefik/v2.10/routing/providers/kubernetes-crd/#stickiness-and-load-balancing
   *
   * @schema TraefikServiceSpecWeighted#sticky
   */
  readonly sticky?: TraefikServiceSpecWeightedSticky;
}

/**
 * Converts an object of type 'TraefikServiceSpecWeighted' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TraefikServiceSpecWeighted(
  obj: TraefikServiceSpecWeighted | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    services: obj.services?.map((y) =>
      toJson_TraefikServiceSpecWeightedServices(y),
    ),
    sticky: toJson_TraefikServiceSpecWeightedSticky(obj.sticky),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * Kind defines the kind of the Service.
 *
 * @schema TraefikServiceSpecMirroringKind
 */
export enum TraefikServiceSpecMirroringKind {
  /** Service */
  SERVICE = "Service",
  /** TraefikService */
  TRAEFIK_SERVICE = "TraefikService",
}

/**
 * MirrorService holds the mirror configuration.
 *
 * @schema TraefikServiceSpecMirroringMirrors
 */
export interface TraefikServiceSpecMirroringMirrors {
  /**
   * Kind defines the kind of the Service.
   *
   * @schema TraefikServiceSpecMirroringMirrors#kind
   */
  readonly kind?: TraefikServiceSpecMirroringMirrorsKind;

  /**
   * Name defines the name of the referenced Kubernetes Service or TraefikService. The differentiation between the two is specified in the Kind field.
   *
   * @schema TraefikServiceSpecMirroringMirrors#name
   */
  readonly name: string;

  /**
   * Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.
   *
   * @schema TraefikServiceSpecMirroringMirrors#namespace
   */
  readonly namespace?: string;

  /**
   * NativeLB controls, when creating the load-balancer, whether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP. The Kubernetes Service itself does load-balance to the pods. By default, NativeLB is false.
   *
   * @schema TraefikServiceSpecMirroringMirrors#nativeLB
   */
  readonly nativeLb?: boolean;

  /**
   * PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service. By default, passHostHeader is true.
   *
   * @schema TraefikServiceSpecMirroringMirrors#passHostHeader
   */
  readonly passHostHeader?: boolean;

  /**
   * Percent defines the part of the traffic to mirror. Supported values: 0 to 100.
   *
   * @schema TraefikServiceSpecMirroringMirrors#percent
   */
  readonly percent?: number;

  /**
   * Port defines the port of a Kubernetes Service. This can be a reference to a named port.
   *
   * @schema TraefikServiceSpecMirroringMirrors#port
   */
  readonly port?: TraefikServiceSpecMirroringMirrorsPort;

  /**
   * ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
   *
   * @schema TraefikServiceSpecMirroringMirrors#responseForwarding
   */
  readonly responseForwarding?: TraefikServiceSpecMirroringMirrorsResponseForwarding;

  /**
   * Scheme defines the scheme to use for the request to the upstream Kubernetes Service. It defaults to https when Kubernetes Service port is 443, http otherwise.
   *
   * @schema TraefikServiceSpecMirroringMirrors#scheme
   */
  readonly scheme?: string;

  /**
   * ServersTransport defines the name of ServersTransport resource to use. It allows to configure the transport between Traefik and your servers. Can only be used on a Kubernetes Service.
   *
   * @schema TraefikServiceSpecMirroringMirrors#serversTransport
   */
  readonly serversTransport?: string;

  /**
   * Sticky defines the sticky sessions configuration. More info: https://doc.traefik.io/traefik/v2.10/routing/services/#sticky-sessions
   *
   * @schema TraefikServiceSpecMirroringMirrors#sticky
   */
  readonly sticky?: TraefikServiceSpecMirroringMirrorsSticky;

  /**
   * Strategy defines the load balancing strategy between the servers. RoundRobin is the only supported value at the moment.
   *
   * @schema TraefikServiceSpecMirroringMirrors#strategy
   */
  readonly strategy?: string;

  /**
   * Weight defines the weight and should only be specified when Name references a TraefikService object (and to be precise, one that embeds a Weighted Round Robin).
   *
   * @schema TraefikServiceSpecMirroringMirrors#weight
   */
  readonly weight?: number;
}

/**
 * Converts an object of type 'TraefikServiceSpecMirroringMirrors' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TraefikServiceSpecMirroringMirrors(
  obj: TraefikServiceSpecMirroringMirrors | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    kind: obj.kind,
    name: obj.name,
    namespace: obj.namespace,
    nativeLB: obj.nativeLb,
    passHostHeader: obj.passHostHeader,
    percent: obj.percent,
    port: obj.port?.value,
    responseForwarding:
      toJson_TraefikServiceSpecMirroringMirrorsResponseForwarding(
        obj.responseForwarding,
      ),
    scheme: obj.scheme,
    serversTransport: obj.serversTransport,
    sticky: toJson_TraefikServiceSpecMirroringMirrorsSticky(obj.sticky),
    strategy: obj.strategy,
    weight: obj.weight,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * Port defines the port of a Kubernetes Service. This can be a reference to a named port.
 *
 * @schema TraefikServiceSpecMirroringPort
 */
export class TraefikServiceSpecMirroringPort {
  public static fromNumber(value: number): TraefikServiceSpecMirroringPort {
    return new TraefikServiceSpecMirroringPort(value);
  }
  public static fromString(value: string): TraefikServiceSpecMirroringPort {
    return new TraefikServiceSpecMirroringPort(value);
  }
  private constructor(public readonly value: number | string) {}
}

/**
 * ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
 *
 * @schema TraefikServiceSpecMirroringResponseForwarding
 */
export interface TraefikServiceSpecMirroringResponseForwarding {
  /**
   * FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body. A negative value means to flush immediately after each write to the client. This configuration is ignored when ReverseProxy recognizes a response as a streaming response; for such responses, writes are flushed to the client immediately. Default: 100ms
   *
   * @schema TraefikServiceSpecMirroringResponseForwarding#flushInterval
   */
  readonly flushInterval?: string;
}

/**
 * Converts an object of type 'TraefikServiceSpecMirroringResponseForwarding' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TraefikServiceSpecMirroringResponseForwarding(
  obj: TraefikServiceSpecMirroringResponseForwarding | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    flushInterval: obj.flushInterval,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * Sticky defines the sticky sessions configuration. More info: https://doc.traefik.io/traefik/v2.10/routing/services/#sticky-sessions
 *
 * @schema TraefikServiceSpecMirroringSticky
 */
export interface TraefikServiceSpecMirroringSticky {
  /**
   * Cookie defines the sticky cookie configuration.
   *
   * @schema TraefikServiceSpecMirroringSticky#cookie
   */
  readonly cookie?: TraefikServiceSpecMirroringStickyCookie;
}

/**
 * Converts an object of type 'TraefikServiceSpecMirroringSticky' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TraefikServiceSpecMirroringSticky(
  obj: TraefikServiceSpecMirroringSticky | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    cookie: toJson_TraefikServiceSpecMirroringStickyCookie(obj.cookie),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * Service defines an upstream HTTP service to proxy traffic to.
 *
 * @schema TraefikServiceSpecWeightedServices
 */
export interface TraefikServiceSpecWeightedServices {
  /**
   * Kind defines the kind of the Service.
   *
   * @schema TraefikServiceSpecWeightedServices#kind
   */
  readonly kind?: TraefikServiceSpecWeightedServicesKind;

  /**
   * Name defines the name of the referenced Kubernetes Service or TraefikService. The differentiation between the two is specified in the Kind field.
   *
   * @schema TraefikServiceSpecWeightedServices#name
   */
  readonly name: string;

  /**
   * Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.
   *
   * @schema TraefikServiceSpecWeightedServices#namespace
   */
  readonly namespace?: string;

  /**
   * NativeLB controls, when creating the load-balancer, whether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP. The Kubernetes Service itself does load-balance to the pods. By default, NativeLB is false.
   *
   * @schema TraefikServiceSpecWeightedServices#nativeLB
   */
  readonly nativeLb?: boolean;

  /**
   * PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service. By default, passHostHeader is true.
   *
   * @schema TraefikServiceSpecWeightedServices#passHostHeader
   */
  readonly passHostHeader?: boolean;

  /**
   * Port defines the port of a Kubernetes Service. This can be a reference to a named port.
   *
   * @schema TraefikServiceSpecWeightedServices#port
   */
  readonly port?: TraefikServiceSpecWeightedServicesPort;

  /**
   * ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
   *
   * @schema TraefikServiceSpecWeightedServices#responseForwarding
   */
  readonly responseForwarding?: TraefikServiceSpecWeightedServicesResponseForwarding;

  /**
   * Scheme defines the scheme to use for the request to the upstream Kubernetes Service. It defaults to https when Kubernetes Service port is 443, http otherwise.
   *
   * @schema TraefikServiceSpecWeightedServices#scheme
   */
  readonly scheme?: string;

  /**
   * ServersTransport defines the name of ServersTransport resource to use. It allows to configure the transport between Traefik and your servers. Can only be used on a Kubernetes Service.
   *
   * @schema TraefikServiceSpecWeightedServices#serversTransport
   */
  readonly serversTransport?: string;

  /**
   * Sticky defines the sticky sessions configuration. More info: https://doc.traefik.io/traefik/v2.10/routing/services/#sticky-sessions
   *
   * @schema TraefikServiceSpecWeightedServices#sticky
   */
  readonly sticky?: TraefikServiceSpecWeightedServicesSticky;

  /**
   * Strategy defines the load balancing strategy between the servers. RoundRobin is the only supported value at the moment.
   *
   * @schema TraefikServiceSpecWeightedServices#strategy
   */
  readonly strategy?: string;

  /**
   * Weight defines the weight and should only be specified when Name references a TraefikService object (and to be precise, one that embeds a Weighted Round Robin).
   *
   * @schema TraefikServiceSpecWeightedServices#weight
   */
  readonly weight?: number;
}

/**
 * Converts an object of type 'TraefikServiceSpecWeightedServices' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TraefikServiceSpecWeightedServices(
  obj: TraefikServiceSpecWeightedServices | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    kind: obj.kind,
    name: obj.name,
    namespace: obj.namespace,
    nativeLB: obj.nativeLb,
    passHostHeader: obj.passHostHeader,
    port: obj.port?.value,
    responseForwarding:
      toJson_TraefikServiceSpecWeightedServicesResponseForwarding(
        obj.responseForwarding,
      ),
    scheme: obj.scheme,
    serversTransport: obj.serversTransport,
    sticky: toJson_TraefikServiceSpecWeightedServicesSticky(obj.sticky),
    strategy: obj.strategy,
    weight: obj.weight,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * Sticky defines whether sticky sessions are enabled. More info: https://doc.traefik.io/traefik/v2.10/routing/providers/kubernetes-crd/#stickiness-and-load-balancing
 *
 * @schema TraefikServiceSpecWeightedSticky
 */
export interface TraefikServiceSpecWeightedSticky {
  /**
   * Cookie defines the sticky cookie configuration.
   *
   * @schema TraefikServiceSpecWeightedSticky#cookie
   */
  readonly cookie?: TraefikServiceSpecWeightedStickyCookie;
}

/**
 * Converts an object of type 'TraefikServiceSpecWeightedSticky' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TraefikServiceSpecWeightedSticky(
  obj: TraefikServiceSpecWeightedSticky | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    cookie: toJson_TraefikServiceSpecWeightedStickyCookie(obj.cookie),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * Kind defines the kind of the Service.
 *
 * @schema TraefikServiceSpecMirroringMirrorsKind
 */
export enum TraefikServiceSpecMirroringMirrorsKind {
  /** Service */
  SERVICE = "Service",
  /** TraefikService */
  TRAEFIK_SERVICE = "TraefikService",
}

/**
 * Port defines the port of a Kubernetes Service. This can be a reference to a named port.
 *
 * @schema TraefikServiceSpecMirroringMirrorsPort
 */
export class TraefikServiceSpecMirroringMirrorsPort {
  public static fromNumber(
    value: number,
  ): TraefikServiceSpecMirroringMirrorsPort {
    return new TraefikServiceSpecMirroringMirrorsPort(value);
  }
  public static fromString(
    value: string,
  ): TraefikServiceSpecMirroringMirrorsPort {
    return new TraefikServiceSpecMirroringMirrorsPort(value);
  }
  private constructor(public readonly value: number | string) {}
}

/**
 * ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
 *
 * @schema TraefikServiceSpecMirroringMirrorsResponseForwarding
 */
export interface TraefikServiceSpecMirroringMirrorsResponseForwarding {
  /**
   * FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body. A negative value means to flush immediately after each write to the client. This configuration is ignored when ReverseProxy recognizes a response as a streaming response; for such responses, writes are flushed to the client immediately. Default: 100ms
   *
   * @schema TraefikServiceSpecMirroringMirrorsResponseForwarding#flushInterval
   */
  readonly flushInterval?: string;
}

/**
 * Converts an object of type 'TraefikServiceSpecMirroringMirrorsResponseForwarding' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TraefikServiceSpecMirroringMirrorsResponseForwarding(
  obj: TraefikServiceSpecMirroringMirrorsResponseForwarding | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    flushInterval: obj.flushInterval,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * Sticky defines the sticky sessions configuration. More info: https://doc.traefik.io/traefik/v2.10/routing/services/#sticky-sessions
 *
 * @schema TraefikServiceSpecMirroringMirrorsSticky
 */
export interface TraefikServiceSpecMirroringMirrorsSticky {
  /**
   * Cookie defines the sticky cookie configuration.
   *
   * @schema TraefikServiceSpecMirroringMirrorsSticky#cookie
   */
  readonly cookie?: TraefikServiceSpecMirroringMirrorsStickyCookie;
}

/**
 * Converts an object of type 'TraefikServiceSpecMirroringMirrorsSticky' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TraefikServiceSpecMirroringMirrorsSticky(
  obj: TraefikServiceSpecMirroringMirrorsSticky | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    cookie: toJson_TraefikServiceSpecMirroringMirrorsStickyCookie(obj.cookie),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * Cookie defines the sticky cookie configuration.
 *
 * @schema TraefikServiceSpecMirroringStickyCookie
 */
export interface TraefikServiceSpecMirroringStickyCookie {
  /**
   * HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.
   *
   * @schema TraefikServiceSpecMirroringStickyCookie#httpOnly
   */
  readonly httpOnly?: boolean;

  /**
   * Name defines the Cookie name.
   *
   * @schema TraefikServiceSpecMirroringStickyCookie#name
   */
  readonly name?: string;

  /**
   * SameSite defines the same site policy. More info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite
   *
   * @schema TraefikServiceSpecMirroringStickyCookie#sameSite
   */
  readonly sameSite?: string;

  /**
   * Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).
   *
   * @schema TraefikServiceSpecMirroringStickyCookie#secure
   */
  readonly secure?: boolean;
}

/**
 * Converts an object of type 'TraefikServiceSpecMirroringStickyCookie' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TraefikServiceSpecMirroringStickyCookie(
  obj: TraefikServiceSpecMirroringStickyCookie | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    httpOnly: obj.httpOnly,
    name: obj.name,
    sameSite: obj.sameSite,
    secure: obj.secure,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * Kind defines the kind of the Service.
 *
 * @schema TraefikServiceSpecWeightedServicesKind
 */
export enum TraefikServiceSpecWeightedServicesKind {
  /** Service */
  SERVICE = "Service",
  /** TraefikService */
  TRAEFIK_SERVICE = "TraefikService",
}

/**
 * Port defines the port of a Kubernetes Service. This can be a reference to a named port.
 *
 * @schema TraefikServiceSpecWeightedServicesPort
 */
export class TraefikServiceSpecWeightedServicesPort {
  public static fromNumber(
    value: number,
  ): TraefikServiceSpecWeightedServicesPort {
    return new TraefikServiceSpecWeightedServicesPort(value);
  }
  public static fromString(
    value: string,
  ): TraefikServiceSpecWeightedServicesPort {
    return new TraefikServiceSpecWeightedServicesPort(value);
  }
  private constructor(public readonly value: number | string) {}
}

/**
 * ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
 *
 * @schema TraefikServiceSpecWeightedServicesResponseForwarding
 */
export interface TraefikServiceSpecWeightedServicesResponseForwarding {
  /**
   * FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body. A negative value means to flush immediately after each write to the client. This configuration is ignored when ReverseProxy recognizes a response as a streaming response; for such responses, writes are flushed to the client immediately. Default: 100ms
   *
   * @schema TraefikServiceSpecWeightedServicesResponseForwarding#flushInterval
   */
  readonly flushInterval?: string;
}

/**
 * Converts an object of type 'TraefikServiceSpecWeightedServicesResponseForwarding' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TraefikServiceSpecWeightedServicesResponseForwarding(
  obj: TraefikServiceSpecWeightedServicesResponseForwarding | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    flushInterval: obj.flushInterval,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * Sticky defines the sticky sessions configuration. More info: https://doc.traefik.io/traefik/v2.10/routing/services/#sticky-sessions
 *
 * @schema TraefikServiceSpecWeightedServicesSticky
 */
export interface TraefikServiceSpecWeightedServicesSticky {
  /**
   * Cookie defines the sticky cookie configuration.
   *
   * @schema TraefikServiceSpecWeightedServicesSticky#cookie
   */
  readonly cookie?: TraefikServiceSpecWeightedServicesStickyCookie;
}

/**
 * Converts an object of type 'TraefikServiceSpecWeightedServicesSticky' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TraefikServiceSpecWeightedServicesSticky(
  obj: TraefikServiceSpecWeightedServicesSticky | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    cookie: toJson_TraefikServiceSpecWeightedServicesStickyCookie(obj.cookie),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * Cookie defines the sticky cookie configuration.
 *
 * @schema TraefikServiceSpecWeightedStickyCookie
 */
export interface TraefikServiceSpecWeightedStickyCookie {
  /**
   * HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.
   *
   * @schema TraefikServiceSpecWeightedStickyCookie#httpOnly
   */
  readonly httpOnly?: boolean;

  /**
   * Name defines the Cookie name.
   *
   * @schema TraefikServiceSpecWeightedStickyCookie#name
   */
  readonly name?: string;

  /**
   * SameSite defines the same site policy. More info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite
   *
   * @schema TraefikServiceSpecWeightedStickyCookie#sameSite
   */
  readonly sameSite?: string;

  /**
   * Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).
   *
   * @schema TraefikServiceSpecWeightedStickyCookie#secure
   */
  readonly secure?: boolean;
}

/**
 * Converts an object of type 'TraefikServiceSpecWeightedStickyCookie' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TraefikServiceSpecWeightedStickyCookie(
  obj: TraefikServiceSpecWeightedStickyCookie | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    httpOnly: obj.httpOnly,
    name: obj.name,
    sameSite: obj.sameSite,
    secure: obj.secure,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * Cookie defines the sticky cookie configuration.
 *
 * @schema TraefikServiceSpecMirroringMirrorsStickyCookie
 */
export interface TraefikServiceSpecMirroringMirrorsStickyCookie {
  /**
   * HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.
   *
   * @schema TraefikServiceSpecMirroringMirrorsStickyCookie#httpOnly
   */
  readonly httpOnly?: boolean;

  /**
   * Name defines the Cookie name.
   *
   * @schema TraefikServiceSpecMirroringMirrorsStickyCookie#name
   */
  readonly name?: string;

  /**
   * SameSite defines the same site policy. More info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite
   *
   * @schema TraefikServiceSpecMirroringMirrorsStickyCookie#sameSite
   */
  readonly sameSite?: string;

  /**
   * Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).
   *
   * @schema TraefikServiceSpecMirroringMirrorsStickyCookie#secure
   */
  readonly secure?: boolean;
}

/**
 * Converts an object of type 'TraefikServiceSpecMirroringMirrorsStickyCookie' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TraefikServiceSpecMirroringMirrorsStickyCookie(
  obj: TraefikServiceSpecMirroringMirrorsStickyCookie | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    httpOnly: obj.httpOnly,
    name: obj.name,
    sameSite: obj.sameSite,
    secure: obj.secure,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * Cookie defines the sticky cookie configuration.
 *
 * @schema TraefikServiceSpecWeightedServicesStickyCookie
 */
export interface TraefikServiceSpecWeightedServicesStickyCookie {
  /**
   * HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.
   *
   * @schema TraefikServiceSpecWeightedServicesStickyCookie#httpOnly
   */
  readonly httpOnly?: boolean;

  /**
   * Name defines the Cookie name.
   *
   * @schema TraefikServiceSpecWeightedServicesStickyCookie#name
   */
  readonly name?: string;

  /**
   * SameSite defines the same site policy. More info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite
   *
   * @schema TraefikServiceSpecWeightedServicesStickyCookie#sameSite
   */
  readonly sameSite?: string;

  /**
   * Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).
   *
   * @schema TraefikServiceSpecWeightedServicesStickyCookie#secure
   */
  readonly secure?: boolean;
}

/**
 * Converts an object of type 'TraefikServiceSpecWeightedServicesStickyCookie' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TraefikServiceSpecWeightedServicesStickyCookie(
  obj: TraefikServiceSpecWeightedServicesStickyCookie | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    httpOnly: obj.httpOnly,
    name: obj.name,
    sameSite: obj.sameSite,
    secure: obj.secure,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */
