// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from "cdk8s";
import { Construct } from "constructs";

/**
 *
 *
 * @schema TestType
 */
export class TestType extends ApiObject {
  /**
   * Returns the apiVersion and kind for "TestType"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: "testgroup.testing.cert-manager.io/v1",
    kind: "TestType",
  };

  /**
   * Renders a Kubernetes manifest for "TestType".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: TestTypeProps): any {
    return {
      ...TestType.GVK,
      ...toJson_TestTypeProps(props),
    };
  }

  /**
   * Defines a "TestType" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: TestTypeProps) {
    super(scope, id, {
      ...TestType.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...TestType.GVK,
      ...toJson_TestTypeProps(resolved),
    };
  }
}

/**
 * @schema TestType
 */
export interface TestTypeProps {
  /**
   * @schema TestType#metadata
   */
  readonly metadata: ApiObjectMetadata;

  /**
   * TestDefaultingField is used to test defaulting. In the v1 API, it defaults to `set-in-v1`. In the v2 API, it defaults to `set-in-v2`.
   *
   * @schema TestType#testDefaultingField
   */
  readonly testDefaultingField?: string;

  /**
   * TestField is used in tests. Validation doesn't allow this to be set to the value of TestFieldValueNotAllowed.
   *
   * @schema TestType#testField
   */
  readonly testField: string;

  /**
   * TestFieldImmutable cannot be changed after being set to a non-zero value
   *
   * @schema TestType#testFieldImmutable
   */
  readonly testFieldImmutable: string;

  /**
   * @schema TestType#testFieldPtr
   */
  readonly testFieldPtr?: string;
}

/**
 * Converts an object of type 'TestTypeProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TestTypeProps(
  obj: TestTypeProps | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    metadata: obj.metadata,
    testDefaultingField: obj.testDefaultingField,
    testField: obj.testField,
    testFieldImmutable: obj.testFieldImmutable,
    testFieldPtr: obj.testFieldPtr,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * TestType in v2 is identical to v1, except TestFieldPtr has been renamed to TestFieldPtrAlt
 *
 * @schema TestTypeV2
 */
export class TestTypeV2 extends ApiObject {
  /**
   * Returns the apiVersion and kind for "TestTypeV2"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: "testgroup.testing.cert-manager.io/v2",
    kind: "TestType",
  };

  /**
   * Renders a Kubernetes manifest for "TestTypeV2".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: TestTypeV2Props): any {
    return {
      ...TestTypeV2.GVK,
      ...toJson_TestTypeV2Props(props),
    };
  }

  /**
   * Defines a "TestTypeV2" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: TestTypeV2Props) {
    super(scope, id, {
      ...TestTypeV2.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...TestTypeV2.GVK,
      ...toJson_TestTypeV2Props(resolved),
    };
  }
}

/**
 * TestType in v2 is identical to v1, except TestFieldPtr has been renamed to TestFieldPtrAlt
 *
 * @schema TestTypeV2
 */
export interface TestTypeV2Props {
  /**
   * @schema TestTypeV2#metadata
   */
  readonly metadata: ApiObjectMetadata;

  /**
   * TestDefaultingField is used to test defaulting. In the v1 API, it defaults to `set-in-v1`. In the v2 API, it defaults to `set-in-v2`.
   *
   * @schema TestTypeV2#testDefaultingField
   */
  readonly testDefaultingField?: string;

  /**
   * TestField is used in tests. Validation doesn't allow this to be set to the value of TestFieldValueNotAllowed.
   *
   * @schema TestTypeV2#testField
   */
  readonly testField: string;

  /**
   * TestFieldImmutable cannot be changed after being set to a non-zero value
   *
   * @schema TestTypeV2#testFieldImmutable
   */
  readonly testFieldImmutable: string;

  /**
   * @schema TestTypeV2#testFieldPtrAlt
   */
  readonly testFieldPtrAlt?: string;
}

/**
 * Converts an object of type 'TestTypeV2Props' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TestTypeV2Props(
  obj: TestTypeV2Props | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) {
    return undefined;
  }
  const result = {
    metadata: obj.metadata,
    testDefaultingField: obj.testDefaultingField,
    testField: obj.testField,
    testFieldImmutable: obj.testFieldImmutable,
    testFieldPtrAlt: obj.testFieldPtrAlt,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */
