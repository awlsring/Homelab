apiVersion: v1
kind: Namespace
metadata:
  name: loki
  namespace: loki
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  labels:
    app.kubernetes.io/component: memcached-chunks-cache
    app.kubernetes.io/instance: loki-helm-c80c1fd9
    app.kubernetes.io/name: loki
  name: loki-helm-c80c1fd9-memcached-chunks-cache
  namespace: loki
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: memcached-chunks-cache
      app.kubernetes.io/instance: loki-helm-c80c1fd9
      app.kubernetes.io/name: loki
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  labels:
    app.kubernetes.io/component: memcached-results-cache
    app.kubernetes.io/instance: loki-helm-c80c1fd9
    app.kubernetes.io/name: loki
  name: loki-helm-c80c1fd9-memcached-results-cache
  namespace: loki
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: memcached-results-cache
      app.kubernetes.io/instance: loki-helm-c80c1fd9
      app.kubernetes.io/name: loki
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: minio-sa
  namespace: loki
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: canary
    app.kubernetes.io/instance: loki-helm-c80c1fd9
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: loki
    app.kubernetes.io/version: 3.0.0
    helm.sh/chart: loki-6.6.2
  name: loki-canary
  namespace: loki
automountServiceAccountToken: true
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/instance: loki-helm-c80c1fd9
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: loki
    app.kubernetes.io/version: 3.0.0
    helm.sh/chart: loki-6.6.2
  name: loki
  namespace: loki
automountServiceAccountToken: true
---
apiVersion: v1
kind: Secret
metadata:
  labels:
    app: minio
    chart: minio-4.0.15
    heritage: Helm
    release: loki-helm-c80c1fd9
  name: loki-helm-c80c1fd9-minio
  namespace: loki
data:
  rootPassword: c3VwZXJzZWNyZXQ=
  rootUser: ZW50ZXJwcmlzZS1sb2dz
type: Opaque
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: minio
    chart: minio-4.0.15
    heritage: Helm
    release: loki-helm-c80c1fd9
  name: loki-helm-c80c1fd9-minio
  namespace: loki
data:
  add-policy: |-
    #!/bin/sh
    set -e ; # Have script exit in the event of a failed command.
    MC_CONFIG_DIR="/etc/minio/mc/"
    MC="/usr/bin/mc --insecure --config-dir ${MC_CONFIG_DIR}"

    # connectToMinio
    # Use a check-sleep-check loop to wait for MinIO service to be available
    connectToMinio() {
      SCHEME=$1
      ATTEMPTS=0 ; LIMIT=29 ; # Allow 30 attempts
      set -e ; # fail if we can't read the keys.
      ACCESS=$(cat /config/rootUser) ; SECRET=$(cat /config/rootPassword) ;
      set +e ; # The connections to minio are allowed to fail.
      echo "Connecting to MinIO server: $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT" ;
      MC_COMMAND="${MC} alias set myminio $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT $ACCESS $SECRET" ;
      $MC_COMMAND ;
      STATUS=$? ;
      until [ $STATUS = 0 ]
      do
        ATTEMPTS=`expr $ATTEMPTS + 1` ;
        echo \"Failed attempts: $ATTEMPTS\" ;
        if [ $ATTEMPTS -gt $LIMIT ]; then
          exit 1 ;
        fi ;
        sleep 2 ; # 1 second intervals between attempts
        $MC_COMMAND ;
        STATUS=$? ;
      done ;
      set -e ; # reset `e` as active
      return 0
    }

    # checkPolicyExists ($policy)
    # Check if the policy exists, by using the exit code of `mc admin policy info`
    checkPolicyExists() {
      POLICY=$1
      CMD=$(${MC} admin policy info myminio $POLICY > /dev/null 2>&1)
      return $?
    }

    # createPolicy($name, $filename)
    createPolicy () {
      NAME=$1
      FILENAME=$2

      # Create the name if it does not exist
      echo "Checking policy: $NAME (in /config/$FILENAME.json)"
      if ! checkPolicyExists $NAME ; then
        echo "Creating policy '$NAME'"
      else
        echo "Policy '$NAME' already exists."
      fi
      ${MC} admin policy add myminio $NAME /config/$FILENAME.json

    }

    # Try connecting to MinIO instance
    scheme=http
    connectToMinio $scheme
  add-user: |-
    #!/bin/sh
    set -e ; # Have script exit in the event of a failed command.
    MC_CONFIG_DIR="/etc/minio/mc/"
    MC="/usr/bin/mc --insecure --config-dir ${MC_CONFIG_DIR}"

    # AccessKey and secretkey credentials file are added to prevent shell execution errors caused by special characters.
    # Special characters for example : ',",<,>,{,}
    MINIO_ACCESSKEY_SECRETKEY_TMP="/tmp/accessKey_and_secretKey_tmp"

    # connectToMinio
    # Use a check-sleep-check loop to wait for MinIO service to be available
    connectToMinio() {
      SCHEME=$1
      ATTEMPTS=0 ; LIMIT=29 ; # Allow 30 attempts
      set -e ; # fail if we can't read the keys.
      ACCESS=$(cat /config/rootUser) ; SECRET=$(cat /config/rootPassword) ;
      set +e ; # The connections to minio are allowed to fail.
      echo "Connecting to MinIO server: $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT" ;
      MC_COMMAND="${MC} alias set myminio $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT $ACCESS $SECRET" ;
      $MC_COMMAND ;
      STATUS=$? ;
      until [ $STATUS = 0 ]
      do
        ATTEMPTS=`expr $ATTEMPTS + 1` ;
        echo \"Failed attempts: $ATTEMPTS\" ;
        if [ $ATTEMPTS -gt $LIMIT ]; then
          exit 1 ;
        fi ;
        sleep 2 ; # 1 second intervals between attempts
        $MC_COMMAND ;
        STATUS=$? ;
      done ;
      set -e ; # reset `e` as active
      return 0
    }

    # checkUserExists ()
    # Check if the user exists, by using the exit code of `mc admin user info`
    checkUserExists() {
      CMD=$(${MC} admin user info myminio $(head -1 $MINIO_ACCESSKEY_SECRETKEY_TMP) > /dev/null 2>&1)
      return $?
    }

    # createUser ($policy)
    createUser() {
      POLICY=$1
      #check accessKey_and_secretKey_tmp file
      if [[ ! -f $MINIO_ACCESSKEY_SECRETKEY_TMP ]];then
        echo "credentials file does not exist"
        return 1
      fi
      if [[ $(cat $MINIO_ACCESSKEY_SECRETKEY_TMP|wc -l) -ne 2 ]];then
        echo "credentials file is invalid"
        rm -f $MINIO_ACCESSKEY_SECRETKEY_TMP
        return 1
      fi
      USER=$(head -1 $MINIO_ACCESSKEY_SECRETKEY_TMP)
      # Create the user if it does not exist
      if ! checkUserExists ; then
        echo "Creating user '$USER'"
        cat $MINIO_ACCESSKEY_SECRETKEY_TMP | ${MC} admin user add myminio
      else
        echo "User '$USER' already exists."
      fi
      #clean up credentials files.
      rm -f $MINIO_ACCESSKEY_SECRETKEY_TMP

      # set policy for user
      if [ ! -z $POLICY -a $POLICY != " " ] ; then
          echo "Adding policy '$POLICY' for '$USER'"
          ${MC} admin policy set myminio $POLICY user=$USER
      else
          echo "User '$USER' has no policy attached."
      fi
    }

    # Try connecting to MinIO instance
    scheme=http
    connectToMinio $scheme



    # Create the users
    echo console > $MINIO_ACCESSKEY_SECRETKEY_TMP
    echo console123 >> $MINIO_ACCESSKEY_SECRETKEY_TMP
    createUser consoleAdmin
  custom-command: |-
    #!/bin/sh
    set -e ; # Have script exit in the event of a failed command.
    MC_CONFIG_DIR="/etc/minio/mc/"
    MC="/usr/bin/mc --insecure --config-dir ${MC_CONFIG_DIR}"

    # connectToMinio
    # Use a check-sleep-check loop to wait for MinIO service to be available
    connectToMinio() {
      SCHEME=$1
      ATTEMPTS=0 ; LIMIT=29 ; # Allow 30 attempts
      set -e ; # fail if we can't read the keys.
      ACCESS=$(cat /config/rootUser) ; SECRET=$(cat /config/rootPassword) ;
      set +e ; # The connections to minio are allowed to fail.
      echo "Connecting to MinIO server: $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT" ;
      MC_COMMAND="${MC} alias set myminio $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT $ACCESS $SECRET" ;
      $MC_COMMAND ;
      STATUS=$? ;
      until [ $STATUS = 0 ]
      do
        ATTEMPTS=`expr $ATTEMPTS + 1` ;
        echo \"Failed attempts: $ATTEMPTS\" ;
        if [ $ATTEMPTS -gt $LIMIT ]; then
          exit 1 ;
        fi ;
        sleep 2 ; # 1 second intervals between attempts
        $MC_COMMAND ;
        STATUS=$? ;
      done ;
      set -e ; # reset `e` as active
      return 0
    }

    # runCommand ($@)
    # Run custom mc command
    runCommand() {
      ${MC} "$@"
      return $?
    }

    # Try connecting to MinIO instance
    scheme=http
    connectToMinio $scheme
  initialize: |-
    #!/bin/sh
    set -e ; # Have script exit in the event of a failed command.
    MC_CONFIG_DIR="/etc/minio/mc/"
    MC="/usr/bin/mc --insecure --config-dir ${MC_CONFIG_DIR}"

    # connectToMinio
    # Use a check-sleep-check loop to wait for MinIO service to be available
    connectToMinio() {
      SCHEME=$1
      ATTEMPTS=0 ; LIMIT=29 ; # Allow 30 attempts
      set -e ; # fail if we can't read the keys.
      ACCESS=$(cat /config/rootUser) ; SECRET=$(cat /config/rootPassword) ;
      set +e ; # The connections to minio are allowed to fail.
      echo "Connecting to MinIO server: $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT" ;
      MC_COMMAND="${MC} alias set myminio $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT $ACCESS $SECRET" ;
      $MC_COMMAND ;
      STATUS=$? ;
      until [ $STATUS = 0 ]
      do
        ATTEMPTS=`expr $ATTEMPTS + 1` ;
        echo \"Failed attempts: $ATTEMPTS\" ;
        if [ $ATTEMPTS -gt $LIMIT ]; then
          exit 1 ;
        fi ;
        sleep 2 ; # 1 second intervals between attempts
        $MC_COMMAND ;
        STATUS=$? ;
      done ;
      set -e ; # reset `e` as active
      return 0
    }

    # checkBucketExists ($bucket)
    # Check if the bucket exists, by using the exit code of `mc ls`
    checkBucketExists() {
      BUCKET=$1
      CMD=$(${MC} ls myminio/$BUCKET > /dev/null 2>&1)
      return $?
    }

    # createBucket ($bucket, $policy, $purge)
    # Ensure bucket exists, purging if asked to
    createBucket() {
      BUCKET=$1
      POLICY=$2
      PURGE=$3
      VERSIONING=$4
      OBJECTLOCKING=$5

      # Purge the bucket, if set & exists
      # Since PURGE is user input, check explicitly for `true`
      if [ $PURGE = true ]; then
        if checkBucketExists $BUCKET ; then
          echo "Purging bucket '$BUCKET'."
          set +e ; # don't exit if this fails
          ${MC} rm -r --force myminio/$BUCKET
          set -e ; # reset `e` as active
        else
          echo "Bucket '$BUCKET' does not exist, skipping purge."
        fi
      fi

    # Create the bucket if it does not exist and set objectlocking if enabled (NOTE: versioning will be not changed if OBJECTLOCKING is set because it enables versioning to the Buckets created)
    if ! checkBucketExists $BUCKET ; then
        if [ ! -z $OBJECTLOCKING ] ; then
          if [ $OBJECTLOCKING = true ] ; then
              echo "Creating bucket with OBJECTLOCKING '$BUCKET'"
              ${MC} mb --with-lock myminio/$BUCKET
          elif [ $OBJECTLOCKING = false ] ; then
                echo "Creating bucket '$BUCKET'"
                ${MC} mb myminio/$BUCKET
          fi
      elif [ -z $OBJECTLOCKING ] ; then
            echo "Creating bucket '$BUCKET'"
            ${MC} mb myminio/$BUCKET
      else
        echo "Bucket '$BUCKET' already exists."  
      fi
      fi


      # set versioning for bucket if objectlocking is disabled or not set
      if [ -z $OBJECTLOCKING ] ; then
      if [ ! -z $VERSIONING ] ; then
        if [ $VERSIONING = true ] ; then
            echo "Enabling versioning for '$BUCKET'"
            ${MC} version enable myminio/$BUCKET
        elif [ $VERSIONING = false ] ; then
            echo "Suspending versioning for '$BUCKET'"
            ${MC} version suspend myminio/$BUCKET
        fi
        fi
      else
          echo "Bucket '$BUCKET' versioning unchanged."
      fi


      # At this point, the bucket should exist, skip checking for existence
      # Set policy on the bucket
      echo "Setting policy of bucket '$BUCKET' to '$POLICY'."
      ${MC} policy set $POLICY myminio/$BUCKET
    }

    # Try connecting to MinIO instance
    scheme=http
    connectToMinio $scheme



    # Create the buckets
    createBucket chunks none false  
    createBucket ruler none false  
    createBucket admin none false  
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: loki-helm-c80c1fd9
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: loki
    app.kubernetes.io/version: 3.0.0
    helm.sh/chart: loki-6.6.2
  name: loki
  namespace: loki
data:
  config.yaml: |
    
    auth_enabled: true
    chunk_store_config:
      chunk_cache_config:
        background:
          writeback_buffer: 500000
          writeback_goroutines: 1
          writeback_size_limit: 500MB
        default_validity: 0s
        memcached:
          batch_size: 4
          parallelism: 5
        memcached_client:
          addresses: dnssrvnoa+_memcached-client._tcp.loki-helm-c80c1fd9-chunks-cache.loki.svc
          consistent_hash: true
          max_idle_conns: 72
          timeout: 2000ms
    common:
      compactor_address: 'http://loki-helm-c80c1fd9:3100'
      path_prefix: /var/loki
      replication_factor: 1
      storage:
        s3:
          access_key_id: enterprise-logs
          bucketnames: chunks
          endpoint: loki-helm-c80c1fd9-minio.loki.svc:9000
          insecure: true
          s3forcepathstyle: true
          secret_access_key: supersecret
    frontend:
      scheduler_address: ""
      tail_proxy_url: http://loki-helm-c80c1fd9-querier.loki.svc.cluster.local:3100
    frontend_worker:
      scheduler_address: ""
    index_gateway:
      mode: simple
    limits_config:
      allow_structured_metadata: true
      max_cache_freshness_per_query: 10m
      query_timeout: 300s
      reject_old_samples: true
      reject_old_samples_max_age: 168h
      split_queries_by_interval: 15m
      volume_enabled: true
    memberlist:
      join_members:
      - loki-memberlist
    pattern_ingester:
      enabled: true
    query_range:
      align_queries_with_step: true
      cache_results: true
      results_cache:
        cache:
          background:
            writeback_buffer: 500000
            writeback_goroutines: 1
            writeback_size_limit: 500MB
          default_validity: 12h
          memcached_client:
            addresses: dnssrvnoa+_memcached-client._tcp.loki-helm-c80c1fd9-results-cache.loki.svc
            consistent_hash: true
            timeout: 500ms
            update_interval: 1m
    ruler:
      storage:
        s3:
          bucketnames: ruler
        type: s3
    runtime_config:
      file: /etc/loki/runtime-config/runtime-config.yaml
    schema_config:
      configs:
      - from: "2024-04-01"
        index:
          period: 24h
          prefix: loki_index_
        object_store: s3
        schema: v13
        store: tsdb
    server:
      grpc_listen_port: 9095
      http_listen_port: 3100
      http_server_read_timeout: 600s
      http_server_write_timeout: 600s
    storage_config:
      boltdb_shipper:
        index_gateway_client:
          server_address: ""
      hedging:
        at: 250ms
        max_per_second: 20
        up_to: 3
      tsdb_shipper:
        index_gateway_client:
          server_address: ""
    tracing:
      enabled: false
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/component: gateway
    app.kubernetes.io/instance: loki-helm-c80c1fd9
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: loki
    app.kubernetes.io/version: 3.0.0
    helm.sh/chart: loki-6.6.2
  name: loki-helm-c80c1fd9-gateway
  namespace: loki
data:
  nginx.conf: |
    worker_processes  5;  ## Default: 1
    error_log  /dev/stderr;
    pid        /tmp/nginx.pid;
    worker_rlimit_nofile 8192;

    events {
      worker_connections  4096;  ## Default: 1024
    }

    http {
      client_body_temp_path /tmp/client_temp;
      proxy_temp_path       /tmp/proxy_temp_path;
      fastcgi_temp_path     /tmp/fastcgi_temp;
      uwsgi_temp_path       /tmp/uwsgi_temp;
      scgi_temp_path        /tmp/scgi_temp;

      client_max_body_size  4M;

      proxy_read_timeout    600; ## 10 minutes
      proxy_send_timeout    600;
      proxy_connect_timeout 600;

      proxy_http_version    1.1;

      default_type application/octet-stream;
      log_format   main '$remote_addr - $remote_user [$time_local]  $status '
            '"$request" $body_bytes_sent "$http_referer" '
            '"$http_user_agent" "$http_x_forwarded_for"';
      access_log   /dev/stderr  main;

      sendfile     on;
      tcp_nopush   on;
      resolver kube-dns.kube-system.svc.cluster.local.;
      

      server {
        listen             8080;
        listen             [::]:8080;

        location = / {
          return 200 'OK';
          auth_basic off;
        }

        ########################################################
        # Configure backend targets# Distributor
        location = /api/prom/push {
          proxy_pass       http://loki-helm-c80c1fd9.loki.svc.cluster.local:3100$request_uri;
        }
        location = /loki/api/v1/push {
          proxy_pass       http://loki-helm-c80c1fd9.loki.svc.cluster.local:3100$request_uri;
        }
        location = /distributor/ring {
          proxy_pass       http://loki-helm-c80c1fd9.loki.svc.cluster.local:3100$request_uri;
        }
        location = /otlp/v1/logs {
          proxy_pass       http://loki-helm-c80c1fd9.loki.svc.cluster.local:3100$request_uri;
        }

        # Ingester
        location = /flush {
          proxy_pass       http://loki-helm-c80c1fd9.loki.svc.cluster.local:3100$request_uri;
        }
        location ^~ /ingester/ {
          proxy_pass       http://loki-helm-c80c1fd9.loki.svc.cluster.local:3100$request_uri;
        }
        location = /ingester {
          internal;        # to suppress 301
        }

        # Ring
        location = /ring {
          proxy_pass       http://loki-helm-c80c1fd9.loki.svc.cluster.local:3100$request_uri;
        }

        # MemberListKV
        location = /memberlist {
          proxy_pass       http://loki-helm-c80c1fd9.loki.svc.cluster.local:3100$request_uri;
        }

        # Ruler
        location = /ruler/ring {
          proxy_pass       http://loki-helm-c80c1fd9.loki.svc.cluster.local:3100$request_uri;
        }
        location = /api/prom/rules {
          proxy_pass       http://loki-helm-c80c1fd9.loki.svc.cluster.local:3100$request_uri;
        }
        location ^~ /api/prom/rules/ {
          proxy_pass       http://loki-helm-c80c1fd9.loki.svc.cluster.local:3100$request_uri;
        }
        location = /loki/api/v1/rules {
          proxy_pass       http://loki-helm-c80c1fd9.loki.svc.cluster.local:3100$request_uri;
        }
        location ^~ /loki/api/v1/rules/ {
          proxy_pass       http://loki-helm-c80c1fd9.loki.svc.cluster.local:3100$request_uri;
        }
        location = /prometheus/api/v1/alerts {
          proxy_pass       http://loki-helm-c80c1fd9.loki.svc.cluster.local:3100$request_uri;
        }
        location = /prometheus/api/v1/rules {
          proxy_pass       http://loki-helm-c80c1fd9.loki.svc.cluster.local:3100$request_uri;
        }

        # Compactor
        location = /compactor/ring {
          proxy_pass       http://loki-helm-c80c1fd9.loki.svc.cluster.local:3100$request_uri;
        }
        location = /loki/api/v1/delete {
          proxy_pass       http://loki-helm-c80c1fd9.loki.svc.cluster.local:3100$request_uri;
        }
        location = /loki/api/v1/cache/generation_numbers {
          proxy_pass       http://loki-helm-c80c1fd9.loki.svc.cluster.local:3100$request_uri;
        }

        # IndexGateway
        location = /indexgateway/ring {
          proxy_pass       http://loki-helm-c80c1fd9.loki.svc.cluster.local:3100$request_uri;
        }

        # QueryScheduler
        location = /scheduler/ring {
          proxy_pass       http://loki-helm-c80c1fd9.loki.svc.cluster.local:3100$request_uri;
        }

        # Config
        location = /config {
          proxy_pass       http://loki-helm-c80c1fd9.loki.svc.cluster.local:3100$request_uri;
        }


        # QueryFrontend, Querier
        location = /api/prom/tail {
          proxy_pass       http://loki-helm-c80c1fd9.loki.svc.cluster.local:3100$request_uri;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection "upgrade";
        }
        location = /loki/api/v1/tail {
          proxy_pass       http://loki-helm-c80c1fd9.loki.svc.cluster.local:3100$request_uri;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection "upgrade";
        }
        location ^~ /api/prom/ {
          proxy_pass       http://loki-helm-c80c1fd9.loki.svc.cluster.local:3100$request_uri;
        }
        location = /api/prom {
          internal;        # to suppress 301
        }
        location ^~ /loki/api/v1/ {
          proxy_pass       http://loki-helm-c80c1fd9.loki.svc.cluster.local:3100$request_uri;
        }
        location = /loki/api/v1 {
          internal;        # to suppress 301
        }
      }
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: loki-helm-c80c1fd9
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: loki
    app.kubernetes.io/version: 3.0.0
    helm.sh/chart: loki-6.6.2
  name: loki-runtime
  namespace: loki
data:
  runtime-config.yaml: |
    {}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: minio
    chart: minio-4.0.15
    heritage: Helm
    release: loki-helm-c80c1fd9
  name: loki-helm-c80c1fd9-minio-console
  namespace: loki
spec:
  ports:
    - name: http
      port: 9001
      protocol: TCP
      targetPort: 9001
  selector:
    app: minio
    release: loki-helm-c80c1fd9
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: minio
    chart: minio-4.0.15
    heritage: Helm
    monitoring: "true"
    release: loki-helm-c80c1fd9
  name: loki-helm-c80c1fd9-minio
  namespace: loki
spec:
  ports:
    - name: http
      port: 9000
      protocol: TCP
      targetPort: 9000
  selector:
    app: minio
    release: loki-helm-c80c1fd9
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: minio
    chart: minio-4.0.15
    heritage: Helm
    release: loki-helm-c80c1fd9
  name: loki-helm-c80c1fd9-minio-svc
  namespace: loki
spec:
  clusterIP: None
  ports:
    - name: http
      port: 9000
      protocol: TCP
      targetPort: 9000
  publishNotReadyAddresses: true
  selector:
    app: minio
    release: loki-helm-c80c1fd9
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: memcached-chunks-cache
    app.kubernetes.io/instance: loki-helm-c80c1fd9
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: loki
    app.kubernetes.io/version: 3.0.0
    helm.sh/chart: loki-6.6.2
  name: loki-helm-c80c1fd9-chunks-cache
  namespace: loki
spec:
  clusterIP: None
  ports:
    - name: memcached-client
      port: 11211
      targetPort: 11211
    - name: http-metrics
      port: 9150
      targetPort: 9150
  selector:
    app.kubernetes.io/component: memcached-chunks-cache
    app.kubernetes.io/instance: loki-helm-c80c1fd9
    app.kubernetes.io/name: loki
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: gateway
    app.kubernetes.io/instance: loki-helm-c80c1fd9
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: loki
    app.kubernetes.io/version: 3.0.0
    helm.sh/chart: loki-6.6.2
  name: loki-helm-c80c1fd9-gateway
  namespace: loki
spec:
  ports:
    - name: http-metrics
      port: 80
      protocol: TCP
      targetPort: http-metrics
  selector:
    app.kubernetes.io/component: gateway
    app.kubernetes.io/instance: loki-helm-c80c1fd9
    app.kubernetes.io/name: loki
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: canary
    app.kubernetes.io/instance: loki-helm-c80c1fd9
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: loki
    app.kubernetes.io/version: 3.0.0
    helm.sh/chart: loki-6.6.2
  name: loki-canary
  namespace: loki
spec:
  ports:
    - name: http-metrics
      port: 3500
      protocol: TCP
      targetPort: http-metrics
  selector:
    app.kubernetes.io/component: canary
    app.kubernetes.io/instance: loki-helm-c80c1fd9
    app.kubernetes.io/name: loki
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: memcached-results-cache
    app.kubernetes.io/instance: loki-helm-c80c1fd9
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: loki
    app.kubernetes.io/version: 3.0.0
    helm.sh/chart: loki-6.6.2
  name: loki-helm-c80c1fd9-results-cache
  namespace: loki
spec:
  clusterIP: None
  ports:
    - name: memcached-client
      port: 11211
      targetPort: 11211
    - name: http-metrics
      port: 9150
      targetPort: 9150
  selector:
    app.kubernetes.io/component: memcached-results-cache
    app.kubernetes.io/instance: loki-helm-c80c1fd9
    app.kubernetes.io/name: loki
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: loki-helm-c80c1fd9
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: loki
    app.kubernetes.io/version: 3.0.0
    helm.sh/chart: loki-6.6.2
  name: loki-memberlist
  namespace: loki
spec:
  clusterIP: None
  ports:
    - name: tcp
      port: 7946
      protocol: TCP
      targetPort: http-memberlist
  selector:
    app.kubernetes.io/instance: loki-helm-c80c1fd9
    app.kubernetes.io/name: loki
    app.kubernetes.io/part-of: memberlist
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: loki-helm-c80c1fd9
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: loki
    app.kubernetes.io/version: 3.0.0
    helm.sh/chart: loki-6.6.2
    prometheus.io/service-monitor: "false"
    variant: headless
  name: loki-headless
  namespace: loki
spec:
  clusterIP: None
  ports:
    - name: http-metrics
      port: 3100
      protocol: TCP
      targetPort: http-metrics
  selector:
    app.kubernetes.io/instance: loki-helm-c80c1fd9
    app.kubernetes.io/name: loki
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: loki-helm-c80c1fd9
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: loki
    app.kubernetes.io/version: 3.0.0
    helm.sh/chart: loki-6.6.2
  name: loki-helm-c80c1fd9
  namespace: loki
spec:
  ports:
    - name: http-metrics
      port: 3100
      protocol: TCP
      targetPort: http-metrics
    - name: grpc
      port: 9095
      protocol: TCP
      targetPort: grpc
  selector:
    app.kubernetes.io/component: single-binary
    app.kubernetes.io/instance: loki-helm-c80c1fd9
    app.kubernetes.io/name: loki
  type: ClusterIP
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    app.kubernetes.io/component: canary
    app.kubernetes.io/instance: loki-helm-c80c1fd9
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: loki
    app.kubernetes.io/version: 3.0.0
    helm.sh/chart: loki-6.6.2
  name: loki-canary
  namespace: loki
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: canary
      app.kubernetes.io/instance: loki-helm-c80c1fd9
      app.kubernetes.io/name: loki
  template:
    metadata:
      labels:
        app.kubernetes.io/component: canary
        app.kubernetes.io/instance: loki-helm-c80c1fd9
        app.kubernetes.io/name: loki
    spec:
      containers:
        - args:
            - -addr=loki-helm-c80c1fd9-gateway.loki.svc.cluster.local.:80
            - -labelname=pod
            - -labelvalue=$(POD_NAME)
            - -user=self-monitoring
            - -tenant-id=self-monitoring
            - -pass=
            - -push=true
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          image: docker.io/grafana/loki-canary:3.0.0
          imagePullPolicy: IfNotPresent
          name: loki-canary
          ports:
            - containerPort: 3500
              name: http-metrics
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /metrics
              port: http-metrics
            initialDelaySeconds: 15
            timeoutSeconds: 1
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
      securityContext:
        fsGroup: 10001
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
      serviceAccountName: loki-canary
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: gateway
    app.kubernetes.io/instance: loki-helm-c80c1fd9
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: loki
    app.kubernetes.io/version: 3.0.0
    helm.sh/chart: loki-6.6.2
  name: loki-helm-c80c1fd9-gateway
  namespace: loki
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/component: gateway
      app.kubernetes.io/instance: loki-helm-c80c1fd9
      app.kubernetes.io/name: loki
  strategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/config: 336e287faeae576d6f4c70c72d64a642b6d75ea867eeedc83f61e9dca533ef5d
      labels:
        app.kubernetes.io/component: gateway
        app.kubernetes.io/instance: loki-helm-c80c1fd9
        app.kubernetes.io/name: loki
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  app.kubernetes.io/component: gateway
              topologyKey: kubernetes.io/hostname
      containers:
        - image: docker.io/nginxinc/nginx-unprivileged:1.24-alpine
          imagePullPolicy: IfNotPresent
          name: nginx
          ports:
            - containerPort: 8080
              name: http-metrics
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /
              port: http-metrics
            initialDelaySeconds: 15
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
          volumeMounts:
            - mountPath: /etc/nginx
              name: config
            - mountPath: /tmp
              name: tmp
            - mountPath: /docker-entrypoint.d
              name: docker-entrypoint-d-override
      enableServiceLinks: true
      securityContext:
        fsGroup: 101
        runAsGroup: 101
        runAsNonRoot: true
        runAsUser: 101
      serviceAccountName: loki
      terminationGracePeriodSeconds: 30
      volumes:
        - configMap:
            name: loki-helm-c80c1fd9-gateway
          name: config
        - emptyDir: {}
          name: tmp
        - emptyDir: {}
          name: docker-entrypoint-d-override
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: minio
    chart: minio-4.0.15
    heritage: Helm
    release: loki-helm-c80c1fd9
  name: loki-helm-c80c1fd9-minio
  namespace: loki
spec:
  podManagementPolicy: Parallel
  replicas: 1
  selector:
    matchLabels:
      app: minio
      release: loki-helm-c80c1fd9
  serviceName: loki-helm-c80c1fd9-minio-svc
  template:
    metadata:
      annotations:
        checksum/config: 28911f9196d9ba5c72054b62ba95bf4b14a96714e3a2ab567b6b314f3d413707
        checksum/secrets: d01a9b26b65064f80f0c2ff7b671b69e89b928a54ec9571314e3d6e4591427cd
      labels:
        app: minio
        release: loki-helm-c80c1fd9
      name: loki-helm-c80c1fd9-minio
    spec:
      containers:
        - command:
            - /bin/sh
            - -ce
            - /usr/bin/docker-entrypoint.sh minio server  http://loki-helm-c80c1fd9-minio-{0...0}.loki-helm-c80c1fd9-minio-svc.loki.svc.cluster.local/export-{0...1} -S /etc/minio/certs/ --address :9000 --console-address :9001
          env:
            - name: MINIO_ROOT_USER
              valueFrom:
                secretKeyRef:
                  key: rootUser
                  name: loki-helm-c80c1fd9-minio
            - name: MINIO_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: rootPassword
                  name: loki-helm-c80c1fd9-minio
            - name: MINIO_PROMETHEUS_AUTH_TYPE
              value: public
          image: quay.io/minio/minio:RELEASE.2022-09-17T00-09-45Z
          imagePullPolicy: IfNotPresent
          name: minio
          ports:
            - containerPort: 9000
              name: http
            - containerPort: 9001
              name: http-console
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
          volumeMounts:
            - mountPath: /export-0
              name: export-0
            - mountPath: /export-1
              name: export-1
      securityContext:
        fsGroup: 1000
        fsGroupChangePolicy: OnRootMismatch
        runAsGroup: 1000
        runAsUser: 1000
      serviceAccountName: minio-sa
      volumes:
        - name: minio-user
          secret:
            secretName: loki-helm-c80c1fd9-minio
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
    - metadata:
        name: export-0
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 5Gi
    - metadata:
        name: export-1
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 5Gi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app.kubernetes.io/component: memcached-chunks-cache
    app.kubernetes.io/instance: loki-helm-c80c1fd9
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: loki
    app.kubernetes.io/version: 3.0.0
    helm.sh/chart: loki-6.6.2
    name: memcached-chunks-cache
  name: loki-helm-c80c1fd9-chunks-cache
  namespace: loki
spec:
  podManagementPolicy: Parallel
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: memcached-chunks-cache
      app.kubernetes.io/instance: loki-helm-c80c1fd9
      app.kubernetes.io/name: loki
      name: memcached-chunks-cache
  serviceName: loki-helm-c80c1fd9-chunks-cache
  template:
    metadata:
      labels:
        app.kubernetes.io/component: memcached-chunks-cache
        app.kubernetes.io/instance: loki-helm-c80c1fd9
        app.kubernetes.io/name: loki
        name: memcached-chunks-cache
    spec:
      affinity: {}
      containers:
        - args:
            - -m 8192
            - --extended=modern,track_sizes
            - -I 5m
            - -c 16384
            - -v
            - -u 11211
          image: memcached:1.6.23-alpine
          imagePullPolicy: IfNotPresent
          name: memcached
          ports:
            - containerPort: 11211
              name: client
          resources:
            limits:
              memory: 9830Mi
            requests:
              cpu: 500m
              memory: 9830Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
        - args:
            - --memcached.address=localhost:11211
            - --web.listen-address=0.0.0.0:9150
          image: prom/memcached-exporter:v0.14.2
          imagePullPolicy: IfNotPresent
          name: exporter
          ports:
            - containerPort: 9150
              name: http-metrics
          resources:
            limits: {}
            requests: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
      initContainers: []
      nodeSelector: {}
      securityContext: {}
      serviceAccountName: loki
      terminationGracePeriodSeconds: 60
      tolerations: []
      topologySpreadConstraints: []
  updateStrategy:
    type: RollingUpdate
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app.kubernetes.io/component: memcached-results-cache
    app.kubernetes.io/instance: loki-helm-c80c1fd9
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: loki
    app.kubernetes.io/version: 3.0.0
    helm.sh/chart: loki-6.6.2
    name: memcached-results-cache
  name: loki-helm-c80c1fd9-results-cache
  namespace: loki
spec:
  podManagementPolicy: Parallel
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: memcached-results-cache
      app.kubernetes.io/instance: loki-helm-c80c1fd9
      app.kubernetes.io/name: loki
      name: memcached-results-cache
  serviceName: loki-helm-c80c1fd9-results-cache
  template:
    metadata:
      labels:
        app.kubernetes.io/component: memcached-results-cache
        app.kubernetes.io/instance: loki-helm-c80c1fd9
        app.kubernetes.io/name: loki
        name: memcached-results-cache
    spec:
      affinity: {}
      containers:
        - args:
            - -m 1024
            - --extended=modern,track_sizes
            - -I 5m
            - -c 16384
            - -v
            - -u 11211
          image: memcached:1.6.23-alpine
          imagePullPolicy: IfNotPresent
          name: memcached
          ports:
            - containerPort: 11211
              name: client
          resources:
            limits:
              memory: 1229Mi
            requests:
              cpu: 500m
              memory: 1229Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
        - args:
            - --memcached.address=localhost:11211
            - --web.listen-address=0.0.0.0:9150
          image: prom/memcached-exporter:v0.14.2
          imagePullPolicy: IfNotPresent
          name: exporter
          ports:
            - containerPort: 9150
              name: http-metrics
          resources:
            limits: {}
            requests: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
      initContainers: []
      nodeSelector: {}
      securityContext: {}
      serviceAccountName: loki
      terminationGracePeriodSeconds: 60
      tolerations: []
      topologySpreadConstraints: []
  updateStrategy:
    type: RollingUpdate
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app.kubernetes.io/component: single-binary
    app.kubernetes.io/instance: loki-helm-c80c1fd9
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: loki
    app.kubernetes.io/part-of: memberlist
    app.kubernetes.io/version: 3.0.0
    helm.sh/chart: loki-6.6.2
  name: loki-helm-c80c1fd9
  namespace: loki
spec:
  persistentVolumeClaimRetentionPolicy:
    whenDeleted: Delete
    whenScaled: Delete
  podManagementPolicy: Parallel
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/component: single-binary
      app.kubernetes.io/instance: loki-helm-c80c1fd9
      app.kubernetes.io/name: loki
  serviceName: loki-helm-c80c1fd9-headless
  template:
    metadata:
      annotations:
        checksum/config: 811cca6a66d63aa059de8939e02ec6b664f8238653c3cf8141bf3741ac8c5200
      labels:
        app.kubernetes.io/component: single-binary
        app.kubernetes.io/instance: loki-helm-c80c1fd9
        app.kubernetes.io/name: loki
        app.kubernetes.io/part-of: memberlist
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  app.kubernetes.io/component: single-binary
              topologyKey: kubernetes.io/hostname
      automountServiceAccountToken: true
      containers:
        - args:
            - -config.file=/etc/loki/config/config.yaml
            - -target=all
          image: docker.io/grafana/loki:3.0.0
          imagePullPolicy: IfNotPresent
          name: loki
          ports:
            - containerPort: 3100
              name: http-metrics
              protocol: TCP
            - containerPort: 9095
              name: grpc
              protocol: TCP
            - containerPort: 7946
              name: http-memberlist
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 30
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
          volumeMounts:
            - mountPath: /tmp
              name: tmp
            - mountPath: /etc/loki/config
              name: config
            - mountPath: /etc/loki/runtime-config
              name: runtime-config
            - mountPath: /var/loki
              name: storage
      enableServiceLinks: true
      securityContext:
        fsGroup: 10001
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
      serviceAccountName: loki
      terminationGracePeriodSeconds: 30
      volumes:
        - emptyDir: {}
          name: tmp
        - configMap:
            items:
              - key: config.yaml
                path: config.yaml
            name: loki
          name: config
        - configMap:
            name: loki-runtime
          name: runtime-config
  updateStrategy:
    rollingUpdate:
      partition: 0
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: storage
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 10Gi
---
apiVersion: v1
kind: Pod
metadata:
  annotations:
    helm.sh/hook: test
  labels:
    app.kubernetes.io/component: helm-test
    app.kubernetes.io/instance: loki-helm-c80c1fd9
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: loki
    app.kubernetes.io/version: 3.0.0
    helm.sh/chart: loki-6.6.2
  name: loki-helm-test
  namespace: loki
spec:
  containers:
    - args:
        - -test.v
      env:
        - name: CANARY_SERVICE_ADDRESS
          value: http://loki-canary:3500/metrics
        - name: CANARY_PROMETHEUS_ADDRESS
          value: ""
        - name: CANARY_TEST_TIMEOUT
          value: 1m
      image: docker.io/grafana/loki-helm-test:ewelch-distributed-helm-chart-17db5ee
      name: loki-helm-test
  restartPolicy: Never
---
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-delete-policy: hook-succeeded,before-hook-creation
  labels:
    app: minio-make-bucket-job
    chart: minio-4.0.15
    heritage: Helm
    release: loki-helm-c80c1fd9
  name: loki-helm-c80c1fd9-minio-make-bucket-job
  namespace: loki
spec:
  template:
    metadata:
      labels:
        app: minio-job
        release: loki-helm-c80c1fd9
    spec:
      containers:
        - command:
            - /bin/sh
            - /config/initialize
          env:
            - name: MINIO_ENDPOINT
              value: loki-helm-c80c1fd9-minio
            - name: MINIO_PORT
              value: "9000"
          image: quay.io/minio/mc:RELEASE.2022-09-16T09-16-47Z
          imagePullPolicy: IfNotPresent
          name: minio-mc
          resources:
            requests:
              memory: 128Mi
          volumeMounts:
            - mountPath: /config
              name: minio-configuration
      restartPolicy: OnFailure
      serviceAccountName: minio-sa
      volumes:
        - name: minio-configuration
          projected:
            sources:
              - configMap:
                  name: loki-helm-c80c1fd9-minio
              - secret:
                  name: loki-helm-c80c1fd9-minio
---
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-delete-policy: hook-succeeded,before-hook-creation
  labels:
    app: minio-make-user-job
    chart: minio-4.0.15
    heritage: Helm
    release: loki-helm-c80c1fd9
  name: loki-helm-c80c1fd9-minio-make-user-job
  namespace: loki
spec:
  template:
    metadata:
      labels:
        app: minio-job
        release: loki-helm-c80c1fd9
    spec:
      containers:
        - command:
            - /bin/sh
            - /config/add-user
          env:
            - name: MINIO_ENDPOINT
              value: loki-helm-c80c1fd9-minio
            - name: MINIO_PORT
              value: "9000"
          image: quay.io/minio/mc:RELEASE.2022-09-16T09-16-47Z
          imagePullPolicy: IfNotPresent
          name: minio-mc
          resources:
            requests:
              memory: 128Mi
          volumeMounts:
            - mountPath: /config
              name: minio-configuration
      restartPolicy: OnFailure
      serviceAccountName: minio-sa
      volumes:
        - name: minio-configuration
          projected:
            sources:
              - configMap:
                  name: loki-helm-c80c1fd9-minio
              - secret:
                  name: loki-helm-c80c1fd9-minio
