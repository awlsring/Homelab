// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 * ScheduledBackup is the Schema for the scheduledbackups API
 *
 * @schema ScheduledBackup
 */
export class ScheduledBackup extends ApiObject {
  /**
   * Returns the apiVersion and kind for "ScheduledBackup"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'postgresql.cnpg.io/v1',
    kind: 'ScheduledBackup',
  }

  /**
   * Renders a Kubernetes manifest for "ScheduledBackup".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: ScheduledBackupProps): any {
    return {
      ...ScheduledBackup.GVK,
      ...toJson_ScheduledBackupProps(props),
    };
  }

  /**
   * Defines a "ScheduledBackup" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: ScheduledBackupProps) {
    super(scope, id, {
      ...ScheduledBackup.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...ScheduledBackup.GVK,
      ...toJson_ScheduledBackupProps(resolved),
    };
  }
}

/**
 * ScheduledBackup is the Schema for the scheduledbackups API
 *
 * @schema ScheduledBackup
 */
export interface ScheduledBackupProps {
  /**
   * @schema ScheduledBackup#metadata
   */
  readonly metadata: ApiObjectMetadata;

  /**
   * Specification of the desired behavior of the ScheduledBackup.
   * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
   *
   * @schema ScheduledBackup#spec
   */
  readonly spec: ScheduledBackupSpec;

}

/**
 * Converts an object of type 'ScheduledBackupProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ScheduledBackupProps(obj: ScheduledBackupProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_ScheduledBackupSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Specification of the desired behavior of the ScheduledBackup.
 * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
 *
 * @schema ScheduledBackupSpec
 */
export interface ScheduledBackupSpec {
  /**
   * Indicates which ownerReference should be put inside the created backup resources.<br />
   * - none: no owner reference for created backup objects (same behavior as before the field was introduced)<br />
   * - self: sets the Scheduled backup object as owner of the backup<br />
   * - cluster: set the cluster as owner of the backup<br />
   *
   * @schema ScheduledBackupSpec#backupOwnerReference
   */
  readonly backupOwnerReference?: ScheduledBackupSpecBackupOwnerReference;

  /**
   * The cluster to backup
   *
   * @schema ScheduledBackupSpec#cluster
   */
  readonly cluster: ScheduledBackupSpecCluster;

  /**
   * If the first backup has to be immediately start after creation or not
   *
   * @schema ScheduledBackupSpec#immediate
   */
  readonly immediate?: boolean;

  /**
   * The backup method to be used, possible options are `barmanObjectStore`
   * and `volumeSnapshot`. Defaults to: `barmanObjectStore`.
   *
   * @default barmanObjectStore`.
   * @schema ScheduledBackupSpec#method
   */
  readonly method?: ScheduledBackupSpecMethod;

  /**
   * Whether the default type of backup with volume snapshots is
   * online/hot (`true`, default) or offline/cold (`false`)
   * Overrides the default setting specified in the cluster field '.spec.backup.volumeSnapshot.online'
   *
   * @schema ScheduledBackupSpec#online
   */
  readonly online?: boolean;

  /**
   * Configuration parameters to control the online/hot backup with volume snapshots
   * Overrides the default settings specified in the cluster '.backup.volumeSnapshot.onlineConfiguration' stanza
   *
   * @schema ScheduledBackupSpec#onlineConfiguration
   */
  readonly onlineConfiguration?: ScheduledBackupSpecOnlineConfiguration;

  /**
   * Configuration parameters passed to the plugin managing this backup
   *
   * @schema ScheduledBackupSpec#pluginConfiguration
   */
  readonly pluginConfiguration?: ScheduledBackupSpecPluginConfiguration;

  /**
   * The schedule does not follow the same format used in Kubernetes CronJobs
   * as it includes an additional seconds specifier,
   * see https://pkg.go.dev/github.com/robfig/cron#hdr-CRON_Expression_Format
   *
   * @schema ScheduledBackupSpec#schedule
   */
  readonly schedule: string;

  /**
   * If this backup is suspended or not
   *
   * @schema ScheduledBackupSpec#suspend
   */
  readonly suspend?: boolean;

  /**
   * The policy to decide which instance should perform this backup. If empty,
   * it defaults to `cluster.spec.backup.target`.
   * Available options are empty string, `primary` and `prefer-standby`.
   * `primary` to have backups run always on primary instances,
   * `prefer-standby` to have backups run preferably on the most updated
   * standby, if available.
   *
   * @schema ScheduledBackupSpec#target
   */
  readonly target?: ScheduledBackupSpecTarget;

}

/**
 * Converts an object of type 'ScheduledBackupSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ScheduledBackupSpec(obj: ScheduledBackupSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'backupOwnerReference': obj.backupOwnerReference,
    'cluster': toJson_ScheduledBackupSpecCluster(obj.cluster),
    'immediate': obj.immediate,
    'method': obj.method,
    'online': obj.online,
    'onlineConfiguration': toJson_ScheduledBackupSpecOnlineConfiguration(obj.onlineConfiguration),
    'pluginConfiguration': toJson_ScheduledBackupSpecPluginConfiguration(obj.pluginConfiguration),
    'schedule': obj.schedule,
    'suspend': obj.suspend,
    'target': obj.target,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Indicates which ownerReference should be put inside the created backup resources.<br />
 * - none: no owner reference for created backup objects (same behavior as before the field was introduced)<br />
 * - self: sets the Scheduled backup object as owner of the backup<br />
 * - cluster: set the cluster as owner of the backup<br />
 *
 * @schema ScheduledBackupSpecBackupOwnerReference
 */
export enum ScheduledBackupSpecBackupOwnerReference {
  /** none */
  NONE = "none",
  /** self */
  SELF = "self",
  /** cluster */
  CLUSTER = "cluster",
}

/**
 * The cluster to backup
 *
 * @schema ScheduledBackupSpecCluster
 */
export interface ScheduledBackupSpecCluster {
  /**
   * Name of the referent.
   *
   * @schema ScheduledBackupSpecCluster#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'ScheduledBackupSpecCluster' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ScheduledBackupSpecCluster(obj: ScheduledBackupSpecCluster | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The backup method to be used, possible options are `barmanObjectStore`
 * and `volumeSnapshot`. Defaults to: `barmanObjectStore`.
 *
 * @default barmanObjectStore`.
 * @schema ScheduledBackupSpecMethod
 */
export enum ScheduledBackupSpecMethod {
  /** barmanObjectStore */
  BARMAN_OBJECT_STORE = "barmanObjectStore",
  /** volumeSnapshot */
  VOLUME_SNAPSHOT = "volumeSnapshot",
}

/**
 * Configuration parameters to control the online/hot backup with volume snapshots
 * Overrides the default settings specified in the cluster '.backup.volumeSnapshot.onlineConfiguration' stanza
 *
 * @schema ScheduledBackupSpecOnlineConfiguration
 */
export interface ScheduledBackupSpecOnlineConfiguration {
  /**
   * Control whether the I/O workload for the backup initial checkpoint will
   * be limited, according to the `checkpoint_completion_target` setting on
   * the PostgreSQL server. If set to true, an immediate checkpoint will be
   * used, meaning PostgreSQL will complete the checkpoint as soon as
   * possible. `false` by default.
   *
   * @schema ScheduledBackupSpecOnlineConfiguration#immediateCheckpoint
   */
  readonly immediateCheckpoint?: boolean;

  /**
   * If false, the function will return immediately after the backup is completed,
   * without waiting for WAL to be archived.
   * This behavior is only useful with backup software that independently monitors WAL archiving.
   * Otherwise, WAL required to make the backup consistent might be missing and make the backup useless.
   * By default, or when this parameter is true, pg_backup_stop will wait for WAL to be archived when archiving is
   * enabled.
   * On a standby, this means that it will wait only when archive_mode = always.
   * If write activity on the primary is low, it may be useful to run pg_switch_wal on the primary in order to trigger
   * an immediate segment switch.
   *
   * @schema ScheduledBackupSpecOnlineConfiguration#waitForArchive
   */
  readonly waitForArchive?: boolean;

}

/**
 * Converts an object of type 'ScheduledBackupSpecOnlineConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ScheduledBackupSpecOnlineConfiguration(obj: ScheduledBackupSpecOnlineConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'immediateCheckpoint': obj.immediateCheckpoint,
    'waitForArchive': obj.waitForArchive,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Configuration parameters passed to the plugin managing this backup
 *
 * @schema ScheduledBackupSpecPluginConfiguration
 */
export interface ScheduledBackupSpecPluginConfiguration {
  /**
   * Name is the name of the plugin managing this backup
   *
   * @schema ScheduledBackupSpecPluginConfiguration#name
   */
  readonly name: string;

  /**
   * Parameters are the configuration parameters passed to the backup
   * plugin for this backup
   *
   * @schema ScheduledBackupSpecPluginConfiguration#parameters
   */
  readonly parameters?: { [key: string]: string };

}

/**
 * Converts an object of type 'ScheduledBackupSpecPluginConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ScheduledBackupSpecPluginConfiguration(obj: ScheduledBackupSpecPluginConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'parameters': ((obj.parameters) === undefined) ? undefined : (Object.entries(obj.parameters).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The policy to decide which instance should perform this backup. If empty,
 * it defaults to `cluster.spec.backup.target`.
 * Available options are empty string, `primary` and `prefer-standby`.
 * `primary` to have backups run always on primary instances,
 * `prefer-standby` to have backups run preferably on the most updated
 * standby, if available.
 *
 * @schema ScheduledBackupSpecTarget
 */
export enum ScheduledBackupSpecTarget {
  /** primary */
  PRIMARY = "primary",
  /** prefer-standby */
  PREFER_HYPHEN_STANDBY = "prefer-standby",
}

