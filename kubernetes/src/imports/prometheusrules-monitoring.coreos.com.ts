// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 * PrometheusRule defines recording and alerting rules for a Prometheus instance
 *
 * @schema PrometheusRule
 */
export class PrometheusRule extends ApiObject {
  /**
   * Returns the apiVersion and kind for "PrometheusRule"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'monitoring.coreos.com/v1',
    kind: 'PrometheusRule',
  }

  /**
   * Renders a Kubernetes manifest for "PrometheusRule".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: PrometheusRuleProps): any {
    return {
      ...PrometheusRule.GVK,
      ...toJson_PrometheusRuleProps(props),
    };
  }

  /**
   * Defines a "PrometheusRule" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: PrometheusRuleProps) {
    super(scope, id, {
      ...PrometheusRule.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...PrometheusRule.GVK,
      ...toJson_PrometheusRuleProps(resolved),
    };
  }
}

/**
 * PrometheusRule defines recording and alerting rules for a Prometheus instance
 *
 * @schema PrometheusRule
 */
export interface PrometheusRuleProps {
  /**
   * @schema PrometheusRule#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * Specification of desired alerting rule definitions for Prometheus.
   *
   * @schema PrometheusRule#spec
   */
  readonly spec: PrometheusRuleSpec;

}

/**
 * Converts an object of type 'PrometheusRuleProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrometheusRuleProps(obj: PrometheusRuleProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_PrometheusRuleSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Specification of desired alerting rule definitions for Prometheus.
 *
 * @schema PrometheusRuleSpec
 */
export interface PrometheusRuleSpec {
  /**
   * Content of Prometheus rule file
   *
   * @schema PrometheusRuleSpec#groups
   */
  readonly groups?: PrometheusRuleSpecGroups[];

}

/**
 * Converts an object of type 'PrometheusRuleSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrometheusRuleSpec(obj: PrometheusRuleSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'groups': obj.groups?.map(y => toJson_PrometheusRuleSpecGroups(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RuleGroup is a list of sequentially evaluated recording and alerting rules.
 *
 * @schema PrometheusRuleSpecGroups
 */
export interface PrometheusRuleSpecGroups {
  /**
   * Interval determines how often rules in the group are evaluated.
   *
   * @schema PrometheusRuleSpecGroups#interval
   */
  readonly interval?: string;

  /**
   * Limit the number of alerts an alerting rule and series a recording
   * rule can produce.
   * Limit is supported starting with Prometheus >= 2.31 and Thanos Ruler >= 0.24.
   *
   * @schema PrometheusRuleSpecGroups#limit
   */
  readonly limit?: number;

  /**
   * Name of the rule group.
   *
   * @schema PrometheusRuleSpecGroups#name
   */
  readonly name: string;

  /**
   * PartialResponseStrategy is only used by ThanosRuler and will
   * be ignored by Prometheus instances.
   * More info: https://github.com/thanos-io/thanos/blob/main/docs/components/rule.md#partial-response
   *
   * @schema PrometheusRuleSpecGroups#partial_response_strategy
   */
  readonly partialResponseStrategy?: string;

  /**
   * List of alerting and recording rules.
   *
   * @schema PrometheusRuleSpecGroups#rules
   */
  readonly rules?: PrometheusRuleSpecGroupsRules[];

}

/**
 * Converts an object of type 'PrometheusRuleSpecGroups' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrometheusRuleSpecGroups(obj: PrometheusRuleSpecGroups | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'interval': obj.interval,
    'limit': obj.limit,
    'name': obj.name,
    'partial_response_strategy': obj.partialResponseStrategy,
    'rules': obj.rules?.map(y => toJson_PrometheusRuleSpecGroupsRules(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Rule describes an alerting or recording rule
 * See Prometheus documentation: [alerting](https://www.prometheus.io/docs/prometheus/latest/configuration/alerting_rules/) or [recording](https://www.prometheus.io/docs/prometheus/latest/configuration/recording_rules/#recording-rules) rule
 *
 * @schema PrometheusRuleSpecGroupsRules
 */
export interface PrometheusRuleSpecGroupsRules {
  /**
   * Name of the alert. Must be a valid label value.
   * Only one of `record` and `alert` must be set.
   *
   * @schema PrometheusRuleSpecGroupsRules#alert
   */
  readonly alert?: string;

  /**
   * Annotations to add to each alert.
   * Only valid for alerting rules.
   *
   * @schema PrometheusRuleSpecGroupsRules#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * PromQL expression to evaluate.
   *
   * @schema PrometheusRuleSpecGroupsRules#expr
   */
  readonly expr: PrometheusRuleSpecGroupsRulesExpr;

  /**
   * Alerts are considered firing once they have been returned for this long.
   *
   * @schema PrometheusRuleSpecGroupsRules#for
   */
  readonly for?: string;

  /**
   * KeepFiringFor defines how long an alert will continue firing after the condition that triggered it has cleared.
   *
   * @schema PrometheusRuleSpecGroupsRules#keep_firing_for
   */
  readonly keepFiringFor?: string;

  /**
   * Labels to add or overwrite.
   *
   * @schema PrometheusRuleSpecGroupsRules#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Name of the time series to output to. Must be a valid metric name.
   * Only one of `record` and `alert` must be set.
   *
   * @schema PrometheusRuleSpecGroupsRules#record
   */
  readonly record?: string;

}

/**
 * Converts an object of type 'PrometheusRuleSpecGroupsRules' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PrometheusRuleSpecGroupsRules(obj: PrometheusRuleSpecGroupsRules | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'alert': obj.alert,
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'expr': obj.expr?.value,
    'for': obj.for,
    'keep_firing_for': obj.keepFiringFor,
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'record': obj.record,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PromQL expression to evaluate.
 *
 * @schema PrometheusRuleSpecGroupsRulesExpr
 */
export class PrometheusRuleSpecGroupsRulesExpr {
  public static fromNumber(value: number): PrometheusRuleSpecGroupsRulesExpr {
    return new PrometheusRuleSpecGroupsRulesExpr(value);
  }
  public static fromString(value: string): PrometheusRuleSpecGroupsRulesExpr {
    return new PrometheusRuleSpecGroupsRulesExpr(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

