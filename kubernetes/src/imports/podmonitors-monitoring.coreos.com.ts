// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 * PodMonitor defines monitoring for a set of pods.
 *
 * @schema PodMonitor
 */
export class PodMonitor extends ApiObject {
  /**
   * Returns the apiVersion and kind for "PodMonitor"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'monitoring.coreos.com/v1',
    kind: 'PodMonitor',
  }

  /**
   * Renders a Kubernetes manifest for "PodMonitor".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: PodMonitorProps): any {
    return {
      ...PodMonitor.GVK,
      ...toJson_PodMonitorProps(props),
    };
  }

  /**
   * Defines a "PodMonitor" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: PodMonitorProps) {
    super(scope, id, {
      ...PodMonitor.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...PodMonitor.GVK,
      ...toJson_PodMonitorProps(resolved),
    };
  }
}

/**
 * PodMonitor defines monitoring for a set of pods.
 *
 * @schema PodMonitor
 */
export interface PodMonitorProps {
  /**
   * @schema PodMonitor#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * Specification of desired Pod selection for target discovery by Prometheus.
   *
   * @schema PodMonitor#spec
   */
  readonly spec: PodMonitorSpec;

}

/**
 * Converts an object of type 'PodMonitorProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodMonitorProps(obj: PodMonitorProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_PodMonitorSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Specification of desired Pod selection for target discovery by Prometheus.
 *
 * @schema PodMonitorSpec
 */
export interface PodMonitorSpec {
  /**
   * `attachMetadata` defines additional metadata which is added to the
   * discovered targets.
   *
   *
   * It requires Prometheus >= v2.37.0.
   *
   * @schema PodMonitorSpec#attachMetadata
   */
  readonly attachMetadata?: PodMonitorSpecAttachMetadata;

  /**
   * When defined, bodySizeLimit specifies a job level limit on the size
   * of uncompressed response body that will be accepted by Prometheus.
   *
   *
   * It requires Prometheus >= v2.28.0.
   *
   * @schema PodMonitorSpec#bodySizeLimit
   */
  readonly bodySizeLimit?: string;

  /**
   * The label to use to retrieve the job name from.
   * `jobLabel` selects the label from the associated Kubernetes `Pod`
   * object which will be used as the `job` label for all metrics.
   *
   *
   * For example if `jobLabel` is set to `foo` and the Kubernetes `Pod`
   * object is labeled with `foo: bar`, then Prometheus adds the `job="bar"`
   * label to all ingested metrics.
   *
   *
   * If the value of this field is empty, the `job` label of the metrics
   * defaults to the namespace and name of the PodMonitor object (e.g. `<namespace>/<name>`).
   *
   * @schema PodMonitorSpec#jobLabel
   */
  readonly jobLabel?: string;

  /**
   * Per-scrape limit on the number of targets dropped by relabeling
   * that will be kept in memory. 0 means no limit.
   *
   *
   * It requires Prometheus >= v2.47.0.
   *
   * @schema PodMonitorSpec#keepDroppedTargets
   */
  readonly keepDroppedTargets?: number;

  /**
   * Per-scrape limit on number of labels that will be accepted for a sample.
   *
   *
   * It requires Prometheus >= v2.27.0.
   *
   * @schema PodMonitorSpec#labelLimit
   */
  readonly labelLimit?: number;

  /**
   * Per-scrape limit on length of labels name that will be accepted for a sample.
   *
   *
   * It requires Prometheus >= v2.27.0.
   *
   * @schema PodMonitorSpec#labelNameLengthLimit
   */
  readonly labelNameLengthLimit?: number;

  /**
   * Per-scrape limit on length of labels value that will be accepted for a sample.
   *
   *
   * It requires Prometheus >= v2.27.0.
   *
   * @schema PodMonitorSpec#labelValueLengthLimit
   */
  readonly labelValueLengthLimit?: number;

  /**
   * Selector to select which namespaces the Kubernetes `Pods` objects
   * are discovered from.
   *
   * @schema PodMonitorSpec#namespaceSelector
   */
  readonly namespaceSelector?: PodMonitorSpecNamespaceSelector;

  /**
   * List of endpoints part of this PodMonitor.
   *
   * @schema PodMonitorSpec#podMetricsEndpoints
   */
  readonly podMetricsEndpoints?: PodMonitorSpecPodMetricsEndpoints[];

  /**
   * `podTargetLabels` defines the labels which are transferred from the
   * associated Kubernetes `Pod` object onto the ingested metrics.
   *
   * @schema PodMonitorSpec#podTargetLabels
   */
  readonly podTargetLabels?: string[];

  /**
   * `sampleLimit` defines a per-scrape limit on the number of scraped samples
   * that will be accepted.
   *
   * @schema PodMonitorSpec#sampleLimit
   */
  readonly sampleLimit?: number;

  /**
   * The scrape class to apply.
   *
   * @schema PodMonitorSpec#scrapeClass
   */
  readonly scrapeClass?: string;

  /**
   * `scrapeProtocols` defines the protocols to negotiate during a scrape. It tells clients the
   * protocols supported by Prometheus in order of preference (from most to least preferred).
   *
   *
   * If unset, Prometheus uses its default value.
   *
   *
   * It requires Prometheus >= v2.49.0.
   *
   * @schema PodMonitorSpec#scrapeProtocols
   */
  readonly scrapeProtocols?: PodMonitorSpecScrapeProtocols[];

  /**
   * Label selector to select the Kubernetes `Pod` objects.
   *
   * @schema PodMonitorSpec#selector
   */
  readonly selector: PodMonitorSpecSelector;

  /**
   * `targetLimit` defines a limit on the number of scraped targets that will
   * be accepted.
   *
   * @schema PodMonitorSpec#targetLimit
   */
  readonly targetLimit?: number;

}

/**
 * Converts an object of type 'PodMonitorSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodMonitorSpec(obj: PodMonitorSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'attachMetadata': toJson_PodMonitorSpecAttachMetadata(obj.attachMetadata),
    'bodySizeLimit': obj.bodySizeLimit,
    'jobLabel': obj.jobLabel,
    'keepDroppedTargets': obj.keepDroppedTargets,
    'labelLimit': obj.labelLimit,
    'labelNameLengthLimit': obj.labelNameLengthLimit,
    'labelValueLengthLimit': obj.labelValueLengthLimit,
    'namespaceSelector': toJson_PodMonitorSpecNamespaceSelector(obj.namespaceSelector),
    'podMetricsEndpoints': obj.podMetricsEndpoints?.map(y => toJson_PodMonitorSpecPodMetricsEndpoints(y)),
    'podTargetLabels': obj.podTargetLabels?.map(y => y),
    'sampleLimit': obj.sampleLimit,
    'scrapeClass': obj.scrapeClass,
    'scrapeProtocols': obj.scrapeProtocols?.map(y => y),
    'selector': toJson_PodMonitorSpecSelector(obj.selector),
    'targetLimit': obj.targetLimit,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * `attachMetadata` defines additional metadata which is added to the
 * discovered targets.
 *
 *
 * It requires Prometheus >= v2.37.0.
 *
 * @schema PodMonitorSpecAttachMetadata
 */
export interface PodMonitorSpecAttachMetadata {
  /**
   * When set to true, Prometheus must have the `get` permission on the
   * `Nodes` objects.
   *
   * @schema PodMonitorSpecAttachMetadata#node
   */
  readonly node?: boolean;

}

/**
 * Converts an object of type 'PodMonitorSpecAttachMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodMonitorSpecAttachMetadata(obj: PodMonitorSpecAttachMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'node': obj.node,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Selector to select which namespaces the Kubernetes `Pods` objects
 * are discovered from.
 *
 * @schema PodMonitorSpecNamespaceSelector
 */
export interface PodMonitorSpecNamespaceSelector {
  /**
   * Boolean describing whether all namespaces are selected in contrast to a
   * list restricting them.
   *
   * @schema PodMonitorSpecNamespaceSelector#any
   */
  readonly any?: boolean;

  /**
   * List of namespace names to select from.
   *
   * @schema PodMonitorSpecNamespaceSelector#matchNames
   */
  readonly matchNames?: string[];

}

/**
 * Converts an object of type 'PodMonitorSpecNamespaceSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodMonitorSpecNamespaceSelector(obj: PodMonitorSpecNamespaceSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'any': obj.any,
    'matchNames': obj.matchNames?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PodMetricsEndpoint defines an endpoint serving Prometheus metrics to be scraped by
 * Prometheus.
 *
 * @schema PodMonitorSpecPodMetricsEndpoints
 */
export interface PodMonitorSpecPodMetricsEndpoints {
  /**
   * `authorization` configures the Authorization header credentials to use when
   * scraping the target.
   *
   *
   * Cannot be set at the same time as `basicAuth`, or `oauth2`.
   *
   * @schema PodMonitorSpecPodMetricsEndpoints#authorization
   */
  readonly authorization?: PodMonitorSpecPodMetricsEndpointsAuthorization;

  /**
   * `basicAuth` configures the Basic Authentication credentials to use when
   * scraping the target.
   *
   *
   * Cannot be set at the same time as `authorization`, or `oauth2`.
   *
   * @schema PodMonitorSpecPodMetricsEndpoints#basicAuth
   */
  readonly basicAuth?: PodMonitorSpecPodMetricsEndpointsBasicAuth;

  /**
   * `bearerTokenSecret` specifies a key of a Secret containing the bearer
   * token for scraping targets. The secret needs to be in the same namespace
   * as the PodMonitor object and readable by the Prometheus Operator.
   *
   *
   * Deprecated: use `authorization` instead.
   *
   * @schema PodMonitorSpecPodMetricsEndpoints#bearerTokenSecret
   */
  readonly bearerTokenSecret?: PodMonitorSpecPodMetricsEndpointsBearerTokenSecret;

  /**
   * `enableHttp2` can be used to disable HTTP2 when scraping the target.
   *
   * @schema PodMonitorSpecPodMetricsEndpoints#enableHttp2
   */
  readonly enableHttp2?: boolean;

  /**
   * When true, the pods which are not running (e.g. either in Failed or
   * Succeeded state) are dropped during the target discovery.
   *
   *
   * If unset, the filtering is enabled.
   *
   *
   * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#pod-phase
   *
   * @schema PodMonitorSpecPodMetricsEndpoints#filterRunning
   */
  readonly filterRunning?: boolean;

  /**
   * `followRedirects` defines whether the scrape requests should follow HTTP
   * 3xx redirects.
   *
   * @schema PodMonitorSpecPodMetricsEndpoints#followRedirects
   */
  readonly followRedirects?: boolean;

  /**
   * When true, `honorLabels` preserves the metric's labels when they collide
   * with the target's labels.
   *
   * @schema PodMonitorSpecPodMetricsEndpoints#honorLabels
   */
  readonly honorLabels?: boolean;

  /**
   * `honorTimestamps` controls whether Prometheus preserves the timestamps
   * when exposed by the target.
   *
   * @schema PodMonitorSpecPodMetricsEndpoints#honorTimestamps
   */
  readonly honorTimestamps?: boolean;

  /**
   * Interval at which Prometheus scrapes the metrics from the target.
   *
   *
   * If empty, Prometheus uses the global scrape interval.
   *
   * @schema PodMonitorSpecPodMetricsEndpoints#interval
   */
  readonly interval?: string;

  /**
   * `metricRelabelings` configures the relabeling rules to apply to the
   * samples before ingestion.
   *
   * @schema PodMonitorSpecPodMetricsEndpoints#metricRelabelings
   */
  readonly metricRelabelings?: PodMonitorSpecPodMetricsEndpointsMetricRelabelings[];

  /**
   * `oauth2` configures the OAuth2 settings to use when scraping the target.
   *
   *
   * It requires Prometheus >= 2.27.0.
   *
   *
   * Cannot be set at the same time as `authorization`, or `basicAuth`.
   *
   * @schema PodMonitorSpecPodMetricsEndpoints#oauth2
   */
  readonly oauth2?: PodMonitorSpecPodMetricsEndpointsOauth2;

  /**
   * `params` define optional HTTP URL parameters.
   *
   * @schema PodMonitorSpecPodMetricsEndpoints#params
   */
  readonly params?: { [key: string]: string[] };

  /**
   * HTTP path from which to scrape for metrics.
   *
   *
   * If empty, Prometheus uses the default value (e.g. `/metrics`).
   *
   * @schema PodMonitorSpecPodMetricsEndpoints#path
   */
  readonly path?: string;

  /**
   * Name of the Pod port which this endpoint refers to.
   *
   *
   * It takes precedence over `targetPort`.
   *
   * @schema PodMonitorSpecPodMetricsEndpoints#port
   */
  readonly port?: string;

  /**
   * `proxyURL` configures the HTTP Proxy URL (e.g.
   * "http://proxyserver:2195") to go through when scraping the target.
   *
   * @schema PodMonitorSpecPodMetricsEndpoints#proxyUrl
   */
  readonly proxyUrl?: string;

  /**
   * `relabelings` configures the relabeling rules to apply the target's
   * metadata labels.
   *
   *
   * The Operator automatically adds relabelings for a few standard Kubernetes fields.
   *
   *
   * The original scrape job's name is available via the `__tmp_prometheus_job_name` label.
   *
   *
   * More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config
   *
   * @schema PodMonitorSpecPodMetricsEndpoints#relabelings
   */
  readonly relabelings?: PodMonitorSpecPodMetricsEndpointsRelabelings[];

  /**
   * HTTP scheme to use for scraping.
   *
   *
   * `http` and `https` are the expected values unless you rewrite the
   * `__scheme__` label via relabeling.
   *
   *
   * If empty, Prometheus uses the default value `http`.
   *
   * @schema PodMonitorSpecPodMetricsEndpoints#scheme
   */
  readonly scheme?: PodMonitorSpecPodMetricsEndpointsScheme;

  /**
   * Timeout after which Prometheus considers the scrape to be failed.
   *
   *
   * If empty, Prometheus uses the global scrape timeout unless it is less
   * than the target's scrape interval value in which the latter is used.
   *
   * @schema PodMonitorSpecPodMetricsEndpoints#scrapeTimeout
   */
  readonly scrapeTimeout?: string;

  /**
   * Name or number of the target port of the `Pod` object behind the Service, the
   * port must be specified with container port property.
   *
   *
   * Deprecated: use 'port' instead.
   *
   * @schema PodMonitorSpecPodMetricsEndpoints#targetPort
   */
  readonly targetPort?: PodMonitorSpecPodMetricsEndpointsTargetPort;

  /**
   * TLS configuration to use when scraping the target.
   *
   * @schema PodMonitorSpecPodMetricsEndpoints#tlsConfig
   */
  readonly tlsConfig?: PodMonitorSpecPodMetricsEndpointsTlsConfig;

  /**
   * `trackTimestampsStaleness` defines whether Prometheus tracks staleness of
   * the metrics that have an explicit timestamp present in scraped data.
   * Has no effect if `honorTimestamps` is false.
   *
   *
   * It requires Prometheus >= v2.48.0.
   *
   * @schema PodMonitorSpecPodMetricsEndpoints#trackTimestampsStaleness
   */
  readonly trackTimestampsStaleness?: boolean;

}

/**
 * Converts an object of type 'PodMonitorSpecPodMetricsEndpoints' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodMonitorSpecPodMetricsEndpoints(obj: PodMonitorSpecPodMetricsEndpoints | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'authorization': toJson_PodMonitorSpecPodMetricsEndpointsAuthorization(obj.authorization),
    'basicAuth': toJson_PodMonitorSpecPodMetricsEndpointsBasicAuth(obj.basicAuth),
    'bearerTokenSecret': toJson_PodMonitorSpecPodMetricsEndpointsBearerTokenSecret(obj.bearerTokenSecret),
    'enableHttp2': obj.enableHttp2,
    'filterRunning': obj.filterRunning,
    'followRedirects': obj.followRedirects,
    'honorLabels': obj.honorLabels,
    'honorTimestamps': obj.honorTimestamps,
    'interval': obj.interval,
    'metricRelabelings': obj.metricRelabelings?.map(y => toJson_PodMonitorSpecPodMetricsEndpointsMetricRelabelings(y)),
    'oauth2': toJson_PodMonitorSpecPodMetricsEndpointsOauth2(obj.oauth2),
    'params': ((obj.params) === undefined) ? undefined : (Object.entries(obj.params).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1]?.map(y => y) }), {})),
    'path': obj.path,
    'port': obj.port,
    'proxyUrl': obj.proxyUrl,
    'relabelings': obj.relabelings?.map(y => toJson_PodMonitorSpecPodMetricsEndpointsRelabelings(y)),
    'scheme': obj.scheme,
    'scrapeTimeout': obj.scrapeTimeout,
    'targetPort': obj.targetPort?.value,
    'tlsConfig': toJson_PodMonitorSpecPodMetricsEndpointsTlsConfig(obj.tlsConfig),
    'trackTimestampsStaleness': obj.trackTimestampsStaleness,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ScrapeProtocol represents a protocol used by Prometheus for scraping metrics.
 * Supported values are:
 * * `OpenMetricsText0.0.1`
 * * `OpenMetricsText1.0.0`
 * * `PrometheusProto`
 * * `PrometheusText0.0.4`
 *
 * @schema PodMonitorSpecScrapeProtocols
 */
export enum PodMonitorSpecScrapeProtocols {
  /** PrometheusProto */
  PROMETHEUS_PROTO = "PrometheusProto",
  /** OpenMetricsText0.0.1 */
  OPEN_METRICS_TEXT0_0_1 = "OpenMetricsText0.0.1",
  /** OpenMetricsText1.0.0 */
  OPEN_METRICS_TEXT1_0_0 = "OpenMetricsText1.0.0",
  /** PrometheusText0.0.4 */
  PROMETHEUS_TEXT0_0_4 = "PrometheusText0.0.4",
}

/**
 * Label selector to select the Kubernetes `Pod` objects.
 *
 * @schema PodMonitorSpecSelector
 */
export interface PodMonitorSpecSelector {
  /**
   * matchExpressions is a list of label selector requirements. The requirements are ANDed.
   *
   * @schema PodMonitorSpecSelector#matchExpressions
   */
  readonly matchExpressions?: PodMonitorSpecSelectorMatchExpressions[];

  /**
   * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
   * map is equivalent to an element of matchExpressions, whose key field is "key", the
   * operator is "In", and the values array contains only "value". The requirements are ANDed.
   *
   * @schema PodMonitorSpecSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * Converts an object of type 'PodMonitorSpecSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodMonitorSpecSelector(obj: PodMonitorSpecSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchExpressions': obj.matchExpressions?.map(y => toJson_PodMonitorSpecSelectorMatchExpressions(y)),
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * `authorization` configures the Authorization header credentials to use when
 * scraping the target.
 *
 *
 * Cannot be set at the same time as `basicAuth`, or `oauth2`.
 *
 * @schema PodMonitorSpecPodMetricsEndpointsAuthorization
 */
export interface PodMonitorSpecPodMetricsEndpointsAuthorization {
  /**
   * Selects a key of a Secret in the namespace that contains the credentials for authentication.
   *
   * @schema PodMonitorSpecPodMetricsEndpointsAuthorization#credentials
   */
  readonly credentials?: PodMonitorSpecPodMetricsEndpointsAuthorizationCredentials;

  /**
   * Defines the authentication type. The value is case-insensitive.
   *
   *
   * "Basic" is not a supported value.
   *
   *
   * Default: "Bearer"
   *
   * @schema PodMonitorSpecPodMetricsEndpointsAuthorization#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'PodMonitorSpecPodMetricsEndpointsAuthorization' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodMonitorSpecPodMetricsEndpointsAuthorization(obj: PodMonitorSpecPodMetricsEndpointsAuthorization | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'credentials': toJson_PodMonitorSpecPodMetricsEndpointsAuthorizationCredentials(obj.credentials),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * `basicAuth` configures the Basic Authentication credentials to use when
 * scraping the target.
 *
 *
 * Cannot be set at the same time as `authorization`, or `oauth2`.
 *
 * @schema PodMonitorSpecPodMetricsEndpointsBasicAuth
 */
export interface PodMonitorSpecPodMetricsEndpointsBasicAuth {
  /**
   * `password` specifies a key of a Secret containing the password for
   * authentication.
   *
   * @schema PodMonitorSpecPodMetricsEndpointsBasicAuth#password
   */
  readonly password?: PodMonitorSpecPodMetricsEndpointsBasicAuthPassword;

  /**
   * `username` specifies a key of a Secret containing the username for
   * authentication.
   *
   * @schema PodMonitorSpecPodMetricsEndpointsBasicAuth#username
   */
  readonly username?: PodMonitorSpecPodMetricsEndpointsBasicAuthUsername;

}

/**
 * Converts an object of type 'PodMonitorSpecPodMetricsEndpointsBasicAuth' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodMonitorSpecPodMetricsEndpointsBasicAuth(obj: PodMonitorSpecPodMetricsEndpointsBasicAuth | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'password': toJson_PodMonitorSpecPodMetricsEndpointsBasicAuthPassword(obj.password),
    'username': toJson_PodMonitorSpecPodMetricsEndpointsBasicAuthUsername(obj.username),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * `bearerTokenSecret` specifies a key of a Secret containing the bearer
 * token for scraping targets. The secret needs to be in the same namespace
 * as the PodMonitor object and readable by the Prometheus Operator.
 *
 *
 * Deprecated: use `authorization` instead.
 *
 * @schema PodMonitorSpecPodMetricsEndpointsBearerTokenSecret
 */
export interface PodMonitorSpecPodMetricsEndpointsBearerTokenSecret {
  /**
   * The key of the secret to select from.  Must be a valid secret key.
   *
   * @schema PodMonitorSpecPodMetricsEndpointsBearerTokenSecret#key
   */
  readonly key: string;

  /**
   * Name of the referent.
   * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   * TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PodMonitorSpecPodMetricsEndpointsBearerTokenSecret#name
   */
  readonly name?: string;

  /**
   * Specify whether the Secret or its key must be defined
   *
   * @schema PodMonitorSpecPodMetricsEndpointsBearerTokenSecret#optional
   */
  readonly optional?: boolean;

}

/**
 * Converts an object of type 'PodMonitorSpecPodMetricsEndpointsBearerTokenSecret' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodMonitorSpecPodMetricsEndpointsBearerTokenSecret(obj: PodMonitorSpecPodMetricsEndpointsBearerTokenSecret | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'name': obj.name,
    'optional': obj.optional,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RelabelConfig allows dynamic rewriting of the label set for targets, alerts,
 * scraped samples and remote write samples.
 *
 *
 * More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config
 *
 * @schema PodMonitorSpecPodMetricsEndpointsMetricRelabelings
 */
export interface PodMonitorSpecPodMetricsEndpointsMetricRelabelings {
  /**
   * Action to perform based on the regex matching.
   *
   *
   * `Uppercase` and `Lowercase` actions require Prometheus >= v2.36.0.
   * `DropEqual` and `KeepEqual` actions require Prometheus >= v2.41.0.
   *
   *
   * Default: "Replace"
   *
   * @schema PodMonitorSpecPodMetricsEndpointsMetricRelabelings#action
   */
  readonly action?: PodMonitorSpecPodMetricsEndpointsMetricRelabelingsAction;

  /**
   * Modulus to take of the hash of the source label values.
   *
   *
   * Only applicable when the action is `HashMod`.
   *
   * @schema PodMonitorSpecPodMetricsEndpointsMetricRelabelings#modulus
   */
  readonly modulus?: number;

  /**
   * Regular expression against which the extracted value is matched.
   *
   * @schema PodMonitorSpecPodMetricsEndpointsMetricRelabelings#regex
   */
  readonly regex?: string;

  /**
   * Replacement value against which a Replace action is performed if the
   * regular expression matches.
   *
   *
   * Regex capture groups are available.
   *
   * @schema PodMonitorSpecPodMetricsEndpointsMetricRelabelings#replacement
   */
  readonly replacement?: string;

  /**
   * Separator is the string between concatenated SourceLabels.
   *
   * @schema PodMonitorSpecPodMetricsEndpointsMetricRelabelings#separator
   */
  readonly separator?: string;

  /**
   * The source labels select values from existing labels. Their content is
   * concatenated using the configured Separator and matched against the
   * configured regular expression.
   *
   * @schema PodMonitorSpecPodMetricsEndpointsMetricRelabelings#sourceLabels
   */
  readonly sourceLabels?: string[];

  /**
   * Label to which the resulting string is written in a replacement.
   *
   *
   * It is mandatory for `Replace`, `HashMod`, `Lowercase`, `Uppercase`,
   * `KeepEqual` and `DropEqual` actions.
   *
   *
   * Regex capture groups are available.
   *
   * @schema PodMonitorSpecPodMetricsEndpointsMetricRelabelings#targetLabel
   */
  readonly targetLabel?: string;

}

/**
 * Converts an object of type 'PodMonitorSpecPodMetricsEndpointsMetricRelabelings' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodMonitorSpecPodMetricsEndpointsMetricRelabelings(obj: PodMonitorSpecPodMetricsEndpointsMetricRelabelings | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'action': obj.action,
    'modulus': obj.modulus,
    'regex': obj.regex,
    'replacement': obj.replacement,
    'separator': obj.separator,
    'sourceLabels': obj.sourceLabels?.map(y => y),
    'targetLabel': obj.targetLabel,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * `oauth2` configures the OAuth2 settings to use when scraping the target.
 *
 *
 * It requires Prometheus >= 2.27.0.
 *
 *
 * Cannot be set at the same time as `authorization`, or `basicAuth`.
 *
 * @schema PodMonitorSpecPodMetricsEndpointsOauth2
 */
export interface PodMonitorSpecPodMetricsEndpointsOauth2 {
  /**
   * `clientId` specifies a key of a Secret or ConfigMap containing the
   * OAuth2 client's ID.
   *
   * @schema PodMonitorSpecPodMetricsEndpointsOauth2#clientId
   */
  readonly clientId: PodMonitorSpecPodMetricsEndpointsOauth2ClientId;

  /**
   * `clientSecret` specifies a key of a Secret containing the OAuth2
   * client's secret.
   *
   * @schema PodMonitorSpecPodMetricsEndpointsOauth2#clientSecret
   */
  readonly clientSecret: PodMonitorSpecPodMetricsEndpointsOauth2ClientSecret;

  /**
   * `endpointParams` configures the HTTP parameters to append to the token
   * URL.
   *
   * @schema PodMonitorSpecPodMetricsEndpointsOauth2#endpointParams
   */
  readonly endpointParams?: { [key: string]: string };

  /**
   * `scopes` defines the OAuth2 scopes used for the token request.
   *
   * @schema PodMonitorSpecPodMetricsEndpointsOauth2#scopes
   */
  readonly scopes?: string[];

  /**
   * `tokenURL` configures the URL to fetch the token from.
   *
   * @schema PodMonitorSpecPodMetricsEndpointsOauth2#tokenUrl
   */
  readonly tokenUrl: string;

}

/**
 * Converts an object of type 'PodMonitorSpecPodMetricsEndpointsOauth2' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodMonitorSpecPodMetricsEndpointsOauth2(obj: PodMonitorSpecPodMetricsEndpointsOauth2 | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'clientId': toJson_PodMonitorSpecPodMetricsEndpointsOauth2ClientId(obj.clientId),
    'clientSecret': toJson_PodMonitorSpecPodMetricsEndpointsOauth2ClientSecret(obj.clientSecret),
    'endpointParams': ((obj.endpointParams) === undefined) ? undefined : (Object.entries(obj.endpointParams).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'scopes': obj.scopes?.map(y => y),
    'tokenUrl': obj.tokenUrl,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RelabelConfig allows dynamic rewriting of the label set for targets, alerts,
 * scraped samples and remote write samples.
 *
 *
 * More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config
 *
 * @schema PodMonitorSpecPodMetricsEndpointsRelabelings
 */
export interface PodMonitorSpecPodMetricsEndpointsRelabelings {
  /**
   * Action to perform based on the regex matching.
   *
   *
   * `Uppercase` and `Lowercase` actions require Prometheus >= v2.36.0.
   * `DropEqual` and `KeepEqual` actions require Prometheus >= v2.41.0.
   *
   *
   * Default: "Replace"
   *
   * @schema PodMonitorSpecPodMetricsEndpointsRelabelings#action
   */
  readonly action?: PodMonitorSpecPodMetricsEndpointsRelabelingsAction;

  /**
   * Modulus to take of the hash of the source label values.
   *
   *
   * Only applicable when the action is `HashMod`.
   *
   * @schema PodMonitorSpecPodMetricsEndpointsRelabelings#modulus
   */
  readonly modulus?: number;

  /**
   * Regular expression against which the extracted value is matched.
   *
   * @schema PodMonitorSpecPodMetricsEndpointsRelabelings#regex
   */
  readonly regex?: string;

  /**
   * Replacement value against which a Replace action is performed if the
   * regular expression matches.
   *
   *
   * Regex capture groups are available.
   *
   * @schema PodMonitorSpecPodMetricsEndpointsRelabelings#replacement
   */
  readonly replacement?: string;

  /**
   * Separator is the string between concatenated SourceLabels.
   *
   * @schema PodMonitorSpecPodMetricsEndpointsRelabelings#separator
   */
  readonly separator?: string;

  /**
   * The source labels select values from existing labels. Their content is
   * concatenated using the configured Separator and matched against the
   * configured regular expression.
   *
   * @schema PodMonitorSpecPodMetricsEndpointsRelabelings#sourceLabels
   */
  readonly sourceLabels?: string[];

  /**
   * Label to which the resulting string is written in a replacement.
   *
   *
   * It is mandatory for `Replace`, `HashMod`, `Lowercase`, `Uppercase`,
   * `KeepEqual` and `DropEqual` actions.
   *
   *
   * Regex capture groups are available.
   *
   * @schema PodMonitorSpecPodMetricsEndpointsRelabelings#targetLabel
   */
  readonly targetLabel?: string;

}

/**
 * Converts an object of type 'PodMonitorSpecPodMetricsEndpointsRelabelings' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodMonitorSpecPodMetricsEndpointsRelabelings(obj: PodMonitorSpecPodMetricsEndpointsRelabelings | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'action': obj.action,
    'modulus': obj.modulus,
    'regex': obj.regex,
    'replacement': obj.replacement,
    'separator': obj.separator,
    'sourceLabels': obj.sourceLabels?.map(y => y),
    'targetLabel': obj.targetLabel,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTP scheme to use for scraping.
 *
 *
 * `http` and `https` are the expected values unless you rewrite the
 * `__scheme__` label via relabeling.
 *
 *
 * If empty, Prometheus uses the default value `http`.
 *
 * @schema PodMonitorSpecPodMetricsEndpointsScheme
 */
export enum PodMonitorSpecPodMetricsEndpointsScheme {
  /** http */
  HTTP = "http",
  /** https */
  HTTPS = "https",
}

/**
 * Name or number of the target port of the `Pod` object behind the Service, the
 * port must be specified with container port property.
 *
 *
 * Deprecated: use 'port' instead.
 *
 * @schema PodMonitorSpecPodMetricsEndpointsTargetPort
 */
export class PodMonitorSpecPodMetricsEndpointsTargetPort {
  public static fromNumber(value: number): PodMonitorSpecPodMetricsEndpointsTargetPort {
    return new PodMonitorSpecPodMetricsEndpointsTargetPort(value);
  }
  public static fromString(value: string): PodMonitorSpecPodMetricsEndpointsTargetPort {
    return new PodMonitorSpecPodMetricsEndpointsTargetPort(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * TLS configuration to use when scraping the target.
 *
 * @schema PodMonitorSpecPodMetricsEndpointsTlsConfig
 */
export interface PodMonitorSpecPodMetricsEndpointsTlsConfig {
  /**
   * Certificate authority used when verifying server certificates.
   *
   * @schema PodMonitorSpecPodMetricsEndpointsTlsConfig#ca
   */
  readonly ca?: PodMonitorSpecPodMetricsEndpointsTlsConfigCa;

  /**
   * Client certificate to present when doing client-authentication.
   *
   * @schema PodMonitorSpecPodMetricsEndpointsTlsConfig#cert
   */
  readonly cert?: PodMonitorSpecPodMetricsEndpointsTlsConfigCert;

  /**
   * Disable target certificate validation.
   *
   * @schema PodMonitorSpecPodMetricsEndpointsTlsConfig#insecureSkipVerify
   */
  readonly insecureSkipVerify?: boolean;

  /**
   * Secret containing the client key file for the targets.
   *
   * @schema PodMonitorSpecPodMetricsEndpointsTlsConfig#keySecret
   */
  readonly keySecret?: PodMonitorSpecPodMetricsEndpointsTlsConfigKeySecret;

  /**
   * Used to verify the hostname for the targets.
   *
   * @schema PodMonitorSpecPodMetricsEndpointsTlsConfig#serverName
   */
  readonly serverName?: string;

}

/**
 * Converts an object of type 'PodMonitorSpecPodMetricsEndpointsTlsConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodMonitorSpecPodMetricsEndpointsTlsConfig(obj: PodMonitorSpecPodMetricsEndpointsTlsConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ca': toJson_PodMonitorSpecPodMetricsEndpointsTlsConfigCa(obj.ca),
    'cert': toJson_PodMonitorSpecPodMetricsEndpointsTlsConfigCert(obj.cert),
    'insecureSkipVerify': obj.insecureSkipVerify,
    'keySecret': toJson_PodMonitorSpecPodMetricsEndpointsTlsConfigKeySecret(obj.keySecret),
    'serverName': obj.serverName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A label selector requirement is a selector that contains values, a key, and an operator that
 * relates the key and values.
 *
 * @schema PodMonitorSpecSelectorMatchExpressions
 */
export interface PodMonitorSpecSelectorMatchExpressions {
  /**
   * key is the label key that the selector applies to.
   *
   * @schema PodMonitorSpecSelectorMatchExpressions#key
   */
  readonly key: string;

  /**
   * operator represents a key's relationship to a set of values.
   * Valid operators are In, NotIn, Exists and DoesNotExist.
   *
   * @schema PodMonitorSpecSelectorMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * values is an array of string values. If the operator is In or NotIn,
   * the values array must be non-empty. If the operator is Exists or DoesNotExist,
   * the values array must be empty. This array is replaced during a strategic
   * merge patch.
   *
   * @schema PodMonitorSpecSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * Converts an object of type 'PodMonitorSpecSelectorMatchExpressions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodMonitorSpecSelectorMatchExpressions(obj: PodMonitorSpecSelectorMatchExpressions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'operator': obj.operator,
    'values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Selects a key of a Secret in the namespace that contains the credentials for authentication.
 *
 * @schema PodMonitorSpecPodMetricsEndpointsAuthorizationCredentials
 */
export interface PodMonitorSpecPodMetricsEndpointsAuthorizationCredentials {
  /**
   * The key of the secret to select from.  Must be a valid secret key.
   *
   * @schema PodMonitorSpecPodMetricsEndpointsAuthorizationCredentials#key
   */
  readonly key: string;

  /**
   * Name of the referent.
   * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   * TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PodMonitorSpecPodMetricsEndpointsAuthorizationCredentials#name
   */
  readonly name?: string;

  /**
   * Specify whether the Secret or its key must be defined
   *
   * @schema PodMonitorSpecPodMetricsEndpointsAuthorizationCredentials#optional
   */
  readonly optional?: boolean;

}

/**
 * Converts an object of type 'PodMonitorSpecPodMetricsEndpointsAuthorizationCredentials' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodMonitorSpecPodMetricsEndpointsAuthorizationCredentials(obj: PodMonitorSpecPodMetricsEndpointsAuthorizationCredentials | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'name': obj.name,
    'optional': obj.optional,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * `password` specifies a key of a Secret containing the password for
 * authentication.
 *
 * @schema PodMonitorSpecPodMetricsEndpointsBasicAuthPassword
 */
export interface PodMonitorSpecPodMetricsEndpointsBasicAuthPassword {
  /**
   * The key of the secret to select from.  Must be a valid secret key.
   *
   * @schema PodMonitorSpecPodMetricsEndpointsBasicAuthPassword#key
   */
  readonly key: string;

  /**
   * Name of the referent.
   * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   * TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PodMonitorSpecPodMetricsEndpointsBasicAuthPassword#name
   */
  readonly name?: string;

  /**
   * Specify whether the Secret or its key must be defined
   *
   * @schema PodMonitorSpecPodMetricsEndpointsBasicAuthPassword#optional
   */
  readonly optional?: boolean;

}

/**
 * Converts an object of type 'PodMonitorSpecPodMetricsEndpointsBasicAuthPassword' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodMonitorSpecPodMetricsEndpointsBasicAuthPassword(obj: PodMonitorSpecPodMetricsEndpointsBasicAuthPassword | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'name': obj.name,
    'optional': obj.optional,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * `username` specifies a key of a Secret containing the username for
 * authentication.
 *
 * @schema PodMonitorSpecPodMetricsEndpointsBasicAuthUsername
 */
export interface PodMonitorSpecPodMetricsEndpointsBasicAuthUsername {
  /**
   * The key of the secret to select from.  Must be a valid secret key.
   *
   * @schema PodMonitorSpecPodMetricsEndpointsBasicAuthUsername#key
   */
  readonly key: string;

  /**
   * Name of the referent.
   * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   * TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PodMonitorSpecPodMetricsEndpointsBasicAuthUsername#name
   */
  readonly name?: string;

  /**
   * Specify whether the Secret or its key must be defined
   *
   * @schema PodMonitorSpecPodMetricsEndpointsBasicAuthUsername#optional
   */
  readonly optional?: boolean;

}

/**
 * Converts an object of type 'PodMonitorSpecPodMetricsEndpointsBasicAuthUsername' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodMonitorSpecPodMetricsEndpointsBasicAuthUsername(obj: PodMonitorSpecPodMetricsEndpointsBasicAuthUsername | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'name': obj.name,
    'optional': obj.optional,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Action to perform based on the regex matching.
 *
 *
 * `Uppercase` and `Lowercase` actions require Prometheus >= v2.36.0.
 * `DropEqual` and `KeepEqual` actions require Prometheus >= v2.41.0.
 *
 *
 * Default: "Replace"
 *
 * @schema PodMonitorSpecPodMetricsEndpointsMetricRelabelingsAction
 */
export enum PodMonitorSpecPodMetricsEndpointsMetricRelabelingsAction {
  /** replace */
  REPLACE = "replace",
  /** keep */
  KEEP = "keep",
  /** drop */
  DROP = "drop",
  /** hashmod */
  HASHMOD = "hashmod",
  /** labelmap */
  LABELMAP = "labelmap",
  /** labeldrop */
  LABELDROP = "labeldrop",
  /** labelkeep */
  LABELKEEP = "labelkeep",
  /** lowercase */
  LOWERCASE = "lowercase",
  /** uppercase */
  UPPERCASE = "uppercase",
  /** keepequal */
  KEEPEQUAL = "keepequal",
  /** dropequal */
  DROPEQUAL = "dropequal",
}

/**
 * `clientId` specifies a key of a Secret or ConfigMap containing the
 * OAuth2 client's ID.
 *
 * @schema PodMonitorSpecPodMetricsEndpointsOauth2ClientId
 */
export interface PodMonitorSpecPodMetricsEndpointsOauth2ClientId {
  /**
   * ConfigMap containing data to use for the targets.
   *
   * @schema PodMonitorSpecPodMetricsEndpointsOauth2ClientId#configMap
   */
  readonly configMap?: PodMonitorSpecPodMetricsEndpointsOauth2ClientIdConfigMap;

  /**
   * Secret containing data to use for the targets.
   *
   * @schema PodMonitorSpecPodMetricsEndpointsOauth2ClientId#secret
   */
  readonly secret?: PodMonitorSpecPodMetricsEndpointsOauth2ClientIdSecret;

}

/**
 * Converts an object of type 'PodMonitorSpecPodMetricsEndpointsOauth2ClientId' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodMonitorSpecPodMetricsEndpointsOauth2ClientId(obj: PodMonitorSpecPodMetricsEndpointsOauth2ClientId | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configMap': toJson_PodMonitorSpecPodMetricsEndpointsOauth2ClientIdConfigMap(obj.configMap),
    'secret': toJson_PodMonitorSpecPodMetricsEndpointsOauth2ClientIdSecret(obj.secret),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * `clientSecret` specifies a key of a Secret containing the OAuth2
 * client's secret.
 *
 * @schema PodMonitorSpecPodMetricsEndpointsOauth2ClientSecret
 */
export interface PodMonitorSpecPodMetricsEndpointsOauth2ClientSecret {
  /**
   * The key of the secret to select from.  Must be a valid secret key.
   *
   * @schema PodMonitorSpecPodMetricsEndpointsOauth2ClientSecret#key
   */
  readonly key: string;

  /**
   * Name of the referent.
   * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   * TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PodMonitorSpecPodMetricsEndpointsOauth2ClientSecret#name
   */
  readonly name?: string;

  /**
   * Specify whether the Secret or its key must be defined
   *
   * @schema PodMonitorSpecPodMetricsEndpointsOauth2ClientSecret#optional
   */
  readonly optional?: boolean;

}

/**
 * Converts an object of type 'PodMonitorSpecPodMetricsEndpointsOauth2ClientSecret' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodMonitorSpecPodMetricsEndpointsOauth2ClientSecret(obj: PodMonitorSpecPodMetricsEndpointsOauth2ClientSecret | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'name': obj.name,
    'optional': obj.optional,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Action to perform based on the regex matching.
 *
 *
 * `Uppercase` and `Lowercase` actions require Prometheus >= v2.36.0.
 * `DropEqual` and `KeepEqual` actions require Prometheus >= v2.41.0.
 *
 *
 * Default: "Replace"
 *
 * @schema PodMonitorSpecPodMetricsEndpointsRelabelingsAction
 */
export enum PodMonitorSpecPodMetricsEndpointsRelabelingsAction {
  /** replace */
  REPLACE = "replace",
  /** keep */
  KEEP = "keep",
  /** drop */
  DROP = "drop",
  /** hashmod */
  HASHMOD = "hashmod",
  /** labelmap */
  LABELMAP = "labelmap",
  /** labeldrop */
  LABELDROP = "labeldrop",
  /** labelkeep */
  LABELKEEP = "labelkeep",
  /** lowercase */
  LOWERCASE = "lowercase",
  /** uppercase */
  UPPERCASE = "uppercase",
  /** keepequal */
  KEEPEQUAL = "keepequal",
  /** dropequal */
  DROPEQUAL = "dropequal",
}

/**
 * Certificate authority used when verifying server certificates.
 *
 * @schema PodMonitorSpecPodMetricsEndpointsTlsConfigCa
 */
export interface PodMonitorSpecPodMetricsEndpointsTlsConfigCa {
  /**
   * ConfigMap containing data to use for the targets.
   *
   * @schema PodMonitorSpecPodMetricsEndpointsTlsConfigCa#configMap
   */
  readonly configMap?: PodMonitorSpecPodMetricsEndpointsTlsConfigCaConfigMap;

  /**
   * Secret containing data to use for the targets.
   *
   * @schema PodMonitorSpecPodMetricsEndpointsTlsConfigCa#secret
   */
  readonly secret?: PodMonitorSpecPodMetricsEndpointsTlsConfigCaSecret;

}

/**
 * Converts an object of type 'PodMonitorSpecPodMetricsEndpointsTlsConfigCa' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodMonitorSpecPodMetricsEndpointsTlsConfigCa(obj: PodMonitorSpecPodMetricsEndpointsTlsConfigCa | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configMap': toJson_PodMonitorSpecPodMetricsEndpointsTlsConfigCaConfigMap(obj.configMap),
    'secret': toJson_PodMonitorSpecPodMetricsEndpointsTlsConfigCaSecret(obj.secret),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Client certificate to present when doing client-authentication.
 *
 * @schema PodMonitorSpecPodMetricsEndpointsTlsConfigCert
 */
export interface PodMonitorSpecPodMetricsEndpointsTlsConfigCert {
  /**
   * ConfigMap containing data to use for the targets.
   *
   * @schema PodMonitorSpecPodMetricsEndpointsTlsConfigCert#configMap
   */
  readonly configMap?: PodMonitorSpecPodMetricsEndpointsTlsConfigCertConfigMap;

  /**
   * Secret containing data to use for the targets.
   *
   * @schema PodMonitorSpecPodMetricsEndpointsTlsConfigCert#secret
   */
  readonly secret?: PodMonitorSpecPodMetricsEndpointsTlsConfigCertSecret;

}

/**
 * Converts an object of type 'PodMonitorSpecPodMetricsEndpointsTlsConfigCert' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodMonitorSpecPodMetricsEndpointsTlsConfigCert(obj: PodMonitorSpecPodMetricsEndpointsTlsConfigCert | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configMap': toJson_PodMonitorSpecPodMetricsEndpointsTlsConfigCertConfigMap(obj.configMap),
    'secret': toJson_PodMonitorSpecPodMetricsEndpointsTlsConfigCertSecret(obj.secret),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Secret containing the client key file for the targets.
 *
 * @schema PodMonitorSpecPodMetricsEndpointsTlsConfigKeySecret
 */
export interface PodMonitorSpecPodMetricsEndpointsTlsConfigKeySecret {
  /**
   * The key of the secret to select from.  Must be a valid secret key.
   *
   * @schema PodMonitorSpecPodMetricsEndpointsTlsConfigKeySecret#key
   */
  readonly key: string;

  /**
   * Name of the referent.
   * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   * TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PodMonitorSpecPodMetricsEndpointsTlsConfigKeySecret#name
   */
  readonly name?: string;

  /**
   * Specify whether the Secret or its key must be defined
   *
   * @schema PodMonitorSpecPodMetricsEndpointsTlsConfigKeySecret#optional
   */
  readonly optional?: boolean;

}

/**
 * Converts an object of type 'PodMonitorSpecPodMetricsEndpointsTlsConfigKeySecret' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodMonitorSpecPodMetricsEndpointsTlsConfigKeySecret(obj: PodMonitorSpecPodMetricsEndpointsTlsConfigKeySecret | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'name': obj.name,
    'optional': obj.optional,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ConfigMap containing data to use for the targets.
 *
 * @schema PodMonitorSpecPodMetricsEndpointsOauth2ClientIdConfigMap
 */
export interface PodMonitorSpecPodMetricsEndpointsOauth2ClientIdConfigMap {
  /**
   * The key to select.
   *
   * @schema PodMonitorSpecPodMetricsEndpointsOauth2ClientIdConfigMap#key
   */
  readonly key: string;

  /**
   * Name of the referent.
   * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   * TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PodMonitorSpecPodMetricsEndpointsOauth2ClientIdConfigMap#name
   */
  readonly name?: string;

  /**
   * Specify whether the ConfigMap or its key must be defined
   *
   * @schema PodMonitorSpecPodMetricsEndpointsOauth2ClientIdConfigMap#optional
   */
  readonly optional?: boolean;

}

/**
 * Converts an object of type 'PodMonitorSpecPodMetricsEndpointsOauth2ClientIdConfigMap' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodMonitorSpecPodMetricsEndpointsOauth2ClientIdConfigMap(obj: PodMonitorSpecPodMetricsEndpointsOauth2ClientIdConfigMap | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'name': obj.name,
    'optional': obj.optional,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Secret containing data to use for the targets.
 *
 * @schema PodMonitorSpecPodMetricsEndpointsOauth2ClientIdSecret
 */
export interface PodMonitorSpecPodMetricsEndpointsOauth2ClientIdSecret {
  /**
   * The key of the secret to select from.  Must be a valid secret key.
   *
   * @schema PodMonitorSpecPodMetricsEndpointsOauth2ClientIdSecret#key
   */
  readonly key: string;

  /**
   * Name of the referent.
   * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   * TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PodMonitorSpecPodMetricsEndpointsOauth2ClientIdSecret#name
   */
  readonly name?: string;

  /**
   * Specify whether the Secret or its key must be defined
   *
   * @schema PodMonitorSpecPodMetricsEndpointsOauth2ClientIdSecret#optional
   */
  readonly optional?: boolean;

}

/**
 * Converts an object of type 'PodMonitorSpecPodMetricsEndpointsOauth2ClientIdSecret' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodMonitorSpecPodMetricsEndpointsOauth2ClientIdSecret(obj: PodMonitorSpecPodMetricsEndpointsOauth2ClientIdSecret | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'name': obj.name,
    'optional': obj.optional,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ConfigMap containing data to use for the targets.
 *
 * @schema PodMonitorSpecPodMetricsEndpointsTlsConfigCaConfigMap
 */
export interface PodMonitorSpecPodMetricsEndpointsTlsConfigCaConfigMap {
  /**
   * The key to select.
   *
   * @schema PodMonitorSpecPodMetricsEndpointsTlsConfigCaConfigMap#key
   */
  readonly key: string;

  /**
   * Name of the referent.
   * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   * TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PodMonitorSpecPodMetricsEndpointsTlsConfigCaConfigMap#name
   */
  readonly name?: string;

  /**
   * Specify whether the ConfigMap or its key must be defined
   *
   * @schema PodMonitorSpecPodMetricsEndpointsTlsConfigCaConfigMap#optional
   */
  readonly optional?: boolean;

}

/**
 * Converts an object of type 'PodMonitorSpecPodMetricsEndpointsTlsConfigCaConfigMap' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodMonitorSpecPodMetricsEndpointsTlsConfigCaConfigMap(obj: PodMonitorSpecPodMetricsEndpointsTlsConfigCaConfigMap | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'name': obj.name,
    'optional': obj.optional,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Secret containing data to use for the targets.
 *
 * @schema PodMonitorSpecPodMetricsEndpointsTlsConfigCaSecret
 */
export interface PodMonitorSpecPodMetricsEndpointsTlsConfigCaSecret {
  /**
   * The key of the secret to select from.  Must be a valid secret key.
   *
   * @schema PodMonitorSpecPodMetricsEndpointsTlsConfigCaSecret#key
   */
  readonly key: string;

  /**
   * Name of the referent.
   * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   * TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PodMonitorSpecPodMetricsEndpointsTlsConfigCaSecret#name
   */
  readonly name?: string;

  /**
   * Specify whether the Secret or its key must be defined
   *
   * @schema PodMonitorSpecPodMetricsEndpointsTlsConfigCaSecret#optional
   */
  readonly optional?: boolean;

}

/**
 * Converts an object of type 'PodMonitorSpecPodMetricsEndpointsTlsConfigCaSecret' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodMonitorSpecPodMetricsEndpointsTlsConfigCaSecret(obj: PodMonitorSpecPodMetricsEndpointsTlsConfigCaSecret | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'name': obj.name,
    'optional': obj.optional,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ConfigMap containing data to use for the targets.
 *
 * @schema PodMonitorSpecPodMetricsEndpointsTlsConfigCertConfigMap
 */
export interface PodMonitorSpecPodMetricsEndpointsTlsConfigCertConfigMap {
  /**
   * The key to select.
   *
   * @schema PodMonitorSpecPodMetricsEndpointsTlsConfigCertConfigMap#key
   */
  readonly key: string;

  /**
   * Name of the referent.
   * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   * TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PodMonitorSpecPodMetricsEndpointsTlsConfigCertConfigMap#name
   */
  readonly name?: string;

  /**
   * Specify whether the ConfigMap or its key must be defined
   *
   * @schema PodMonitorSpecPodMetricsEndpointsTlsConfigCertConfigMap#optional
   */
  readonly optional?: boolean;

}

/**
 * Converts an object of type 'PodMonitorSpecPodMetricsEndpointsTlsConfigCertConfigMap' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodMonitorSpecPodMetricsEndpointsTlsConfigCertConfigMap(obj: PodMonitorSpecPodMetricsEndpointsTlsConfigCertConfigMap | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'name': obj.name,
    'optional': obj.optional,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Secret containing data to use for the targets.
 *
 * @schema PodMonitorSpecPodMetricsEndpointsTlsConfigCertSecret
 */
export interface PodMonitorSpecPodMetricsEndpointsTlsConfigCertSecret {
  /**
   * The key of the secret to select from.  Must be a valid secret key.
   *
   * @schema PodMonitorSpecPodMetricsEndpointsTlsConfigCertSecret#key
   */
  readonly key: string;

  /**
   * Name of the referent.
   * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   * TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PodMonitorSpecPodMetricsEndpointsTlsConfigCertSecret#name
   */
  readonly name?: string;

  /**
   * Specify whether the Secret or its key must be defined
   *
   * @schema PodMonitorSpecPodMetricsEndpointsTlsConfigCertSecret#optional
   */
  readonly optional?: boolean;

}

/**
 * Converts an object of type 'PodMonitorSpecPodMetricsEndpointsTlsConfigCertSecret' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodMonitorSpecPodMetricsEndpointsTlsConfigCertSecret(obj: PodMonitorSpecPodMetricsEndpointsTlsConfigCertSecret | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'name': obj.name,
    'optional': obj.optional,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

