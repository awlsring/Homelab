// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 *
 *
 * @schema DNSEndpoint
 */
export class DnsEndpoint extends ApiObject {
  /**
   * Returns the apiVersion and kind for "DNSEndpoint"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'externaldns.k8s.io/v1alpha1',
    kind: 'DNSEndpoint',
  }

  /**
   * Renders a Kubernetes manifest for "DNSEndpoint".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: DnsEndpointProps = {}): any {
    return {
      ...DnsEndpoint.GVK,
      ...toJson_DnsEndpointProps(props),
    };
  }

  /**
   * Defines a "DNSEndpoint" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: DnsEndpointProps = {}) {
    super(scope, id, {
      ...DnsEndpoint.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...DnsEndpoint.GVK,
      ...toJson_DnsEndpointProps(resolved),
    };
  }
}

/**
 * @schema DNSEndpoint
 */
export interface DnsEndpointProps {
  /**
   * @schema DNSEndpoint#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * DNSEndpointSpec defines the desired state of DNSEndpoint
   *
   * @schema DNSEndpoint#spec
   */
  readonly spec?: DnsEndpointSpec;

}

/**
 * Converts an object of type 'DnsEndpointProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DnsEndpointProps(obj: DnsEndpointProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_DnsEndpointSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DNSEndpointSpec defines the desired state of DNSEndpoint
 *
 * @schema DnsEndpointSpec
 */
export interface DnsEndpointSpec {
  /**
   * @schema DnsEndpointSpec#endpoints
   */
  readonly endpoints?: DnsEndpointSpecEndpoints[];

}

/**
 * Converts an object of type 'DnsEndpointSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DnsEndpointSpec(obj: DnsEndpointSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'endpoints': obj.endpoints?.map(y => toJson_DnsEndpointSpecEndpoints(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Endpoint is a high-level way of a connection between a service and an IP
 *
 * @schema DnsEndpointSpecEndpoints
 */
export interface DnsEndpointSpecEndpoints {
  /**
   * The hostname of the DNS record
   *
   * @schema DnsEndpointSpecEndpoints#dnsName
   */
  readonly dnsName?: string;

  /**
   * Labels stores labels defined for the Endpoint
   *
   * @schema DnsEndpointSpecEndpoints#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * ProviderSpecific stores provider specific config
   *
   * @schema DnsEndpointSpecEndpoints#providerSpecific
   */
  readonly providerSpecific?: DnsEndpointSpecEndpointsProviderSpecific[];

  /**
   * TTL for the record
   *
   * @schema DnsEndpointSpecEndpoints#recordTTL
   */
  readonly recordTtl?: number;

  /**
   * RecordType type of record, e.g. CNAME, A, SRV, TXT etc
   *
   * @schema DnsEndpointSpecEndpoints#recordType
   */
  readonly recordType?: string;

  /**
   * Identifier to distinguish multiple records with the same name and type (e.g. Route53 records with routing policies other than 'simple')
   *
   * @schema DnsEndpointSpecEndpoints#setIdentifier
   */
  readonly setIdentifier?: string;

  /**
   * The targets the DNS record points to
   *
   * @schema DnsEndpointSpecEndpoints#targets
   */
  readonly targets?: string[];

}

/**
 * Converts an object of type 'DnsEndpointSpecEndpoints' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DnsEndpointSpecEndpoints(obj: DnsEndpointSpecEndpoints | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'dnsName': obj.dnsName,
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'providerSpecific': obj.providerSpecific?.map(y => toJson_DnsEndpointSpecEndpointsProviderSpecific(y)),
    'recordTTL': obj.recordTtl,
    'recordType': obj.recordType,
    'setIdentifier': obj.setIdentifier,
    'targets': obj.targets?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ProviderSpecificProperty holds the name and value of a configuration which is specific to individual DNS providers
 *
 * @schema DnsEndpointSpecEndpointsProviderSpecific
 */
export interface DnsEndpointSpecEndpointsProviderSpecific {
  /**
   * @schema DnsEndpointSpecEndpointsProviderSpecific#name
   */
  readonly name?: string;

  /**
   * @schema DnsEndpointSpecEndpointsProviderSpecific#value
   */
  readonly value?: string;

}

/**
 * Converts an object of type 'DnsEndpointSpecEndpointsProviderSpecific' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DnsEndpointSpecEndpointsProviderSpecific(obj: DnsEndpointSpecEndpointsProviderSpecific | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

