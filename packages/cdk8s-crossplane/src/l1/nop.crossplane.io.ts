// @ts-nocheck
// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 * A NopResource is an example API type.
 *
 * @schema NopResource
 */
export class NopResource extends ApiObject {
  /**
   * Returns the apiVersion and kind for "NopResource"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'nop.crossplane.io/v1alpha1',
    kind: 'NopResource',
  }

  /**
   * Renders a Kubernetes manifest for "NopResource".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: NopResourceProps): any {
    return {
      ...NopResource.GVK,
      ...toJson_NopResourceProps(props),
    };
  }

  /**
   * Defines a "NopResource" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: NopResourceProps) {
    super(scope, id, {
      ...NopResource.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...NopResource.GVK,
      ...toJson_NopResourceProps(resolved),
    };
  }
}

/**
 * A NopResource is an example API type.
 *
 * @schema NopResource
 */
export interface NopResourceProps {
  /**
   * @schema NopResource#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * A NopResourceSpec defines the desired state of a NopResource.
   *
   * @schema NopResource#spec
   */
  readonly spec: NopResourceSpec;

}

/**
 * Converts an object of type 'NopResourceProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NopResourceProps(obj: NopResourceProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_NopResourceSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A NopResourceSpec defines the desired state of a NopResource.
 *
 * @schema NopResourceSpec
 */
export interface NopResourceSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource.
   *
   * @schema NopResourceSpec#deletionPolicy
   */
  readonly deletionPolicy?: NopResourceSpecDeletionPolicy;

  /**
   * NopResourceParameters are the configurable fields of a NopResource.
   *
   * @schema NopResourceSpec#forProvider
   */
  readonly forProvider: NopResourceSpecForProvider;

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema NopResourceSpec#providerConfigRef
   */
  readonly providerConfigRef?: NopResourceSpecProviderConfigRef;

  /**
   * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
   *
   * @schema NopResourceSpec#providerRef
   */
  readonly providerRef?: NopResourceSpecProviderRef;

  /**
   * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema NopResourceSpec#publishConnectionDetailsTo
   */
  readonly publishConnectionDetailsTo?: NopResourceSpecPublishConnectionDetailsTo;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
   *
   * @schema NopResourceSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: NopResourceSpecWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'NopResourceSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NopResourceSpec(obj: NopResourceSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'deletionPolicy': obj.deletionPolicy,
    'forProvider': toJson_NopResourceSpecForProvider(obj.forProvider),
    'providerConfigRef': toJson_NopResourceSpecProviderConfigRef(obj.providerConfigRef),
    'providerRef': toJson_NopResourceSpecProviderRef(obj.providerRef),
    'publishConnectionDetailsTo': toJson_NopResourceSpecPublishConnectionDetailsTo(obj.publishConnectionDetailsTo),
    'writeConnectionSecretToRef': toJson_NopResourceSpecWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource.
 *
 * @schema NopResourceSpecDeletionPolicy
 */
export enum NopResourceSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * NopResourceParameters are the configurable fields of a NopResource.
 *
 * @schema NopResourceSpecForProvider
 */
export interface NopResourceSpecForProvider {
  /**
   * ConditionAfter can be used to set status conditions after a specified time. By default a NopResource will only have a status condition of Type: Synced. It will never have a status condition of Type: Ready unless one is configured here.
   *
   * @schema NopResourceSpecForProvider#conditionAfter
   */
  readonly conditionAfter?: NopResourceSpecForProviderConditionAfter[];

  /**
   * ConnectionDetails that this NopResource should emit on each reconcile.
   *
   * @schema NopResourceSpecForProvider#connectionDetails
   */
  readonly connectionDetails?: NopResourceSpecForProviderConnectionDetails[];

  /**
   * Fields is an arbitrary object you can patch to and from. It has no schema, is not validated, and is not used by the NopResource controller.
   *
   * @schema NopResourceSpecForProvider#fields
   */
  readonly fields?: any;

}

/**
 * Converts an object of type 'NopResourceSpecForProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NopResourceSpecForProvider(obj: NopResourceSpecForProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'conditionAfter': obj.conditionAfter?.map(y => toJson_NopResourceSpecForProviderConditionAfter(y)),
    'connectionDetails': obj.connectionDetails?.map(y => toJson_NopResourceSpecForProviderConnectionDetails(y)),
    'fields': obj.fields,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema NopResourceSpecProviderConfigRef
 */
export interface NopResourceSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema NopResourceSpecProviderConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema NopResourceSpecProviderConfigRef#policy
   */
  readonly policy?: NopResourceSpecProviderConfigRefPolicy;

}

/**
 * Converts an object of type 'NopResourceSpecProviderConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NopResourceSpecProviderConfigRef(obj: NopResourceSpecProviderConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_NopResourceSpecProviderConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
 *
 * @schema NopResourceSpecProviderRef
 */
export interface NopResourceSpecProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema NopResourceSpecProviderRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema NopResourceSpecProviderRef#policy
   */
  readonly policy?: NopResourceSpecProviderRefPolicy;

}

/**
 * Converts an object of type 'NopResourceSpecProviderRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NopResourceSpecProviderRef(obj: NopResourceSpecProviderRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_NopResourceSpecProviderRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema NopResourceSpecPublishConnectionDetailsTo
 */
export interface NopResourceSpecPublishConnectionDetailsTo {
  /**
   * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
   *
   * @schema NopResourceSpecPublishConnectionDetailsTo#configRef
   */
  readonly configRef?: NopResourceSpecPublishConnectionDetailsToConfigRef;

  /**
   * Metadata is the metadata for connection secret.
   *
   * @schema NopResourceSpecPublishConnectionDetailsTo#metadata
   */
  readonly metadata?: NopResourceSpecPublishConnectionDetailsToMetadata;

  /**
   * Name is the name of the connection secret.
   *
   * @schema NopResourceSpecPublishConnectionDetailsTo#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'NopResourceSpecPublishConnectionDetailsTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NopResourceSpecPublishConnectionDetailsTo(obj: NopResourceSpecPublishConnectionDetailsTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configRef': toJson_NopResourceSpecPublishConnectionDetailsToConfigRef(obj.configRef),
    'metadata': toJson_NopResourceSpecPublishConnectionDetailsToMetadata(obj.metadata),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
 *
 * @schema NopResourceSpecWriteConnectionSecretToRef
 */
export interface NopResourceSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema NopResourceSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema NopResourceSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'NopResourceSpecWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NopResourceSpecWriteConnectionSecretToRef(obj: NopResourceSpecWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ResourceConditionAfter specifies a condition of a NopResource that should be set after a certain duration.
 *
 * @schema NopResourceSpecForProviderConditionAfter
 */
export interface NopResourceSpecForProviderConditionAfter {
  /**
   * ConditionReason to set - e.g. Available.
   *
   * @schema NopResourceSpecForProviderConditionAfter#conditionReason
   */
  readonly conditionReason?: string;

  /**
   * ConditionStatus to set - e.g. True.
   *
   * @schema NopResourceSpecForProviderConditionAfter#conditionStatus
   */
  readonly conditionStatus: string;

  /**
   * ConditionType to set - e.g. Ready.
   *
   * @schema NopResourceSpecForProviderConditionAfter#conditionType
   */
  readonly conditionType: string;

  /**
   * Time is the duration after which the condition should be set.
   *
   * @schema NopResourceSpecForProviderConditionAfter#time
   */
  readonly time: string;

}

/**
 * Converts an object of type 'NopResourceSpecForProviderConditionAfter' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NopResourceSpecForProviderConditionAfter(obj: NopResourceSpecForProviderConditionAfter | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'conditionReason': obj.conditionReason,
    'conditionStatus': obj.conditionStatus,
    'conditionType': obj.conditionType,
    'time': obj.time,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ResourceConnectionDetail specifies a connection detail a NopResource should emit.
 *
 * @schema NopResourceSpecForProviderConnectionDetails
 */
export interface NopResourceSpecForProviderConnectionDetails {
  /**
   * Name of the connection detail.
   *
   * @schema NopResourceSpecForProviderConnectionDetails#name
   */
  readonly name: string;

  /**
   * Value of the connection detail.
   *
   * @schema NopResourceSpecForProviderConnectionDetails#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'NopResourceSpecForProviderConnectionDetails' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NopResourceSpecForProviderConnectionDetails(obj: NopResourceSpecForProviderConnectionDetails | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema NopResourceSpecProviderConfigRefPolicy
 */
export interface NopResourceSpecProviderConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema NopResourceSpecProviderConfigRefPolicy#resolution
   */
  readonly resolution?: NopResourceSpecProviderConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema NopResourceSpecProviderConfigRefPolicy#resolve
   */
  readonly resolve?: NopResourceSpecProviderConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'NopResourceSpecProviderConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NopResourceSpecProviderConfigRefPolicy(obj: NopResourceSpecProviderConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema NopResourceSpecProviderRefPolicy
 */
export interface NopResourceSpecProviderRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema NopResourceSpecProviderRefPolicy#resolution
   */
  readonly resolution?: NopResourceSpecProviderRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema NopResourceSpecProviderRefPolicy#resolve
   */
  readonly resolve?: NopResourceSpecProviderRefPolicyResolve;

}

/**
 * Converts an object of type 'NopResourceSpecProviderRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NopResourceSpecProviderRefPolicy(obj: NopResourceSpecProviderRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
 *
 * @schema NopResourceSpecPublishConnectionDetailsToConfigRef
 */
export interface NopResourceSpecPublishConnectionDetailsToConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema NopResourceSpecPublishConnectionDetailsToConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema NopResourceSpecPublishConnectionDetailsToConfigRef#policy
   */
  readonly policy?: NopResourceSpecPublishConnectionDetailsToConfigRefPolicy;

}

/**
 * Converts an object of type 'NopResourceSpecPublishConnectionDetailsToConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NopResourceSpecPublishConnectionDetailsToConfigRef(obj: NopResourceSpecPublishConnectionDetailsToConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_NopResourceSpecPublishConnectionDetailsToConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Metadata is the metadata for connection secret.
 *
 * @schema NopResourceSpecPublishConnectionDetailsToMetadata
 */
export interface NopResourceSpecPublishConnectionDetailsToMetadata {
  /**
   * Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
   *
   * @schema NopResourceSpecPublishConnectionDetailsToMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
   *
   * @schema NopResourceSpecPublishConnectionDetailsToMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
   *
   * @schema NopResourceSpecPublishConnectionDetailsToMetadata#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'NopResourceSpecPublishConnectionDetailsToMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NopResourceSpecPublishConnectionDetailsToMetadata(obj: NopResourceSpecPublishConnectionDetailsToMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema NopResourceSpecProviderConfigRefPolicyResolution
 */
export enum NopResourceSpecProviderConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema NopResourceSpecProviderConfigRefPolicyResolve
 */
export enum NopResourceSpecProviderConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema NopResourceSpecProviderRefPolicyResolution
 */
export enum NopResourceSpecProviderRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema NopResourceSpecProviderRefPolicyResolve
 */
export enum NopResourceSpecProviderRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Policies for referencing.
 *
 * @schema NopResourceSpecPublishConnectionDetailsToConfigRefPolicy
 */
export interface NopResourceSpecPublishConnectionDetailsToConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema NopResourceSpecPublishConnectionDetailsToConfigRefPolicy#resolution
   */
  readonly resolution?: NopResourceSpecPublishConnectionDetailsToConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema NopResourceSpecPublishConnectionDetailsToConfigRefPolicy#resolve
   */
  readonly resolve?: NopResourceSpecPublishConnectionDetailsToConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'NopResourceSpecPublishConnectionDetailsToConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NopResourceSpecPublishConnectionDetailsToConfigRefPolicy(obj: NopResourceSpecPublishConnectionDetailsToConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema NopResourceSpecPublishConnectionDetailsToConfigRefPolicyResolution
 */
export enum NopResourceSpecPublishConnectionDetailsToConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema NopResourceSpecPublishConnectionDetailsToConfigRefPolicyResolve
 */
export enum NopResourceSpecPublishConnectionDetailsToConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

