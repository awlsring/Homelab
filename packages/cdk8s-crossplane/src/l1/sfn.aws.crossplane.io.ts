// @ts-nocheck
// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 * Activity is the Schema for the Activities API
 *
 * @schema Activity
 */
export class Activity extends ApiObject {
  /**
   * Returns the apiVersion and kind for "Activity"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'sfn.aws.crossplane.io/v1alpha1',
    kind: 'Activity',
  }

  /**
   * Renders a Kubernetes manifest for "Activity".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: ActivityProps): any {
    return {
      ...Activity.GVK,
      ...toJson_ActivityProps(props),
    };
  }

  /**
   * Defines a "Activity" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: ActivityProps) {
    super(scope, id, {
      ...Activity.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...Activity.GVK,
      ...toJson_ActivityProps(resolved),
    };
  }
}

/**
 * Activity is the Schema for the Activities API
 *
 * @schema Activity
 */
export interface ActivityProps {
  /**
   * @schema Activity#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * ActivitySpec defines the desired state of Activity
   *
   * @schema Activity#spec
   */
  readonly spec: ActivitySpec;

}

/**
 * Converts an object of type 'ActivityProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ActivityProps(obj: ActivityProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_ActivitySpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ActivitySpec defines the desired state of Activity
 *
 * @schema ActivitySpec
 */
export interface ActivitySpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
   *
   * @schema ActivitySpec#deletionPolicy
   */
  readonly deletionPolicy?: ActivitySpecDeletionPolicy;

  /**
   * ActivityParameters defines the desired state of Activity
   *
   * @schema ActivitySpec#forProvider
   */
  readonly forProvider: ActivitySpecForProvider;

  /**
   * THIS IS A BETA FIELD. It is on by default but can be opted out through a Crossplane feature flag. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
   *
   * @schema ActivitySpec#managementPolicies
   */
  readonly managementPolicies?: ActivitySpecManagementPolicies[];

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema ActivitySpec#providerConfigRef
   */
  readonly providerConfigRef?: ActivitySpecProviderConfigRef;

  /**
   * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema ActivitySpec#publishConnectionDetailsTo
   */
  readonly publishConnectionDetailsTo?: ActivitySpecPublishConnectionDetailsTo;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
   *
   * @schema ActivitySpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: ActivitySpecWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'ActivitySpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ActivitySpec(obj: ActivitySpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'deletionPolicy': obj.deletionPolicy,
    'forProvider': toJson_ActivitySpecForProvider(obj.forProvider),
    'managementPolicies': obj.managementPolicies?.map(y => y),
    'providerConfigRef': toJson_ActivitySpecProviderConfigRef(obj.providerConfigRef),
    'publishConnectionDetailsTo': toJson_ActivitySpecPublishConnectionDetailsTo(obj.publishConnectionDetailsTo),
    'writeConnectionSecretToRef': toJson_ActivitySpecWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
 *
 * @schema ActivitySpecDeletionPolicy
 */
export enum ActivitySpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * ActivityParameters defines the desired state of Activity
 *
 * @schema ActivitySpecForProvider
 */
export interface ActivitySpecForProvider {
  /**
   * The name of the activity to create. This name must be unique for your Amazon Web Services account and region for 90 days. For more information, see Limits Related to State Machine Executions (https://docs.aws.amazon.com/step-functions/latest/dg/limits.html#service-limits-state-machine-executions) in the Step Functions Developer Guide.
   * A name must not contain:
   * * white space
   * * brackets < > { } [ ]
   * * wildcard characters ? *
   * * special characters " # % \ ^ | ~ ` $ & , ; : /
   * * control characters (U+0000-001F, U+007F-009F)
   * To enable logging with CloudWatch Logs, the name should only contain 0-9, A-Z, a-z, - and _.
   *
   * @schema ActivitySpecForProvider#name
   */
  readonly name: string;

  /**
   * Region is which region the Activity will be created.
   *
   * @schema ActivitySpecForProvider#region
   */
  readonly region: string;

  /**
   * The list of tags to add to a resource.
   * An array of key-value pairs. For more information, see Using Cost Allocation Tags (https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html) in the Amazon Web Services Billing and Cost Management User Guide, and Controlling Access Using IAM Tags (https://docs.aws.amazon.com/IAM/latest/UserGuide/access_iam-tags.html).
   * Tags may only contain Unicode letters, digits, white space, or these symbols: _ . : / = + - @.
   *
   * @schema ActivitySpecForProvider#tags
   */
  readonly tags?: ActivitySpecForProviderTags[];

}

/**
 * Converts an object of type 'ActivitySpecForProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ActivitySpecForProvider(obj: ActivitySpecForProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'region': obj.region,
    'tags': obj.tags?.map(y => toJson_ActivitySpecForProviderTags(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A ManagementAction represents an action that the Crossplane controllers can take on an external resource.
 *
 * @schema ActivitySpecManagementPolicies
 */
export enum ActivitySpecManagementPolicies {
  /** Observe */
  OBSERVE = "Observe",
  /** Create */
  CREATE = "Create",
  /** Update */
  UPDATE = "Update",
  /** Delete */
  DELETE = "Delete",
  /** LateInitialize */
  LATE_INITIALIZE = "LateInitialize",
  /** * */
  VALUE_ASTERISK = "*",
}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema ActivitySpecProviderConfigRef
 */
export interface ActivitySpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema ActivitySpecProviderConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema ActivitySpecProviderConfigRef#policy
   */
  readonly policy?: ActivitySpecProviderConfigRefPolicy;

}

/**
 * Converts an object of type 'ActivitySpecProviderConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ActivitySpecProviderConfigRef(obj: ActivitySpecProviderConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_ActivitySpecProviderConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema ActivitySpecPublishConnectionDetailsTo
 */
export interface ActivitySpecPublishConnectionDetailsTo {
  /**
   * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
   *
   * @schema ActivitySpecPublishConnectionDetailsTo#configRef
   */
  readonly configRef?: ActivitySpecPublishConnectionDetailsToConfigRef;

  /**
   * Metadata is the metadata for connection secret.
   *
   * @schema ActivitySpecPublishConnectionDetailsTo#metadata
   */
  readonly metadata?: ActivitySpecPublishConnectionDetailsToMetadata;

  /**
   * Name is the name of the connection secret.
   *
   * @schema ActivitySpecPublishConnectionDetailsTo#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'ActivitySpecPublishConnectionDetailsTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ActivitySpecPublishConnectionDetailsTo(obj: ActivitySpecPublishConnectionDetailsTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configRef': toJson_ActivitySpecPublishConnectionDetailsToConfigRef(obj.configRef),
    'metadata': toJson_ActivitySpecPublishConnectionDetailsToMetadata(obj.metadata),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
 *
 * @schema ActivitySpecWriteConnectionSecretToRef
 */
export interface ActivitySpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema ActivitySpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema ActivitySpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'ActivitySpecWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ActivitySpecWriteConnectionSecretToRef(obj: ActivitySpecWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ActivitySpecForProviderTags
 */
export interface ActivitySpecForProviderTags {
  /**
   * @schema ActivitySpecForProviderTags#key
   */
  readonly key?: string;

  /**
   * @schema ActivitySpecForProviderTags#value
   */
  readonly value?: string;

}

/**
 * Converts an object of type 'ActivitySpecForProviderTags' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ActivitySpecForProviderTags(obj: ActivitySpecForProviderTags | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema ActivitySpecProviderConfigRefPolicy
 */
export interface ActivitySpecProviderConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema ActivitySpecProviderConfigRefPolicy#resolution
   */
  readonly resolution?: ActivitySpecProviderConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema ActivitySpecProviderConfigRefPolicy#resolve
   */
  readonly resolve?: ActivitySpecProviderConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'ActivitySpecProviderConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ActivitySpecProviderConfigRefPolicy(obj: ActivitySpecProviderConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
 *
 * @schema ActivitySpecPublishConnectionDetailsToConfigRef
 */
export interface ActivitySpecPublishConnectionDetailsToConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema ActivitySpecPublishConnectionDetailsToConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema ActivitySpecPublishConnectionDetailsToConfigRef#policy
   */
  readonly policy?: ActivitySpecPublishConnectionDetailsToConfigRefPolicy;

}

/**
 * Converts an object of type 'ActivitySpecPublishConnectionDetailsToConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ActivitySpecPublishConnectionDetailsToConfigRef(obj: ActivitySpecPublishConnectionDetailsToConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_ActivitySpecPublishConnectionDetailsToConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Metadata is the metadata for connection secret.
 *
 * @schema ActivitySpecPublishConnectionDetailsToMetadata
 */
export interface ActivitySpecPublishConnectionDetailsToMetadata {
  /**
   * Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
   *
   * @schema ActivitySpecPublishConnectionDetailsToMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
   *
   * @schema ActivitySpecPublishConnectionDetailsToMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
   *
   * @schema ActivitySpecPublishConnectionDetailsToMetadata#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'ActivitySpecPublishConnectionDetailsToMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ActivitySpecPublishConnectionDetailsToMetadata(obj: ActivitySpecPublishConnectionDetailsToMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema ActivitySpecProviderConfigRefPolicyResolution
 */
export enum ActivitySpecProviderConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema ActivitySpecProviderConfigRefPolicyResolve
 */
export enum ActivitySpecProviderConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Policies for referencing.
 *
 * @schema ActivitySpecPublishConnectionDetailsToConfigRefPolicy
 */
export interface ActivitySpecPublishConnectionDetailsToConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema ActivitySpecPublishConnectionDetailsToConfigRefPolicy#resolution
   */
  readonly resolution?: ActivitySpecPublishConnectionDetailsToConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema ActivitySpecPublishConnectionDetailsToConfigRefPolicy#resolve
   */
  readonly resolve?: ActivitySpecPublishConnectionDetailsToConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'ActivitySpecPublishConnectionDetailsToConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ActivitySpecPublishConnectionDetailsToConfigRefPolicy(obj: ActivitySpecPublishConnectionDetailsToConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema ActivitySpecPublishConnectionDetailsToConfigRefPolicyResolution
 */
export enum ActivitySpecPublishConnectionDetailsToConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema ActivitySpecPublishConnectionDetailsToConfigRefPolicyResolve
 */
export enum ActivitySpecPublishConnectionDetailsToConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}


/**
 * StateMachine is the Schema for the StateMachines API
 *
 * @schema StateMachine
 */
export class StateMachine extends ApiObject {
  /**
   * Returns the apiVersion and kind for "StateMachine"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'sfn.aws.crossplane.io/v1alpha1',
    kind: 'StateMachine',
  }

  /**
   * Renders a Kubernetes manifest for "StateMachine".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: StateMachineProps): any {
    return {
      ...StateMachine.GVK,
      ...toJson_StateMachineProps(props),
    };
  }

  /**
   * Defines a "StateMachine" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: StateMachineProps) {
    super(scope, id, {
      ...StateMachine.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...StateMachine.GVK,
      ...toJson_StateMachineProps(resolved),
    };
  }
}

/**
 * StateMachine is the Schema for the StateMachines API
 *
 * @schema StateMachine
 */
export interface StateMachineProps {
  /**
   * @schema StateMachine#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * StateMachineSpec defines the desired state of StateMachine
   *
   * @schema StateMachine#spec
   */
  readonly spec: StateMachineSpec;

}

/**
 * Converts an object of type 'StateMachineProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StateMachineProps(obj: StateMachineProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_StateMachineSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * StateMachineSpec defines the desired state of StateMachine
 *
 * @schema StateMachineSpec
 */
export interface StateMachineSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
   *
   * @schema StateMachineSpec#deletionPolicy
   */
  readonly deletionPolicy?: StateMachineSpecDeletionPolicy;

  /**
   * StateMachineParameters defines the desired state of StateMachine
   *
   * @schema StateMachineSpec#forProvider
   */
  readonly forProvider: StateMachineSpecForProvider;

  /**
   * THIS IS A BETA FIELD. It is on by default but can be opted out through a Crossplane feature flag. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
   *
   * @schema StateMachineSpec#managementPolicies
   */
  readonly managementPolicies?: StateMachineSpecManagementPolicies[];

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema StateMachineSpec#providerConfigRef
   */
  readonly providerConfigRef?: StateMachineSpecProviderConfigRef;

  /**
   * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema StateMachineSpec#publishConnectionDetailsTo
   */
  readonly publishConnectionDetailsTo?: StateMachineSpecPublishConnectionDetailsTo;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
   *
   * @schema StateMachineSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: StateMachineSpecWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'StateMachineSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StateMachineSpec(obj: StateMachineSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'deletionPolicy': obj.deletionPolicy,
    'forProvider': toJson_StateMachineSpecForProvider(obj.forProvider),
    'managementPolicies': obj.managementPolicies?.map(y => y),
    'providerConfigRef': toJson_StateMachineSpecProviderConfigRef(obj.providerConfigRef),
    'publishConnectionDetailsTo': toJson_StateMachineSpecPublishConnectionDetailsTo(obj.publishConnectionDetailsTo),
    'writeConnectionSecretToRef': toJson_StateMachineSpecWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
 *
 * @schema StateMachineSpecDeletionPolicy
 */
export enum StateMachineSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * StateMachineParameters defines the desired state of StateMachine
 *
 * @schema StateMachineSpecForProvider
 */
export interface StateMachineSpecForProvider {
  /**
   * The Amazon States Language definition of the state machine. See Amazon States Language (https://docs.aws.amazon.com/step-functions/latest/dg/concepts-amazon-states-language.html).
   *
   * @schema StateMachineSpecForProvider#definition
   */
  readonly definition: string;

  /**
   * Defines what execution history events are logged and where they are logged.
   * By default, the level is set to OFF. For more information see Log Levels (https://docs.aws.amazon.com/step-functions/latest/dg/cloudwatch-log-level.html) in the Step Functions User Guide.
   *
   * @schema StateMachineSpecForProvider#loggingConfiguration
   */
  readonly loggingConfiguration?: StateMachineSpecForProviderLoggingConfiguration;

  /**
   * The name of the state machine.
   * A name must not contain:
   * * white space
   * * brackets < > { } [ ]
   * * wildcard characters ? *
   * * special characters " # % \ ^ | ~ ` $ & , ; : /
   * * control characters (U+0000-001F, U+007F-009F)
   * To enable logging with CloudWatch Logs, the name should only contain 0-9, A-Z, a-z, - and _.
   *
   * @schema StateMachineSpecForProvider#name
   */
  readonly name: string;

  /**
   * Set to true to publish the first version of the state machine during creation. The default is false.
   *
   * @schema StateMachineSpecForProvider#publish
   */
  readonly publish?: boolean;

  /**
   * Region is which region the StateMachine will be created.
   *
   * @schema StateMachineSpecForProvider#region
   */
  readonly region: string;

  /**
   * RoleARN is the ARN for the IAMRole. It has to be given directly or resolved using RoleARNRef or RoleARNSelector.
   *
   * @schema StateMachineSpecForProvider#roleArn
   */
  readonly roleArn?: string;

  /**
   * RoleARNRef is a reference to an IAMRole used to set the RoleARN.
   *
   * @schema StateMachineSpecForProvider#roleArnRef
   */
  readonly roleArnRef?: StateMachineSpecForProviderRoleArnRef;

  /**
   * RoleARNSelector selects references to IAMRole used to set the RoleARN.
   *
   * @schema StateMachineSpecForProvider#roleArnSelector
   */
  readonly roleArnSelector?: StateMachineSpecForProviderRoleArnSelector;

  /**
   * Tags to be added when creating a state machine.
   * An array of key-value pairs. For more information, see Using Cost Allocation Tags (https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html) in the Amazon Web Services Billing and Cost Management User Guide, and Controlling Access Using IAM Tags (https://docs.aws.amazon.com/IAM/latest/UserGuide/access_iam-tags.html).
   * Tags may only contain Unicode letters, digits, white space, or these symbols: _ . : / = + - @.
   *
   * @schema StateMachineSpecForProvider#tags
   */
  readonly tags?: StateMachineSpecForProviderTags[];

  /**
   * Selects whether X-Ray tracing is enabled.
   *
   * @schema StateMachineSpecForProvider#tracingConfiguration
   */
  readonly tracingConfiguration?: StateMachineSpecForProviderTracingConfiguration;

  /**
   * Determines whether a Standard or Express state machine is created. You cannot update the type of a state machine once it has been created. The default is STANDARD. Possible values: STANDARD, EXPRESS
   *
   * @schema StateMachineSpecForProvider#type
   */
  readonly type?: StateMachineSpecForProviderType;

  /**
   * Sets description about the state machine version. You can only set the description if the publish parameter is set to true. Otherwise, if you set versionDescription, but publish to false, this API action throws ValidationException.
   *
   * @schema StateMachineSpecForProvider#versionDescription
   */
  readonly versionDescription?: string;

}

/**
 * Converts an object of type 'StateMachineSpecForProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StateMachineSpecForProvider(obj: StateMachineSpecForProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'definition': obj.definition,
    'loggingConfiguration': toJson_StateMachineSpecForProviderLoggingConfiguration(obj.loggingConfiguration),
    'name': obj.name,
    'publish': obj.publish,
    'region': obj.region,
    'roleArn': obj.roleArn,
    'roleArnRef': toJson_StateMachineSpecForProviderRoleArnRef(obj.roleArnRef),
    'roleArnSelector': toJson_StateMachineSpecForProviderRoleArnSelector(obj.roleArnSelector),
    'tags': obj.tags?.map(y => toJson_StateMachineSpecForProviderTags(y)),
    'tracingConfiguration': toJson_StateMachineSpecForProviderTracingConfiguration(obj.tracingConfiguration),
    'type': obj.type,
    'versionDescription': obj.versionDescription,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A ManagementAction represents an action that the Crossplane controllers can take on an external resource.
 *
 * @schema StateMachineSpecManagementPolicies
 */
export enum StateMachineSpecManagementPolicies {
  /** Observe */
  OBSERVE = "Observe",
  /** Create */
  CREATE = "Create",
  /** Update */
  UPDATE = "Update",
  /** Delete */
  DELETE = "Delete",
  /** LateInitialize */
  LATE_INITIALIZE = "LateInitialize",
  /** * */
  VALUE_ASTERISK = "*",
}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema StateMachineSpecProviderConfigRef
 */
export interface StateMachineSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema StateMachineSpecProviderConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema StateMachineSpecProviderConfigRef#policy
   */
  readonly policy?: StateMachineSpecProviderConfigRefPolicy;

}

/**
 * Converts an object of type 'StateMachineSpecProviderConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StateMachineSpecProviderConfigRef(obj: StateMachineSpecProviderConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_StateMachineSpecProviderConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema StateMachineSpecPublishConnectionDetailsTo
 */
export interface StateMachineSpecPublishConnectionDetailsTo {
  /**
   * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
   *
   * @schema StateMachineSpecPublishConnectionDetailsTo#configRef
   */
  readonly configRef?: StateMachineSpecPublishConnectionDetailsToConfigRef;

  /**
   * Metadata is the metadata for connection secret.
   *
   * @schema StateMachineSpecPublishConnectionDetailsTo#metadata
   */
  readonly metadata?: StateMachineSpecPublishConnectionDetailsToMetadata;

  /**
   * Name is the name of the connection secret.
   *
   * @schema StateMachineSpecPublishConnectionDetailsTo#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'StateMachineSpecPublishConnectionDetailsTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StateMachineSpecPublishConnectionDetailsTo(obj: StateMachineSpecPublishConnectionDetailsTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configRef': toJson_StateMachineSpecPublishConnectionDetailsToConfigRef(obj.configRef),
    'metadata': toJson_StateMachineSpecPublishConnectionDetailsToMetadata(obj.metadata),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
 *
 * @schema StateMachineSpecWriteConnectionSecretToRef
 */
export interface StateMachineSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema StateMachineSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema StateMachineSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'StateMachineSpecWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StateMachineSpecWriteConnectionSecretToRef(obj: StateMachineSpecWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Defines what execution history events are logged and where they are logged.
 * By default, the level is set to OFF. For more information see Log Levels (https://docs.aws.amazon.com/step-functions/latest/dg/cloudwatch-log-level.html) in the Step Functions User Guide.
 *
 * @schema StateMachineSpecForProviderLoggingConfiguration
 */
export interface StateMachineSpecForProviderLoggingConfiguration {
  /**
   * @schema StateMachineSpecForProviderLoggingConfiguration#destinations
   */
  readonly destinations?: StateMachineSpecForProviderLoggingConfigurationDestinations[];

  /**
   * @schema StateMachineSpecForProviderLoggingConfiguration#includeExecutionData
   */
  readonly includeExecutionData?: boolean;

  /**
   * @schema StateMachineSpecForProviderLoggingConfiguration#level
   */
  readonly level?: string;

}

/**
 * Converts an object of type 'StateMachineSpecForProviderLoggingConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StateMachineSpecForProviderLoggingConfiguration(obj: StateMachineSpecForProviderLoggingConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'destinations': obj.destinations?.map(y => toJson_StateMachineSpecForProviderLoggingConfigurationDestinations(y)),
    'includeExecutionData': obj.includeExecutionData,
    'level': obj.level,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RoleARNRef is a reference to an IAMRole used to set the RoleARN.
 *
 * @schema StateMachineSpecForProviderRoleArnRef
 */
export interface StateMachineSpecForProviderRoleArnRef {
  /**
   * Name of the referenced object.
   *
   * @schema StateMachineSpecForProviderRoleArnRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema StateMachineSpecForProviderRoleArnRef#policy
   */
  readonly policy?: StateMachineSpecForProviderRoleArnRefPolicy;

}

/**
 * Converts an object of type 'StateMachineSpecForProviderRoleArnRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StateMachineSpecForProviderRoleArnRef(obj: StateMachineSpecForProviderRoleArnRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_StateMachineSpecForProviderRoleArnRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RoleARNSelector selects references to IAMRole used to set the RoleARN.
 *
 * @schema StateMachineSpecForProviderRoleArnSelector
 */
export interface StateMachineSpecForProviderRoleArnSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema StateMachineSpecForProviderRoleArnSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema StateMachineSpecForProviderRoleArnSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

  /**
   * Policies for selection.
   *
   * @schema StateMachineSpecForProviderRoleArnSelector#policy
   */
  readonly policy?: StateMachineSpecForProviderRoleArnSelectorPolicy;

}

/**
 * Converts an object of type 'StateMachineSpecForProviderRoleArnSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StateMachineSpecForProviderRoleArnSelector(obj: StateMachineSpecForProviderRoleArnSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchControllerRef': obj.matchControllerRef,
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'policy': toJson_StateMachineSpecForProviderRoleArnSelectorPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema StateMachineSpecForProviderTags
 */
export interface StateMachineSpecForProviderTags {
  /**
   * @schema StateMachineSpecForProviderTags#key
   */
  readonly key?: string;

  /**
   * @schema StateMachineSpecForProviderTags#value
   */
  readonly value?: string;

}

/**
 * Converts an object of type 'StateMachineSpecForProviderTags' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StateMachineSpecForProviderTags(obj: StateMachineSpecForProviderTags | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Selects whether X-Ray tracing is enabled.
 *
 * @schema StateMachineSpecForProviderTracingConfiguration
 */
export interface StateMachineSpecForProviderTracingConfiguration {
  /**
   * @schema StateMachineSpecForProviderTracingConfiguration#enabled
   */
  readonly enabled?: boolean;

}

/**
 * Converts an object of type 'StateMachineSpecForProviderTracingConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StateMachineSpecForProviderTracingConfiguration(obj: StateMachineSpecForProviderTracingConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Determines whether a Standard or Express state machine is created. You cannot update the type of a state machine once it has been created. The default is STANDARD. Possible values: STANDARD, EXPRESS
 *
 * @schema StateMachineSpecForProviderType
 */
export enum StateMachineSpecForProviderType {
  /** STANDARD */
  STANDARD = "STANDARD",
  /** EXPRESS */
  EXPRESS = "EXPRESS",
}

/**
 * Policies for referencing.
 *
 * @schema StateMachineSpecProviderConfigRefPolicy
 */
export interface StateMachineSpecProviderConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema StateMachineSpecProviderConfigRefPolicy#resolution
   */
  readonly resolution?: StateMachineSpecProviderConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema StateMachineSpecProviderConfigRefPolicy#resolve
   */
  readonly resolve?: StateMachineSpecProviderConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'StateMachineSpecProviderConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StateMachineSpecProviderConfigRefPolicy(obj: StateMachineSpecProviderConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
 *
 * @schema StateMachineSpecPublishConnectionDetailsToConfigRef
 */
export interface StateMachineSpecPublishConnectionDetailsToConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema StateMachineSpecPublishConnectionDetailsToConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema StateMachineSpecPublishConnectionDetailsToConfigRef#policy
   */
  readonly policy?: StateMachineSpecPublishConnectionDetailsToConfigRefPolicy;

}

/**
 * Converts an object of type 'StateMachineSpecPublishConnectionDetailsToConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StateMachineSpecPublishConnectionDetailsToConfigRef(obj: StateMachineSpecPublishConnectionDetailsToConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_StateMachineSpecPublishConnectionDetailsToConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Metadata is the metadata for connection secret.
 *
 * @schema StateMachineSpecPublishConnectionDetailsToMetadata
 */
export interface StateMachineSpecPublishConnectionDetailsToMetadata {
  /**
   * Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
   *
   * @schema StateMachineSpecPublishConnectionDetailsToMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
   *
   * @schema StateMachineSpecPublishConnectionDetailsToMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
   *
   * @schema StateMachineSpecPublishConnectionDetailsToMetadata#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'StateMachineSpecPublishConnectionDetailsToMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StateMachineSpecPublishConnectionDetailsToMetadata(obj: StateMachineSpecPublishConnectionDetailsToMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema StateMachineSpecForProviderLoggingConfigurationDestinations
 */
export interface StateMachineSpecForProviderLoggingConfigurationDestinations {
  /**
   * @schema StateMachineSpecForProviderLoggingConfigurationDestinations#cloudWatchLogsLogGroup
   */
  readonly cloudWatchLogsLogGroup?: StateMachineSpecForProviderLoggingConfigurationDestinationsCloudWatchLogsLogGroup;

}

/**
 * Converts an object of type 'StateMachineSpecForProviderLoggingConfigurationDestinations' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StateMachineSpecForProviderLoggingConfigurationDestinations(obj: StateMachineSpecForProviderLoggingConfigurationDestinations | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'cloudWatchLogsLogGroup': toJson_StateMachineSpecForProviderLoggingConfigurationDestinationsCloudWatchLogsLogGroup(obj.cloudWatchLogsLogGroup),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema StateMachineSpecForProviderRoleArnRefPolicy
 */
export interface StateMachineSpecForProviderRoleArnRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema StateMachineSpecForProviderRoleArnRefPolicy#resolution
   */
  readonly resolution?: StateMachineSpecForProviderRoleArnRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema StateMachineSpecForProviderRoleArnRefPolicy#resolve
   */
  readonly resolve?: StateMachineSpecForProviderRoleArnRefPolicyResolve;

}

/**
 * Converts an object of type 'StateMachineSpecForProviderRoleArnRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StateMachineSpecForProviderRoleArnRefPolicy(obj: StateMachineSpecForProviderRoleArnRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for selection.
 *
 * @schema StateMachineSpecForProviderRoleArnSelectorPolicy
 */
export interface StateMachineSpecForProviderRoleArnSelectorPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema StateMachineSpecForProviderRoleArnSelectorPolicy#resolution
   */
  readonly resolution?: StateMachineSpecForProviderRoleArnSelectorPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema StateMachineSpecForProviderRoleArnSelectorPolicy#resolve
   */
  readonly resolve?: StateMachineSpecForProviderRoleArnSelectorPolicyResolve;

}

/**
 * Converts an object of type 'StateMachineSpecForProviderRoleArnSelectorPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StateMachineSpecForProviderRoleArnSelectorPolicy(obj: StateMachineSpecForProviderRoleArnSelectorPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema StateMachineSpecProviderConfigRefPolicyResolution
 */
export enum StateMachineSpecProviderConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema StateMachineSpecProviderConfigRefPolicyResolve
 */
export enum StateMachineSpecProviderConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Policies for referencing.
 *
 * @schema StateMachineSpecPublishConnectionDetailsToConfigRefPolicy
 */
export interface StateMachineSpecPublishConnectionDetailsToConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema StateMachineSpecPublishConnectionDetailsToConfigRefPolicy#resolution
   */
  readonly resolution?: StateMachineSpecPublishConnectionDetailsToConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema StateMachineSpecPublishConnectionDetailsToConfigRefPolicy#resolve
   */
  readonly resolve?: StateMachineSpecPublishConnectionDetailsToConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'StateMachineSpecPublishConnectionDetailsToConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StateMachineSpecPublishConnectionDetailsToConfigRefPolicy(obj: StateMachineSpecPublishConnectionDetailsToConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema StateMachineSpecForProviderLoggingConfigurationDestinationsCloudWatchLogsLogGroup
 */
export interface StateMachineSpecForProviderLoggingConfigurationDestinationsCloudWatchLogsLogGroup {
  /**
   * @schema StateMachineSpecForProviderLoggingConfigurationDestinationsCloudWatchLogsLogGroup#logGroupARN
   */
  readonly logGroupArn?: string;

}

/**
 * Converts an object of type 'StateMachineSpecForProviderLoggingConfigurationDestinationsCloudWatchLogsLogGroup' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StateMachineSpecForProviderLoggingConfigurationDestinationsCloudWatchLogsLogGroup(obj: StateMachineSpecForProviderLoggingConfigurationDestinationsCloudWatchLogsLogGroup | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'logGroupARN': obj.logGroupArn,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema StateMachineSpecForProviderRoleArnRefPolicyResolution
 */
export enum StateMachineSpecForProviderRoleArnRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema StateMachineSpecForProviderRoleArnRefPolicyResolve
 */
export enum StateMachineSpecForProviderRoleArnRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema StateMachineSpecForProviderRoleArnSelectorPolicyResolution
 */
export enum StateMachineSpecForProviderRoleArnSelectorPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema StateMachineSpecForProviderRoleArnSelectorPolicyResolve
 */
export enum StateMachineSpecForProviderRoleArnSelectorPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema StateMachineSpecPublishConnectionDetailsToConfigRefPolicyResolution
 */
export enum StateMachineSpecPublishConnectionDetailsToConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema StateMachineSpecPublishConnectionDetailsToConfigRefPolicyResolve
 */
export enum StateMachineSpecPublishConnectionDetailsToConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

