// @ts-nocheck
// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 * LogGroup is the Schema for the LogGroups API
 *
 * @schema LogGroup
 */
export class LogGroup extends ApiObject {
  /**
   * Returns the apiVersion and kind for "LogGroup"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'cloudwatchlogs.aws.crossplane.io/v1alpha1',
    kind: 'LogGroup',
  }

  /**
   * Renders a Kubernetes manifest for "LogGroup".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: LogGroupProps): any {
    return {
      ...LogGroup.GVK,
      ...toJson_LogGroupProps(props),
    };
  }

  /**
   * Defines a "LogGroup" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: LogGroupProps) {
    super(scope, id, {
      ...LogGroup.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...LogGroup.GVK,
      ...toJson_LogGroupProps(resolved),
    };
  }
}

/**
 * LogGroup is the Schema for the LogGroups API
 *
 * @schema LogGroup
 */
export interface LogGroupProps {
  /**
   * @schema LogGroup#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * LogGroupSpec defines the desired state of LogGroup
   *
   * @schema LogGroup#spec
   */
  readonly spec: LogGroupSpec;

}

/**
 * Converts an object of type 'LogGroupProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_LogGroupProps(obj: LogGroupProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_LogGroupSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * LogGroupSpec defines the desired state of LogGroup
 *
 * @schema LogGroupSpec
 */
export interface LogGroupSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
   *
   * @schema LogGroupSpec#deletionPolicy
   */
  readonly deletionPolicy?: LogGroupSpecDeletionPolicy;

  /**
   * LogGroupParameters defines the desired state of LogGroup
   *
   * @schema LogGroupSpec#forProvider
   */
  readonly forProvider: LogGroupSpecForProvider;

  /**
   * THIS IS A BETA FIELD. It is on by default but can be opted out through a Crossplane feature flag. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
   *
   * @schema LogGroupSpec#managementPolicies
   */
  readonly managementPolicies?: LogGroupSpecManagementPolicies[];

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema LogGroupSpec#providerConfigRef
   */
  readonly providerConfigRef?: LogGroupSpecProviderConfigRef;

  /**
   * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema LogGroupSpec#publishConnectionDetailsTo
   */
  readonly publishConnectionDetailsTo?: LogGroupSpecPublishConnectionDetailsTo;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
   *
   * @schema LogGroupSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: LogGroupSpecWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'LogGroupSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_LogGroupSpec(obj: LogGroupSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'deletionPolicy': obj.deletionPolicy,
    'forProvider': toJson_LogGroupSpecForProvider(obj.forProvider),
    'managementPolicies': obj.managementPolicies?.map(y => y),
    'providerConfigRef': toJson_LogGroupSpecProviderConfigRef(obj.providerConfigRef),
    'publishConnectionDetailsTo': toJson_LogGroupSpecPublishConnectionDetailsTo(obj.publishConnectionDetailsTo),
    'writeConnectionSecretToRef': toJson_LogGroupSpecWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
 *
 * @schema LogGroupSpecDeletionPolicy
 */
export enum LogGroupSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * LogGroupParameters defines the desired state of LogGroup
 *
 * @schema LogGroupSpecForProvider
 */
export interface LogGroupSpecForProvider {
  /**
   * The Amazon Resource Name (ARN) of the CMK to use when encrypting log data. For more information, see Amazon Resource Names - AWS Key Management Service (AWS KMS) (https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-kms).
   *
   * @schema LogGroupSpecForProvider#kmsKeyID
   */
  readonly kmsKeyId?: string;

  /**
   * KMSKeyIDRef is a reference to a KMS Key used to set KMSKeyID.
   *
   * @schema LogGroupSpecForProvider#kmsKeyIDRef
   */
  readonly kmsKeyIdRef?: LogGroupSpecForProviderKmsKeyIdRef;

  /**
   * KMSKeyIDSelector selects a reference to a KMS Key used to set KMSKeyID.
   *
   * @schema LogGroupSpecForProvider#kmsKeyIDSelector
   */
  readonly kmsKeyIdSelector?: LogGroupSpecForProviderKmsKeyIdSelector;

  /**
   * The name of the log group.
   *
   * @schema LogGroupSpecForProvider#logGroupName
   */
  readonly logGroupName: string;

  /**
   * Region is which region the LogGroup will be created.
   *
   * @schema LogGroupSpecForProvider#region
   */
  readonly region: string;

  /**
   * The number of days to retain the log events in the specified log group. If you select 0, the events in the log group are always retained and never expire.
   *
   * @schema LogGroupSpecForProvider#retentionInDays
   */
  readonly retentionInDays?: LogGroupSpecForProviderRetentionInDays;

  /**
   * The key-value pairs to use for the tags.
   * You can grant users access to certain log groups while preventing them from accessing other log groups. To do so, tag your groups and use IAM policies that refer to those tags. To assign tags when you create a log group, you must have either the logs:TagResource or logs:TagLogGroup permission. For more information about tagging, see Tagging Amazon Web Services resources (https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html). For more information about using tags to control access, see Controlling access to Amazon Web Services resources using tags (https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html).
   *
   * @schema LogGroupSpecForProvider#tags
   */
  readonly tags?: { [key: string]: string };

}

/**
 * Converts an object of type 'LogGroupSpecForProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_LogGroupSpecForProvider(obj: LogGroupSpecForProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'kmsKeyID': obj.kmsKeyId,
    'kmsKeyIDRef': toJson_LogGroupSpecForProviderKmsKeyIdRef(obj.kmsKeyIdRef),
    'kmsKeyIDSelector': toJson_LogGroupSpecForProviderKmsKeyIdSelector(obj.kmsKeyIdSelector),
    'logGroupName': obj.logGroupName,
    'region': obj.region,
    'retentionInDays': obj.retentionInDays,
    'tags': ((obj.tags) === undefined) ? undefined : (Object.entries(obj.tags).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A ManagementAction represents an action that the Crossplane controllers can take on an external resource.
 *
 * @schema LogGroupSpecManagementPolicies
 */
export enum LogGroupSpecManagementPolicies {
  /** Observe */
  OBSERVE = "Observe",
  /** Create */
  CREATE = "Create",
  /** Update */
  UPDATE = "Update",
  /** Delete */
  DELETE = "Delete",
  /** LateInitialize */
  LATE_INITIALIZE = "LateInitialize",
  /** * */
  VALUE_ASTERISK = "*",
}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema LogGroupSpecProviderConfigRef
 */
export interface LogGroupSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema LogGroupSpecProviderConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema LogGroupSpecProviderConfigRef#policy
   */
  readonly policy?: LogGroupSpecProviderConfigRefPolicy;

}

/**
 * Converts an object of type 'LogGroupSpecProviderConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_LogGroupSpecProviderConfigRef(obj: LogGroupSpecProviderConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_LogGroupSpecProviderConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema LogGroupSpecPublishConnectionDetailsTo
 */
export interface LogGroupSpecPublishConnectionDetailsTo {
  /**
   * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
   *
   * @schema LogGroupSpecPublishConnectionDetailsTo#configRef
   */
  readonly configRef?: LogGroupSpecPublishConnectionDetailsToConfigRef;

  /**
   * Metadata is the metadata for connection secret.
   *
   * @schema LogGroupSpecPublishConnectionDetailsTo#metadata
   */
  readonly metadata?: LogGroupSpecPublishConnectionDetailsToMetadata;

  /**
   * Name is the name of the connection secret.
   *
   * @schema LogGroupSpecPublishConnectionDetailsTo#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'LogGroupSpecPublishConnectionDetailsTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_LogGroupSpecPublishConnectionDetailsTo(obj: LogGroupSpecPublishConnectionDetailsTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configRef': toJson_LogGroupSpecPublishConnectionDetailsToConfigRef(obj.configRef),
    'metadata': toJson_LogGroupSpecPublishConnectionDetailsToMetadata(obj.metadata),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
 *
 * @schema LogGroupSpecWriteConnectionSecretToRef
 */
export interface LogGroupSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema LogGroupSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema LogGroupSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'LogGroupSpecWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_LogGroupSpecWriteConnectionSecretToRef(obj: LogGroupSpecWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * KMSKeyIDRef is a reference to a KMS Key used to set KMSKeyID.
 *
 * @schema LogGroupSpecForProviderKmsKeyIdRef
 */
export interface LogGroupSpecForProviderKmsKeyIdRef {
  /**
   * Name of the referenced object.
   *
   * @schema LogGroupSpecForProviderKmsKeyIdRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema LogGroupSpecForProviderKmsKeyIdRef#policy
   */
  readonly policy?: LogGroupSpecForProviderKmsKeyIdRefPolicy;

}

/**
 * Converts an object of type 'LogGroupSpecForProviderKmsKeyIdRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_LogGroupSpecForProviderKmsKeyIdRef(obj: LogGroupSpecForProviderKmsKeyIdRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_LogGroupSpecForProviderKmsKeyIdRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * KMSKeyIDSelector selects a reference to a KMS Key used to set KMSKeyID.
 *
 * @schema LogGroupSpecForProviderKmsKeyIdSelector
 */
export interface LogGroupSpecForProviderKmsKeyIdSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema LogGroupSpecForProviderKmsKeyIdSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema LogGroupSpecForProviderKmsKeyIdSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

  /**
   * Policies for selection.
   *
   * @schema LogGroupSpecForProviderKmsKeyIdSelector#policy
   */
  readonly policy?: LogGroupSpecForProviderKmsKeyIdSelectorPolicy;

}

/**
 * Converts an object of type 'LogGroupSpecForProviderKmsKeyIdSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_LogGroupSpecForProviderKmsKeyIdSelector(obj: LogGroupSpecForProviderKmsKeyIdSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchControllerRef': obj.matchControllerRef,
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'policy': toJson_LogGroupSpecForProviderKmsKeyIdSelectorPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The number of days to retain the log events in the specified log group. If you select 0, the events in the log group are always retained and never expire.
 *
 * @schema LogGroupSpecForProviderRetentionInDays
 */
export enum LogGroupSpecForProviderRetentionInDays {
  /** 0 */
  VALUE_0 = 0,
  /** 1 */
  VALUE_1 = 1,
  /** 3 */
  VALUE_3 = 3,
  /** 5 */
  VALUE_5 = 5,
  /** 7 */
  VALUE_7 = 7,
  /** 14 */
  VALUE_14 = 14,
  /** 30 */
  VALUE_30 = 30,
  /** 60 */
  VALUE_60 = 60,
  /** 90 */
  VALUE_90 = 90,
  /** 120 */
  VALUE_120 = 120,
  /** 150 */
  VALUE_150 = 150,
  /** 180 */
  VALUE_180 = 180,
  /** 365 */
  VALUE_365 = 365,
  /** 400 */
  VALUE_400 = 400,
  /** 545 */
  VALUE_545 = 545,
  /** 731 */
  VALUE_731 = 731,
  /** 1827 */
  VALUE_1827 = 1827,
  /** 3653 */
  VALUE_3653 = 3653,
}

/**
 * Policies for referencing.
 *
 * @schema LogGroupSpecProviderConfigRefPolicy
 */
export interface LogGroupSpecProviderConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema LogGroupSpecProviderConfigRefPolicy#resolution
   */
  readonly resolution?: LogGroupSpecProviderConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema LogGroupSpecProviderConfigRefPolicy#resolve
   */
  readonly resolve?: LogGroupSpecProviderConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'LogGroupSpecProviderConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_LogGroupSpecProviderConfigRefPolicy(obj: LogGroupSpecProviderConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
 *
 * @schema LogGroupSpecPublishConnectionDetailsToConfigRef
 */
export interface LogGroupSpecPublishConnectionDetailsToConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema LogGroupSpecPublishConnectionDetailsToConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema LogGroupSpecPublishConnectionDetailsToConfigRef#policy
   */
  readonly policy?: LogGroupSpecPublishConnectionDetailsToConfigRefPolicy;

}

/**
 * Converts an object of type 'LogGroupSpecPublishConnectionDetailsToConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_LogGroupSpecPublishConnectionDetailsToConfigRef(obj: LogGroupSpecPublishConnectionDetailsToConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_LogGroupSpecPublishConnectionDetailsToConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Metadata is the metadata for connection secret.
 *
 * @schema LogGroupSpecPublishConnectionDetailsToMetadata
 */
export interface LogGroupSpecPublishConnectionDetailsToMetadata {
  /**
   * Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
   *
   * @schema LogGroupSpecPublishConnectionDetailsToMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
   *
   * @schema LogGroupSpecPublishConnectionDetailsToMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
   *
   * @schema LogGroupSpecPublishConnectionDetailsToMetadata#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'LogGroupSpecPublishConnectionDetailsToMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_LogGroupSpecPublishConnectionDetailsToMetadata(obj: LogGroupSpecPublishConnectionDetailsToMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema LogGroupSpecForProviderKmsKeyIdRefPolicy
 */
export interface LogGroupSpecForProviderKmsKeyIdRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema LogGroupSpecForProviderKmsKeyIdRefPolicy#resolution
   */
  readonly resolution?: LogGroupSpecForProviderKmsKeyIdRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema LogGroupSpecForProviderKmsKeyIdRefPolicy#resolve
   */
  readonly resolve?: LogGroupSpecForProviderKmsKeyIdRefPolicyResolve;

}

/**
 * Converts an object of type 'LogGroupSpecForProviderKmsKeyIdRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_LogGroupSpecForProviderKmsKeyIdRefPolicy(obj: LogGroupSpecForProviderKmsKeyIdRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for selection.
 *
 * @schema LogGroupSpecForProviderKmsKeyIdSelectorPolicy
 */
export interface LogGroupSpecForProviderKmsKeyIdSelectorPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema LogGroupSpecForProviderKmsKeyIdSelectorPolicy#resolution
   */
  readonly resolution?: LogGroupSpecForProviderKmsKeyIdSelectorPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema LogGroupSpecForProviderKmsKeyIdSelectorPolicy#resolve
   */
  readonly resolve?: LogGroupSpecForProviderKmsKeyIdSelectorPolicyResolve;

}

/**
 * Converts an object of type 'LogGroupSpecForProviderKmsKeyIdSelectorPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_LogGroupSpecForProviderKmsKeyIdSelectorPolicy(obj: LogGroupSpecForProviderKmsKeyIdSelectorPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema LogGroupSpecProviderConfigRefPolicyResolution
 */
export enum LogGroupSpecProviderConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema LogGroupSpecProviderConfigRefPolicyResolve
 */
export enum LogGroupSpecProviderConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Policies for referencing.
 *
 * @schema LogGroupSpecPublishConnectionDetailsToConfigRefPolicy
 */
export interface LogGroupSpecPublishConnectionDetailsToConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema LogGroupSpecPublishConnectionDetailsToConfigRefPolicy#resolution
   */
  readonly resolution?: LogGroupSpecPublishConnectionDetailsToConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema LogGroupSpecPublishConnectionDetailsToConfigRefPolicy#resolve
   */
  readonly resolve?: LogGroupSpecPublishConnectionDetailsToConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'LogGroupSpecPublishConnectionDetailsToConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_LogGroupSpecPublishConnectionDetailsToConfigRefPolicy(obj: LogGroupSpecPublishConnectionDetailsToConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema LogGroupSpecForProviderKmsKeyIdRefPolicyResolution
 */
export enum LogGroupSpecForProviderKmsKeyIdRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema LogGroupSpecForProviderKmsKeyIdRefPolicyResolve
 */
export enum LogGroupSpecForProviderKmsKeyIdRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema LogGroupSpecForProviderKmsKeyIdSelectorPolicyResolution
 */
export enum LogGroupSpecForProviderKmsKeyIdSelectorPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema LogGroupSpecForProviderKmsKeyIdSelectorPolicyResolve
 */
export enum LogGroupSpecForProviderKmsKeyIdSelectorPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema LogGroupSpecPublishConnectionDetailsToConfigRefPolicyResolution
 */
export enum LogGroupSpecPublishConnectionDetailsToConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema LogGroupSpecPublishConnectionDetailsToConfigRefPolicyResolve
 */
export enum LogGroupSpecPublishConnectionDetailsToConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

