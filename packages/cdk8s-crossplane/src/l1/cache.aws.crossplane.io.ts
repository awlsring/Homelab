// @ts-nocheck
// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 * A CacheCluster is a managed resource that represents an AWS ElastiCache Cache Cluster.
 *
 * @schema CacheCluster
 */
export class CacheCluster extends ApiObject {
  /**
   * Returns the apiVersion and kind for "CacheCluster"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'cache.aws.crossplane.io/v1alpha1',
    kind: 'CacheCluster',
  }

  /**
   * Renders a Kubernetes manifest for "CacheCluster".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: CacheClusterProps): any {
    return {
      ...CacheCluster.GVK,
      ...toJson_CacheClusterProps(props),
    };
  }

  /**
   * Defines a "CacheCluster" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: CacheClusterProps) {
    super(scope, id, {
      ...CacheCluster.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...CacheCluster.GVK,
      ...toJson_CacheClusterProps(resolved),
    };
  }
}

/**
 * A CacheCluster is a managed resource that represents an AWS ElastiCache Cache Cluster.
 *
 * @schema CacheCluster
 */
export interface CacheClusterProps {
  /**
   * @schema CacheCluster#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * A CacheClusterSpec defines the desired state of a CacheCluster.
   *
   * @schema CacheCluster#spec
   */
  readonly spec: CacheClusterSpec;

}

/**
 * Converts an object of type 'CacheClusterProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CacheClusterProps(obj: CacheClusterProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_CacheClusterSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A CacheClusterSpec defines the desired state of a CacheCluster.
 *
 * @schema CacheClusterSpec
 */
export interface CacheClusterSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
   *
   * @schema CacheClusterSpec#deletionPolicy
   */
  readonly deletionPolicy?: CacheClusterSpecDeletionPolicy;

  /**
   * CacheClusterParameters define the desired state of an AWS ElastiCache Cache Cluster. Most fields map directly to an AWS ReplicationGroup: https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_CreateReplicationGroup.html#API_CreateReplicationGroup_RequestParameters
   *
   * @schema CacheClusterSpec#forProvider
   */
  readonly forProvider: CacheClusterSpecForProvider;

  /**
   * THIS IS A BETA FIELD. It is on by default but can be opted out through a Crossplane feature flag. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
   *
   * @schema CacheClusterSpec#managementPolicies
   */
  readonly managementPolicies?: CacheClusterSpecManagementPolicies[];

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema CacheClusterSpec#providerConfigRef
   */
  readonly providerConfigRef?: CacheClusterSpecProviderConfigRef;

  /**
   * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema CacheClusterSpec#publishConnectionDetailsTo
   */
  readonly publishConnectionDetailsTo?: CacheClusterSpecPublishConnectionDetailsTo;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
   *
   * @schema CacheClusterSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: CacheClusterSpecWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'CacheClusterSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CacheClusterSpec(obj: CacheClusterSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'deletionPolicy': obj.deletionPolicy,
    'forProvider': toJson_CacheClusterSpecForProvider(obj.forProvider),
    'managementPolicies': obj.managementPolicies?.map(y => y),
    'providerConfigRef': toJson_CacheClusterSpecProviderConfigRef(obj.providerConfigRef),
    'publishConnectionDetailsTo': toJson_CacheClusterSpecPublishConnectionDetailsTo(obj.publishConnectionDetailsTo),
    'writeConnectionSecretToRef': toJson_CacheClusterSpecWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
 *
 * @schema CacheClusterSpecDeletionPolicy
 */
export enum CacheClusterSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * CacheClusterParameters define the desired state of an AWS ElastiCache Cache Cluster. Most fields map directly to an AWS ReplicationGroup: https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_CreateReplicationGroup.html#API_CreateReplicationGroup_RequestParameters
 *
 * @schema CacheClusterSpecForProvider
 */
export interface CacheClusterSpecForProvider {
  /**
   * If true, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the PreferredMaintenanceWindow setting for the cluster. If false, changes to the cluster are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.
   *
   * @schema CacheClusterSpecForProvider#applyImmediately
   */
  readonly applyImmediately?: boolean;

  /**
   * The password used to access a password protected server.
   *
   * @schema CacheClusterSpecForProvider#authToken
   */
  readonly authToken?: string;

  /**
   * Specifies the strategy to use to update the AUTH token. This parameter must be specified with the auth-token parameter. Possible values:
   *
   * @schema CacheClusterSpecForProvider#authTokenUpdateStrategy
   */
  readonly authTokenUpdateStrategy?: string;

  /**
   * Specifies whether the nodes in this Memcached cluster are created in a single Availability Zone or created across multiple Availability Zones in the cluster's region. This parameter is only supported for Memcached clusters.
   *
   * @schema CacheClusterSpecForProvider#azMode
   */
  readonly azMode?: string;

  /**
   * A list of cache node IDs to be removed.
   *
   * @schema CacheClusterSpecForProvider#cacheNodeIdsToRemove
   */
  readonly cacheNodeIdsToRemove?: string[];

  /**
   * The compute and memory capacity of the nodes in the node group (shard).
   *
   * @schema CacheClusterSpecForProvider#cacheNodeType
   */
  readonly cacheNodeType: string;

  /**
   * The name of the parameter group to associate with this cluster. If this argument is omitted, the default parameter group for the specified engine is used.
   *
   * @schema CacheClusterSpecForProvider#cacheParameterGroupName
   */
  readonly cacheParameterGroupName?: string;

  /**
   * A list of security group names to associate with this cluster.
   *
   * @schema CacheClusterSpecForProvider#cacheSecurityGroupNames
   */
  readonly cacheSecurityGroupNames?: string[];

  /**
   * The name of the subnet group to be used for the cluster.
   *
   * @schema CacheClusterSpecForProvider#cacheSubnetGroupName
   */
  readonly cacheSubnetGroupName?: string;

  /**
   * A referencer to retrieve the name of a CacheSubnetGroup
   *
   * @schema CacheClusterSpecForProvider#cacheSubnetGroupNameRef
   */
  readonly cacheSubnetGroupNameRef?: CacheClusterSpecForProviderCacheSubnetGroupNameRef;

  /**
   * A selector to select a referencer to retrieve the name of a CacheSubnetGroup
   *
   * @schema CacheClusterSpecForProvider#cacheSubnetGroupNameSelector
   */
  readonly cacheSubnetGroupNameSelector?: CacheClusterSpecForProviderCacheSubnetGroupNameSelector;

  /**
   * The name of the cache engine to be used for this cluster.
   *
   * @schema CacheClusterSpecForProvider#engine
   */
  readonly engine?: string;

  /**
   * The version number of the cache engine to be used for this cluster.
   *
   * @schema CacheClusterSpecForProvider#engineVersion
   */
  readonly engineVersion?: string;

  /**
   * The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.
   *
   * @schema CacheClusterSpecForProvider#notificationTopicArn
   */
  readonly notificationTopicArn?: string;

  /**
   * NotificationTopicARNRef references an SNS Topic to retrieve its NotificationTopicARN
   *
   * @schema CacheClusterSpecForProvider#notificationTopicArnRef
   */
  readonly notificationTopicArnRef?: CacheClusterSpecForProviderNotificationTopicArnRef;

  /**
   * NotificationTopicARNSelector selects a reference to an SNS Topic to retrieve its NotificationTopicARN
   *
   * @schema CacheClusterSpecForProvider#notificationTopicArnSelector
   */
  readonly notificationTopicArnSelector?: CacheClusterSpecForProviderNotificationTopicArnSelector;

  /**
   * The initial number of cache nodes that the cluster has.
   *
   * @schema CacheClusterSpecForProvider#numCacheNodes
   */
  readonly numCacheNodes: number;

  /**
   * The port number on which each of the cache nodes accepts connections.
   *
   * @schema CacheClusterSpecForProvider#port
   */
  readonly port?: number;

  /**
   * The EC2 Availability Zone in which the cluster is created. Default: System chosen Availability Zone.
   *
   * @schema CacheClusterSpecForProvider#preferredAvailabilityZone
   */
  readonly preferredAvailabilityZone?: string;

  /**
   * A list of the Availability Zones in which cache nodes are created.
   *
   * @schema CacheClusterSpecForProvider#preferredAvailabilityZones
   */
  readonly preferredAvailabilityZones?: string[];

  /**
   * Specifies the weekly time range during which maintenance on the cluster is performed.
   *
   * @schema CacheClusterSpecForProvider#preferredMaintenanceWindow
   */
  readonly preferredMaintenanceWindow?: string;

  /**
   * Region is the region you'd like your CacheSubnetGroup to be created in.
   *
   * @schema CacheClusterSpecForProvider#region
   */
  readonly region: string;

  /**
   * The ID of the replication group to which this cluster should belong.
   *
   * @schema CacheClusterSpecForProvider#replicationGroupId
   */
  readonly replicationGroupId?: string;

  /**
   * A referencer to retrieve the ID of a Security group
   *
   * @schema CacheClusterSpecForProvider#securityGroupIDRefs
   */
  readonly securityGroupIdRefs?: CacheClusterSpecForProviderSecurityGroupIdRefs[];

  /**
   * A selector to select a referencer to retrieve the ID of a Security Group
   *
   * @schema CacheClusterSpecForProvider#securityGroupIDSelector
   */
  readonly securityGroupIdSelector?: CacheClusterSpecForProviderSecurityGroupIdSelector;

  /**
   * One or more VPC security groups associated with the cluster.
   *
   * @schema CacheClusterSpecForProvider#securityGroupIds
   */
  readonly securityGroupIds?: string[];

  /**
   * A single-element string list containing an Amazon Resource Name (ARN) that uniquely identifies a Redis RDB snapshot file stored in Amazon S3.
   *
   * @schema CacheClusterSpecForProvider#snapshotArns
   */
  readonly snapshotArns?: string[];

  /**
   * The name of a Redis snapshot from which to restore data into the new node group (shard).
   *
   * @schema CacheClusterSpecForProvider#snapshotName
   */
  readonly snapshotName?: string;

  /**
   * The number of days for which ElastiCache retains automatic snapshots before deleting them.
   *
   * @schema CacheClusterSpecForProvider#snapshotRetentionLimit
   */
  readonly snapshotRetentionLimit?: number;

  /**
   * The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).
   *
   * @schema CacheClusterSpecForProvider#snapshotWindow
   */
  readonly snapshotWindow?: string;

  /**
   * A list of cost allocation tags to be added to this resource.
   *
   * @schema CacheClusterSpecForProvider#tags
   */
  readonly tags?: CacheClusterSpecForProviderTags[];

}

/**
 * Converts an object of type 'CacheClusterSpecForProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CacheClusterSpecForProvider(obj: CacheClusterSpecForProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'applyImmediately': obj.applyImmediately,
    'authToken': obj.authToken,
    'authTokenUpdateStrategy': obj.authTokenUpdateStrategy,
    'azMode': obj.azMode,
    'cacheNodeIdsToRemove': obj.cacheNodeIdsToRemove?.map(y => y),
    'cacheNodeType': obj.cacheNodeType,
    'cacheParameterGroupName': obj.cacheParameterGroupName,
    'cacheSecurityGroupNames': obj.cacheSecurityGroupNames?.map(y => y),
    'cacheSubnetGroupName': obj.cacheSubnetGroupName,
    'cacheSubnetGroupNameRef': toJson_CacheClusterSpecForProviderCacheSubnetGroupNameRef(obj.cacheSubnetGroupNameRef),
    'cacheSubnetGroupNameSelector': toJson_CacheClusterSpecForProviderCacheSubnetGroupNameSelector(obj.cacheSubnetGroupNameSelector),
    'engine': obj.engine,
    'engineVersion': obj.engineVersion,
    'notificationTopicArn': obj.notificationTopicArn,
    'notificationTopicArnRef': toJson_CacheClusterSpecForProviderNotificationTopicArnRef(obj.notificationTopicArnRef),
    'notificationTopicArnSelector': toJson_CacheClusterSpecForProviderNotificationTopicArnSelector(obj.notificationTopicArnSelector),
    'numCacheNodes': obj.numCacheNodes,
    'port': obj.port,
    'preferredAvailabilityZone': obj.preferredAvailabilityZone,
    'preferredAvailabilityZones': obj.preferredAvailabilityZones?.map(y => y),
    'preferredMaintenanceWindow': obj.preferredMaintenanceWindow,
    'region': obj.region,
    'replicationGroupId': obj.replicationGroupId,
    'securityGroupIDRefs': obj.securityGroupIdRefs?.map(y => toJson_CacheClusterSpecForProviderSecurityGroupIdRefs(y)),
    'securityGroupIDSelector': toJson_CacheClusterSpecForProviderSecurityGroupIdSelector(obj.securityGroupIdSelector),
    'securityGroupIds': obj.securityGroupIds?.map(y => y),
    'snapshotArns': obj.snapshotArns?.map(y => y),
    'snapshotName': obj.snapshotName,
    'snapshotRetentionLimit': obj.snapshotRetentionLimit,
    'snapshotWindow': obj.snapshotWindow,
    'tags': obj.tags?.map(y => toJson_CacheClusterSpecForProviderTags(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A ManagementAction represents an action that the Crossplane controllers can take on an external resource.
 *
 * @schema CacheClusterSpecManagementPolicies
 */
export enum CacheClusterSpecManagementPolicies {
  /** Observe */
  OBSERVE = "Observe",
  /** Create */
  CREATE = "Create",
  /** Update */
  UPDATE = "Update",
  /** Delete */
  DELETE = "Delete",
  /** LateInitialize */
  LATE_INITIALIZE = "LateInitialize",
  /** * */
  VALUE_ASTERISK = "*",
}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema CacheClusterSpecProviderConfigRef
 */
export interface CacheClusterSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema CacheClusterSpecProviderConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema CacheClusterSpecProviderConfigRef#policy
   */
  readonly policy?: CacheClusterSpecProviderConfigRefPolicy;

}

/**
 * Converts an object of type 'CacheClusterSpecProviderConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CacheClusterSpecProviderConfigRef(obj: CacheClusterSpecProviderConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_CacheClusterSpecProviderConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema CacheClusterSpecPublishConnectionDetailsTo
 */
export interface CacheClusterSpecPublishConnectionDetailsTo {
  /**
   * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
   *
   * @schema CacheClusterSpecPublishConnectionDetailsTo#configRef
   */
  readonly configRef?: CacheClusterSpecPublishConnectionDetailsToConfigRef;

  /**
   * Metadata is the metadata for connection secret.
   *
   * @schema CacheClusterSpecPublishConnectionDetailsTo#metadata
   */
  readonly metadata?: CacheClusterSpecPublishConnectionDetailsToMetadata;

  /**
   * Name is the name of the connection secret.
   *
   * @schema CacheClusterSpecPublishConnectionDetailsTo#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'CacheClusterSpecPublishConnectionDetailsTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CacheClusterSpecPublishConnectionDetailsTo(obj: CacheClusterSpecPublishConnectionDetailsTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configRef': toJson_CacheClusterSpecPublishConnectionDetailsToConfigRef(obj.configRef),
    'metadata': toJson_CacheClusterSpecPublishConnectionDetailsToMetadata(obj.metadata),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
 *
 * @schema CacheClusterSpecWriteConnectionSecretToRef
 */
export interface CacheClusterSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema CacheClusterSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema CacheClusterSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'CacheClusterSpecWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CacheClusterSpecWriteConnectionSecretToRef(obj: CacheClusterSpecWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A referencer to retrieve the name of a CacheSubnetGroup
 *
 * @schema CacheClusterSpecForProviderCacheSubnetGroupNameRef
 */
export interface CacheClusterSpecForProviderCacheSubnetGroupNameRef {
  /**
   * Name of the referenced object.
   *
   * @schema CacheClusterSpecForProviderCacheSubnetGroupNameRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema CacheClusterSpecForProviderCacheSubnetGroupNameRef#policy
   */
  readonly policy?: CacheClusterSpecForProviderCacheSubnetGroupNameRefPolicy;

}

/**
 * Converts an object of type 'CacheClusterSpecForProviderCacheSubnetGroupNameRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CacheClusterSpecForProviderCacheSubnetGroupNameRef(obj: CacheClusterSpecForProviderCacheSubnetGroupNameRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_CacheClusterSpecForProviderCacheSubnetGroupNameRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A selector to select a referencer to retrieve the name of a CacheSubnetGroup
 *
 * @schema CacheClusterSpecForProviderCacheSubnetGroupNameSelector
 */
export interface CacheClusterSpecForProviderCacheSubnetGroupNameSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema CacheClusterSpecForProviderCacheSubnetGroupNameSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema CacheClusterSpecForProviderCacheSubnetGroupNameSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

  /**
   * Policies for selection.
   *
   * @schema CacheClusterSpecForProviderCacheSubnetGroupNameSelector#policy
   */
  readonly policy?: CacheClusterSpecForProviderCacheSubnetGroupNameSelectorPolicy;

}

/**
 * Converts an object of type 'CacheClusterSpecForProviderCacheSubnetGroupNameSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CacheClusterSpecForProviderCacheSubnetGroupNameSelector(obj: CacheClusterSpecForProviderCacheSubnetGroupNameSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchControllerRef': obj.matchControllerRef,
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'policy': toJson_CacheClusterSpecForProviderCacheSubnetGroupNameSelectorPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * NotificationTopicARNRef references an SNS Topic to retrieve its NotificationTopicARN
 *
 * @schema CacheClusterSpecForProviderNotificationTopicArnRef
 */
export interface CacheClusterSpecForProviderNotificationTopicArnRef {
  /**
   * Name of the referenced object.
   *
   * @schema CacheClusterSpecForProviderNotificationTopicArnRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema CacheClusterSpecForProviderNotificationTopicArnRef#policy
   */
  readonly policy?: CacheClusterSpecForProviderNotificationTopicArnRefPolicy;

}

/**
 * Converts an object of type 'CacheClusterSpecForProviderNotificationTopicArnRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CacheClusterSpecForProviderNotificationTopicArnRef(obj: CacheClusterSpecForProviderNotificationTopicArnRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_CacheClusterSpecForProviderNotificationTopicArnRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * NotificationTopicARNSelector selects a reference to an SNS Topic to retrieve its NotificationTopicARN
 *
 * @schema CacheClusterSpecForProviderNotificationTopicArnSelector
 */
export interface CacheClusterSpecForProviderNotificationTopicArnSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema CacheClusterSpecForProviderNotificationTopicArnSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema CacheClusterSpecForProviderNotificationTopicArnSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

  /**
   * Policies for selection.
   *
   * @schema CacheClusterSpecForProviderNotificationTopicArnSelector#policy
   */
  readonly policy?: CacheClusterSpecForProviderNotificationTopicArnSelectorPolicy;

}

/**
 * Converts an object of type 'CacheClusterSpecForProviderNotificationTopicArnSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CacheClusterSpecForProviderNotificationTopicArnSelector(obj: CacheClusterSpecForProviderNotificationTopicArnSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchControllerRef': obj.matchControllerRef,
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'policy': toJson_CacheClusterSpecForProviderNotificationTopicArnSelectorPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A Reference to a named object.
 *
 * @schema CacheClusterSpecForProviderSecurityGroupIdRefs
 */
export interface CacheClusterSpecForProviderSecurityGroupIdRefs {
  /**
   * Name of the referenced object.
   *
   * @schema CacheClusterSpecForProviderSecurityGroupIdRefs#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema CacheClusterSpecForProviderSecurityGroupIdRefs#policy
   */
  readonly policy?: CacheClusterSpecForProviderSecurityGroupIdRefsPolicy;

}

/**
 * Converts an object of type 'CacheClusterSpecForProviderSecurityGroupIdRefs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CacheClusterSpecForProviderSecurityGroupIdRefs(obj: CacheClusterSpecForProviderSecurityGroupIdRefs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_CacheClusterSpecForProviderSecurityGroupIdRefsPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A selector to select a referencer to retrieve the ID of a Security Group
 *
 * @schema CacheClusterSpecForProviderSecurityGroupIdSelector
 */
export interface CacheClusterSpecForProviderSecurityGroupIdSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema CacheClusterSpecForProviderSecurityGroupIdSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema CacheClusterSpecForProviderSecurityGroupIdSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

  /**
   * Policies for selection.
   *
   * @schema CacheClusterSpecForProviderSecurityGroupIdSelector#policy
   */
  readonly policy?: CacheClusterSpecForProviderSecurityGroupIdSelectorPolicy;

}

/**
 * Converts an object of type 'CacheClusterSpecForProviderSecurityGroupIdSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CacheClusterSpecForProviderSecurityGroupIdSelector(obj: CacheClusterSpecForProviderSecurityGroupIdSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchControllerRef': obj.matchControllerRef,
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'policy': toJson_CacheClusterSpecForProviderSecurityGroupIdSelectorPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A Tag is used to tag the ElastiCache resources in AWS.
 *
 * @schema CacheClusterSpecForProviderTags
 */
export interface CacheClusterSpecForProviderTags {
  /**
   * Key for the tag.
   *
   * @schema CacheClusterSpecForProviderTags#key
   */
  readonly key: string;

  /**
   * Value of the tag.
   *
   * @schema CacheClusterSpecForProviderTags#value
   */
  readonly value?: string;

}

/**
 * Converts an object of type 'CacheClusterSpecForProviderTags' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CacheClusterSpecForProviderTags(obj: CacheClusterSpecForProviderTags | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema CacheClusterSpecProviderConfigRefPolicy
 */
export interface CacheClusterSpecProviderConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema CacheClusterSpecProviderConfigRefPolicy#resolution
   */
  readonly resolution?: CacheClusterSpecProviderConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema CacheClusterSpecProviderConfigRefPolicy#resolve
   */
  readonly resolve?: CacheClusterSpecProviderConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'CacheClusterSpecProviderConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CacheClusterSpecProviderConfigRefPolicy(obj: CacheClusterSpecProviderConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
 *
 * @schema CacheClusterSpecPublishConnectionDetailsToConfigRef
 */
export interface CacheClusterSpecPublishConnectionDetailsToConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema CacheClusterSpecPublishConnectionDetailsToConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema CacheClusterSpecPublishConnectionDetailsToConfigRef#policy
   */
  readonly policy?: CacheClusterSpecPublishConnectionDetailsToConfigRefPolicy;

}

/**
 * Converts an object of type 'CacheClusterSpecPublishConnectionDetailsToConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CacheClusterSpecPublishConnectionDetailsToConfigRef(obj: CacheClusterSpecPublishConnectionDetailsToConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_CacheClusterSpecPublishConnectionDetailsToConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Metadata is the metadata for connection secret.
 *
 * @schema CacheClusterSpecPublishConnectionDetailsToMetadata
 */
export interface CacheClusterSpecPublishConnectionDetailsToMetadata {
  /**
   * Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
   *
   * @schema CacheClusterSpecPublishConnectionDetailsToMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
   *
   * @schema CacheClusterSpecPublishConnectionDetailsToMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
   *
   * @schema CacheClusterSpecPublishConnectionDetailsToMetadata#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'CacheClusterSpecPublishConnectionDetailsToMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CacheClusterSpecPublishConnectionDetailsToMetadata(obj: CacheClusterSpecPublishConnectionDetailsToMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema CacheClusterSpecForProviderCacheSubnetGroupNameRefPolicy
 */
export interface CacheClusterSpecForProviderCacheSubnetGroupNameRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema CacheClusterSpecForProviderCacheSubnetGroupNameRefPolicy#resolution
   */
  readonly resolution?: CacheClusterSpecForProviderCacheSubnetGroupNameRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema CacheClusterSpecForProviderCacheSubnetGroupNameRefPolicy#resolve
   */
  readonly resolve?: CacheClusterSpecForProviderCacheSubnetGroupNameRefPolicyResolve;

}

/**
 * Converts an object of type 'CacheClusterSpecForProviderCacheSubnetGroupNameRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CacheClusterSpecForProviderCacheSubnetGroupNameRefPolicy(obj: CacheClusterSpecForProviderCacheSubnetGroupNameRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for selection.
 *
 * @schema CacheClusterSpecForProviderCacheSubnetGroupNameSelectorPolicy
 */
export interface CacheClusterSpecForProviderCacheSubnetGroupNameSelectorPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema CacheClusterSpecForProviderCacheSubnetGroupNameSelectorPolicy#resolution
   */
  readonly resolution?: CacheClusterSpecForProviderCacheSubnetGroupNameSelectorPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema CacheClusterSpecForProviderCacheSubnetGroupNameSelectorPolicy#resolve
   */
  readonly resolve?: CacheClusterSpecForProviderCacheSubnetGroupNameSelectorPolicyResolve;

}

/**
 * Converts an object of type 'CacheClusterSpecForProviderCacheSubnetGroupNameSelectorPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CacheClusterSpecForProviderCacheSubnetGroupNameSelectorPolicy(obj: CacheClusterSpecForProviderCacheSubnetGroupNameSelectorPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema CacheClusterSpecForProviderNotificationTopicArnRefPolicy
 */
export interface CacheClusterSpecForProviderNotificationTopicArnRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema CacheClusterSpecForProviderNotificationTopicArnRefPolicy#resolution
   */
  readonly resolution?: CacheClusterSpecForProviderNotificationTopicArnRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema CacheClusterSpecForProviderNotificationTopicArnRefPolicy#resolve
   */
  readonly resolve?: CacheClusterSpecForProviderNotificationTopicArnRefPolicyResolve;

}

/**
 * Converts an object of type 'CacheClusterSpecForProviderNotificationTopicArnRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CacheClusterSpecForProviderNotificationTopicArnRefPolicy(obj: CacheClusterSpecForProviderNotificationTopicArnRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for selection.
 *
 * @schema CacheClusterSpecForProviderNotificationTopicArnSelectorPolicy
 */
export interface CacheClusterSpecForProviderNotificationTopicArnSelectorPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema CacheClusterSpecForProviderNotificationTopicArnSelectorPolicy#resolution
   */
  readonly resolution?: CacheClusterSpecForProviderNotificationTopicArnSelectorPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema CacheClusterSpecForProviderNotificationTopicArnSelectorPolicy#resolve
   */
  readonly resolve?: CacheClusterSpecForProviderNotificationTopicArnSelectorPolicyResolve;

}

/**
 * Converts an object of type 'CacheClusterSpecForProviderNotificationTopicArnSelectorPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CacheClusterSpecForProviderNotificationTopicArnSelectorPolicy(obj: CacheClusterSpecForProviderNotificationTopicArnSelectorPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema CacheClusterSpecForProviderSecurityGroupIdRefsPolicy
 */
export interface CacheClusterSpecForProviderSecurityGroupIdRefsPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema CacheClusterSpecForProviderSecurityGroupIdRefsPolicy#resolution
   */
  readonly resolution?: CacheClusterSpecForProviderSecurityGroupIdRefsPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema CacheClusterSpecForProviderSecurityGroupIdRefsPolicy#resolve
   */
  readonly resolve?: CacheClusterSpecForProviderSecurityGroupIdRefsPolicyResolve;

}

/**
 * Converts an object of type 'CacheClusterSpecForProviderSecurityGroupIdRefsPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CacheClusterSpecForProviderSecurityGroupIdRefsPolicy(obj: CacheClusterSpecForProviderSecurityGroupIdRefsPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for selection.
 *
 * @schema CacheClusterSpecForProviderSecurityGroupIdSelectorPolicy
 */
export interface CacheClusterSpecForProviderSecurityGroupIdSelectorPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema CacheClusterSpecForProviderSecurityGroupIdSelectorPolicy#resolution
   */
  readonly resolution?: CacheClusterSpecForProviderSecurityGroupIdSelectorPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema CacheClusterSpecForProviderSecurityGroupIdSelectorPolicy#resolve
   */
  readonly resolve?: CacheClusterSpecForProviderSecurityGroupIdSelectorPolicyResolve;

}

/**
 * Converts an object of type 'CacheClusterSpecForProviderSecurityGroupIdSelectorPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CacheClusterSpecForProviderSecurityGroupIdSelectorPolicy(obj: CacheClusterSpecForProviderSecurityGroupIdSelectorPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema CacheClusterSpecProviderConfigRefPolicyResolution
 */
export enum CacheClusterSpecProviderConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema CacheClusterSpecProviderConfigRefPolicyResolve
 */
export enum CacheClusterSpecProviderConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Policies for referencing.
 *
 * @schema CacheClusterSpecPublishConnectionDetailsToConfigRefPolicy
 */
export interface CacheClusterSpecPublishConnectionDetailsToConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema CacheClusterSpecPublishConnectionDetailsToConfigRefPolicy#resolution
   */
  readonly resolution?: CacheClusterSpecPublishConnectionDetailsToConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema CacheClusterSpecPublishConnectionDetailsToConfigRefPolicy#resolve
   */
  readonly resolve?: CacheClusterSpecPublishConnectionDetailsToConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'CacheClusterSpecPublishConnectionDetailsToConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CacheClusterSpecPublishConnectionDetailsToConfigRefPolicy(obj: CacheClusterSpecPublishConnectionDetailsToConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema CacheClusterSpecForProviderCacheSubnetGroupNameRefPolicyResolution
 */
export enum CacheClusterSpecForProviderCacheSubnetGroupNameRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema CacheClusterSpecForProviderCacheSubnetGroupNameRefPolicyResolve
 */
export enum CacheClusterSpecForProviderCacheSubnetGroupNameRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema CacheClusterSpecForProviderCacheSubnetGroupNameSelectorPolicyResolution
 */
export enum CacheClusterSpecForProviderCacheSubnetGroupNameSelectorPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema CacheClusterSpecForProviderCacheSubnetGroupNameSelectorPolicyResolve
 */
export enum CacheClusterSpecForProviderCacheSubnetGroupNameSelectorPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema CacheClusterSpecForProviderNotificationTopicArnRefPolicyResolution
 */
export enum CacheClusterSpecForProviderNotificationTopicArnRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema CacheClusterSpecForProviderNotificationTopicArnRefPolicyResolve
 */
export enum CacheClusterSpecForProviderNotificationTopicArnRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema CacheClusterSpecForProviderNotificationTopicArnSelectorPolicyResolution
 */
export enum CacheClusterSpecForProviderNotificationTopicArnSelectorPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema CacheClusterSpecForProviderNotificationTopicArnSelectorPolicyResolve
 */
export enum CacheClusterSpecForProviderNotificationTopicArnSelectorPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema CacheClusterSpecForProviderSecurityGroupIdRefsPolicyResolution
 */
export enum CacheClusterSpecForProviderSecurityGroupIdRefsPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema CacheClusterSpecForProviderSecurityGroupIdRefsPolicyResolve
 */
export enum CacheClusterSpecForProviderSecurityGroupIdRefsPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema CacheClusterSpecForProviderSecurityGroupIdSelectorPolicyResolution
 */
export enum CacheClusterSpecForProviderSecurityGroupIdSelectorPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema CacheClusterSpecForProviderSecurityGroupIdSelectorPolicyResolve
 */
export enum CacheClusterSpecForProviderSecurityGroupIdSelectorPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema CacheClusterSpecPublishConnectionDetailsToConfigRefPolicyResolution
 */
export enum CacheClusterSpecPublishConnectionDetailsToConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema CacheClusterSpecPublishConnectionDetailsToConfigRefPolicyResolve
 */
export enum CacheClusterSpecPublishConnectionDetailsToConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}


/**
 * A CacheSubnetGroup is a managed resource that represents an AWS Subnet Group for ElasticCache.
 *
 * @schema CacheSubnetGroup
 */
export class CacheSubnetGroup extends ApiObject {
  /**
   * Returns the apiVersion and kind for "CacheSubnetGroup"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'cache.aws.crossplane.io/v1alpha1',
    kind: 'CacheSubnetGroup',
  }

  /**
   * Renders a Kubernetes manifest for "CacheSubnetGroup".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: CacheSubnetGroupProps): any {
    return {
      ...CacheSubnetGroup.GVK,
      ...toJson_CacheSubnetGroupProps(props),
    };
  }

  /**
   * Defines a "CacheSubnetGroup" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: CacheSubnetGroupProps) {
    super(scope, id, {
      ...CacheSubnetGroup.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...CacheSubnetGroup.GVK,
      ...toJson_CacheSubnetGroupProps(resolved),
    };
  }
}

/**
 * A CacheSubnetGroup is a managed resource that represents an AWS Subnet Group for ElasticCache.
 *
 * @schema CacheSubnetGroup
 */
export interface CacheSubnetGroupProps {
  /**
   * @schema CacheSubnetGroup#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * A CacheSubnetGroupSpec defines the desired state of a CacheSubnetGroup.
   *
   * @schema CacheSubnetGroup#spec
   */
  readonly spec: CacheSubnetGroupSpec;

}

/**
 * Converts an object of type 'CacheSubnetGroupProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CacheSubnetGroupProps(obj: CacheSubnetGroupProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_CacheSubnetGroupSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A CacheSubnetGroupSpec defines the desired state of a CacheSubnetGroup.
 *
 * @schema CacheSubnetGroupSpec
 */
export interface CacheSubnetGroupSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
   *
   * @schema CacheSubnetGroupSpec#deletionPolicy
   */
  readonly deletionPolicy?: CacheSubnetGroupSpecDeletionPolicy;

  /**
   * CacheSubnetGroupParameters define the desired state of an AWS ElasticCache Subnet Group.
   *
   * @schema CacheSubnetGroupSpec#forProvider
   */
  readonly forProvider: CacheSubnetGroupSpecForProvider;

  /**
   * THIS IS A BETA FIELD. It is on by default but can be opted out through a Crossplane feature flag. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
   *
   * @schema CacheSubnetGroupSpec#managementPolicies
   */
  readonly managementPolicies?: CacheSubnetGroupSpecManagementPolicies[];

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema CacheSubnetGroupSpec#providerConfigRef
   */
  readonly providerConfigRef?: CacheSubnetGroupSpecProviderConfigRef;

  /**
   * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema CacheSubnetGroupSpec#publishConnectionDetailsTo
   */
  readonly publishConnectionDetailsTo?: CacheSubnetGroupSpecPublishConnectionDetailsTo;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
   *
   * @schema CacheSubnetGroupSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: CacheSubnetGroupSpecWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'CacheSubnetGroupSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CacheSubnetGroupSpec(obj: CacheSubnetGroupSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'deletionPolicy': obj.deletionPolicy,
    'forProvider': toJson_CacheSubnetGroupSpecForProvider(obj.forProvider),
    'managementPolicies': obj.managementPolicies?.map(y => y),
    'providerConfigRef': toJson_CacheSubnetGroupSpecProviderConfigRef(obj.providerConfigRef),
    'publishConnectionDetailsTo': toJson_CacheSubnetGroupSpecPublishConnectionDetailsTo(obj.publishConnectionDetailsTo),
    'writeConnectionSecretToRef': toJson_CacheSubnetGroupSpecWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
 *
 * @schema CacheSubnetGroupSpecDeletionPolicy
 */
export enum CacheSubnetGroupSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * CacheSubnetGroupParameters define the desired state of an AWS ElasticCache Subnet Group.
 *
 * @schema CacheSubnetGroupSpecForProvider
 */
export interface CacheSubnetGroupSpecForProvider {
  /**
   * A description for the cache subnet group.
   *
   * @schema CacheSubnetGroupSpecForProvider#description
   */
  readonly description: string;

  /**
   * Region is the region you'd like your CacheSubnetGroup to be created in.
   *
   * @schema CacheSubnetGroupSpecForProvider#region
   */
  readonly region: string;

  /**
   * SubnetIDRefs references to a Subnet to and retrieves its SubnetID
   *
   * @schema CacheSubnetGroupSpecForProvider#subnetIdRefs
   */
  readonly subnetIdRefs?: CacheSubnetGroupSpecForProviderSubnetIdRefs[];

  /**
   * SubnetIDSelector selects a set of references that each retrieve the subnetID from the referenced Subnet
   *
   * @schema CacheSubnetGroupSpecForProvider#subnetIdSelector
   */
  readonly subnetIdSelector?: CacheSubnetGroupSpecForProviderSubnetIdSelector;

  /**
   * A list of  Subnet IDs for the cache subnet group.
   *
   * @schema CacheSubnetGroupSpecForProvider#subnetIds
   */
  readonly subnetIds?: string[];

}

/**
 * Converts an object of type 'CacheSubnetGroupSpecForProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CacheSubnetGroupSpecForProvider(obj: CacheSubnetGroupSpecForProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'description': obj.description,
    'region': obj.region,
    'subnetIdRefs': obj.subnetIdRefs?.map(y => toJson_CacheSubnetGroupSpecForProviderSubnetIdRefs(y)),
    'subnetIdSelector': toJson_CacheSubnetGroupSpecForProviderSubnetIdSelector(obj.subnetIdSelector),
    'subnetIds': obj.subnetIds?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A ManagementAction represents an action that the Crossplane controllers can take on an external resource.
 *
 * @schema CacheSubnetGroupSpecManagementPolicies
 */
export enum CacheSubnetGroupSpecManagementPolicies {
  /** Observe */
  OBSERVE = "Observe",
  /** Create */
  CREATE = "Create",
  /** Update */
  UPDATE = "Update",
  /** Delete */
  DELETE = "Delete",
  /** LateInitialize */
  LATE_INITIALIZE = "LateInitialize",
  /** * */
  VALUE_ASTERISK = "*",
}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema CacheSubnetGroupSpecProviderConfigRef
 */
export interface CacheSubnetGroupSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema CacheSubnetGroupSpecProviderConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema CacheSubnetGroupSpecProviderConfigRef#policy
   */
  readonly policy?: CacheSubnetGroupSpecProviderConfigRefPolicy;

}

/**
 * Converts an object of type 'CacheSubnetGroupSpecProviderConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CacheSubnetGroupSpecProviderConfigRef(obj: CacheSubnetGroupSpecProviderConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_CacheSubnetGroupSpecProviderConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema CacheSubnetGroupSpecPublishConnectionDetailsTo
 */
export interface CacheSubnetGroupSpecPublishConnectionDetailsTo {
  /**
   * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
   *
   * @schema CacheSubnetGroupSpecPublishConnectionDetailsTo#configRef
   */
  readonly configRef?: CacheSubnetGroupSpecPublishConnectionDetailsToConfigRef;

  /**
   * Metadata is the metadata for connection secret.
   *
   * @schema CacheSubnetGroupSpecPublishConnectionDetailsTo#metadata
   */
  readonly metadata?: CacheSubnetGroupSpecPublishConnectionDetailsToMetadata;

  /**
   * Name is the name of the connection secret.
   *
   * @schema CacheSubnetGroupSpecPublishConnectionDetailsTo#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'CacheSubnetGroupSpecPublishConnectionDetailsTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CacheSubnetGroupSpecPublishConnectionDetailsTo(obj: CacheSubnetGroupSpecPublishConnectionDetailsTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configRef': toJson_CacheSubnetGroupSpecPublishConnectionDetailsToConfigRef(obj.configRef),
    'metadata': toJson_CacheSubnetGroupSpecPublishConnectionDetailsToMetadata(obj.metadata),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
 *
 * @schema CacheSubnetGroupSpecWriteConnectionSecretToRef
 */
export interface CacheSubnetGroupSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema CacheSubnetGroupSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema CacheSubnetGroupSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'CacheSubnetGroupSpecWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CacheSubnetGroupSpecWriteConnectionSecretToRef(obj: CacheSubnetGroupSpecWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A Reference to a named object.
 *
 * @schema CacheSubnetGroupSpecForProviderSubnetIdRefs
 */
export interface CacheSubnetGroupSpecForProviderSubnetIdRefs {
  /**
   * Name of the referenced object.
   *
   * @schema CacheSubnetGroupSpecForProviderSubnetIdRefs#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema CacheSubnetGroupSpecForProviderSubnetIdRefs#policy
   */
  readonly policy?: CacheSubnetGroupSpecForProviderSubnetIdRefsPolicy;

}

/**
 * Converts an object of type 'CacheSubnetGroupSpecForProviderSubnetIdRefs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CacheSubnetGroupSpecForProviderSubnetIdRefs(obj: CacheSubnetGroupSpecForProviderSubnetIdRefs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_CacheSubnetGroupSpecForProviderSubnetIdRefsPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SubnetIDSelector selects a set of references that each retrieve the subnetID from the referenced Subnet
 *
 * @schema CacheSubnetGroupSpecForProviderSubnetIdSelector
 */
export interface CacheSubnetGroupSpecForProviderSubnetIdSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema CacheSubnetGroupSpecForProviderSubnetIdSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema CacheSubnetGroupSpecForProviderSubnetIdSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

  /**
   * Policies for selection.
   *
   * @schema CacheSubnetGroupSpecForProviderSubnetIdSelector#policy
   */
  readonly policy?: CacheSubnetGroupSpecForProviderSubnetIdSelectorPolicy;

}

/**
 * Converts an object of type 'CacheSubnetGroupSpecForProviderSubnetIdSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CacheSubnetGroupSpecForProviderSubnetIdSelector(obj: CacheSubnetGroupSpecForProviderSubnetIdSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchControllerRef': obj.matchControllerRef,
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'policy': toJson_CacheSubnetGroupSpecForProviderSubnetIdSelectorPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema CacheSubnetGroupSpecProviderConfigRefPolicy
 */
export interface CacheSubnetGroupSpecProviderConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema CacheSubnetGroupSpecProviderConfigRefPolicy#resolution
   */
  readonly resolution?: CacheSubnetGroupSpecProviderConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema CacheSubnetGroupSpecProviderConfigRefPolicy#resolve
   */
  readonly resolve?: CacheSubnetGroupSpecProviderConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'CacheSubnetGroupSpecProviderConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CacheSubnetGroupSpecProviderConfigRefPolicy(obj: CacheSubnetGroupSpecProviderConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
 *
 * @schema CacheSubnetGroupSpecPublishConnectionDetailsToConfigRef
 */
export interface CacheSubnetGroupSpecPublishConnectionDetailsToConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema CacheSubnetGroupSpecPublishConnectionDetailsToConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema CacheSubnetGroupSpecPublishConnectionDetailsToConfigRef#policy
   */
  readonly policy?: CacheSubnetGroupSpecPublishConnectionDetailsToConfigRefPolicy;

}

/**
 * Converts an object of type 'CacheSubnetGroupSpecPublishConnectionDetailsToConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CacheSubnetGroupSpecPublishConnectionDetailsToConfigRef(obj: CacheSubnetGroupSpecPublishConnectionDetailsToConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_CacheSubnetGroupSpecPublishConnectionDetailsToConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Metadata is the metadata for connection secret.
 *
 * @schema CacheSubnetGroupSpecPublishConnectionDetailsToMetadata
 */
export interface CacheSubnetGroupSpecPublishConnectionDetailsToMetadata {
  /**
   * Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
   *
   * @schema CacheSubnetGroupSpecPublishConnectionDetailsToMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
   *
   * @schema CacheSubnetGroupSpecPublishConnectionDetailsToMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
   *
   * @schema CacheSubnetGroupSpecPublishConnectionDetailsToMetadata#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'CacheSubnetGroupSpecPublishConnectionDetailsToMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CacheSubnetGroupSpecPublishConnectionDetailsToMetadata(obj: CacheSubnetGroupSpecPublishConnectionDetailsToMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema CacheSubnetGroupSpecForProviderSubnetIdRefsPolicy
 */
export interface CacheSubnetGroupSpecForProviderSubnetIdRefsPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema CacheSubnetGroupSpecForProviderSubnetIdRefsPolicy#resolution
   */
  readonly resolution?: CacheSubnetGroupSpecForProviderSubnetIdRefsPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema CacheSubnetGroupSpecForProviderSubnetIdRefsPolicy#resolve
   */
  readonly resolve?: CacheSubnetGroupSpecForProviderSubnetIdRefsPolicyResolve;

}

/**
 * Converts an object of type 'CacheSubnetGroupSpecForProviderSubnetIdRefsPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CacheSubnetGroupSpecForProviderSubnetIdRefsPolicy(obj: CacheSubnetGroupSpecForProviderSubnetIdRefsPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for selection.
 *
 * @schema CacheSubnetGroupSpecForProviderSubnetIdSelectorPolicy
 */
export interface CacheSubnetGroupSpecForProviderSubnetIdSelectorPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema CacheSubnetGroupSpecForProviderSubnetIdSelectorPolicy#resolution
   */
  readonly resolution?: CacheSubnetGroupSpecForProviderSubnetIdSelectorPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema CacheSubnetGroupSpecForProviderSubnetIdSelectorPolicy#resolve
   */
  readonly resolve?: CacheSubnetGroupSpecForProviderSubnetIdSelectorPolicyResolve;

}

/**
 * Converts an object of type 'CacheSubnetGroupSpecForProviderSubnetIdSelectorPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CacheSubnetGroupSpecForProviderSubnetIdSelectorPolicy(obj: CacheSubnetGroupSpecForProviderSubnetIdSelectorPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema CacheSubnetGroupSpecProviderConfigRefPolicyResolution
 */
export enum CacheSubnetGroupSpecProviderConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema CacheSubnetGroupSpecProviderConfigRefPolicyResolve
 */
export enum CacheSubnetGroupSpecProviderConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Policies for referencing.
 *
 * @schema CacheSubnetGroupSpecPublishConnectionDetailsToConfigRefPolicy
 */
export interface CacheSubnetGroupSpecPublishConnectionDetailsToConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema CacheSubnetGroupSpecPublishConnectionDetailsToConfigRefPolicy#resolution
   */
  readonly resolution?: CacheSubnetGroupSpecPublishConnectionDetailsToConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema CacheSubnetGroupSpecPublishConnectionDetailsToConfigRefPolicy#resolve
   */
  readonly resolve?: CacheSubnetGroupSpecPublishConnectionDetailsToConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'CacheSubnetGroupSpecPublishConnectionDetailsToConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CacheSubnetGroupSpecPublishConnectionDetailsToConfigRefPolicy(obj: CacheSubnetGroupSpecPublishConnectionDetailsToConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema CacheSubnetGroupSpecForProviderSubnetIdRefsPolicyResolution
 */
export enum CacheSubnetGroupSpecForProviderSubnetIdRefsPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema CacheSubnetGroupSpecForProviderSubnetIdRefsPolicyResolve
 */
export enum CacheSubnetGroupSpecForProviderSubnetIdRefsPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema CacheSubnetGroupSpecForProviderSubnetIdSelectorPolicyResolution
 */
export enum CacheSubnetGroupSpecForProviderSubnetIdSelectorPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema CacheSubnetGroupSpecForProviderSubnetIdSelectorPolicyResolve
 */
export enum CacheSubnetGroupSpecForProviderSubnetIdSelectorPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema CacheSubnetGroupSpecPublishConnectionDetailsToConfigRefPolicyResolution
 */
export enum CacheSubnetGroupSpecPublishConnectionDetailsToConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema CacheSubnetGroupSpecPublishConnectionDetailsToConfigRefPolicyResolve
 */
export enum CacheSubnetGroupSpecPublishConnectionDetailsToConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}


/**
 * A ReplicationGroup is a managed resource that represents an AWS ElastiCache Replication Group.
 *
 * @schema ReplicationGroup
 */
export class ReplicationGroup extends ApiObject {
  /**
   * Returns the apiVersion and kind for "ReplicationGroup"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'cache.aws.crossplane.io/v1beta1',
    kind: 'ReplicationGroup',
  }

  /**
   * Renders a Kubernetes manifest for "ReplicationGroup".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: ReplicationGroupProps): any {
    return {
      ...ReplicationGroup.GVK,
      ...toJson_ReplicationGroupProps(props),
    };
  }

  /**
   * Defines a "ReplicationGroup" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: ReplicationGroupProps) {
    super(scope, id, {
      ...ReplicationGroup.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...ReplicationGroup.GVK,
      ...toJson_ReplicationGroupProps(resolved),
    };
  }
}

/**
 * A ReplicationGroup is a managed resource that represents an AWS ElastiCache Replication Group.
 *
 * @schema ReplicationGroup
 */
export interface ReplicationGroupProps {
  /**
   * @schema ReplicationGroup#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * A ReplicationGroupSpec defines the desired state of a ReplicationGroup.
   *
   * @schema ReplicationGroup#spec
   */
  readonly spec: ReplicationGroupSpec;

}

/**
 * Converts an object of type 'ReplicationGroupProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationGroupProps(obj: ReplicationGroupProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_ReplicationGroupSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A ReplicationGroupSpec defines the desired state of a ReplicationGroup.
 *
 * @schema ReplicationGroupSpec
 */
export interface ReplicationGroupSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
   *
   * @schema ReplicationGroupSpec#deletionPolicy
   */
  readonly deletionPolicy?: ReplicationGroupSpecDeletionPolicy;

  /**
   * ReplicationGroupParameters define the desired state of an AWS ElastiCache Replication Group. Most fields map directly to an AWS ReplicationGroup: https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_CreateReplicationGroup.html#API_CreateReplicationGroup_RequestParameters
   *
   * @schema ReplicationGroupSpec#forProvider
   */
  readonly forProvider: ReplicationGroupSpecForProvider;

  /**
   * THIS IS A BETA FIELD. It is on by default but can be opted out through a Crossplane feature flag. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
   *
   * @schema ReplicationGroupSpec#managementPolicies
   */
  readonly managementPolicies?: ReplicationGroupSpecManagementPolicies[];

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema ReplicationGroupSpec#providerConfigRef
   */
  readonly providerConfigRef?: ReplicationGroupSpecProviderConfigRef;

  /**
   * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema ReplicationGroupSpec#publishConnectionDetailsTo
   */
  readonly publishConnectionDetailsTo?: ReplicationGroupSpecPublishConnectionDetailsTo;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
   *
   * @schema ReplicationGroupSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: ReplicationGroupSpecWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'ReplicationGroupSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationGroupSpec(obj: ReplicationGroupSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'deletionPolicy': obj.deletionPolicy,
    'forProvider': toJson_ReplicationGroupSpecForProvider(obj.forProvider),
    'managementPolicies': obj.managementPolicies?.map(y => y),
    'providerConfigRef': toJson_ReplicationGroupSpecProviderConfigRef(obj.providerConfigRef),
    'publishConnectionDetailsTo': toJson_ReplicationGroupSpecPublishConnectionDetailsTo(obj.publishConnectionDetailsTo),
    'writeConnectionSecretToRef': toJson_ReplicationGroupSpecWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
 *
 * @schema ReplicationGroupSpecDeletionPolicy
 */
export enum ReplicationGroupSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * ReplicationGroupParameters define the desired state of an AWS ElastiCache Replication Group. Most fields map directly to an AWS ReplicationGroup: https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_CreateReplicationGroup.html#API_CreateReplicationGroup_RequestParameters
 *
 * @schema ReplicationGroupSpecForProvider
 */
export interface ReplicationGroupSpecForProvider {
  /**
   * If true, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the PreferredMaintenanceWindow setting for the replication group.
   * If false, changes to the nodes in the replication group are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.
   *
   * @schema ReplicationGroupSpecForProvider#applyModificationsImmediately
   */
  readonly applyModificationsImmediately: boolean;

  /**
   * AtRestEncryptionEnabled enables encryption at rest when set to true.
   * You cannot modify the value of AtRestEncryptionEnabled after the replication group is created. To enable encryption at rest on a replication group you must set AtRestEncryptionEnabled to true when you create the replication group.
   * Only available when creating a replication group in an Amazon VPC using redis version 3.2.6 or 4.x.
   *
   * @schema ReplicationGroupSpecForProvider#atRestEncryptionEnabled
   */
  readonly atRestEncryptionEnabled?: boolean;

  /**
   * AuthEnabled enables mandatory authentication when connecting to the managed replication group. AuthEnabled requires TransitEncryptionEnabled to be true.
   * While ReplicationGroupSpec mirrors the fields of the upstream replication group object as closely as possible, we expose a boolean here rather than requiring the operator pass in a string authentication token. Crossplane will generate a token automatically and expose it via a Secret.
   *
   * @schema ReplicationGroupSpecForProvider#authEnabled
   */
  readonly authEnabled?: boolean;

  /**
   * AutomaticFailoverEnabled specifies whether a read-only replica is automatically promoted to read/write primary if the existing primary fails. Must be set to true if Multi-AZ is enabled for this replication group. If false, Multi-AZ cannot be enabled for this replication group.
   * AutomaticFailoverEnabled must be enabled for Redis (cluster mode enabled) replication groups.
   * Amazon ElastiCache for Redis does not support Multi-AZ with automatic failover on: * Redis versions earlier than 2.8.6. * Redis (cluster mode disabled): T1 and T2 cache node types. * Redis (cluster mode enabled): T1 node types.
   *
   * @schema ReplicationGroupSpecForProvider#automaticFailoverEnabled
   */
  readonly automaticFailoverEnabled?: boolean;

  /**
   * CacheNodeType specifies the compute and memory capacity of the nodes in the node group (shard). For a complete listing of node types and specifications, see: * Amazon ElastiCache Product Features and Details (http://aws.amazon.com/elasticache/details) * Cache Node Type-Specific Parameters for Memcached (http://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/ParameterGroups.Memcached.html#ParameterGroups.Memcached.NodeSpecific) * Cache Node Type-Specific Parameters for Redis (http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ParameterGroups.Redis.html#ParameterGroups.Redis.NodeSpecific)
   *
   * @schema ReplicationGroupSpecForProvider#cacheNodeType
   */
  readonly cacheNodeType: string;

  /**
   * CacheParameterGroupName specifies the name of the parameter group to associate with this replication group. If this argument is omitted, the default cache parameter group for the specified engine is used.
   * If you are running Redis version 3.2.4 or later, only one node group (shard), and want to use a default parameter group, we recommend that you specify the parameter group by name. * To create a Redis (cluster mode disabled) replication group, use CacheParameterGroupName=default.redis3.2. * To create a Redis (cluster mode enabled) replication group, use CacheParameterGroupName=default.redis3.2.cluster.on.
   *
   * @schema ReplicationGroupSpecForProvider#cacheParameterGroupName
   */
  readonly cacheParameterGroupName?: string;

  /**
   * CacheSecurityGroupNameRefs are references to SecurityGroups used to set the CacheSecurityGroupNames.
   *
   * @schema ReplicationGroupSpecForProvider#cacheSecurityGroupNameRefs
   */
  readonly cacheSecurityGroupNameRefs?: ReplicationGroupSpecForProviderCacheSecurityGroupNameRefs[];

  /**
   * CacheSecurityGroupNameSelector selects references to SecurityGroups.
   *
   * @schema ReplicationGroupSpecForProvider#cacheSecurityGroupNameSelector
   */
  readonly cacheSecurityGroupNameSelector?: ReplicationGroupSpecForProviderCacheSecurityGroupNameSelector;

  /**
   * CacheSecurityGroupNames specifies a list of cache security group names to associate with this replication group. Only for EC2-Classic mode.
   *
   * @schema ReplicationGroupSpecForProvider#cacheSecurityGroupNames
   */
  readonly cacheSecurityGroupNames?: string[];

  /**
   * CacheSubnetGroupName specifies the name of the cache subnet group to be used for the replication group. If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see Subnets and Subnet Groups (http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html).
   *
   * @schema ReplicationGroupSpecForProvider#cacheSubnetGroupName
   */
  readonly cacheSubnetGroupName?: string;

  /**
   * CacheSubnetGroupNameRef is a reference to a Subnet Group used to set the CacheSubnetGroupName.
   *
   * @schema ReplicationGroupSpecForProvider#cacheSubnetGroupNameRef
   */
  readonly cacheSubnetGroupNameRef?: ReplicationGroupSpecForProviderCacheSubnetGroupNameRef;

  /**
   * DeprecatedCacheSubnetGroupNameRef is a reference to a Subnet Group used to set the CacheSubnetGroupName.
   * Deprecated: Use CacheSubnetGroupNameRef. This field exists because we introduced it with the JSON tag cacheSubnetGroupNameRefs (plural) when it should have been cacheSubnetGroupNameRef (singular). This is a bug that we need to avoid a breaking change to this v1beta1 API.
   *
   * @schema ReplicationGroupSpecForProvider#cacheSubnetGroupNameRefs
   */
  readonly cacheSubnetGroupNameRefs?: ReplicationGroupSpecForProviderCacheSubnetGroupNameRefs;

  /**
   * CacheSubnetGroupNameSelector selects a reference to a CacheSubnetGroup.
   *
   * @schema ReplicationGroupSpecForProvider#cacheSubnetGroupNameSelector
   */
  readonly cacheSubnetGroupNameSelector?: ReplicationGroupSpecForProviderCacheSubnetGroupNameSelector;

  /**
   * Engine is the name of the cache engine (memcached or redis) to be used for the clusters in this replication group.
   *
   * @schema ReplicationGroupSpecForProvider#engine
   */
  readonly engine: string;

  /**
   * EngineVersion specifies the version number of the cache engine to be used for the clusters in this replication group. To view the supported cache engine versions, use the DescribeCacheEngineVersions operation.
   * Important: You can upgrade to a newer engine version (see Selecting a Cache Engine and Version (http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement)) in the ElastiCache User Guide, but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version.
   *
   * @schema ReplicationGroupSpecForProvider#engineVersion
   */
  readonly engineVersion?: string;

  /**
   * MultiAZEnabled specifies if Multi-AZ is enabled to enhance fault tolerance You must have nodes across two or more Availability Zones in order to enable this feature. If this feature is set, automaticFailoverEnabled must be set to true.
   *
   * @schema ReplicationGroupSpecForProvider#multiAZEnabled
   */
  readonly multiAzEnabled?: boolean;

  /**
   * NodeGroupConfigurationSpec specifies a list of node group (shard) configuration options.
   * If you're creating a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group, you can use this parameter to individually configure each node group (shard), or you can omit this parameter. However, when seeding a Redis (cluster mode enabled) cluster from a S3 rdb file, you must configure each node group (shard) using this parameter because you must specify the slots for each node group.
   *
   * @schema ReplicationGroupSpecForProvider#nodeGroupConfiguration
   */
  readonly nodeGroupConfiguration?: ReplicationGroupSpecForProviderNodeGroupConfiguration[];

  /**
   * NotificationTopicARN specifies the Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent. The Amazon SNS topic owner must be the same as the cluster owner.
   *
   * @schema ReplicationGroupSpecForProvider#notificationTopicArn
   */
  readonly notificationTopicArn?: string;

  /**
   * NotificationTopicARNRef references an SNS Topic to retrieve its NotificationTopicARN
   *
   * @schema ReplicationGroupSpecForProvider#notificationTopicArnRef
   */
  readonly notificationTopicArnRef?: ReplicationGroupSpecForProviderNotificationTopicArnRef;

  /**
   * NotificationTopicARNSelector selects a reference to an SNS Topic to retrieve its NotificationTopicARN
   *
   * @schema ReplicationGroupSpecForProvider#notificationTopicArnSelector
   */
  readonly notificationTopicArnSelector?: ReplicationGroupSpecForProviderNotificationTopicArnSelector;

  /**
   * NotificationTopicStatus is the status of the Amazon SNS notification topic for the replication group. Notifications are sent only if the status is active.
   * Valid values: active | inactive
   *
   * @schema ReplicationGroupSpecForProvider#notificationTopicStatus
   */
  readonly notificationTopicStatus?: string;

  /**
   * NumCacheClusters specifies the number of clusters this replication group initially has. This parameter is not used if there is more than one node group (shard). You should use ReplicasPerNodeGroup instead.
   * If AutomaticFailoverEnabled is true, the value of this parameter must be at least 2. If AutomaticFailoverEnabled is false you can omit this parameter (it will default to 1), or you can explicitly set it to a value between 2 and 6.
   * The maximum permitted value for NumCacheClusters is 6 (1 primary plus 5 replicas).
   *
   * @schema ReplicationGroupSpecForProvider#numCacheClusters
   */
  readonly numCacheClusters?: number;

  /**
   * NumNodeGroups specifies the number of node groups (shards) for this Redis (cluster mode enabled) replication group. For Redis (cluster mode disabled) either omit this parameter or set it to 1.
   * Default: 1
   *
   * @schema ReplicationGroupSpecForProvider#numNodeGroups
   */
  readonly numNodeGroups?: number;

  /**
   * Port number on which each member of the replication group accepts connections.
   *
   * @schema ReplicationGroupSpecForProvider#port
   */
  readonly port?: number;

  /**
   * PreferredCacheClusterAZs specifies a list of EC2 Availability Zones in which the replication group's clusters are created. The order of the Availability Zones in the list is the order in which clusters are allocated. The primary cluster is created in the first AZ in the list.
   * This parameter is not used if there is more than one node group (shard). You should use NodeGroupConfigurationSpec instead.
   * If you are creating your replication group in an Amazon VPC (recommended), you can only locate clusters in Availability Zones associated with the subnets in the selected subnet group.
   * The number of Availability Zones listed must equal the value of NumCacheClusters.
   * Default: system chosen Availability Zones.
   *
   * @schema ReplicationGroupSpecForProvider#preferredCacheClusterAzs
   */
  readonly preferredCacheClusterAzs?: string[];

  /**
   * PreferredMaintenanceWindow specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.
   * Example: sun:23:00-mon:01:30
   *
   * @schema ReplicationGroupSpecForProvider#preferredMaintenanceWindow
   */
  readonly preferredMaintenanceWindow?: string;

  /**
   * PrimaryClusterId is the identifier of the cluster that serves as the primary for this replication group. This cluster must already exist and have a status of available.
   * This parameter is not required if NumCacheClusters, NumNodeGroups or ReplicasPerNodeGroup is specified.
   *
   * @schema ReplicationGroupSpecForProvider#primaryClusterId
   */
  readonly primaryClusterId?: string;

  /**
   * Region is the region you'd like your ReplicationGroup to be created in.
   *
   * @schema ReplicationGroupSpecForProvider#region
   */
  readonly region?: string;

  /**
   * ReplicasPerNodeGroup specifies the number of replica nodes in each node group (shard). Valid values are 0 to 5.
   *
   * @schema ReplicationGroupSpecForProvider#replicasPerNodeGroup
   */
  readonly replicasPerNodeGroup?: number;

  /**
   * ReplicationGroupDescription is the description for the replication group.
   *
   * @schema ReplicationGroupSpecForProvider#replicationGroupDescription
   */
  readonly replicationGroupDescription: string;

  /**
   * SecurityGroupIDRefs are references to SecurityGroups used to set the SecurityGroupIDs.
   *
   * @schema ReplicationGroupSpecForProvider#securityGroupIdRefs
   */
  readonly securityGroupIdRefs?: ReplicationGroupSpecForProviderSecurityGroupIdRefs[];

  /**
   * SecurityGroupIDSelector selects references to SecurityGroups used to set the SecurityGroupIDs.
   *
   * @schema ReplicationGroupSpecForProvider#securityGroupIdSelector
   */
  readonly securityGroupIdSelector?: ReplicationGroupSpecForProviderSecurityGroupIdSelector;

  /**
   * SecurityGroupIDs specifies one or more Amazon VPC security groups associated with this replication group. Use this parameter only when you are creating a replication group in an Amazon VPC.
   *
   * @schema ReplicationGroupSpecForProvider#securityGroupIds
   */
  readonly securityGroupIds?: string[];

  /**
   * SnapshotARNs specifies a list of Amazon Resource Names (ARN) that uniquely identify the Redis RDB snapshot files stored in Amazon S3. The snapshot files are used to populate the new replication group. The Amazon S3 object name in the ARN cannot contain any commas. The new replication group will have the number of node groups (console: shards) specified by the parameter NumNodeGroups or the number of node groups configured by NodeGroupConfigurationSpec regardless of the number of ARNs specified here.
   *
   * @schema ReplicationGroupSpecForProvider#snapshotArns
   */
  readonly snapshotArns?: string[];

  /**
   * SnapshotName specifies the name of a snapshot from which to restore data into the new replication group. The snapshot status changes to restoring while the new replication group is being created.
   *
   * @schema ReplicationGroupSpecForProvider#snapshotName
   */
  readonly snapshotName?: string;

  /**
   * SnapshotRetentionLimit specifies the number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set SnapshotRetentionLimit to 5, a snapshot that was taken today is retained for 5 days before being deleted. Default: 0 (i.e., automatic backups are disabled for this cluster).
   *
   * @schema ReplicationGroupSpecForProvider#snapshotRetentionLimit
   */
  readonly snapshotRetentionLimit?: number;

  /**
   * SnapshotWindow specifies the daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).
   * Example: 05:00-09:00
   * If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.
   *
   * @schema ReplicationGroupSpecForProvider#snapshotWindow
   */
  readonly snapshotWindow?: string;

  /**
   * SnapshottingClusterID is used as the daily snapshot source for the replication group. This parameter cannot be set for Redis (cluster mode enabled) replication groups.
   *
   * @schema ReplicationGroupSpecForProvider#snapshottingClusterID
   */
  readonly snapshottingClusterId?: string;

  /**
   * A list of cost allocation tags to be added to this resource. A tag is a key-value pair.
   *
   * @schema ReplicationGroupSpecForProvider#tags
   */
  readonly tags?: ReplicationGroupSpecForProviderTags[];

  /**
   * TransitEncryptionEnabled enables in-transit encryption when set to true.
   * You cannot modify the value of TransitEncryptionEnabled after the cluster is created. To enable in-transit encryption on a cluster you must TransitEncryptionEnabled to true when you create a cluster.
   * This parameter is valid only if the Engine parameter is redis, the EngineVersion parameter is 3.2.6 or 4.x, and the cluster is being created in an Amazon VPC.
   * If you enable in-transit encryption, you must also specify a value for CacheSubnetGroup.
   * Required: Only available when creating a replication group in an Amazon VPC using redis version 3.2.6 or 4.x.
   * Default: false
   * For HIPAA compliance, you must specify TransitEncryptionEnabled as true, an AuthToken, and a CacheSubnetGroup.
   *
   * @schema ReplicationGroupSpecForProvider#transitEncryptionEnabled
   */
  readonly transitEncryptionEnabled?: boolean;

}

/**
 * Converts an object of type 'ReplicationGroupSpecForProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationGroupSpecForProvider(obj: ReplicationGroupSpecForProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'applyModificationsImmediately': obj.applyModificationsImmediately,
    'atRestEncryptionEnabled': obj.atRestEncryptionEnabled,
    'authEnabled': obj.authEnabled,
    'automaticFailoverEnabled': obj.automaticFailoverEnabled,
    'cacheNodeType': obj.cacheNodeType,
    'cacheParameterGroupName': obj.cacheParameterGroupName,
    'cacheSecurityGroupNameRefs': obj.cacheSecurityGroupNameRefs?.map(y => toJson_ReplicationGroupSpecForProviderCacheSecurityGroupNameRefs(y)),
    'cacheSecurityGroupNameSelector': toJson_ReplicationGroupSpecForProviderCacheSecurityGroupNameSelector(obj.cacheSecurityGroupNameSelector),
    'cacheSecurityGroupNames': obj.cacheSecurityGroupNames?.map(y => y),
    'cacheSubnetGroupName': obj.cacheSubnetGroupName,
    'cacheSubnetGroupNameRef': toJson_ReplicationGroupSpecForProviderCacheSubnetGroupNameRef(obj.cacheSubnetGroupNameRef),
    'cacheSubnetGroupNameRefs': toJson_ReplicationGroupSpecForProviderCacheSubnetGroupNameRefs(obj.cacheSubnetGroupNameRefs),
    'cacheSubnetGroupNameSelector': toJson_ReplicationGroupSpecForProviderCacheSubnetGroupNameSelector(obj.cacheSubnetGroupNameSelector),
    'engine': obj.engine,
    'engineVersion': obj.engineVersion,
    'multiAZEnabled': obj.multiAzEnabled,
    'nodeGroupConfiguration': obj.nodeGroupConfiguration?.map(y => toJson_ReplicationGroupSpecForProviderNodeGroupConfiguration(y)),
    'notificationTopicArn': obj.notificationTopicArn,
    'notificationTopicArnRef': toJson_ReplicationGroupSpecForProviderNotificationTopicArnRef(obj.notificationTopicArnRef),
    'notificationTopicArnSelector': toJson_ReplicationGroupSpecForProviderNotificationTopicArnSelector(obj.notificationTopicArnSelector),
    'notificationTopicStatus': obj.notificationTopicStatus,
    'numCacheClusters': obj.numCacheClusters,
    'numNodeGroups': obj.numNodeGroups,
    'port': obj.port,
    'preferredCacheClusterAzs': obj.preferredCacheClusterAzs?.map(y => y),
    'preferredMaintenanceWindow': obj.preferredMaintenanceWindow,
    'primaryClusterId': obj.primaryClusterId,
    'region': obj.region,
    'replicasPerNodeGroup': obj.replicasPerNodeGroup,
    'replicationGroupDescription': obj.replicationGroupDescription,
    'securityGroupIdRefs': obj.securityGroupIdRefs?.map(y => toJson_ReplicationGroupSpecForProviderSecurityGroupIdRefs(y)),
    'securityGroupIdSelector': toJson_ReplicationGroupSpecForProviderSecurityGroupIdSelector(obj.securityGroupIdSelector),
    'securityGroupIds': obj.securityGroupIds?.map(y => y),
    'snapshotArns': obj.snapshotArns?.map(y => y),
    'snapshotName': obj.snapshotName,
    'snapshotRetentionLimit': obj.snapshotRetentionLimit,
    'snapshotWindow': obj.snapshotWindow,
    'snapshottingClusterID': obj.snapshottingClusterId,
    'tags': obj.tags?.map(y => toJson_ReplicationGroupSpecForProviderTags(y)),
    'transitEncryptionEnabled': obj.transitEncryptionEnabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A ManagementAction represents an action that the Crossplane controllers can take on an external resource.
 *
 * @schema ReplicationGroupSpecManagementPolicies
 */
export enum ReplicationGroupSpecManagementPolicies {
  /** Observe */
  OBSERVE = "Observe",
  /** Create */
  CREATE = "Create",
  /** Update */
  UPDATE = "Update",
  /** Delete */
  DELETE = "Delete",
  /** LateInitialize */
  LATE_INITIALIZE = "LateInitialize",
  /** * */
  VALUE_ASTERISK = "*",
}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema ReplicationGroupSpecProviderConfigRef
 */
export interface ReplicationGroupSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema ReplicationGroupSpecProviderConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema ReplicationGroupSpecProviderConfigRef#policy
   */
  readonly policy?: ReplicationGroupSpecProviderConfigRefPolicy;

}

/**
 * Converts an object of type 'ReplicationGroupSpecProviderConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationGroupSpecProviderConfigRef(obj: ReplicationGroupSpecProviderConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_ReplicationGroupSpecProviderConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema ReplicationGroupSpecPublishConnectionDetailsTo
 */
export interface ReplicationGroupSpecPublishConnectionDetailsTo {
  /**
   * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
   *
   * @schema ReplicationGroupSpecPublishConnectionDetailsTo#configRef
   */
  readonly configRef?: ReplicationGroupSpecPublishConnectionDetailsToConfigRef;

  /**
   * Metadata is the metadata for connection secret.
   *
   * @schema ReplicationGroupSpecPublishConnectionDetailsTo#metadata
   */
  readonly metadata?: ReplicationGroupSpecPublishConnectionDetailsToMetadata;

  /**
   * Name is the name of the connection secret.
   *
   * @schema ReplicationGroupSpecPublishConnectionDetailsTo#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'ReplicationGroupSpecPublishConnectionDetailsTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationGroupSpecPublishConnectionDetailsTo(obj: ReplicationGroupSpecPublishConnectionDetailsTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configRef': toJson_ReplicationGroupSpecPublishConnectionDetailsToConfigRef(obj.configRef),
    'metadata': toJson_ReplicationGroupSpecPublishConnectionDetailsToMetadata(obj.metadata),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
 *
 * @schema ReplicationGroupSpecWriteConnectionSecretToRef
 */
export interface ReplicationGroupSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema ReplicationGroupSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema ReplicationGroupSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'ReplicationGroupSpecWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationGroupSpecWriteConnectionSecretToRef(obj: ReplicationGroupSpecWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A Reference to a named object.
 *
 * @schema ReplicationGroupSpecForProviderCacheSecurityGroupNameRefs
 */
export interface ReplicationGroupSpecForProviderCacheSecurityGroupNameRefs {
  /**
   * Name of the referenced object.
   *
   * @schema ReplicationGroupSpecForProviderCacheSecurityGroupNameRefs#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema ReplicationGroupSpecForProviderCacheSecurityGroupNameRefs#policy
   */
  readonly policy?: ReplicationGroupSpecForProviderCacheSecurityGroupNameRefsPolicy;

}

/**
 * Converts an object of type 'ReplicationGroupSpecForProviderCacheSecurityGroupNameRefs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationGroupSpecForProviderCacheSecurityGroupNameRefs(obj: ReplicationGroupSpecForProviderCacheSecurityGroupNameRefs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_ReplicationGroupSpecForProviderCacheSecurityGroupNameRefsPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CacheSecurityGroupNameSelector selects references to SecurityGroups.
 *
 * @schema ReplicationGroupSpecForProviderCacheSecurityGroupNameSelector
 */
export interface ReplicationGroupSpecForProviderCacheSecurityGroupNameSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema ReplicationGroupSpecForProviderCacheSecurityGroupNameSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema ReplicationGroupSpecForProviderCacheSecurityGroupNameSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

  /**
   * Policies for selection.
   *
   * @schema ReplicationGroupSpecForProviderCacheSecurityGroupNameSelector#policy
   */
  readonly policy?: ReplicationGroupSpecForProviderCacheSecurityGroupNameSelectorPolicy;

}

/**
 * Converts an object of type 'ReplicationGroupSpecForProviderCacheSecurityGroupNameSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationGroupSpecForProviderCacheSecurityGroupNameSelector(obj: ReplicationGroupSpecForProviderCacheSecurityGroupNameSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchControllerRef': obj.matchControllerRef,
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'policy': toJson_ReplicationGroupSpecForProviderCacheSecurityGroupNameSelectorPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CacheSubnetGroupNameRef is a reference to a Subnet Group used to set the CacheSubnetGroupName.
 *
 * @schema ReplicationGroupSpecForProviderCacheSubnetGroupNameRef
 */
export interface ReplicationGroupSpecForProviderCacheSubnetGroupNameRef {
  /**
   * Name of the referenced object.
   *
   * @schema ReplicationGroupSpecForProviderCacheSubnetGroupNameRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema ReplicationGroupSpecForProviderCacheSubnetGroupNameRef#policy
   */
  readonly policy?: ReplicationGroupSpecForProviderCacheSubnetGroupNameRefPolicy;

}

/**
 * Converts an object of type 'ReplicationGroupSpecForProviderCacheSubnetGroupNameRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationGroupSpecForProviderCacheSubnetGroupNameRef(obj: ReplicationGroupSpecForProviderCacheSubnetGroupNameRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_ReplicationGroupSpecForProviderCacheSubnetGroupNameRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DeprecatedCacheSubnetGroupNameRef is a reference to a Subnet Group used to set the CacheSubnetGroupName.
 * Deprecated: Use CacheSubnetGroupNameRef. This field exists because we introduced it with the JSON tag cacheSubnetGroupNameRefs (plural) when it should have been cacheSubnetGroupNameRef (singular). This is a bug that we need to avoid a breaking change to this v1beta1 API.
 *
 * @schema ReplicationGroupSpecForProviderCacheSubnetGroupNameRefs
 */
export interface ReplicationGroupSpecForProviderCacheSubnetGroupNameRefs {
  /**
   * Name of the referenced object.
   *
   * @schema ReplicationGroupSpecForProviderCacheSubnetGroupNameRefs#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema ReplicationGroupSpecForProviderCacheSubnetGroupNameRefs#policy
   */
  readonly policy?: ReplicationGroupSpecForProviderCacheSubnetGroupNameRefsPolicy;

}

/**
 * Converts an object of type 'ReplicationGroupSpecForProviderCacheSubnetGroupNameRefs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationGroupSpecForProviderCacheSubnetGroupNameRefs(obj: ReplicationGroupSpecForProviderCacheSubnetGroupNameRefs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_ReplicationGroupSpecForProviderCacheSubnetGroupNameRefsPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CacheSubnetGroupNameSelector selects a reference to a CacheSubnetGroup.
 *
 * @schema ReplicationGroupSpecForProviderCacheSubnetGroupNameSelector
 */
export interface ReplicationGroupSpecForProviderCacheSubnetGroupNameSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema ReplicationGroupSpecForProviderCacheSubnetGroupNameSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema ReplicationGroupSpecForProviderCacheSubnetGroupNameSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

  /**
   * Policies for selection.
   *
   * @schema ReplicationGroupSpecForProviderCacheSubnetGroupNameSelector#policy
   */
  readonly policy?: ReplicationGroupSpecForProviderCacheSubnetGroupNameSelectorPolicy;

}

/**
 * Converts an object of type 'ReplicationGroupSpecForProviderCacheSubnetGroupNameSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationGroupSpecForProviderCacheSubnetGroupNameSelector(obj: ReplicationGroupSpecForProviderCacheSubnetGroupNameSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchControllerRef': obj.matchControllerRef,
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'policy': toJson_ReplicationGroupSpecForProviderCacheSubnetGroupNameSelectorPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A NodeGroupConfigurationSpec specifies the desired state of a node group.
 *
 * @schema ReplicationGroupSpecForProviderNodeGroupConfiguration
 */
export interface ReplicationGroupSpecForProviderNodeGroupConfiguration {
  /**
   * PrimaryAvailabilityZone specifies the Availability Zone where the primary node of this node group (shard) is launched.
   *
   * @schema ReplicationGroupSpecForProviderNodeGroupConfiguration#primaryAvailabilityZone
   */
  readonly primaryAvailabilityZone?: string;

  /**
   * ReplicaAvailabilityZones specifies a list of Availability Zones to be used for the read replicas. The number of Availability Zones in this list must match the value of ReplicaCount or ReplicasPerNodeGroup if not specified.
   *
   * @schema ReplicationGroupSpecForProviderNodeGroupConfiguration#replicaAvailabilityZones
   */
  readonly replicaAvailabilityZones?: string[];

  /**
   * ReplicaCount specifies the number of read replica nodes in this node group (shard).
   *
   * @schema ReplicationGroupSpecForProviderNodeGroupConfiguration#replicaCount
   */
  readonly replicaCount?: number;

  /**
   * Slots specifies the keyspace for a particular node group. Keyspaces range from 0 to 16,383. The string is in the format startkey-endkey.
   * Example: "0-3999"
   *
   * @schema ReplicationGroupSpecForProviderNodeGroupConfiguration#slots
   */
  readonly slots?: string;

}

/**
 * Converts an object of type 'ReplicationGroupSpecForProviderNodeGroupConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationGroupSpecForProviderNodeGroupConfiguration(obj: ReplicationGroupSpecForProviderNodeGroupConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'primaryAvailabilityZone': obj.primaryAvailabilityZone,
    'replicaAvailabilityZones': obj.replicaAvailabilityZones?.map(y => y),
    'replicaCount': obj.replicaCount,
    'slots': obj.slots,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * NotificationTopicARNRef references an SNS Topic to retrieve its NotificationTopicARN
 *
 * @schema ReplicationGroupSpecForProviderNotificationTopicArnRef
 */
export interface ReplicationGroupSpecForProviderNotificationTopicArnRef {
  /**
   * Name of the referenced object.
   *
   * @schema ReplicationGroupSpecForProviderNotificationTopicArnRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema ReplicationGroupSpecForProviderNotificationTopicArnRef#policy
   */
  readonly policy?: ReplicationGroupSpecForProviderNotificationTopicArnRefPolicy;

}

/**
 * Converts an object of type 'ReplicationGroupSpecForProviderNotificationTopicArnRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationGroupSpecForProviderNotificationTopicArnRef(obj: ReplicationGroupSpecForProviderNotificationTopicArnRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_ReplicationGroupSpecForProviderNotificationTopicArnRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * NotificationTopicARNSelector selects a reference to an SNS Topic to retrieve its NotificationTopicARN
 *
 * @schema ReplicationGroupSpecForProviderNotificationTopicArnSelector
 */
export interface ReplicationGroupSpecForProviderNotificationTopicArnSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema ReplicationGroupSpecForProviderNotificationTopicArnSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema ReplicationGroupSpecForProviderNotificationTopicArnSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

  /**
   * Policies for selection.
   *
   * @schema ReplicationGroupSpecForProviderNotificationTopicArnSelector#policy
   */
  readonly policy?: ReplicationGroupSpecForProviderNotificationTopicArnSelectorPolicy;

}

/**
 * Converts an object of type 'ReplicationGroupSpecForProviderNotificationTopicArnSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationGroupSpecForProviderNotificationTopicArnSelector(obj: ReplicationGroupSpecForProviderNotificationTopicArnSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchControllerRef': obj.matchControllerRef,
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'policy': toJson_ReplicationGroupSpecForProviderNotificationTopicArnSelectorPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A Reference to a named object.
 *
 * @schema ReplicationGroupSpecForProviderSecurityGroupIdRefs
 */
export interface ReplicationGroupSpecForProviderSecurityGroupIdRefs {
  /**
   * Name of the referenced object.
   *
   * @schema ReplicationGroupSpecForProviderSecurityGroupIdRefs#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema ReplicationGroupSpecForProviderSecurityGroupIdRefs#policy
   */
  readonly policy?: ReplicationGroupSpecForProviderSecurityGroupIdRefsPolicy;

}

/**
 * Converts an object of type 'ReplicationGroupSpecForProviderSecurityGroupIdRefs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationGroupSpecForProviderSecurityGroupIdRefs(obj: ReplicationGroupSpecForProviderSecurityGroupIdRefs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_ReplicationGroupSpecForProviderSecurityGroupIdRefsPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecurityGroupIDSelector selects references to SecurityGroups used to set the SecurityGroupIDs.
 *
 * @schema ReplicationGroupSpecForProviderSecurityGroupIdSelector
 */
export interface ReplicationGroupSpecForProviderSecurityGroupIdSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema ReplicationGroupSpecForProviderSecurityGroupIdSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema ReplicationGroupSpecForProviderSecurityGroupIdSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

  /**
   * Policies for selection.
   *
   * @schema ReplicationGroupSpecForProviderSecurityGroupIdSelector#policy
   */
  readonly policy?: ReplicationGroupSpecForProviderSecurityGroupIdSelectorPolicy;

}

/**
 * Converts an object of type 'ReplicationGroupSpecForProviderSecurityGroupIdSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationGroupSpecForProviderSecurityGroupIdSelector(obj: ReplicationGroupSpecForProviderSecurityGroupIdSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchControllerRef': obj.matchControllerRef,
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'policy': toJson_ReplicationGroupSpecForProviderSecurityGroupIdSelectorPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A Tag is used to tag the ElastiCache resources in AWS.
 *
 * @schema ReplicationGroupSpecForProviderTags
 */
export interface ReplicationGroupSpecForProviderTags {
  /**
   * Key for the tag.
   *
   * @schema ReplicationGroupSpecForProviderTags#key
   */
  readonly key: string;

  /**
   * Value of the tag.
   *
   * @schema ReplicationGroupSpecForProviderTags#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'ReplicationGroupSpecForProviderTags' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationGroupSpecForProviderTags(obj: ReplicationGroupSpecForProviderTags | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema ReplicationGroupSpecProviderConfigRefPolicy
 */
export interface ReplicationGroupSpecProviderConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema ReplicationGroupSpecProviderConfigRefPolicy#resolution
   */
  readonly resolution?: ReplicationGroupSpecProviderConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema ReplicationGroupSpecProviderConfigRefPolicy#resolve
   */
  readonly resolve?: ReplicationGroupSpecProviderConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'ReplicationGroupSpecProviderConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationGroupSpecProviderConfigRefPolicy(obj: ReplicationGroupSpecProviderConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
 *
 * @schema ReplicationGroupSpecPublishConnectionDetailsToConfigRef
 */
export interface ReplicationGroupSpecPublishConnectionDetailsToConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema ReplicationGroupSpecPublishConnectionDetailsToConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema ReplicationGroupSpecPublishConnectionDetailsToConfigRef#policy
   */
  readonly policy?: ReplicationGroupSpecPublishConnectionDetailsToConfigRefPolicy;

}

/**
 * Converts an object of type 'ReplicationGroupSpecPublishConnectionDetailsToConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationGroupSpecPublishConnectionDetailsToConfigRef(obj: ReplicationGroupSpecPublishConnectionDetailsToConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_ReplicationGroupSpecPublishConnectionDetailsToConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Metadata is the metadata for connection secret.
 *
 * @schema ReplicationGroupSpecPublishConnectionDetailsToMetadata
 */
export interface ReplicationGroupSpecPublishConnectionDetailsToMetadata {
  /**
   * Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
   *
   * @schema ReplicationGroupSpecPublishConnectionDetailsToMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
   *
   * @schema ReplicationGroupSpecPublishConnectionDetailsToMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
   *
   * @schema ReplicationGroupSpecPublishConnectionDetailsToMetadata#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'ReplicationGroupSpecPublishConnectionDetailsToMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationGroupSpecPublishConnectionDetailsToMetadata(obj: ReplicationGroupSpecPublishConnectionDetailsToMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema ReplicationGroupSpecForProviderCacheSecurityGroupNameRefsPolicy
 */
export interface ReplicationGroupSpecForProviderCacheSecurityGroupNameRefsPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema ReplicationGroupSpecForProviderCacheSecurityGroupNameRefsPolicy#resolution
   */
  readonly resolution?: ReplicationGroupSpecForProviderCacheSecurityGroupNameRefsPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema ReplicationGroupSpecForProviderCacheSecurityGroupNameRefsPolicy#resolve
   */
  readonly resolve?: ReplicationGroupSpecForProviderCacheSecurityGroupNameRefsPolicyResolve;

}

/**
 * Converts an object of type 'ReplicationGroupSpecForProviderCacheSecurityGroupNameRefsPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationGroupSpecForProviderCacheSecurityGroupNameRefsPolicy(obj: ReplicationGroupSpecForProviderCacheSecurityGroupNameRefsPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for selection.
 *
 * @schema ReplicationGroupSpecForProviderCacheSecurityGroupNameSelectorPolicy
 */
export interface ReplicationGroupSpecForProviderCacheSecurityGroupNameSelectorPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema ReplicationGroupSpecForProviderCacheSecurityGroupNameSelectorPolicy#resolution
   */
  readonly resolution?: ReplicationGroupSpecForProviderCacheSecurityGroupNameSelectorPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema ReplicationGroupSpecForProviderCacheSecurityGroupNameSelectorPolicy#resolve
   */
  readonly resolve?: ReplicationGroupSpecForProviderCacheSecurityGroupNameSelectorPolicyResolve;

}

/**
 * Converts an object of type 'ReplicationGroupSpecForProviderCacheSecurityGroupNameSelectorPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationGroupSpecForProviderCacheSecurityGroupNameSelectorPolicy(obj: ReplicationGroupSpecForProviderCacheSecurityGroupNameSelectorPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema ReplicationGroupSpecForProviderCacheSubnetGroupNameRefPolicy
 */
export interface ReplicationGroupSpecForProviderCacheSubnetGroupNameRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema ReplicationGroupSpecForProviderCacheSubnetGroupNameRefPolicy#resolution
   */
  readonly resolution?: ReplicationGroupSpecForProviderCacheSubnetGroupNameRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema ReplicationGroupSpecForProviderCacheSubnetGroupNameRefPolicy#resolve
   */
  readonly resolve?: ReplicationGroupSpecForProviderCacheSubnetGroupNameRefPolicyResolve;

}

/**
 * Converts an object of type 'ReplicationGroupSpecForProviderCacheSubnetGroupNameRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationGroupSpecForProviderCacheSubnetGroupNameRefPolicy(obj: ReplicationGroupSpecForProviderCacheSubnetGroupNameRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema ReplicationGroupSpecForProviderCacheSubnetGroupNameRefsPolicy
 */
export interface ReplicationGroupSpecForProviderCacheSubnetGroupNameRefsPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema ReplicationGroupSpecForProviderCacheSubnetGroupNameRefsPolicy#resolution
   */
  readonly resolution?: ReplicationGroupSpecForProviderCacheSubnetGroupNameRefsPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema ReplicationGroupSpecForProviderCacheSubnetGroupNameRefsPolicy#resolve
   */
  readonly resolve?: ReplicationGroupSpecForProviderCacheSubnetGroupNameRefsPolicyResolve;

}

/**
 * Converts an object of type 'ReplicationGroupSpecForProviderCacheSubnetGroupNameRefsPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationGroupSpecForProviderCacheSubnetGroupNameRefsPolicy(obj: ReplicationGroupSpecForProviderCacheSubnetGroupNameRefsPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for selection.
 *
 * @schema ReplicationGroupSpecForProviderCacheSubnetGroupNameSelectorPolicy
 */
export interface ReplicationGroupSpecForProviderCacheSubnetGroupNameSelectorPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema ReplicationGroupSpecForProviderCacheSubnetGroupNameSelectorPolicy#resolution
   */
  readonly resolution?: ReplicationGroupSpecForProviderCacheSubnetGroupNameSelectorPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema ReplicationGroupSpecForProviderCacheSubnetGroupNameSelectorPolicy#resolve
   */
  readonly resolve?: ReplicationGroupSpecForProviderCacheSubnetGroupNameSelectorPolicyResolve;

}

/**
 * Converts an object of type 'ReplicationGroupSpecForProviderCacheSubnetGroupNameSelectorPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationGroupSpecForProviderCacheSubnetGroupNameSelectorPolicy(obj: ReplicationGroupSpecForProviderCacheSubnetGroupNameSelectorPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema ReplicationGroupSpecForProviderNotificationTopicArnRefPolicy
 */
export interface ReplicationGroupSpecForProviderNotificationTopicArnRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema ReplicationGroupSpecForProviderNotificationTopicArnRefPolicy#resolution
   */
  readonly resolution?: ReplicationGroupSpecForProviderNotificationTopicArnRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema ReplicationGroupSpecForProviderNotificationTopicArnRefPolicy#resolve
   */
  readonly resolve?: ReplicationGroupSpecForProviderNotificationTopicArnRefPolicyResolve;

}

/**
 * Converts an object of type 'ReplicationGroupSpecForProviderNotificationTopicArnRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationGroupSpecForProviderNotificationTopicArnRefPolicy(obj: ReplicationGroupSpecForProviderNotificationTopicArnRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for selection.
 *
 * @schema ReplicationGroupSpecForProviderNotificationTopicArnSelectorPolicy
 */
export interface ReplicationGroupSpecForProviderNotificationTopicArnSelectorPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema ReplicationGroupSpecForProviderNotificationTopicArnSelectorPolicy#resolution
   */
  readonly resolution?: ReplicationGroupSpecForProviderNotificationTopicArnSelectorPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema ReplicationGroupSpecForProviderNotificationTopicArnSelectorPolicy#resolve
   */
  readonly resolve?: ReplicationGroupSpecForProviderNotificationTopicArnSelectorPolicyResolve;

}

/**
 * Converts an object of type 'ReplicationGroupSpecForProviderNotificationTopicArnSelectorPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationGroupSpecForProviderNotificationTopicArnSelectorPolicy(obj: ReplicationGroupSpecForProviderNotificationTopicArnSelectorPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema ReplicationGroupSpecForProviderSecurityGroupIdRefsPolicy
 */
export interface ReplicationGroupSpecForProviderSecurityGroupIdRefsPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema ReplicationGroupSpecForProviderSecurityGroupIdRefsPolicy#resolution
   */
  readonly resolution?: ReplicationGroupSpecForProviderSecurityGroupIdRefsPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema ReplicationGroupSpecForProviderSecurityGroupIdRefsPolicy#resolve
   */
  readonly resolve?: ReplicationGroupSpecForProviderSecurityGroupIdRefsPolicyResolve;

}

/**
 * Converts an object of type 'ReplicationGroupSpecForProviderSecurityGroupIdRefsPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationGroupSpecForProviderSecurityGroupIdRefsPolicy(obj: ReplicationGroupSpecForProviderSecurityGroupIdRefsPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for selection.
 *
 * @schema ReplicationGroupSpecForProviderSecurityGroupIdSelectorPolicy
 */
export interface ReplicationGroupSpecForProviderSecurityGroupIdSelectorPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema ReplicationGroupSpecForProviderSecurityGroupIdSelectorPolicy#resolution
   */
  readonly resolution?: ReplicationGroupSpecForProviderSecurityGroupIdSelectorPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema ReplicationGroupSpecForProviderSecurityGroupIdSelectorPolicy#resolve
   */
  readonly resolve?: ReplicationGroupSpecForProviderSecurityGroupIdSelectorPolicyResolve;

}

/**
 * Converts an object of type 'ReplicationGroupSpecForProviderSecurityGroupIdSelectorPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationGroupSpecForProviderSecurityGroupIdSelectorPolicy(obj: ReplicationGroupSpecForProviderSecurityGroupIdSelectorPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema ReplicationGroupSpecProviderConfigRefPolicyResolution
 */
export enum ReplicationGroupSpecProviderConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema ReplicationGroupSpecProviderConfigRefPolicyResolve
 */
export enum ReplicationGroupSpecProviderConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Policies for referencing.
 *
 * @schema ReplicationGroupSpecPublishConnectionDetailsToConfigRefPolicy
 */
export interface ReplicationGroupSpecPublishConnectionDetailsToConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema ReplicationGroupSpecPublishConnectionDetailsToConfigRefPolicy#resolution
   */
  readonly resolution?: ReplicationGroupSpecPublishConnectionDetailsToConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema ReplicationGroupSpecPublishConnectionDetailsToConfigRefPolicy#resolve
   */
  readonly resolve?: ReplicationGroupSpecPublishConnectionDetailsToConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'ReplicationGroupSpecPublishConnectionDetailsToConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationGroupSpecPublishConnectionDetailsToConfigRefPolicy(obj: ReplicationGroupSpecPublishConnectionDetailsToConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema ReplicationGroupSpecForProviderCacheSecurityGroupNameRefsPolicyResolution
 */
export enum ReplicationGroupSpecForProviderCacheSecurityGroupNameRefsPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema ReplicationGroupSpecForProviderCacheSecurityGroupNameRefsPolicyResolve
 */
export enum ReplicationGroupSpecForProviderCacheSecurityGroupNameRefsPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema ReplicationGroupSpecForProviderCacheSecurityGroupNameSelectorPolicyResolution
 */
export enum ReplicationGroupSpecForProviderCacheSecurityGroupNameSelectorPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema ReplicationGroupSpecForProviderCacheSecurityGroupNameSelectorPolicyResolve
 */
export enum ReplicationGroupSpecForProviderCacheSecurityGroupNameSelectorPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema ReplicationGroupSpecForProviderCacheSubnetGroupNameRefPolicyResolution
 */
export enum ReplicationGroupSpecForProviderCacheSubnetGroupNameRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema ReplicationGroupSpecForProviderCacheSubnetGroupNameRefPolicyResolve
 */
export enum ReplicationGroupSpecForProviderCacheSubnetGroupNameRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema ReplicationGroupSpecForProviderCacheSubnetGroupNameRefsPolicyResolution
 */
export enum ReplicationGroupSpecForProviderCacheSubnetGroupNameRefsPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema ReplicationGroupSpecForProviderCacheSubnetGroupNameRefsPolicyResolve
 */
export enum ReplicationGroupSpecForProviderCacheSubnetGroupNameRefsPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema ReplicationGroupSpecForProviderCacheSubnetGroupNameSelectorPolicyResolution
 */
export enum ReplicationGroupSpecForProviderCacheSubnetGroupNameSelectorPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema ReplicationGroupSpecForProviderCacheSubnetGroupNameSelectorPolicyResolve
 */
export enum ReplicationGroupSpecForProviderCacheSubnetGroupNameSelectorPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema ReplicationGroupSpecForProviderNotificationTopicArnRefPolicyResolution
 */
export enum ReplicationGroupSpecForProviderNotificationTopicArnRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema ReplicationGroupSpecForProviderNotificationTopicArnRefPolicyResolve
 */
export enum ReplicationGroupSpecForProviderNotificationTopicArnRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema ReplicationGroupSpecForProviderNotificationTopicArnSelectorPolicyResolution
 */
export enum ReplicationGroupSpecForProviderNotificationTopicArnSelectorPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema ReplicationGroupSpecForProviderNotificationTopicArnSelectorPolicyResolve
 */
export enum ReplicationGroupSpecForProviderNotificationTopicArnSelectorPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema ReplicationGroupSpecForProviderSecurityGroupIdRefsPolicyResolution
 */
export enum ReplicationGroupSpecForProviderSecurityGroupIdRefsPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema ReplicationGroupSpecForProviderSecurityGroupIdRefsPolicyResolve
 */
export enum ReplicationGroupSpecForProviderSecurityGroupIdRefsPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema ReplicationGroupSpecForProviderSecurityGroupIdSelectorPolicyResolution
 */
export enum ReplicationGroupSpecForProviderSecurityGroupIdSelectorPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema ReplicationGroupSpecForProviderSecurityGroupIdSelectorPolicyResolve
 */
export enum ReplicationGroupSpecForProviderSecurityGroupIdSelectorPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema ReplicationGroupSpecPublishConnectionDetailsToConfigRefPolicyResolution
 */
export enum ReplicationGroupSpecPublishConnectionDetailsToConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema ReplicationGroupSpecPublishConnectionDetailsToConfigRefPolicyResolve
 */
export enum ReplicationGroupSpecPublishConnectionDetailsToConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

