// @ts-nocheck
// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 * ComputeEnvironment is the Schema for the ComputeEnvironments API
 *
 * @schema ComputeEnvironment
 */
export class ComputeEnvironment extends ApiObject {
  /**
   * Returns the apiVersion and kind for "ComputeEnvironment"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'batch.aws.crossplane.io/v1alpha1',
    kind: 'ComputeEnvironment',
  }

  /**
   * Renders a Kubernetes manifest for "ComputeEnvironment".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: ComputeEnvironmentProps): any {
    return {
      ...ComputeEnvironment.GVK,
      ...toJson_ComputeEnvironmentProps(props),
    };
  }

  /**
   * Defines a "ComputeEnvironment" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: ComputeEnvironmentProps) {
    super(scope, id, {
      ...ComputeEnvironment.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...ComputeEnvironment.GVK,
      ...toJson_ComputeEnvironmentProps(resolved),
    };
  }
}

/**
 * ComputeEnvironment is the Schema for the ComputeEnvironments API
 *
 * @schema ComputeEnvironment
 */
export interface ComputeEnvironmentProps {
  /**
   * @schema ComputeEnvironment#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * ComputeEnvironmentSpec defines the desired state of ComputeEnvironment
   *
   * @schema ComputeEnvironment#spec
   */
  readonly spec: ComputeEnvironmentSpec;

}

/**
 * Converts an object of type 'ComputeEnvironmentProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ComputeEnvironmentProps(obj: ComputeEnvironmentProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_ComputeEnvironmentSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ComputeEnvironmentSpec defines the desired state of ComputeEnvironment
 *
 * @schema ComputeEnvironmentSpec
 */
export interface ComputeEnvironmentSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
   *
   * @schema ComputeEnvironmentSpec#deletionPolicy
   */
  readonly deletionPolicy?: ComputeEnvironmentSpecDeletionPolicy;

  /**
   * ComputeEnvironmentParameters defines the desired state of ComputeEnvironment
   *
   * @schema ComputeEnvironmentSpec#forProvider
   */
  readonly forProvider: ComputeEnvironmentSpecForProvider;

  /**
   * THIS IS A BETA FIELD. It is on by default but can be opted out through a Crossplane feature flag. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
   *
   * @schema ComputeEnvironmentSpec#managementPolicies
   */
  readonly managementPolicies?: ComputeEnvironmentSpecManagementPolicies[];

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema ComputeEnvironmentSpec#providerConfigRef
   */
  readonly providerConfigRef?: ComputeEnvironmentSpecProviderConfigRef;

  /**
   * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema ComputeEnvironmentSpec#publishConnectionDetailsTo
   */
  readonly publishConnectionDetailsTo?: ComputeEnvironmentSpecPublishConnectionDetailsTo;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
   *
   * @schema ComputeEnvironmentSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: ComputeEnvironmentSpecWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'ComputeEnvironmentSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ComputeEnvironmentSpec(obj: ComputeEnvironmentSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'deletionPolicy': obj.deletionPolicy,
    'forProvider': toJson_ComputeEnvironmentSpecForProvider(obj.forProvider),
    'managementPolicies': obj.managementPolicies?.map(y => y),
    'providerConfigRef': toJson_ComputeEnvironmentSpecProviderConfigRef(obj.providerConfigRef),
    'publishConnectionDetailsTo': toJson_ComputeEnvironmentSpecPublishConnectionDetailsTo(obj.publishConnectionDetailsTo),
    'writeConnectionSecretToRef': toJson_ComputeEnvironmentSpecWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
 *
 * @schema ComputeEnvironmentSpecDeletionPolicy
 */
export enum ComputeEnvironmentSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * ComputeEnvironmentParameters defines the desired state of ComputeEnvironment
 *
 * @schema ComputeEnvironmentSpecForProvider
 */
export interface ComputeEnvironmentSpecForProvider {
  /**
   * Details about the compute resources managed by the compute environment. This parameter is required for managed compute environments. For more information, see Compute Environments (https://docs.aws.amazon.com/batch/latest/userguide/compute_environments.html) in the Batch User Guide.
   *
   * @schema ComputeEnvironmentSpecForProvider#computeResources
   */
  readonly computeResources?: ComputeEnvironmentSpecForProviderComputeResources;

  /**
   * Custom parameter to control the state of the compute environment. The valid values are ENABLED or DISABLED.
   * If the state is ENABLED, then the Batch scheduler can attempt to place jobs from an associated job queue on the compute resources within the environment. If the compute environment is managed, then it can scale its instances out or in automatically, based on the job queue demand.
   * If the state is DISABLED, then the Batch scheduler doesn't attempt to place jobs within the environment. Jobs in a STARTING or RUNNING state continue to progress normally. Managed compute environments in the DISABLED state don't scale out. However, they scale in to minvCpus value after instances become idle.
   *
   * @schema ComputeEnvironmentSpecForProvider#desiredState
   */
  readonly desiredState?: ComputeEnvironmentSpecForProviderDesiredState;

  /**
   * The details for the Amazon EKS cluster that supports the compute environment.
   *
   * @schema ComputeEnvironmentSpecForProvider#eksConfiguration
   */
  readonly eksConfiguration?: ComputeEnvironmentSpecForProviderEksConfiguration;

  /**
   * The Amazon ECS instance profile applied to Amazon EC2 instances in a compute environment. You can specify the short name or full Amazon Resource Name (ARN) of an instance profile. For example, ecsInstanceRole or arn:aws:iam::<aws_account_id>:instance-profile/ecsInstanceRole . For more information, see Amazon ECS Instance Role (https://docs.aws.amazon.com/batch/latest/userguide/instance_IAM_role.html) in the Batch User Guide. Only applicable to MANGED CE of type EC2 or SPOT. This field can be updated for CE only with Allocation Strategy BEST_FIT_PROGRESSIVE or SPOT_CAPACITY_OPTIMIZED.
   * This parameter isn't applicable to jobs that are running on Fargate resources, and shouldn't be specified.
   *
   * @schema ComputeEnvironmentSpecForProvider#instanceRole
   */
  readonly instanceRole?: string;

  /**
   * InstanceRoleRef is a reference to the IAM InstanceProfile used to set the InstanceRole.
   *
   * @schema ComputeEnvironmentSpecForProvider#instanceRoleRef
   */
  readonly instanceRoleRef?: ComputeEnvironmentSpecForProviderInstanceRoleRef;

  /**
   * InstanceRoleSelector selects references to the IAM InstanceProfile used to set the InstanceRole.
   *
   * @schema ComputeEnvironmentSpecForProvider#instanceRoleSelector
   */
  readonly instanceRoleSelector?: ComputeEnvironmentSpecForProviderInstanceRoleSelector;

  /**
   * Region is which region the ComputeEnvironment will be created.
   *
   * @schema ComputeEnvironmentSpecForProvider#region
   */
  readonly region: string;

  /**
   * SecurityGroupIDRefs is a list of references to SecurityGroups used to set the SecurityGroupIDs.
   *
   * @schema ComputeEnvironmentSpecForProvider#securityGroupIdRefs
   */
  readonly securityGroupIdRefs?: ComputeEnvironmentSpecForProviderSecurityGroupIdRefs[];

  /**
   * SecurityGroupIDsSelector selects references to SecurityGroupID used to set the SecurityGroupIDs.
   *
   * @schema ComputeEnvironmentSpecForProvider#securityGroupIdSelector
   */
  readonly securityGroupIdSelector?: ComputeEnvironmentSpecForProviderSecurityGroupIdSelector;

  /**
   * The Amazon EC2 security groups associated with instances launched in the compute environment. One or more security groups must be specified, either in securityGroupIds or using a launch template referenced in launchTemplate. This parameter is required for jobs that are running on Fargate resources and must contain at least one security group. Fargate doesn't support launch templates. If security groups are specified using both securityGroupIds and launchTemplate, the values in securityGroupIds are used. For a MANGED CE of type EC2 or SPOT to be able to update this field Allocation Strategy BEST_FIT_PROGRESSIVE or SPOT_CAPACITY_OPTIMIZED is required.
   *
   * @schema ComputeEnvironmentSpecForProvider#securityGroupIds
   */
  readonly securityGroupIds?: string[];

  /**
   * The full Amazon Resource Name (ARN) of the IAM role that allows Batch to make calls to other Amazon Web Services services on your behalf. For more information, see Batch service IAM role (https://docs.aws.amazon.com/batch/latest/userguide/service_IAM_role.html) If the compute environment has a service-linked role, it can't be changed to use a regular IAM role. Likewise, if the compute environment has a regular IAM role, it can't be changed to use a service-linked role. If your specified role has a path other than /, then you must either specify the full role ARN (this is recommended) or prefix the role name with the path. Depending on how you created your Batch service role, its ARN might contain the service-role path prefix. When you only specify the name of the service role, Batch assumes that your ARN doesn't use the service-role path prefix. Because of this, we recommend that you specify the full ARN of your service role when you create compute environments
   *
   * @schema ComputeEnvironmentSpecForProvider#serviceRoleARN
   */
  readonly serviceRoleArn?: string;

  /**
   * ServiceRoleARNRef is a reference to an ARN of the IAM role used to set the ServiceRoleARN.
   *
   * @schema ComputeEnvironmentSpecForProvider#serviceRoleARNRef
   */
  readonly serviceRoleArnRef?: ComputeEnvironmentSpecForProviderServiceRoleArnRef;

  /**
   * ServiceRoleARNSelector selects references to an ARN of the IAM role used to set the ServiceRoleARN.
   *
   * @schema ComputeEnvironmentSpecForProvider#serviceRoleARNSelector
   */
  readonly serviceRoleArnSelector?: ComputeEnvironmentSpecForProviderServiceRoleArnSelector;

  /**
   * SpotIAMFleetRoleRef is a reference to an ARN of the IAM role used to set the SpotIAMFleetRole.
   *
   * @schema ComputeEnvironmentSpecForProvider#spotIAMFleetRoleRef
   */
  readonly spotIamFleetRoleRef?: ComputeEnvironmentSpecForProviderSpotIamFleetRoleRef;

  /**
   * The Amazon Resource Name (ARN) of the Amazon EC2 Spot Fleet IAM role applied to a SPOT compute environment. This role is required if the allocation strategy set to BEST_FIT or if the allocation strategy isn't specified. For more information, see Amazon EC2 Spot Fleet Role (https://docs.aws.amazon.com/batch/latest/userguide/spot_fleet_IAM_role.html) in the Batch User Guide.
   * This parameter isn't applicable to jobs that are running on Fargate resources, and shouldn't be specified.
   * To tag your Spot Instances on creation, the Spot Fleet IAM role specified here must use the newer AmazonEC2SpotFleetTaggingRole managed policy. The previously recommended AmazonEC2SpotFleetRole managed policy doesn't have the required permissions to tag Spot Instances. For more information, see Spot Instances not tagged on creation (https://docs.aws.amazon.com/batch/latest/userguide/troubleshooting.html#spot-instance-no-tag) in the Batch User Guide.
   *
   * @schema ComputeEnvironmentSpecForProvider#spotIamFleetRole
   */
  readonly spotIamFleetRole?: string;

  /**
   * SpotIAMFleetRoleSelector selects references to an ARN of the IAM role used to set the SpotIAMFleetRole.
   *
   * @schema ComputeEnvironmentSpecForProvider#spotIamFleetRoleSelector
   */
  readonly spotIamFleetRoleSelector?: ComputeEnvironmentSpecForProviderSpotIamFleetRoleSelector;

  /**
   * SubnetIDRefs is a list of references to SubnetIDs used to set the SubnetIDs.
   *
   * @schema ComputeEnvironmentSpecForProvider#subnetIdRefs
   */
  readonly subnetIdRefs?: ComputeEnvironmentSpecForProviderSubnetIdRefs[];

  /**
   * SubnetIDSelector selects references to SubnetIDs used to set the SubnetIDs.
   *
   * @schema ComputeEnvironmentSpecForProvider#subnetIdSelector
   */
  readonly subnetIdSelector?: ComputeEnvironmentSpecForProviderSubnetIdSelector;

  /**
   * The VPC subnets where the compute resources are launched. These subnets must be within the same VPC. Fargate compute resources can contain up to 16 subnets. For more information, see VPCs and Subnets (https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html) in the Amazon VPC User Guide. (Subnets is originally a field of ComputeResources) Subnets is a required field for CE type MANAGED. For a MANGED CE of type EC2 or SPOT to be able to update this field Allocation Strategy BEST_FIT_PROGRESSIVE or SPOT_CAPACITY_OPTIMIZED is required.
   *
   * @schema ComputeEnvironmentSpecForProvider#subnetIds
   */
  readonly subnetIds?: string[];

  /**
   * The tags that you apply to the compute environment to help you categorize and organize your resources. Each tag consists of a key and an optional value. For more information, see Tagging Amazon Web Services Resources (https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in Amazon Web Services General Reference.
   * These tags can be updated or removed using the TagResource (https://docs.aws.amazon.com/batch/latest/APIReference/API_TagResource.html) and UntagResource (https://docs.aws.amazon.com/batch/latest/APIReference/API_UntagResource.html) API operations. These tags don't propagate to the underlying compute resources.
   *
   * @schema ComputeEnvironmentSpecForProvider#tags
   */
  readonly tags?: { [key: string]: string };

  /**
   * The type of the compute environment: MANAGED or UNMANAGED. For more information, see Compute Environments (https://docs.aws.amazon.com/batch/latest/userguide/compute_environments.html) in the Batch User Guide.
   *
   * @schema ComputeEnvironmentSpecForProvider#type_
   */
  readonly type: string;

  /**
   * The maximum number of vCPUs for an unmanaged compute environment. This parameter is only used for fair share scheduling to reserve vCPU capacity for new share identifiers. If this parameter isn't provided for a fair share job queue, no vCPU capacity is reserved.
   * This parameter is only supported when the type parameter is set to UNMANAGED.
   *
   * @schema ComputeEnvironmentSpecForProvider#unmanagedvCPUs
   */
  readonly unmanagedvCpUs?: number;

  /**
   * Specifies the infrastructure update policy for the compute environment. For more information about infrastructure updates, see Updating compute environments (https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the Batch User Guide. Only applicable to MANGED CE of type EC2 or SPOT. This field requires an update request to be set and it can be updated for CE only with Allocation Strategy BEST_FIT_PROGRESSIVE or SPOT_CAPACITY_OPTIMIZED.
   * JobExecutionTimeoutMinutes specifies the job timeout (in minutes) when the compute environment infrastructure is updated. The default value is 30.
   * TerminateJobsOnUpdate specifies whether jobs are automatically terminated when the computer environment infrastructure is updated. The default value is false.
   *
   * @schema ComputeEnvironmentSpecForProvider#updatePolicy
   */
  readonly updatePolicy?: ComputeEnvironmentSpecForProviderUpdatePolicy;

  /**
   * Specifies whether the AMI ID is updated to the latest one that's supported by Batch when the compute environment has an infrastructure update. The default value is false. Only applicable to MANGED CE of type EC2 or SPOT. This field requires an update request to be set and it can be updated for CE only with Allocation Strategy BEST_FIT_PROGRESSIVE or SPOT_CAPACITY_OPTIMIZED. Also to get this field changed, you need to include another change to trigger an update.
   * If an AMI ID is specified in the imageIdOverride parameters or by the launch template specified in the launchTemplate parameter, this parameter is ignored. For more information on updating AMI IDs during an infrastructure update, see Updating the AMI ID (https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html#updating-compute-environments-ami) in the Batch User Guide.
   * When updating a compute environment, changing this setting requires an infrastructure update of the compute environment. For more information, see Updating compute environments (https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the Batch User Guide.
   *
   * @schema ComputeEnvironmentSpecForProvider#updateToLatestImageVersion
   */
  readonly updateToLatestImageVersion?: boolean;

}

/**
 * Converts an object of type 'ComputeEnvironmentSpecForProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ComputeEnvironmentSpecForProvider(obj: ComputeEnvironmentSpecForProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'computeResources': toJson_ComputeEnvironmentSpecForProviderComputeResources(obj.computeResources),
    'desiredState': obj.desiredState,
    'eksConfiguration': toJson_ComputeEnvironmentSpecForProviderEksConfiguration(obj.eksConfiguration),
    'instanceRole': obj.instanceRole,
    'instanceRoleRef': toJson_ComputeEnvironmentSpecForProviderInstanceRoleRef(obj.instanceRoleRef),
    'instanceRoleSelector': toJson_ComputeEnvironmentSpecForProviderInstanceRoleSelector(obj.instanceRoleSelector),
    'region': obj.region,
    'securityGroupIdRefs': obj.securityGroupIdRefs?.map(y => toJson_ComputeEnvironmentSpecForProviderSecurityGroupIdRefs(y)),
    'securityGroupIdSelector': toJson_ComputeEnvironmentSpecForProviderSecurityGroupIdSelector(obj.securityGroupIdSelector),
    'securityGroupIds': obj.securityGroupIds?.map(y => y),
    'serviceRoleARN': obj.serviceRoleArn,
    'serviceRoleARNRef': toJson_ComputeEnvironmentSpecForProviderServiceRoleArnRef(obj.serviceRoleArnRef),
    'serviceRoleARNSelector': toJson_ComputeEnvironmentSpecForProviderServiceRoleArnSelector(obj.serviceRoleArnSelector),
    'spotIAMFleetRoleRef': toJson_ComputeEnvironmentSpecForProviderSpotIamFleetRoleRef(obj.spotIamFleetRoleRef),
    'spotIamFleetRole': obj.spotIamFleetRole,
    'spotIamFleetRoleSelector': toJson_ComputeEnvironmentSpecForProviderSpotIamFleetRoleSelector(obj.spotIamFleetRoleSelector),
    'subnetIdRefs': obj.subnetIdRefs?.map(y => toJson_ComputeEnvironmentSpecForProviderSubnetIdRefs(y)),
    'subnetIdSelector': toJson_ComputeEnvironmentSpecForProviderSubnetIdSelector(obj.subnetIdSelector),
    'subnetIds': obj.subnetIds?.map(y => y),
    'tags': ((obj.tags) === undefined) ? undefined : (Object.entries(obj.tags).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'type_': obj.type,
    'unmanagedvCPUs': obj.unmanagedvCpUs,
    'updatePolicy': toJson_ComputeEnvironmentSpecForProviderUpdatePolicy(obj.updatePolicy),
    'updateToLatestImageVersion': obj.updateToLatestImageVersion,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A ManagementAction represents an action that the Crossplane controllers can take on an external resource.
 *
 * @schema ComputeEnvironmentSpecManagementPolicies
 */
export enum ComputeEnvironmentSpecManagementPolicies {
  /** Observe */
  OBSERVE = "Observe",
  /** Create */
  CREATE = "Create",
  /** Update */
  UPDATE = "Update",
  /** Delete */
  DELETE = "Delete",
  /** LateInitialize */
  LATE_INITIALIZE = "LateInitialize",
  /** * */
  VALUE_ASTERISK = "*",
}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema ComputeEnvironmentSpecProviderConfigRef
 */
export interface ComputeEnvironmentSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema ComputeEnvironmentSpecProviderConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema ComputeEnvironmentSpecProviderConfigRef#policy
   */
  readonly policy?: ComputeEnvironmentSpecProviderConfigRefPolicy;

}

/**
 * Converts an object of type 'ComputeEnvironmentSpecProviderConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ComputeEnvironmentSpecProviderConfigRef(obj: ComputeEnvironmentSpecProviderConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_ComputeEnvironmentSpecProviderConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema ComputeEnvironmentSpecPublishConnectionDetailsTo
 */
export interface ComputeEnvironmentSpecPublishConnectionDetailsTo {
  /**
   * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
   *
   * @schema ComputeEnvironmentSpecPublishConnectionDetailsTo#configRef
   */
  readonly configRef?: ComputeEnvironmentSpecPublishConnectionDetailsToConfigRef;

  /**
   * Metadata is the metadata for connection secret.
   *
   * @schema ComputeEnvironmentSpecPublishConnectionDetailsTo#metadata
   */
  readonly metadata?: ComputeEnvironmentSpecPublishConnectionDetailsToMetadata;

  /**
   * Name is the name of the connection secret.
   *
   * @schema ComputeEnvironmentSpecPublishConnectionDetailsTo#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'ComputeEnvironmentSpecPublishConnectionDetailsTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ComputeEnvironmentSpecPublishConnectionDetailsTo(obj: ComputeEnvironmentSpecPublishConnectionDetailsTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configRef': toJson_ComputeEnvironmentSpecPublishConnectionDetailsToConfigRef(obj.configRef),
    'metadata': toJson_ComputeEnvironmentSpecPublishConnectionDetailsToMetadata(obj.metadata),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
 *
 * @schema ComputeEnvironmentSpecWriteConnectionSecretToRef
 */
export interface ComputeEnvironmentSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema ComputeEnvironmentSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema ComputeEnvironmentSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'ComputeEnvironmentSpecWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ComputeEnvironmentSpecWriteConnectionSecretToRef(obj: ComputeEnvironmentSpecWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Details about the compute resources managed by the compute environment. This parameter is required for managed compute environments. For more information, see Compute Environments (https://docs.aws.amazon.com/batch/latest/userguide/compute_environments.html) in the Batch User Guide.
 *
 * @schema ComputeEnvironmentSpecForProviderComputeResources
 */
export interface ComputeEnvironmentSpecForProviderComputeResources {
  /**
   * @schema ComputeEnvironmentSpecForProviderComputeResources#allocationStrategy
   */
  readonly allocationStrategy?: string;

  /**
   * @schema ComputeEnvironmentSpecForProviderComputeResources#bidPercentage
   */
  readonly bidPercentage?: number;

  /**
   * @schema ComputeEnvironmentSpecForProviderComputeResources#ec2Configuration
   */
  readonly ec2Configuration?: ComputeEnvironmentSpecForProviderComputeResourcesEc2Configuration[];

  /**
   * @schema ComputeEnvironmentSpecForProviderComputeResources#ec2KeyPair
   */
  readonly ec2KeyPair?: string;

  /**
   * @schema ComputeEnvironmentSpecForProviderComputeResources#instanceTypes
   */
  readonly instanceTypes?: string[];

  /**
   * An object that represents a launch template that's associated with a compute resource. You must specify either the launch template ID or launch template name in the request, but not both.
   * If security groups are specified using both the securityGroupIds parameter of CreateComputeEnvironment and the launch template, the values in the securityGroupIds parameter of CreateComputeEnvironment will be used.
   * This object isn't applicable to jobs that are running on Fargate resources.
   *
   * @schema ComputeEnvironmentSpecForProviderComputeResources#launchTemplate
   */
  readonly launchTemplate?: ComputeEnvironmentSpecForProviderComputeResourcesLaunchTemplate;

  /**
   * @schema ComputeEnvironmentSpecForProviderComputeResources#maxvCPUs
   */
  readonly maxvCpUs?: number;

  /**
   * @schema ComputeEnvironmentSpecForProviderComputeResources#minvCPUs
   */
  readonly minvCpUs?: number;

  /**
   * @schema ComputeEnvironmentSpecForProviderComputeResources#placementGroup
   */
  readonly placementGroup?: string;

  /**
   * @schema ComputeEnvironmentSpecForProviderComputeResources#tags
   */
  readonly tags?: { [key: string]: string };

  /**
   * @schema ComputeEnvironmentSpecForProviderComputeResources#type_
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'ComputeEnvironmentSpecForProviderComputeResources' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ComputeEnvironmentSpecForProviderComputeResources(obj: ComputeEnvironmentSpecForProviderComputeResources | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'allocationStrategy': obj.allocationStrategy,
    'bidPercentage': obj.bidPercentage,
    'ec2Configuration': obj.ec2Configuration?.map(y => toJson_ComputeEnvironmentSpecForProviderComputeResourcesEc2Configuration(y)),
    'ec2KeyPair': obj.ec2KeyPair,
    'instanceTypes': obj.instanceTypes?.map(y => y),
    'launchTemplate': toJson_ComputeEnvironmentSpecForProviderComputeResourcesLaunchTemplate(obj.launchTemplate),
    'maxvCPUs': obj.maxvCpUs,
    'minvCPUs': obj.minvCpUs,
    'placementGroup': obj.placementGroup,
    'tags': ((obj.tags) === undefined) ? undefined : (Object.entries(obj.tags).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'type_': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Custom parameter to control the state of the compute environment. The valid values are ENABLED or DISABLED.
 * If the state is ENABLED, then the Batch scheduler can attempt to place jobs from an associated job queue on the compute resources within the environment. If the compute environment is managed, then it can scale its instances out or in automatically, based on the job queue demand.
 * If the state is DISABLED, then the Batch scheduler doesn't attempt to place jobs within the environment. Jobs in a STARTING or RUNNING state continue to progress normally. Managed compute environments in the DISABLED state don't scale out. However, they scale in to minvCpus value after instances become idle.
 *
 * @schema ComputeEnvironmentSpecForProviderDesiredState
 */
export enum ComputeEnvironmentSpecForProviderDesiredState {
  /** ENABLED */
  ENABLED = "ENABLED",
  /** DISABLED */
  DISABLED = "DISABLED",
}

/**
 * The details for the Amazon EKS cluster that supports the compute environment.
 *
 * @schema ComputeEnvironmentSpecForProviderEksConfiguration
 */
export interface ComputeEnvironmentSpecForProviderEksConfiguration {
  /**
   * @schema ComputeEnvironmentSpecForProviderEksConfiguration#eksClusterARN
   */
  readonly eksClusterArn?: string;

  /**
   * @schema ComputeEnvironmentSpecForProviderEksConfiguration#kubernetesNamespace
   */
  readonly kubernetesNamespace?: string;

}

/**
 * Converts an object of type 'ComputeEnvironmentSpecForProviderEksConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ComputeEnvironmentSpecForProviderEksConfiguration(obj: ComputeEnvironmentSpecForProviderEksConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'eksClusterARN': obj.eksClusterArn,
    'kubernetesNamespace': obj.kubernetesNamespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * InstanceRoleRef is a reference to the IAM InstanceProfile used to set the InstanceRole.
 *
 * @schema ComputeEnvironmentSpecForProviderInstanceRoleRef
 */
export interface ComputeEnvironmentSpecForProviderInstanceRoleRef {
  /**
   * Name of the referenced object.
   *
   * @schema ComputeEnvironmentSpecForProviderInstanceRoleRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema ComputeEnvironmentSpecForProviderInstanceRoleRef#policy
   */
  readonly policy?: ComputeEnvironmentSpecForProviderInstanceRoleRefPolicy;

}

/**
 * Converts an object of type 'ComputeEnvironmentSpecForProviderInstanceRoleRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ComputeEnvironmentSpecForProviderInstanceRoleRef(obj: ComputeEnvironmentSpecForProviderInstanceRoleRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_ComputeEnvironmentSpecForProviderInstanceRoleRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * InstanceRoleSelector selects references to the IAM InstanceProfile used to set the InstanceRole.
 *
 * @schema ComputeEnvironmentSpecForProviderInstanceRoleSelector
 */
export interface ComputeEnvironmentSpecForProviderInstanceRoleSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema ComputeEnvironmentSpecForProviderInstanceRoleSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema ComputeEnvironmentSpecForProviderInstanceRoleSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

  /**
   * Policies for selection.
   *
   * @schema ComputeEnvironmentSpecForProviderInstanceRoleSelector#policy
   */
  readonly policy?: ComputeEnvironmentSpecForProviderInstanceRoleSelectorPolicy;

}

/**
 * Converts an object of type 'ComputeEnvironmentSpecForProviderInstanceRoleSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ComputeEnvironmentSpecForProviderInstanceRoleSelector(obj: ComputeEnvironmentSpecForProviderInstanceRoleSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchControllerRef': obj.matchControllerRef,
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'policy': toJson_ComputeEnvironmentSpecForProviderInstanceRoleSelectorPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A Reference to a named object.
 *
 * @schema ComputeEnvironmentSpecForProviderSecurityGroupIdRefs
 */
export interface ComputeEnvironmentSpecForProviderSecurityGroupIdRefs {
  /**
   * Name of the referenced object.
   *
   * @schema ComputeEnvironmentSpecForProviderSecurityGroupIdRefs#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema ComputeEnvironmentSpecForProviderSecurityGroupIdRefs#policy
   */
  readonly policy?: ComputeEnvironmentSpecForProviderSecurityGroupIdRefsPolicy;

}

/**
 * Converts an object of type 'ComputeEnvironmentSpecForProviderSecurityGroupIdRefs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ComputeEnvironmentSpecForProviderSecurityGroupIdRefs(obj: ComputeEnvironmentSpecForProviderSecurityGroupIdRefs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_ComputeEnvironmentSpecForProviderSecurityGroupIdRefsPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecurityGroupIDsSelector selects references to SecurityGroupID used to set the SecurityGroupIDs.
 *
 * @schema ComputeEnvironmentSpecForProviderSecurityGroupIdSelector
 */
export interface ComputeEnvironmentSpecForProviderSecurityGroupIdSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema ComputeEnvironmentSpecForProviderSecurityGroupIdSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema ComputeEnvironmentSpecForProviderSecurityGroupIdSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

  /**
   * Policies for selection.
   *
   * @schema ComputeEnvironmentSpecForProviderSecurityGroupIdSelector#policy
   */
  readonly policy?: ComputeEnvironmentSpecForProviderSecurityGroupIdSelectorPolicy;

}

/**
 * Converts an object of type 'ComputeEnvironmentSpecForProviderSecurityGroupIdSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ComputeEnvironmentSpecForProviderSecurityGroupIdSelector(obj: ComputeEnvironmentSpecForProviderSecurityGroupIdSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchControllerRef': obj.matchControllerRef,
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'policy': toJson_ComputeEnvironmentSpecForProviderSecurityGroupIdSelectorPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ServiceRoleARNRef is a reference to an ARN of the IAM role used to set the ServiceRoleARN.
 *
 * @schema ComputeEnvironmentSpecForProviderServiceRoleArnRef
 */
export interface ComputeEnvironmentSpecForProviderServiceRoleArnRef {
  /**
   * Name of the referenced object.
   *
   * @schema ComputeEnvironmentSpecForProviderServiceRoleArnRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema ComputeEnvironmentSpecForProviderServiceRoleArnRef#policy
   */
  readonly policy?: ComputeEnvironmentSpecForProviderServiceRoleArnRefPolicy;

}

/**
 * Converts an object of type 'ComputeEnvironmentSpecForProviderServiceRoleArnRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ComputeEnvironmentSpecForProviderServiceRoleArnRef(obj: ComputeEnvironmentSpecForProviderServiceRoleArnRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_ComputeEnvironmentSpecForProviderServiceRoleArnRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ServiceRoleARNSelector selects references to an ARN of the IAM role used to set the ServiceRoleARN.
 *
 * @schema ComputeEnvironmentSpecForProviderServiceRoleArnSelector
 */
export interface ComputeEnvironmentSpecForProviderServiceRoleArnSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema ComputeEnvironmentSpecForProviderServiceRoleArnSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema ComputeEnvironmentSpecForProviderServiceRoleArnSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

  /**
   * Policies for selection.
   *
   * @schema ComputeEnvironmentSpecForProviderServiceRoleArnSelector#policy
   */
  readonly policy?: ComputeEnvironmentSpecForProviderServiceRoleArnSelectorPolicy;

}

/**
 * Converts an object of type 'ComputeEnvironmentSpecForProviderServiceRoleArnSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ComputeEnvironmentSpecForProviderServiceRoleArnSelector(obj: ComputeEnvironmentSpecForProviderServiceRoleArnSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchControllerRef': obj.matchControllerRef,
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'policy': toJson_ComputeEnvironmentSpecForProviderServiceRoleArnSelectorPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SpotIAMFleetRoleRef is a reference to an ARN of the IAM role used to set the SpotIAMFleetRole.
 *
 * @schema ComputeEnvironmentSpecForProviderSpotIamFleetRoleRef
 */
export interface ComputeEnvironmentSpecForProviderSpotIamFleetRoleRef {
  /**
   * Name of the referenced object.
   *
   * @schema ComputeEnvironmentSpecForProviderSpotIamFleetRoleRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema ComputeEnvironmentSpecForProviderSpotIamFleetRoleRef#policy
   */
  readonly policy?: ComputeEnvironmentSpecForProviderSpotIamFleetRoleRefPolicy;

}

/**
 * Converts an object of type 'ComputeEnvironmentSpecForProviderSpotIamFleetRoleRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ComputeEnvironmentSpecForProviderSpotIamFleetRoleRef(obj: ComputeEnvironmentSpecForProviderSpotIamFleetRoleRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_ComputeEnvironmentSpecForProviderSpotIamFleetRoleRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SpotIAMFleetRoleSelector selects references to an ARN of the IAM role used to set the SpotIAMFleetRole.
 *
 * @schema ComputeEnvironmentSpecForProviderSpotIamFleetRoleSelector
 */
export interface ComputeEnvironmentSpecForProviderSpotIamFleetRoleSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema ComputeEnvironmentSpecForProviderSpotIamFleetRoleSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema ComputeEnvironmentSpecForProviderSpotIamFleetRoleSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

  /**
   * Policies for selection.
   *
   * @schema ComputeEnvironmentSpecForProviderSpotIamFleetRoleSelector#policy
   */
  readonly policy?: ComputeEnvironmentSpecForProviderSpotIamFleetRoleSelectorPolicy;

}

/**
 * Converts an object of type 'ComputeEnvironmentSpecForProviderSpotIamFleetRoleSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ComputeEnvironmentSpecForProviderSpotIamFleetRoleSelector(obj: ComputeEnvironmentSpecForProviderSpotIamFleetRoleSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchControllerRef': obj.matchControllerRef,
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'policy': toJson_ComputeEnvironmentSpecForProviderSpotIamFleetRoleSelectorPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A Reference to a named object.
 *
 * @schema ComputeEnvironmentSpecForProviderSubnetIdRefs
 */
export interface ComputeEnvironmentSpecForProviderSubnetIdRefs {
  /**
   * Name of the referenced object.
   *
   * @schema ComputeEnvironmentSpecForProviderSubnetIdRefs#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema ComputeEnvironmentSpecForProviderSubnetIdRefs#policy
   */
  readonly policy?: ComputeEnvironmentSpecForProviderSubnetIdRefsPolicy;

}

/**
 * Converts an object of type 'ComputeEnvironmentSpecForProviderSubnetIdRefs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ComputeEnvironmentSpecForProviderSubnetIdRefs(obj: ComputeEnvironmentSpecForProviderSubnetIdRefs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_ComputeEnvironmentSpecForProviderSubnetIdRefsPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SubnetIDSelector selects references to SubnetIDs used to set the SubnetIDs.
 *
 * @schema ComputeEnvironmentSpecForProviderSubnetIdSelector
 */
export interface ComputeEnvironmentSpecForProviderSubnetIdSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema ComputeEnvironmentSpecForProviderSubnetIdSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema ComputeEnvironmentSpecForProviderSubnetIdSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

  /**
   * Policies for selection.
   *
   * @schema ComputeEnvironmentSpecForProviderSubnetIdSelector#policy
   */
  readonly policy?: ComputeEnvironmentSpecForProviderSubnetIdSelectorPolicy;

}

/**
 * Converts an object of type 'ComputeEnvironmentSpecForProviderSubnetIdSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ComputeEnvironmentSpecForProviderSubnetIdSelector(obj: ComputeEnvironmentSpecForProviderSubnetIdSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchControllerRef': obj.matchControllerRef,
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'policy': toJson_ComputeEnvironmentSpecForProviderSubnetIdSelectorPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Specifies the infrastructure update policy for the compute environment. For more information about infrastructure updates, see Updating compute environments (https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the Batch User Guide. Only applicable to MANGED CE of type EC2 or SPOT. This field requires an update request to be set and it can be updated for CE only with Allocation Strategy BEST_FIT_PROGRESSIVE or SPOT_CAPACITY_OPTIMIZED.
 * JobExecutionTimeoutMinutes specifies the job timeout (in minutes) when the compute environment infrastructure is updated. The default value is 30.
 * TerminateJobsOnUpdate specifies whether jobs are automatically terminated when the computer environment infrastructure is updated. The default value is false.
 *
 * @schema ComputeEnvironmentSpecForProviderUpdatePolicy
 */
export interface ComputeEnvironmentSpecForProviderUpdatePolicy {
  /**
   * @schema ComputeEnvironmentSpecForProviderUpdatePolicy#jobExecutionTimeoutMinutes
   */
  readonly jobExecutionTimeoutMinutes?: number;

  /**
   * @schema ComputeEnvironmentSpecForProviderUpdatePolicy#terminateJobsOnUpdate
   */
  readonly terminateJobsOnUpdate?: boolean;

}

/**
 * Converts an object of type 'ComputeEnvironmentSpecForProviderUpdatePolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ComputeEnvironmentSpecForProviderUpdatePolicy(obj: ComputeEnvironmentSpecForProviderUpdatePolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'jobExecutionTimeoutMinutes': obj.jobExecutionTimeoutMinutes,
    'terminateJobsOnUpdate': obj.terminateJobsOnUpdate,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema ComputeEnvironmentSpecProviderConfigRefPolicy
 */
export interface ComputeEnvironmentSpecProviderConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema ComputeEnvironmentSpecProviderConfigRefPolicy#resolution
   */
  readonly resolution?: ComputeEnvironmentSpecProviderConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema ComputeEnvironmentSpecProviderConfigRefPolicy#resolve
   */
  readonly resolve?: ComputeEnvironmentSpecProviderConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'ComputeEnvironmentSpecProviderConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ComputeEnvironmentSpecProviderConfigRefPolicy(obj: ComputeEnvironmentSpecProviderConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
 *
 * @schema ComputeEnvironmentSpecPublishConnectionDetailsToConfigRef
 */
export interface ComputeEnvironmentSpecPublishConnectionDetailsToConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema ComputeEnvironmentSpecPublishConnectionDetailsToConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema ComputeEnvironmentSpecPublishConnectionDetailsToConfigRef#policy
   */
  readonly policy?: ComputeEnvironmentSpecPublishConnectionDetailsToConfigRefPolicy;

}

/**
 * Converts an object of type 'ComputeEnvironmentSpecPublishConnectionDetailsToConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ComputeEnvironmentSpecPublishConnectionDetailsToConfigRef(obj: ComputeEnvironmentSpecPublishConnectionDetailsToConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_ComputeEnvironmentSpecPublishConnectionDetailsToConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Metadata is the metadata for connection secret.
 *
 * @schema ComputeEnvironmentSpecPublishConnectionDetailsToMetadata
 */
export interface ComputeEnvironmentSpecPublishConnectionDetailsToMetadata {
  /**
   * Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
   *
   * @schema ComputeEnvironmentSpecPublishConnectionDetailsToMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
   *
   * @schema ComputeEnvironmentSpecPublishConnectionDetailsToMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
   *
   * @schema ComputeEnvironmentSpecPublishConnectionDetailsToMetadata#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'ComputeEnvironmentSpecPublishConnectionDetailsToMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ComputeEnvironmentSpecPublishConnectionDetailsToMetadata(obj: ComputeEnvironmentSpecPublishConnectionDetailsToMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ComputeEnvironmentSpecForProviderComputeResourcesEc2Configuration
 */
export interface ComputeEnvironmentSpecForProviderComputeResourcesEc2Configuration {
  /**
   * @schema ComputeEnvironmentSpecForProviderComputeResourcesEc2Configuration#imageIDOverride
   */
  readonly imageIdOverride?: string;

  /**
   * @schema ComputeEnvironmentSpecForProviderComputeResourcesEc2Configuration#imageKubernetesVersion
   */
  readonly imageKubernetesVersion?: string;

  /**
   * @schema ComputeEnvironmentSpecForProviderComputeResourcesEc2Configuration#imageType
   */
  readonly imageType?: string;

}

/**
 * Converts an object of type 'ComputeEnvironmentSpecForProviderComputeResourcesEc2Configuration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ComputeEnvironmentSpecForProviderComputeResourcesEc2Configuration(obj: ComputeEnvironmentSpecForProviderComputeResourcesEc2Configuration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'imageIDOverride': obj.imageIdOverride,
    'imageKubernetesVersion': obj.imageKubernetesVersion,
    'imageType': obj.imageType,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An object that represents a launch template that's associated with a compute resource. You must specify either the launch template ID or launch template name in the request, but not both.
 * If security groups are specified using both the securityGroupIds parameter of CreateComputeEnvironment and the launch template, the values in the securityGroupIds parameter of CreateComputeEnvironment will be used.
 * This object isn't applicable to jobs that are running on Fargate resources.
 *
 * @schema ComputeEnvironmentSpecForProviderComputeResourcesLaunchTemplate
 */
export interface ComputeEnvironmentSpecForProviderComputeResourcesLaunchTemplate {
  /**
   * @schema ComputeEnvironmentSpecForProviderComputeResourcesLaunchTemplate#launchTemplateID
   */
  readonly launchTemplateId?: string;

  /**
   * @schema ComputeEnvironmentSpecForProviderComputeResourcesLaunchTemplate#launchTemplateName
   */
  readonly launchTemplateName?: string;

  /**
   * @schema ComputeEnvironmentSpecForProviderComputeResourcesLaunchTemplate#version
   */
  readonly version?: string;

}

/**
 * Converts an object of type 'ComputeEnvironmentSpecForProviderComputeResourcesLaunchTemplate' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ComputeEnvironmentSpecForProviderComputeResourcesLaunchTemplate(obj: ComputeEnvironmentSpecForProviderComputeResourcesLaunchTemplate | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'launchTemplateID': obj.launchTemplateId,
    'launchTemplateName': obj.launchTemplateName,
    'version': obj.version,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema ComputeEnvironmentSpecForProviderInstanceRoleRefPolicy
 */
export interface ComputeEnvironmentSpecForProviderInstanceRoleRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema ComputeEnvironmentSpecForProviderInstanceRoleRefPolicy#resolution
   */
  readonly resolution?: ComputeEnvironmentSpecForProviderInstanceRoleRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema ComputeEnvironmentSpecForProviderInstanceRoleRefPolicy#resolve
   */
  readonly resolve?: ComputeEnvironmentSpecForProviderInstanceRoleRefPolicyResolve;

}

/**
 * Converts an object of type 'ComputeEnvironmentSpecForProviderInstanceRoleRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ComputeEnvironmentSpecForProviderInstanceRoleRefPolicy(obj: ComputeEnvironmentSpecForProviderInstanceRoleRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for selection.
 *
 * @schema ComputeEnvironmentSpecForProviderInstanceRoleSelectorPolicy
 */
export interface ComputeEnvironmentSpecForProviderInstanceRoleSelectorPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema ComputeEnvironmentSpecForProviderInstanceRoleSelectorPolicy#resolution
   */
  readonly resolution?: ComputeEnvironmentSpecForProviderInstanceRoleSelectorPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema ComputeEnvironmentSpecForProviderInstanceRoleSelectorPolicy#resolve
   */
  readonly resolve?: ComputeEnvironmentSpecForProviderInstanceRoleSelectorPolicyResolve;

}

/**
 * Converts an object of type 'ComputeEnvironmentSpecForProviderInstanceRoleSelectorPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ComputeEnvironmentSpecForProviderInstanceRoleSelectorPolicy(obj: ComputeEnvironmentSpecForProviderInstanceRoleSelectorPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema ComputeEnvironmentSpecForProviderSecurityGroupIdRefsPolicy
 */
export interface ComputeEnvironmentSpecForProviderSecurityGroupIdRefsPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema ComputeEnvironmentSpecForProviderSecurityGroupIdRefsPolicy#resolution
   */
  readonly resolution?: ComputeEnvironmentSpecForProviderSecurityGroupIdRefsPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema ComputeEnvironmentSpecForProviderSecurityGroupIdRefsPolicy#resolve
   */
  readonly resolve?: ComputeEnvironmentSpecForProviderSecurityGroupIdRefsPolicyResolve;

}

/**
 * Converts an object of type 'ComputeEnvironmentSpecForProviderSecurityGroupIdRefsPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ComputeEnvironmentSpecForProviderSecurityGroupIdRefsPolicy(obj: ComputeEnvironmentSpecForProviderSecurityGroupIdRefsPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for selection.
 *
 * @schema ComputeEnvironmentSpecForProviderSecurityGroupIdSelectorPolicy
 */
export interface ComputeEnvironmentSpecForProviderSecurityGroupIdSelectorPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema ComputeEnvironmentSpecForProviderSecurityGroupIdSelectorPolicy#resolution
   */
  readonly resolution?: ComputeEnvironmentSpecForProviderSecurityGroupIdSelectorPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema ComputeEnvironmentSpecForProviderSecurityGroupIdSelectorPolicy#resolve
   */
  readonly resolve?: ComputeEnvironmentSpecForProviderSecurityGroupIdSelectorPolicyResolve;

}

/**
 * Converts an object of type 'ComputeEnvironmentSpecForProviderSecurityGroupIdSelectorPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ComputeEnvironmentSpecForProviderSecurityGroupIdSelectorPolicy(obj: ComputeEnvironmentSpecForProviderSecurityGroupIdSelectorPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema ComputeEnvironmentSpecForProviderServiceRoleArnRefPolicy
 */
export interface ComputeEnvironmentSpecForProviderServiceRoleArnRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema ComputeEnvironmentSpecForProviderServiceRoleArnRefPolicy#resolution
   */
  readonly resolution?: ComputeEnvironmentSpecForProviderServiceRoleArnRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema ComputeEnvironmentSpecForProviderServiceRoleArnRefPolicy#resolve
   */
  readonly resolve?: ComputeEnvironmentSpecForProviderServiceRoleArnRefPolicyResolve;

}

/**
 * Converts an object of type 'ComputeEnvironmentSpecForProviderServiceRoleArnRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ComputeEnvironmentSpecForProviderServiceRoleArnRefPolicy(obj: ComputeEnvironmentSpecForProviderServiceRoleArnRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for selection.
 *
 * @schema ComputeEnvironmentSpecForProviderServiceRoleArnSelectorPolicy
 */
export interface ComputeEnvironmentSpecForProviderServiceRoleArnSelectorPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema ComputeEnvironmentSpecForProviderServiceRoleArnSelectorPolicy#resolution
   */
  readonly resolution?: ComputeEnvironmentSpecForProviderServiceRoleArnSelectorPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema ComputeEnvironmentSpecForProviderServiceRoleArnSelectorPolicy#resolve
   */
  readonly resolve?: ComputeEnvironmentSpecForProviderServiceRoleArnSelectorPolicyResolve;

}

/**
 * Converts an object of type 'ComputeEnvironmentSpecForProviderServiceRoleArnSelectorPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ComputeEnvironmentSpecForProviderServiceRoleArnSelectorPolicy(obj: ComputeEnvironmentSpecForProviderServiceRoleArnSelectorPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema ComputeEnvironmentSpecForProviderSpotIamFleetRoleRefPolicy
 */
export interface ComputeEnvironmentSpecForProviderSpotIamFleetRoleRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema ComputeEnvironmentSpecForProviderSpotIamFleetRoleRefPolicy#resolution
   */
  readonly resolution?: ComputeEnvironmentSpecForProviderSpotIamFleetRoleRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema ComputeEnvironmentSpecForProviderSpotIamFleetRoleRefPolicy#resolve
   */
  readonly resolve?: ComputeEnvironmentSpecForProviderSpotIamFleetRoleRefPolicyResolve;

}

/**
 * Converts an object of type 'ComputeEnvironmentSpecForProviderSpotIamFleetRoleRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ComputeEnvironmentSpecForProviderSpotIamFleetRoleRefPolicy(obj: ComputeEnvironmentSpecForProviderSpotIamFleetRoleRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for selection.
 *
 * @schema ComputeEnvironmentSpecForProviderSpotIamFleetRoleSelectorPolicy
 */
export interface ComputeEnvironmentSpecForProviderSpotIamFleetRoleSelectorPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema ComputeEnvironmentSpecForProviderSpotIamFleetRoleSelectorPolicy#resolution
   */
  readonly resolution?: ComputeEnvironmentSpecForProviderSpotIamFleetRoleSelectorPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema ComputeEnvironmentSpecForProviderSpotIamFleetRoleSelectorPolicy#resolve
   */
  readonly resolve?: ComputeEnvironmentSpecForProviderSpotIamFleetRoleSelectorPolicyResolve;

}

/**
 * Converts an object of type 'ComputeEnvironmentSpecForProviderSpotIamFleetRoleSelectorPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ComputeEnvironmentSpecForProviderSpotIamFleetRoleSelectorPolicy(obj: ComputeEnvironmentSpecForProviderSpotIamFleetRoleSelectorPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema ComputeEnvironmentSpecForProviderSubnetIdRefsPolicy
 */
export interface ComputeEnvironmentSpecForProviderSubnetIdRefsPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema ComputeEnvironmentSpecForProviderSubnetIdRefsPolicy#resolution
   */
  readonly resolution?: ComputeEnvironmentSpecForProviderSubnetIdRefsPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema ComputeEnvironmentSpecForProviderSubnetIdRefsPolicy#resolve
   */
  readonly resolve?: ComputeEnvironmentSpecForProviderSubnetIdRefsPolicyResolve;

}

/**
 * Converts an object of type 'ComputeEnvironmentSpecForProviderSubnetIdRefsPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ComputeEnvironmentSpecForProviderSubnetIdRefsPolicy(obj: ComputeEnvironmentSpecForProviderSubnetIdRefsPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for selection.
 *
 * @schema ComputeEnvironmentSpecForProviderSubnetIdSelectorPolicy
 */
export interface ComputeEnvironmentSpecForProviderSubnetIdSelectorPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema ComputeEnvironmentSpecForProviderSubnetIdSelectorPolicy#resolution
   */
  readonly resolution?: ComputeEnvironmentSpecForProviderSubnetIdSelectorPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema ComputeEnvironmentSpecForProviderSubnetIdSelectorPolicy#resolve
   */
  readonly resolve?: ComputeEnvironmentSpecForProviderSubnetIdSelectorPolicyResolve;

}

/**
 * Converts an object of type 'ComputeEnvironmentSpecForProviderSubnetIdSelectorPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ComputeEnvironmentSpecForProviderSubnetIdSelectorPolicy(obj: ComputeEnvironmentSpecForProviderSubnetIdSelectorPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema ComputeEnvironmentSpecProviderConfigRefPolicyResolution
 */
export enum ComputeEnvironmentSpecProviderConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema ComputeEnvironmentSpecProviderConfigRefPolicyResolve
 */
export enum ComputeEnvironmentSpecProviderConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Policies for referencing.
 *
 * @schema ComputeEnvironmentSpecPublishConnectionDetailsToConfigRefPolicy
 */
export interface ComputeEnvironmentSpecPublishConnectionDetailsToConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema ComputeEnvironmentSpecPublishConnectionDetailsToConfigRefPolicy#resolution
   */
  readonly resolution?: ComputeEnvironmentSpecPublishConnectionDetailsToConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema ComputeEnvironmentSpecPublishConnectionDetailsToConfigRefPolicy#resolve
   */
  readonly resolve?: ComputeEnvironmentSpecPublishConnectionDetailsToConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'ComputeEnvironmentSpecPublishConnectionDetailsToConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ComputeEnvironmentSpecPublishConnectionDetailsToConfigRefPolicy(obj: ComputeEnvironmentSpecPublishConnectionDetailsToConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema ComputeEnvironmentSpecForProviderInstanceRoleRefPolicyResolution
 */
export enum ComputeEnvironmentSpecForProviderInstanceRoleRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema ComputeEnvironmentSpecForProviderInstanceRoleRefPolicyResolve
 */
export enum ComputeEnvironmentSpecForProviderInstanceRoleRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema ComputeEnvironmentSpecForProviderInstanceRoleSelectorPolicyResolution
 */
export enum ComputeEnvironmentSpecForProviderInstanceRoleSelectorPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema ComputeEnvironmentSpecForProviderInstanceRoleSelectorPolicyResolve
 */
export enum ComputeEnvironmentSpecForProviderInstanceRoleSelectorPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema ComputeEnvironmentSpecForProviderSecurityGroupIdRefsPolicyResolution
 */
export enum ComputeEnvironmentSpecForProviderSecurityGroupIdRefsPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema ComputeEnvironmentSpecForProviderSecurityGroupIdRefsPolicyResolve
 */
export enum ComputeEnvironmentSpecForProviderSecurityGroupIdRefsPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema ComputeEnvironmentSpecForProviderSecurityGroupIdSelectorPolicyResolution
 */
export enum ComputeEnvironmentSpecForProviderSecurityGroupIdSelectorPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema ComputeEnvironmentSpecForProviderSecurityGroupIdSelectorPolicyResolve
 */
export enum ComputeEnvironmentSpecForProviderSecurityGroupIdSelectorPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema ComputeEnvironmentSpecForProviderServiceRoleArnRefPolicyResolution
 */
export enum ComputeEnvironmentSpecForProviderServiceRoleArnRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema ComputeEnvironmentSpecForProviderServiceRoleArnRefPolicyResolve
 */
export enum ComputeEnvironmentSpecForProviderServiceRoleArnRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema ComputeEnvironmentSpecForProviderServiceRoleArnSelectorPolicyResolution
 */
export enum ComputeEnvironmentSpecForProviderServiceRoleArnSelectorPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema ComputeEnvironmentSpecForProviderServiceRoleArnSelectorPolicyResolve
 */
export enum ComputeEnvironmentSpecForProviderServiceRoleArnSelectorPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema ComputeEnvironmentSpecForProviderSpotIamFleetRoleRefPolicyResolution
 */
export enum ComputeEnvironmentSpecForProviderSpotIamFleetRoleRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema ComputeEnvironmentSpecForProviderSpotIamFleetRoleRefPolicyResolve
 */
export enum ComputeEnvironmentSpecForProviderSpotIamFleetRoleRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema ComputeEnvironmentSpecForProviderSpotIamFleetRoleSelectorPolicyResolution
 */
export enum ComputeEnvironmentSpecForProviderSpotIamFleetRoleSelectorPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema ComputeEnvironmentSpecForProviderSpotIamFleetRoleSelectorPolicyResolve
 */
export enum ComputeEnvironmentSpecForProviderSpotIamFleetRoleSelectorPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema ComputeEnvironmentSpecForProviderSubnetIdRefsPolicyResolution
 */
export enum ComputeEnvironmentSpecForProviderSubnetIdRefsPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema ComputeEnvironmentSpecForProviderSubnetIdRefsPolicyResolve
 */
export enum ComputeEnvironmentSpecForProviderSubnetIdRefsPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema ComputeEnvironmentSpecForProviderSubnetIdSelectorPolicyResolution
 */
export enum ComputeEnvironmentSpecForProviderSubnetIdSelectorPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema ComputeEnvironmentSpecForProviderSubnetIdSelectorPolicyResolve
 */
export enum ComputeEnvironmentSpecForProviderSubnetIdSelectorPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema ComputeEnvironmentSpecPublishConnectionDetailsToConfigRefPolicyResolution
 */
export enum ComputeEnvironmentSpecPublishConnectionDetailsToConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema ComputeEnvironmentSpecPublishConnectionDetailsToConfigRefPolicyResolve
 */
export enum ComputeEnvironmentSpecPublishConnectionDetailsToConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}


/**
 * A Job is a managed resource that represents an AWS Batch Job.
 *
 * @schema Job
 */
export class Job extends ApiObject {
  /**
   * Returns the apiVersion and kind for "Job"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'batch.aws.crossplane.io/v1alpha1',
    kind: 'Job',
  }

  /**
   * Renders a Kubernetes manifest for "Job".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: JobProps): any {
    return {
      ...Job.GVK,
      ...toJson_JobProps(props),
    };
  }

  /**
   * Defines a "Job" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: JobProps) {
    super(scope, id, {
      ...Job.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...Job.GVK,
      ...toJson_JobProps(resolved),
    };
  }
}

/**
 * A Job is a managed resource that represents an AWS Batch Job.
 *
 * @schema Job
 */
export interface JobProps {
  /**
   * @schema Job#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * A JobSpec defines the desired state of a Job.
   *
   * @schema Job#spec
   */
  readonly spec: JobSpec;

}

/**
 * Converts an object of type 'JobProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobProps(obj: JobProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_JobSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A JobSpec defines the desired state of a Job.
 *
 * @schema JobSpec
 */
export interface JobSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
   *
   * @schema JobSpec#deletionPolicy
   */
  readonly deletionPolicy?: JobSpecDeletionPolicy;

  /**
   * JobParameters define the desired state of a Batch Job
   *
   * @schema JobSpec#forProvider
   */
  readonly forProvider: JobSpecForProvider;

  /**
   * THIS IS A BETA FIELD. It is on by default but can be opted out through a Crossplane feature flag. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
   *
   * @schema JobSpec#managementPolicies
   */
  readonly managementPolicies?: JobSpecManagementPolicies[];

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema JobSpec#providerConfigRef
   */
  readonly providerConfigRef?: JobSpecProviderConfigRef;

  /**
   * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema JobSpec#publishConnectionDetailsTo
   */
  readonly publishConnectionDetailsTo?: JobSpecPublishConnectionDetailsTo;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
   *
   * @schema JobSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: JobSpecWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'JobSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobSpec(obj: JobSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'deletionPolicy': obj.deletionPolicy,
    'forProvider': toJson_JobSpecForProvider(obj.forProvider),
    'managementPolicies': obj.managementPolicies?.map(y => y),
    'providerConfigRef': toJson_JobSpecProviderConfigRef(obj.providerConfigRef),
    'publishConnectionDetailsTo': toJson_JobSpecPublishConnectionDetailsTo(obj.publishConnectionDetailsTo),
    'writeConnectionSecretToRef': toJson_JobSpecWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
 *
 * @schema JobSpecDeletionPolicy
 */
export enum JobSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * JobParameters define the desired state of a Batch Job
 *
 * @schema JobSpecForProvider
 */
export interface JobSpecForProvider {
  /**
   * The array properties for the submitted job, such as the size of the array. The array size can be between 2 and 10,000. If you specify array properties for a job, it becomes an array job. For more information, see Array Jobs (https://docs.aws.amazon.com/batch/latest/userguide/array_jobs.html) in the Batch User Guide.
   *
   * @schema JobSpecForProvider#arrayProperties
   */
  readonly arrayProperties?: JobSpecForProviderArrayProperties;

  /**
   * A list of container overrides in the JSON format that specify the name of a container in the specified job definition and the overrides it should receive. You can override the default command for a container, which is specified in the job definition or the Docker image, with a command override. You can also override existing environment variables on a container or add new environment variables to it with an environment override.
   *
   * @schema JobSpecForProvider#containerOverrides
   */
  readonly containerOverrides?: JobSpecForProviderContainerOverrides;

  /**
   * A list of dependencies for the job. A job can depend upon a maximum of 20 jobs. You can specify a SEQUENTIAL type dependency without specifying a job ID for array jobs so that each child array job completes sequentially, starting at index 0. You can also specify an N_TO_N type dependency with a job ID for array jobs. In that case, each index child of this job must wait for the corresponding index child of each dependency to complete before it can begin.
   *
   * @schema JobSpecForProvider#dependsOn
   */
  readonly dependsOn?: JobSpecForProviderDependsOn[];

  /**
   * The job definition used by this job. This value can be one of name, name:revision, or the Amazon Resource Name (ARN) for the job definition. If name is specified without a revision then the latest active revision is used.
   * JobDefinition is a required field
   *
   * @schema JobSpecForProvider#jobDefinition
   */
  readonly jobDefinition?: string;

  /**
   * JobDefinitionRef is a reference to an JobDefinition.
   *
   * @schema JobSpecForProvider#jobDefinitionRef
   */
  readonly jobDefinitionRef?: JobSpecForProviderJobDefinitionRef;

  /**
   * JobDefinitionSelector selects references to an JobDefinition.
   *
   * @schema JobSpecForProvider#jobDefinitionSelector
   */
  readonly jobDefinitionSelector?: JobSpecForProviderJobDefinitionSelector;

  /**
   * The job queue where the job is submitted. You can specify either the name or the Amazon Resource Name (ARN) of the queue.
   * JobQueue is a required field
   *
   * @schema JobSpecForProvider#jobQueue
   */
  readonly jobQueue?: string;

  /**
   * JobQueueRef is a reference to an JobQueue.
   *
   * @schema JobSpecForProvider#jobQueueRef
   */
  readonly jobQueueRef?: JobSpecForProviderJobQueueRef;

  /**
   * JobQueueSelector selects references to an JobQueue.
   *
   * @schema JobSpecForProvider#jobQueueSelector
   */
  readonly jobQueueSelector?: JobSpecForProviderJobQueueSelector;

  /**
   * A list of node overrides in JSON format that specify the node range to target and the container overrides for that node range.
   * This parameter isn't applicable to jobs that are running on Fargate resources; use containerOverrides instead.
   *
   * @schema JobSpecForProvider#nodeOverrides
   */
  readonly nodeOverrides?: JobSpecForProviderNodeOverrides;

  /**
   * Additional parameters passed to the job that replace parameter substitution placeholders that are set in the job definition. Parameters are specified as a key and value pair mapping. Parameters in a SubmitJob request override any corresponding parameter defaults from the job definition.
   *
   * @schema JobSpecForProvider#parameters
   */
  readonly parameters?: { [key: string]: string };

  /**
   * Specifies whether to propagate the tags from the job or job definition to the corresponding Amazon ECS task. If no value is specified, the tags aren't propagated. Tags can only be propagated to the tasks during task creation. For tags with the same name, job tags are given priority over job definitions tags. If the total number of combined tags from the job and job definition is over 50, the job is moved to the FAILED state. When specified, this overrides the tag propagation setting in the job definition.
   *
   * @schema JobSpecForProvider#propagateTags
   */
  readonly propagateTags?: boolean;

  /**
   * Region is which region the Function will be created.
   *
   * @schema JobSpecForProvider#region
   */
  readonly region: string;

  /**
   * The retry strategy to use for failed jobs from this SubmitJob operation. When a retry strategy is specified here, it overrides the retry strategy defined in the job definition.
   *
   * @schema JobSpecForProvider#retryStrategy
   */
  readonly retryStrategy?: JobSpecForProviderRetryStrategy;

  /**
   * The tags that you apply to the job request to help you categorize and organize your resources. Each tag consists of a key and an optional value. For more information, see Tagging Amazon Web Services Resources (https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in Amazon Web Services General Reference.
   *
   * @schema JobSpecForProvider#tags
   */
  readonly tags?: { [key: string]: string };

  /**
   * The timeout configuration for this SubmitJob operation. You can specify a timeout duration after which Batch terminates your jobs if they haven't finished. If a job is terminated due to a timeout, it isn't retried. The minimum value for the timeout is 60 seconds. This configuration overrides any timeout configuration specified in the job definition. For array jobs, child jobs have the same timeout configuration as the parent job. For more information, see Job Timeouts (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/job_timeouts.html) in the Amazon Elastic Container Service Developer Guide.
   *
   * @schema JobSpecForProvider#timeout
   */
  readonly timeout?: JobSpecForProviderTimeout;

}

/**
 * Converts an object of type 'JobSpecForProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobSpecForProvider(obj: JobSpecForProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'arrayProperties': toJson_JobSpecForProviderArrayProperties(obj.arrayProperties),
    'containerOverrides': toJson_JobSpecForProviderContainerOverrides(obj.containerOverrides),
    'dependsOn': obj.dependsOn?.map(y => toJson_JobSpecForProviderDependsOn(y)),
    'jobDefinition': obj.jobDefinition,
    'jobDefinitionRef': toJson_JobSpecForProviderJobDefinitionRef(obj.jobDefinitionRef),
    'jobDefinitionSelector': toJson_JobSpecForProviderJobDefinitionSelector(obj.jobDefinitionSelector),
    'jobQueue': obj.jobQueue,
    'jobQueueRef': toJson_JobSpecForProviderJobQueueRef(obj.jobQueueRef),
    'jobQueueSelector': toJson_JobSpecForProviderJobQueueSelector(obj.jobQueueSelector),
    'nodeOverrides': toJson_JobSpecForProviderNodeOverrides(obj.nodeOverrides),
    'parameters': ((obj.parameters) === undefined) ? undefined : (Object.entries(obj.parameters).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'propagateTags': obj.propagateTags,
    'region': obj.region,
    'retryStrategy': toJson_JobSpecForProviderRetryStrategy(obj.retryStrategy),
    'tags': ((obj.tags) === undefined) ? undefined : (Object.entries(obj.tags).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'timeout': toJson_JobSpecForProviderTimeout(obj.timeout),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A ManagementAction represents an action that the Crossplane controllers can take on an external resource.
 *
 * @schema JobSpecManagementPolicies
 */
export enum JobSpecManagementPolicies {
  /** Observe */
  OBSERVE = "Observe",
  /** Create */
  CREATE = "Create",
  /** Update */
  UPDATE = "Update",
  /** Delete */
  DELETE = "Delete",
  /** LateInitialize */
  LATE_INITIALIZE = "LateInitialize",
  /** * */
  VALUE_ASTERISK = "*",
}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema JobSpecProviderConfigRef
 */
export interface JobSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema JobSpecProviderConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema JobSpecProviderConfigRef#policy
   */
  readonly policy?: JobSpecProviderConfigRefPolicy;

}

/**
 * Converts an object of type 'JobSpecProviderConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobSpecProviderConfigRef(obj: JobSpecProviderConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_JobSpecProviderConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema JobSpecPublishConnectionDetailsTo
 */
export interface JobSpecPublishConnectionDetailsTo {
  /**
   * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
   *
   * @schema JobSpecPublishConnectionDetailsTo#configRef
   */
  readonly configRef?: JobSpecPublishConnectionDetailsToConfigRef;

  /**
   * Metadata is the metadata for connection secret.
   *
   * @schema JobSpecPublishConnectionDetailsTo#metadata
   */
  readonly metadata?: JobSpecPublishConnectionDetailsToMetadata;

  /**
   * Name is the name of the connection secret.
   *
   * @schema JobSpecPublishConnectionDetailsTo#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'JobSpecPublishConnectionDetailsTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobSpecPublishConnectionDetailsTo(obj: JobSpecPublishConnectionDetailsTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configRef': toJson_JobSpecPublishConnectionDetailsToConfigRef(obj.configRef),
    'metadata': toJson_JobSpecPublishConnectionDetailsToMetadata(obj.metadata),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
 *
 * @schema JobSpecWriteConnectionSecretToRef
 */
export interface JobSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema JobSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema JobSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'JobSpecWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobSpecWriteConnectionSecretToRef(obj: JobSpecWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The array properties for the submitted job, such as the size of the array. The array size can be between 2 and 10,000. If you specify array properties for a job, it becomes an array job. For more information, see Array Jobs (https://docs.aws.amazon.com/batch/latest/userguide/array_jobs.html) in the Batch User Guide.
 *
 * @schema JobSpecForProviderArrayProperties
 */
export interface JobSpecForProviderArrayProperties {
  /**
   * The size of the array job.
   *
   * @schema JobSpecForProviderArrayProperties#size
   */
  readonly size?: number;

}

/**
 * Converts an object of type 'JobSpecForProviderArrayProperties' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobSpecForProviderArrayProperties(obj: JobSpecForProviderArrayProperties | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'size': obj.size,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A list of container overrides in the JSON format that specify the name of a container in the specified job definition and the overrides it should receive. You can override the default command for a container, which is specified in the job definition or the Docker image, with a command override. You can also override existing environment variables on a container or add new environment variables to it with an environment override.
 *
 * @schema JobSpecForProviderContainerOverrides
 */
export interface JobSpecForProviderContainerOverrides {
  /**
   * The command to send to the container that overrides the default command from the Docker image or the job definition.
   *
   * @schema JobSpecForProviderContainerOverrides#command
   */
  readonly command?: string[];

  /**
   * The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the job definition.
   * Environment variables must not start with AWS_BATCH; this naming convention is reserved for variables that are set by the Batch service.
   *
   * @schema JobSpecForProviderContainerOverrides#environment
   */
  readonly environment?: JobSpecForProviderContainerOverridesEnvironment[];

  /**
   * The instance type to use for a multi-node parallel job.
   * This parameter isn't applicable to single-node container jobs or jobs that run on Fargate resources, and shouldn't be provided.
   *
   * @schema JobSpecForProviderContainerOverrides#instanceType
   */
  readonly instanceType?: string;

  /**
   * The type and amount of resources to assign to a container. This overrides the settings in the job definition. The supported resources include GPU, MEMORY, and VCPU.
   *
   * @schema JobSpecForProviderContainerOverrides#resourceRequirements
   */
  readonly resourceRequirements?: JobSpecForProviderContainerOverridesResourceRequirements[];

}

/**
 * Converts an object of type 'JobSpecForProviderContainerOverrides' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobSpecForProviderContainerOverrides(obj: JobSpecForProviderContainerOverrides | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'command': obj.command?.map(y => y),
    'environment': obj.environment?.map(y => toJson_JobSpecForProviderContainerOverridesEnvironment(y)),
    'instanceType': obj.instanceType,
    'resourceRequirements': obj.resourceRequirements?.map(y => toJson_JobSpecForProviderContainerOverridesResourceRequirements(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * JobDependency defines an Batch job dependency.
 *
 * @schema JobSpecForProviderDependsOn
 */
export interface JobSpecForProviderDependsOn {
  /**
   * The job ID of the Batch job associated with this dependency.
   *
   * @schema JobSpecForProviderDependsOn#jobId
   */
  readonly jobId?: string;

  /**
   * JobIDRef is a reference to an JobID.
   *
   * @schema JobSpecForProviderDependsOn#jobIdRef
   */
  readonly jobIdRef?: JobSpecForProviderDependsOnJobIdRef;

  /**
   * JobIDSelector selects references to an JobID.
   *
   * @schema JobSpecForProviderDependsOn#jobIdSelector
   */
  readonly jobIdSelector?: JobSpecForProviderDependsOnJobIdSelector;

  /**
   * The type of the job dependency.
   *
   * @schema JobSpecForProviderDependsOn#type
   */
  readonly type?: JobSpecForProviderDependsOnType;

}

/**
 * Converts an object of type 'JobSpecForProviderDependsOn' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobSpecForProviderDependsOn(obj: JobSpecForProviderDependsOn | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'jobId': obj.jobId,
    'jobIdRef': toJson_JobSpecForProviderDependsOnJobIdRef(obj.jobIdRef),
    'jobIdSelector': toJson_JobSpecForProviderDependsOnJobIdSelector(obj.jobIdSelector),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * JobDefinitionRef is a reference to an JobDefinition.
 *
 * @schema JobSpecForProviderJobDefinitionRef
 */
export interface JobSpecForProviderJobDefinitionRef {
  /**
   * Name of the referenced object.
   *
   * @schema JobSpecForProviderJobDefinitionRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema JobSpecForProviderJobDefinitionRef#policy
   */
  readonly policy?: JobSpecForProviderJobDefinitionRefPolicy;

}

/**
 * Converts an object of type 'JobSpecForProviderJobDefinitionRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobSpecForProviderJobDefinitionRef(obj: JobSpecForProviderJobDefinitionRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_JobSpecForProviderJobDefinitionRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * JobDefinitionSelector selects references to an JobDefinition.
 *
 * @schema JobSpecForProviderJobDefinitionSelector
 */
export interface JobSpecForProviderJobDefinitionSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema JobSpecForProviderJobDefinitionSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema JobSpecForProviderJobDefinitionSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

  /**
   * Policies for selection.
   *
   * @schema JobSpecForProviderJobDefinitionSelector#policy
   */
  readonly policy?: JobSpecForProviderJobDefinitionSelectorPolicy;

}

/**
 * Converts an object of type 'JobSpecForProviderJobDefinitionSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobSpecForProviderJobDefinitionSelector(obj: JobSpecForProviderJobDefinitionSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchControllerRef': obj.matchControllerRef,
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'policy': toJson_JobSpecForProviderJobDefinitionSelectorPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * JobQueueRef is a reference to an JobQueue.
 *
 * @schema JobSpecForProviderJobQueueRef
 */
export interface JobSpecForProviderJobQueueRef {
  /**
   * Name of the referenced object.
   *
   * @schema JobSpecForProviderJobQueueRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema JobSpecForProviderJobQueueRef#policy
   */
  readonly policy?: JobSpecForProviderJobQueueRefPolicy;

}

/**
 * Converts an object of type 'JobSpecForProviderJobQueueRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobSpecForProviderJobQueueRef(obj: JobSpecForProviderJobQueueRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_JobSpecForProviderJobQueueRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * JobQueueSelector selects references to an JobQueue.
 *
 * @schema JobSpecForProviderJobQueueSelector
 */
export interface JobSpecForProviderJobQueueSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema JobSpecForProviderJobQueueSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema JobSpecForProviderJobQueueSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

  /**
   * Policies for selection.
   *
   * @schema JobSpecForProviderJobQueueSelector#policy
   */
  readonly policy?: JobSpecForProviderJobQueueSelectorPolicy;

}

/**
 * Converts an object of type 'JobSpecForProviderJobQueueSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobSpecForProviderJobQueueSelector(obj: JobSpecForProviderJobQueueSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchControllerRef': obj.matchControllerRef,
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'policy': toJson_JobSpecForProviderJobQueueSelectorPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A list of node overrides in JSON format that specify the node range to target and the container overrides for that node range.
 * This parameter isn't applicable to jobs that are running on Fargate resources; use containerOverrides instead.
 *
 * @schema JobSpecForProviderNodeOverrides
 */
export interface JobSpecForProviderNodeOverrides {
  /**
   * The node property overrides for the job.
   *
   * @schema JobSpecForProviderNodeOverrides#nodePropertyOverrides
   */
  readonly nodePropertyOverrides?: JobSpecForProviderNodeOverridesNodePropertyOverrides[];

  /**
   * The number of nodes to use with a multi-node parallel job. This value overrides the number of nodes that are specified in the job definition. To use this override:
   * * There must be at least one node range in your job definition that has an open upper boundary (such as : or n:).
   * * The lower boundary of the node range specified in the job definition must be fewer than the number of nodes specified in the override.
   * * The main node index specified in the job definition must be fewer than the number of nodes specified in the override.
   *
   * @schema JobSpecForProviderNodeOverrides#numNodes
   */
  readonly numNodes?: number;

}

/**
 * Converts an object of type 'JobSpecForProviderNodeOverrides' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobSpecForProviderNodeOverrides(obj: JobSpecForProviderNodeOverrides | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'nodePropertyOverrides': obj.nodePropertyOverrides?.map(y => toJson_JobSpecForProviderNodeOverridesNodePropertyOverrides(y)),
    'numNodes': obj.numNodes,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The retry strategy to use for failed jobs from this SubmitJob operation. When a retry strategy is specified here, it overrides the retry strategy defined in the job definition.
 *
 * @schema JobSpecForProviderRetryStrategy
 */
export interface JobSpecForProviderRetryStrategy {
  /**
   * The number of times to move a job to the RUNNABLE status. You can specify between 1 and 10 attempts. If the value of attempts is greater than one, the job is retried on failure the same number of attempts as the value.
   *
   * @schema JobSpecForProviderRetryStrategy#attempts
   */
  readonly attempts?: number;

  /**
   * Array of up to 5 objects that specify conditions under which the job should be retried or failed. If this parameter is specified, then the attempts parameter must also be specified.
   *
   * @schema JobSpecForProviderRetryStrategy#evaluateOnExit
   */
  readonly evaluateOnExit?: JobSpecForProviderRetryStrategyEvaluateOnExit[];

}

/**
 * Converts an object of type 'JobSpecForProviderRetryStrategy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobSpecForProviderRetryStrategy(obj: JobSpecForProviderRetryStrategy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'attempts': obj.attempts,
    'evaluateOnExit': obj.evaluateOnExit?.map(y => toJson_JobSpecForProviderRetryStrategyEvaluateOnExit(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The timeout configuration for this SubmitJob operation. You can specify a timeout duration after which Batch terminates your jobs if they haven't finished. If a job is terminated due to a timeout, it isn't retried. The minimum value for the timeout is 60 seconds. This configuration overrides any timeout configuration specified in the job definition. For array jobs, child jobs have the same timeout configuration as the parent job. For more information, see Job Timeouts (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/job_timeouts.html) in the Amazon Elastic Container Service Developer Guide.
 *
 * @schema JobSpecForProviderTimeout
 */
export interface JobSpecForProviderTimeout {
  /**
   * The time duration in seconds (measured from the job attempt's startedAt timestamp) after which Batch terminates your jobs if they have not finished. The minimum value for the timeout is 60 seconds.
   *
   * @schema JobSpecForProviderTimeout#attemptDurationSeconds
   */
  readonly attemptDurationSeconds?: number;

}

/**
 * Converts an object of type 'JobSpecForProviderTimeout' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobSpecForProviderTimeout(obj: JobSpecForProviderTimeout | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'attemptDurationSeconds': obj.attemptDurationSeconds,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema JobSpecProviderConfigRefPolicy
 */
export interface JobSpecProviderConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema JobSpecProviderConfigRefPolicy#resolution
   */
  readonly resolution?: JobSpecProviderConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema JobSpecProviderConfigRefPolicy#resolve
   */
  readonly resolve?: JobSpecProviderConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'JobSpecProviderConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobSpecProviderConfigRefPolicy(obj: JobSpecProviderConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
 *
 * @schema JobSpecPublishConnectionDetailsToConfigRef
 */
export interface JobSpecPublishConnectionDetailsToConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema JobSpecPublishConnectionDetailsToConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema JobSpecPublishConnectionDetailsToConfigRef#policy
   */
  readonly policy?: JobSpecPublishConnectionDetailsToConfigRefPolicy;

}

/**
 * Converts an object of type 'JobSpecPublishConnectionDetailsToConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobSpecPublishConnectionDetailsToConfigRef(obj: JobSpecPublishConnectionDetailsToConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_JobSpecPublishConnectionDetailsToConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Metadata is the metadata for connection secret.
 *
 * @schema JobSpecPublishConnectionDetailsToMetadata
 */
export interface JobSpecPublishConnectionDetailsToMetadata {
  /**
   * Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
   *
   * @schema JobSpecPublishConnectionDetailsToMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
   *
   * @schema JobSpecPublishConnectionDetailsToMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
   *
   * @schema JobSpecPublishConnectionDetailsToMetadata#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'JobSpecPublishConnectionDetailsToMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobSpecPublishConnectionDetailsToMetadata(obj: JobSpecPublishConnectionDetailsToMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * KeyValuePair defines a key-value pair object.
 *
 * @schema JobSpecForProviderContainerOverridesEnvironment
 */
export interface JobSpecForProviderContainerOverridesEnvironment {
  /**
   * The name of the key-value pair. For environment variables, this is the name of the environment variable.
   *
   * @schema JobSpecForProviderContainerOverridesEnvironment#name
   */
  readonly name?: string;

  /**
   * The value of the key-value pair. For environment variables, this is the value of the environment variable.
   *
   * @schema JobSpecForProviderContainerOverridesEnvironment#value
   */
  readonly value?: string;

}

/**
 * Converts an object of type 'JobSpecForProviderContainerOverridesEnvironment' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobSpecForProviderContainerOverridesEnvironment(obj: JobSpecForProviderContainerOverridesEnvironment | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ResourceRequirement defines the type and amount of a resource to assign to a container. The supported resources include GPU, MEMORY, and VCPU.
 *
 * @schema JobSpecForProviderContainerOverridesResourceRequirements
 */
export interface JobSpecForProviderContainerOverridesResourceRequirements {
  /**
   * The type of resource to assign to a container. The supported resources include GPU, MEMORY, and VCPU.
   * Type is a required field
   *
   * @schema JobSpecForProviderContainerOverridesResourceRequirements#resourceType
   */
  readonly resourceType: JobSpecForProviderContainerOverridesResourceRequirementsResourceType;

  /**
   * The quantity of the specified resource to reserve for the container. The values vary based on the type specified.
   * type="GPU"
   * The number of physical GPUs to reserve for the container. The number of GPUs reserved for all containers in a job shouldn't exceed the number of available GPUs on the compute resource that the job is launched on.
   * GPUs are not available for jobs that are running on Fargate resources.
   * type="MEMORY"
   * The memory hard limit (in MiB) present to the container. This parameter is supported for jobs that are running on EC2 resources. If your container attempts to exceed the memory specified, the container is terminated. This parameter maps to Memory in the Create a container (https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the Docker Remote API (https://docs.docker.com/engine/api/v1.23/) and the --memory option to docker run (https://docs.docker.com/engine/reference/run/). You must specify at least 4 MiB of memory for a job. This is required but can be specified in several places for multi-node parallel (MNP) jobs. It must be specified for each node at least once. This parameter maps to Memory in the Create a container (https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the Docker Remote API (https://docs.docker.com/engine/api/v1.23/) and the --memory option to docker run (https://docs.docker.com/engine/reference/run/).
   * If you're trying to maximize your resource utilization by providing your jobs as much memory as possible for a particular instance type, see Memory Management (https://docs.aws.amazon.com/batch/latest/userguide/memory-management.html) in the Batch User Guide.
   * For jobs that are running on Fargate resources, then value is the hard limit (in MiB), and must match one of the supported values and the VCPU values must be one of the values supported for that memory value.
   * value = 512
   * VCPU = 0.25
   * value = 1024
   * VCPU = 0.25 or 0.5
   * value = 2048
   * VCPU = 0.25, 0.5, or 1
   * value = 3072
   * VCPU = 0.5, or 1
   * value = 4096
   * VCPU = 0.5, 1, or 2
   * value = 5120, 6144, or 7168
   * VCPU = 1 or 2
   * value = 8192
   * VCPU = 1, 2, or 4
   * value = 9216, 10240, 11264, 12288, 13312, 14336, 15360, or 16384
   * VCPU = 2 or 4
   * value = 17408, 18432, 19456, 20480, 21504, 22528, 23552, 24576, 25600, 26624, 27648, 28672, 29696, or 30720
   * VCPU = 4
   * type="VCPU"
   * The number of vCPUs reserved for the container. This parameter maps to CpuShares in the Create a container (https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the Docker Remote API (https://docs.docker.com/engine/api/v1.23/) and the --cpu-shares option to docker run (https://docs.docker.com/engine/reference/run/). Each vCPU is equivalent to 1,024 CPU shares. For EC2 resources, you must specify at least one vCPU. This is required but can be specified in several places; it must be specified for each node at least once.
   * For jobs that are running on Fargate resources, then value must match one of the supported values and the MEMORY values must be one of the values supported for that VCPU value. The supported values are 0.25, 0.5, 1, 2, and 4
   * value = 0.25
   * MEMORY = 512, 1024, or 2048
   * value = 0.5
   * MEMORY = 1024, 2048, 3072, or 4096
   * value = 1
   * MEMORY = 2048, 3072, 4096, 5120, 6144, 7168, or 8192
   * value = 2
   * MEMORY = 4096, 5120, 6144, 7168, 8192, 9216, 10240, 11264, 12288, 13312, 14336, 15360, or 16384
   * value = 4
   * MEMORY = 8192, 9216, 10240, 11264, 12288, 13312, 14336, 15360, 16384, 17408, 18432, 19456, 20480, 21504, 22528, 23552, 24576, 25600, 26624, 27648, 28672, 29696, or 30720
   * Value is a required field
   *
   * @schema JobSpecForProviderContainerOverridesResourceRequirements#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'JobSpecForProviderContainerOverridesResourceRequirements' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobSpecForProviderContainerOverridesResourceRequirements(obj: JobSpecForProviderContainerOverridesResourceRequirements | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resourceType': obj.resourceType,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * JobIDRef is a reference to an JobID.
 *
 * @schema JobSpecForProviderDependsOnJobIdRef
 */
export interface JobSpecForProviderDependsOnJobIdRef {
  /**
   * Name of the referenced object.
   *
   * @schema JobSpecForProviderDependsOnJobIdRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema JobSpecForProviderDependsOnJobIdRef#policy
   */
  readonly policy?: JobSpecForProviderDependsOnJobIdRefPolicy;

}

/**
 * Converts an object of type 'JobSpecForProviderDependsOnJobIdRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobSpecForProviderDependsOnJobIdRef(obj: JobSpecForProviderDependsOnJobIdRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_JobSpecForProviderDependsOnJobIdRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * JobIDSelector selects references to an JobID.
 *
 * @schema JobSpecForProviderDependsOnJobIdSelector
 */
export interface JobSpecForProviderDependsOnJobIdSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema JobSpecForProviderDependsOnJobIdSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema JobSpecForProviderDependsOnJobIdSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

  /**
   * Policies for selection.
   *
   * @schema JobSpecForProviderDependsOnJobIdSelector#policy
   */
  readonly policy?: JobSpecForProviderDependsOnJobIdSelectorPolicy;

}

/**
 * Converts an object of type 'JobSpecForProviderDependsOnJobIdSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobSpecForProviderDependsOnJobIdSelector(obj: JobSpecForProviderDependsOnJobIdSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchControllerRef': obj.matchControllerRef,
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'policy': toJson_JobSpecForProviderDependsOnJobIdSelectorPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The type of the job dependency.
 *
 * @schema JobSpecForProviderDependsOnType
 */
export enum JobSpecForProviderDependsOnType {
  /** N_TO_N */
  N_UNDERSCORE_TO_UNDERSCORE_N = "N_TO_N",
  /** SEQUENTIAL */
  SEQUENTIAL = "SEQUENTIAL",
}

/**
 * Policies for referencing.
 *
 * @schema JobSpecForProviderJobDefinitionRefPolicy
 */
export interface JobSpecForProviderJobDefinitionRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema JobSpecForProviderJobDefinitionRefPolicy#resolution
   */
  readonly resolution?: JobSpecForProviderJobDefinitionRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema JobSpecForProviderJobDefinitionRefPolicy#resolve
   */
  readonly resolve?: JobSpecForProviderJobDefinitionRefPolicyResolve;

}

/**
 * Converts an object of type 'JobSpecForProviderJobDefinitionRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobSpecForProviderJobDefinitionRefPolicy(obj: JobSpecForProviderJobDefinitionRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for selection.
 *
 * @schema JobSpecForProviderJobDefinitionSelectorPolicy
 */
export interface JobSpecForProviderJobDefinitionSelectorPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema JobSpecForProviderJobDefinitionSelectorPolicy#resolution
   */
  readonly resolution?: JobSpecForProviderJobDefinitionSelectorPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema JobSpecForProviderJobDefinitionSelectorPolicy#resolve
   */
  readonly resolve?: JobSpecForProviderJobDefinitionSelectorPolicyResolve;

}

/**
 * Converts an object of type 'JobSpecForProviderJobDefinitionSelectorPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobSpecForProviderJobDefinitionSelectorPolicy(obj: JobSpecForProviderJobDefinitionSelectorPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema JobSpecForProviderJobQueueRefPolicy
 */
export interface JobSpecForProviderJobQueueRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema JobSpecForProviderJobQueueRefPolicy#resolution
   */
  readonly resolution?: JobSpecForProviderJobQueueRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema JobSpecForProviderJobQueueRefPolicy#resolve
   */
  readonly resolve?: JobSpecForProviderJobQueueRefPolicyResolve;

}

/**
 * Converts an object of type 'JobSpecForProviderJobQueueRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobSpecForProviderJobQueueRefPolicy(obj: JobSpecForProviderJobQueueRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for selection.
 *
 * @schema JobSpecForProviderJobQueueSelectorPolicy
 */
export interface JobSpecForProviderJobQueueSelectorPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema JobSpecForProviderJobQueueSelectorPolicy#resolution
   */
  readonly resolution?: JobSpecForProviderJobQueueSelectorPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema JobSpecForProviderJobQueueSelectorPolicy#resolve
   */
  readonly resolve?: JobSpecForProviderJobQueueSelectorPolicyResolve;

}

/**
 * Converts an object of type 'JobSpecForProviderJobQueueSelectorPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobSpecForProviderJobQueueSelectorPolicy(obj: JobSpecForProviderJobQueueSelectorPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * NodePropertyOverride defines any node overrides to a job definition that's used in a SubmitJob API operation.
 *
 * @schema JobSpecForProviderNodeOverridesNodePropertyOverrides
 */
export interface JobSpecForProviderNodeOverridesNodePropertyOverrides {
  /**
   * The overrides that should be sent to a node range.
   *
   * @schema JobSpecForProviderNodeOverridesNodePropertyOverrides#containerOverrides
   */
  readonly containerOverrides?: JobSpecForProviderNodeOverridesNodePropertyOverridesContainerOverrides;

  /**
   * The range of nodes, using node index values, that's used to override. A range of 0:3 indicates nodes with index values of 0 through 3. If the starting range value is omitted (:n), then 0 is used to start the range. If the ending range value is omitted (n:), then the highest possible node index is used to end the range.
   * TargetNodes is a required field
   *
   * @schema JobSpecForProviderNodeOverridesNodePropertyOverrides#targetNodes
   */
  readonly targetNodes: string;

}

/**
 * Converts an object of type 'JobSpecForProviderNodeOverridesNodePropertyOverrides' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobSpecForProviderNodeOverridesNodePropertyOverrides(obj: JobSpecForProviderNodeOverridesNodePropertyOverrides | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'containerOverrides': toJson_JobSpecForProviderNodeOverridesNodePropertyOverridesContainerOverrides(obj.containerOverrides),
    'targetNodes': obj.targetNodes,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * EvaluateOnExit specifies a set of conditions to be met, and an action to take (RETRY or EXIT) if all conditions are met.
 *
 * @schema JobSpecForProviderRetryStrategyEvaluateOnExit
 */
export interface JobSpecForProviderRetryStrategyEvaluateOnExit {
  /**
   * Specifies the action to take if all of the specified conditions (onStatusReason, onReason, and onExitCode) are met. The values aren't case sensitive. (AWS gives lowercase back!) Action is a required field
   *
   * @schema JobSpecForProviderRetryStrategyEvaluateOnExit#action
   */
  readonly action: JobSpecForProviderRetryStrategyEvaluateOnExitAction;

  /**
   * Contains a glob pattern to match against the decimal representation of the ExitCode returned for a job. The pattern can be up to 512 characters in length. It can contain only numbers, and can optionally end with an asterisk (*) so that only the start of the string needs to be an exact match.
   *
   * @schema JobSpecForProviderRetryStrategyEvaluateOnExit#onExitCode
   */
  readonly onExitCode?: string;

  /**
   * Contains a glob pattern to match against the Reason returned for a job. The pattern can be up to 512 characters in length. It can contain letters, numbers, periods (.), colons (:), and white space (including spaces and tabs). It can optionally end with an asterisk (*) so that only the start of the string needs to be an exact match.
   *
   * @schema JobSpecForProviderRetryStrategyEvaluateOnExit#onReason
   */
  readonly onReason?: string;

  /**
   * Contains a glob pattern to match against the StatusReason returned for a job. The pattern can be up to 512 characters in length. It can contain letters, numbers, periods (.), colons (:), and white space (including spaces or tabs). It can optionally end with an asterisk (*) so that only the start of the string needs to be an exact match.
   *
   * @schema JobSpecForProviderRetryStrategyEvaluateOnExit#onStatusReason
   */
  readonly onStatusReason?: string;

}

/**
 * Converts an object of type 'JobSpecForProviderRetryStrategyEvaluateOnExit' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobSpecForProviderRetryStrategyEvaluateOnExit(obj: JobSpecForProviderRetryStrategyEvaluateOnExit | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'action': obj.action,
    'onExitCode': obj.onExitCode,
    'onReason': obj.onReason,
    'onStatusReason': obj.onStatusReason,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema JobSpecProviderConfigRefPolicyResolution
 */
export enum JobSpecProviderConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema JobSpecProviderConfigRefPolicyResolve
 */
export enum JobSpecProviderConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Policies for referencing.
 *
 * @schema JobSpecPublishConnectionDetailsToConfigRefPolicy
 */
export interface JobSpecPublishConnectionDetailsToConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema JobSpecPublishConnectionDetailsToConfigRefPolicy#resolution
   */
  readonly resolution?: JobSpecPublishConnectionDetailsToConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema JobSpecPublishConnectionDetailsToConfigRefPolicy#resolve
   */
  readonly resolve?: JobSpecPublishConnectionDetailsToConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'JobSpecPublishConnectionDetailsToConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobSpecPublishConnectionDetailsToConfigRefPolicy(obj: JobSpecPublishConnectionDetailsToConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The type of resource to assign to a container. The supported resources include GPU, MEMORY, and VCPU.
 * Type is a required field
 *
 * @schema JobSpecForProviderContainerOverridesResourceRequirementsResourceType
 */
export enum JobSpecForProviderContainerOverridesResourceRequirementsResourceType {
  /** GPU */
  GPU = "GPU",
  /** MEMORY */
  MEMORY = "MEMORY",
  /** VCPU */
  VCPU = "VCPU",
}

/**
 * Policies for referencing.
 *
 * @schema JobSpecForProviderDependsOnJobIdRefPolicy
 */
export interface JobSpecForProviderDependsOnJobIdRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema JobSpecForProviderDependsOnJobIdRefPolicy#resolution
   */
  readonly resolution?: JobSpecForProviderDependsOnJobIdRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema JobSpecForProviderDependsOnJobIdRefPolicy#resolve
   */
  readonly resolve?: JobSpecForProviderDependsOnJobIdRefPolicyResolve;

}

/**
 * Converts an object of type 'JobSpecForProviderDependsOnJobIdRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobSpecForProviderDependsOnJobIdRefPolicy(obj: JobSpecForProviderDependsOnJobIdRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for selection.
 *
 * @schema JobSpecForProviderDependsOnJobIdSelectorPolicy
 */
export interface JobSpecForProviderDependsOnJobIdSelectorPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema JobSpecForProviderDependsOnJobIdSelectorPolicy#resolution
   */
  readonly resolution?: JobSpecForProviderDependsOnJobIdSelectorPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema JobSpecForProviderDependsOnJobIdSelectorPolicy#resolve
   */
  readonly resolve?: JobSpecForProviderDependsOnJobIdSelectorPolicyResolve;

}

/**
 * Converts an object of type 'JobSpecForProviderDependsOnJobIdSelectorPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobSpecForProviderDependsOnJobIdSelectorPolicy(obj: JobSpecForProviderDependsOnJobIdSelectorPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema JobSpecForProviderJobDefinitionRefPolicyResolution
 */
export enum JobSpecForProviderJobDefinitionRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema JobSpecForProviderJobDefinitionRefPolicyResolve
 */
export enum JobSpecForProviderJobDefinitionRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema JobSpecForProviderJobDefinitionSelectorPolicyResolution
 */
export enum JobSpecForProviderJobDefinitionSelectorPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema JobSpecForProviderJobDefinitionSelectorPolicyResolve
 */
export enum JobSpecForProviderJobDefinitionSelectorPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema JobSpecForProviderJobQueueRefPolicyResolution
 */
export enum JobSpecForProviderJobQueueRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema JobSpecForProviderJobQueueRefPolicyResolve
 */
export enum JobSpecForProviderJobQueueRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema JobSpecForProviderJobQueueSelectorPolicyResolution
 */
export enum JobSpecForProviderJobQueueSelectorPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema JobSpecForProviderJobQueueSelectorPolicyResolve
 */
export enum JobSpecForProviderJobQueueSelectorPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * The overrides that should be sent to a node range.
 *
 * @schema JobSpecForProviderNodeOverridesNodePropertyOverridesContainerOverrides
 */
export interface JobSpecForProviderNodeOverridesNodePropertyOverridesContainerOverrides {
  /**
   * The command to send to the container that overrides the default command from the Docker image or the job definition.
   *
   * @schema JobSpecForProviderNodeOverridesNodePropertyOverridesContainerOverrides#command
   */
  readonly command?: string[];

  /**
   * The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the job definition.
   * Environment variables must not start with AWS_BATCH; this naming convention is reserved for variables that are set by the Batch service.
   *
   * @schema JobSpecForProviderNodeOverridesNodePropertyOverridesContainerOverrides#environment
   */
  readonly environment?: JobSpecForProviderNodeOverridesNodePropertyOverridesContainerOverridesEnvironment[];

  /**
   * The instance type to use for a multi-node parallel job.
   * This parameter isn't applicable to single-node container jobs or jobs that run on Fargate resources, and shouldn't be provided.
   *
   * @schema JobSpecForProviderNodeOverridesNodePropertyOverridesContainerOverrides#instanceType
   */
  readonly instanceType?: string;

  /**
   * The type and amount of resources to assign to a container. This overrides the settings in the job definition. The supported resources include GPU, MEMORY, and VCPU.
   *
   * @schema JobSpecForProviderNodeOverridesNodePropertyOverridesContainerOverrides#resourceRequirements
   */
  readonly resourceRequirements?: JobSpecForProviderNodeOverridesNodePropertyOverridesContainerOverridesResourceRequirements[];

}

/**
 * Converts an object of type 'JobSpecForProviderNodeOverridesNodePropertyOverridesContainerOverrides' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobSpecForProviderNodeOverridesNodePropertyOverridesContainerOverrides(obj: JobSpecForProviderNodeOverridesNodePropertyOverridesContainerOverrides | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'command': obj.command?.map(y => y),
    'environment': obj.environment?.map(y => toJson_JobSpecForProviderNodeOverridesNodePropertyOverridesContainerOverridesEnvironment(y)),
    'instanceType': obj.instanceType,
    'resourceRequirements': obj.resourceRequirements?.map(y => toJson_JobSpecForProviderNodeOverridesNodePropertyOverridesContainerOverridesResourceRequirements(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Specifies the action to take if all of the specified conditions (onStatusReason, onReason, and onExitCode) are met. The values aren't case sensitive. (AWS gives lowercase back!) Action is a required field
 *
 * @schema JobSpecForProviderRetryStrategyEvaluateOnExitAction
 */
export enum JobSpecForProviderRetryStrategyEvaluateOnExitAction {
  /** retry */
  RETRY = "retry",
  /** exit */
  EXIT = "exit",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema JobSpecPublishConnectionDetailsToConfigRefPolicyResolution
 */
export enum JobSpecPublishConnectionDetailsToConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema JobSpecPublishConnectionDetailsToConfigRefPolicyResolve
 */
export enum JobSpecPublishConnectionDetailsToConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema JobSpecForProviderDependsOnJobIdRefPolicyResolution
 */
export enum JobSpecForProviderDependsOnJobIdRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema JobSpecForProviderDependsOnJobIdRefPolicyResolve
 */
export enum JobSpecForProviderDependsOnJobIdRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema JobSpecForProviderDependsOnJobIdSelectorPolicyResolution
 */
export enum JobSpecForProviderDependsOnJobIdSelectorPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema JobSpecForProviderDependsOnJobIdSelectorPolicyResolve
 */
export enum JobSpecForProviderDependsOnJobIdSelectorPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * KeyValuePair defines a key-value pair object.
 *
 * @schema JobSpecForProviderNodeOverridesNodePropertyOverridesContainerOverridesEnvironment
 */
export interface JobSpecForProviderNodeOverridesNodePropertyOverridesContainerOverridesEnvironment {
  /**
   * The name of the key-value pair. For environment variables, this is the name of the environment variable.
   *
   * @schema JobSpecForProviderNodeOverridesNodePropertyOverridesContainerOverridesEnvironment#name
   */
  readonly name?: string;

  /**
   * The value of the key-value pair. For environment variables, this is the value of the environment variable.
   *
   * @schema JobSpecForProviderNodeOverridesNodePropertyOverridesContainerOverridesEnvironment#value
   */
  readonly value?: string;

}

/**
 * Converts an object of type 'JobSpecForProviderNodeOverridesNodePropertyOverridesContainerOverridesEnvironment' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobSpecForProviderNodeOverridesNodePropertyOverridesContainerOverridesEnvironment(obj: JobSpecForProviderNodeOverridesNodePropertyOverridesContainerOverridesEnvironment | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ResourceRequirement defines the type and amount of a resource to assign to a container. The supported resources include GPU, MEMORY, and VCPU.
 *
 * @schema JobSpecForProviderNodeOverridesNodePropertyOverridesContainerOverridesResourceRequirements
 */
export interface JobSpecForProviderNodeOverridesNodePropertyOverridesContainerOverridesResourceRequirements {
  /**
   * The type of resource to assign to a container. The supported resources include GPU, MEMORY, and VCPU.
   * Type is a required field
   *
   * @schema JobSpecForProviderNodeOverridesNodePropertyOverridesContainerOverridesResourceRequirements#resourceType
   */
  readonly resourceType: JobSpecForProviderNodeOverridesNodePropertyOverridesContainerOverridesResourceRequirementsResourceType;

  /**
   * The quantity of the specified resource to reserve for the container. The values vary based on the type specified.
   * type="GPU"
   * The number of physical GPUs to reserve for the container. The number of GPUs reserved for all containers in a job shouldn't exceed the number of available GPUs on the compute resource that the job is launched on.
   * GPUs are not available for jobs that are running on Fargate resources.
   * type="MEMORY"
   * The memory hard limit (in MiB) present to the container. This parameter is supported for jobs that are running on EC2 resources. If your container attempts to exceed the memory specified, the container is terminated. This parameter maps to Memory in the Create a container (https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the Docker Remote API (https://docs.docker.com/engine/api/v1.23/) and the --memory option to docker run (https://docs.docker.com/engine/reference/run/). You must specify at least 4 MiB of memory for a job. This is required but can be specified in several places for multi-node parallel (MNP) jobs. It must be specified for each node at least once. This parameter maps to Memory in the Create a container (https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the Docker Remote API (https://docs.docker.com/engine/api/v1.23/) and the --memory option to docker run (https://docs.docker.com/engine/reference/run/).
   * If you're trying to maximize your resource utilization by providing your jobs as much memory as possible for a particular instance type, see Memory Management (https://docs.aws.amazon.com/batch/latest/userguide/memory-management.html) in the Batch User Guide.
   * For jobs that are running on Fargate resources, then value is the hard limit (in MiB), and must match one of the supported values and the VCPU values must be one of the values supported for that memory value.
   * value = 512
   * VCPU = 0.25
   * value = 1024
   * VCPU = 0.25 or 0.5
   * value = 2048
   * VCPU = 0.25, 0.5, or 1
   * value = 3072
   * VCPU = 0.5, or 1
   * value = 4096
   * VCPU = 0.5, 1, or 2
   * value = 5120, 6144, or 7168
   * VCPU = 1 or 2
   * value = 8192
   * VCPU = 1, 2, or 4
   * value = 9216, 10240, 11264, 12288, 13312, 14336, 15360, or 16384
   * VCPU = 2 or 4
   * value = 17408, 18432, 19456, 20480, 21504, 22528, 23552, 24576, 25600, 26624, 27648, 28672, 29696, or 30720
   * VCPU = 4
   * type="VCPU"
   * The number of vCPUs reserved for the container. This parameter maps to CpuShares in the Create a container (https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the Docker Remote API (https://docs.docker.com/engine/api/v1.23/) and the --cpu-shares option to docker run (https://docs.docker.com/engine/reference/run/). Each vCPU is equivalent to 1,024 CPU shares. For EC2 resources, you must specify at least one vCPU. This is required but can be specified in several places; it must be specified for each node at least once.
   * For jobs that are running on Fargate resources, then value must match one of the supported values and the MEMORY values must be one of the values supported for that VCPU value. The supported values are 0.25, 0.5, 1, 2, and 4
   * value = 0.25
   * MEMORY = 512, 1024, or 2048
   * value = 0.5
   * MEMORY = 1024, 2048, 3072, or 4096
   * value = 1
   * MEMORY = 2048, 3072, 4096, 5120, 6144, 7168, or 8192
   * value = 2
   * MEMORY = 4096, 5120, 6144, 7168, 8192, 9216, 10240, 11264, 12288, 13312, 14336, 15360, or 16384
   * value = 4
   * MEMORY = 8192, 9216, 10240, 11264, 12288, 13312, 14336, 15360, 16384, 17408, 18432, 19456, 20480, 21504, 22528, 23552, 24576, 25600, 26624, 27648, 28672, 29696, or 30720
   * Value is a required field
   *
   * @schema JobSpecForProviderNodeOverridesNodePropertyOverridesContainerOverridesResourceRequirements#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'JobSpecForProviderNodeOverridesNodePropertyOverridesContainerOverridesResourceRequirements' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobSpecForProviderNodeOverridesNodePropertyOverridesContainerOverridesResourceRequirements(obj: JobSpecForProviderNodeOverridesNodePropertyOverridesContainerOverridesResourceRequirements | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resourceType': obj.resourceType,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The type of resource to assign to a container. The supported resources include GPU, MEMORY, and VCPU.
 * Type is a required field
 *
 * @schema JobSpecForProviderNodeOverridesNodePropertyOverridesContainerOverridesResourceRequirementsResourceType
 */
export enum JobSpecForProviderNodeOverridesNodePropertyOverridesContainerOverridesResourceRequirementsResourceType {
  /** GPU */
  GPU = "GPU",
  /** MEMORY */
  MEMORY = "MEMORY",
  /** VCPU */
  VCPU = "VCPU",
}


/**
 * A JobDefinition is a managed resource that represents an AWS Batch JobDefinition.
 *
 * @schema JobDefinition
 */
export class JobDefinition extends ApiObject {
  /**
   * Returns the apiVersion and kind for "JobDefinition"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'batch.aws.crossplane.io/v1alpha1',
    kind: 'JobDefinition',
  }

  /**
   * Renders a Kubernetes manifest for "JobDefinition".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: JobDefinitionProps): any {
    return {
      ...JobDefinition.GVK,
      ...toJson_JobDefinitionProps(props),
    };
  }

  /**
   * Defines a "JobDefinition" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: JobDefinitionProps) {
    super(scope, id, {
      ...JobDefinition.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...JobDefinition.GVK,
      ...toJson_JobDefinitionProps(resolved),
    };
  }
}

/**
 * A JobDefinition is a managed resource that represents an AWS Batch JobDefinition.
 *
 * @schema JobDefinition
 */
export interface JobDefinitionProps {
  /**
   * @schema JobDefinition#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * A JobDefinitionSpec defines the desired state of a JobDefinition.
   *
   * @schema JobDefinition#spec
   */
  readonly spec: JobDefinitionSpec;

}

/**
 * Converts an object of type 'JobDefinitionProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionProps(obj: JobDefinitionProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_JobDefinitionSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A JobDefinitionSpec defines the desired state of a JobDefinition.
 *
 * @schema JobDefinitionSpec
 */
export interface JobDefinitionSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
   *
   * @schema JobDefinitionSpec#deletionPolicy
   */
  readonly deletionPolicy?: JobDefinitionSpecDeletionPolicy;

  /**
   * JobDefinitionParameters define the desired state of a Batch JobDefinition
   *
   * @schema JobDefinitionSpec#forProvider
   */
  readonly forProvider: JobDefinitionSpecForProvider;

  /**
   * THIS IS A BETA FIELD. It is on by default but can be opted out through a Crossplane feature flag. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
   *
   * @schema JobDefinitionSpec#managementPolicies
   */
  readonly managementPolicies?: JobDefinitionSpecManagementPolicies[];

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema JobDefinitionSpec#providerConfigRef
   */
  readonly providerConfigRef?: JobDefinitionSpecProviderConfigRef;

  /**
   * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema JobDefinitionSpec#publishConnectionDetailsTo
   */
  readonly publishConnectionDetailsTo?: JobDefinitionSpecPublishConnectionDetailsTo;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
   *
   * @schema JobDefinitionSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: JobDefinitionSpecWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'JobDefinitionSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpec(obj: JobDefinitionSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'deletionPolicy': obj.deletionPolicy,
    'forProvider': toJson_JobDefinitionSpecForProvider(obj.forProvider),
    'managementPolicies': obj.managementPolicies?.map(y => y),
    'providerConfigRef': toJson_JobDefinitionSpecProviderConfigRef(obj.providerConfigRef),
    'publishConnectionDetailsTo': toJson_JobDefinitionSpecPublishConnectionDetailsTo(obj.publishConnectionDetailsTo),
    'writeConnectionSecretToRef': toJson_JobDefinitionSpecWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
 *
 * @schema JobDefinitionSpecDeletionPolicy
 */
export enum JobDefinitionSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * JobDefinitionParameters define the desired state of a Batch JobDefinition
 *
 * @schema JobDefinitionSpecForProvider
 */
export interface JobDefinitionSpecForProvider {
  /**
   * An object with various properties specific to single-node container-based jobs. If the job definition's type parameter is container, then you must specify either containerProperties or nodeProperties.
   * If the job runs on Fargate resources, then you must not specify nodeProperties; use only containerProperties.
   *
   * @schema JobDefinitionSpecForProvider#containerProperties
   */
  readonly containerProperties?: JobDefinitionSpecForProviderContainerProperties;

  /**
   * The type of job definition. For more information about multi-node parallel jobs, see Creating a multi-node parallel job definition (https://docs.aws.amazon.com/batch/latest/userguide/multi-node-job-def.html) in the Batch User Guide.
   * If the job is run on Fargate resources, then multinode isn't supported.
   * Type is a required field
   *
   * @schema JobDefinitionSpecForProvider#jobDefinitionType
   */
  readonly jobDefinitionType: JobDefinitionSpecForProviderJobDefinitionType;

  /**
   * An object with various properties specific to multi-node parallel jobs.
   * If the job runs on Fargate resources, then you must not specify nodeProperties; use containerProperties instead.
   *
   * @schema JobDefinitionSpecForProvider#nodeProperties
   */
  readonly nodeProperties?: JobDefinitionSpecForProviderNodeProperties;

  /**
   * Default parameter substitution placeholders to set in the job definition. Parameters are specified as a key-value pair mapping. Parameters in a SubmitJob request override any corresponding parameter defaults from the job definition.
   *
   * @schema JobDefinitionSpecForProvider#parameters
   */
  readonly parameters?: { [key: string]: string };

  /**
   * The platform capabilities required by the job definition. If no value is specified, it defaults to EC2. To run the job on Fargate resources, specify FARGATE.
   *
   * @schema JobDefinitionSpecForProvider#platformCapabilities
   */
  readonly platformCapabilities?: string[];

  /**
   * Specifies whether to propagate the tags from the job or job definition to the corresponding Amazon ECS task. If no value is specified, the tags are not propagated. Tags can only be propagated to the tasks during task creation. For tags with the same name, job tags are given priority over job definitions tags. If the total number of combined tags from the job and job definition is over 50, the job is moved to the FAILED state.
   *
   * @schema JobDefinitionSpecForProvider#propagateTags
   */
  readonly propagateTags?: boolean;

  /**
   * Region is which region the Function will be created.
   *
   * @schema JobDefinitionSpecForProvider#region
   */
  readonly region: string;

  /**
   * The retry strategy to use for failed jobs that are submitted with this job definition. Any retry strategy that's specified during a SubmitJob operation overrides the retry strategy defined here. If a job is terminated due to a timeout, it isn't retried.
   *
   * @schema JobDefinitionSpecForProvider#retryStrategy
   */
  readonly retryStrategy?: JobDefinitionSpecForProviderRetryStrategy;

  /**
   * The tags that you apply to the job definition to help you categorize and organize your resources. Each tag consists of a key and an optional value. For more information, see Tagging Amazon Web Services Resources (https://docs.aws.amazon.com/batch/latest/userguide/using-tags.html) in Batch User Guide.
   *
   * @schema JobDefinitionSpecForProvider#tags
   */
  readonly tags?: { [key: string]: string };

  /**
   * The timeout configuration for jobs that are submitted with this job definition, after which Batch terminates your jobs if they have not finished. If a job is terminated due to a timeout, it isn't retried. The minimum value for the timeout is 60 seconds. Any timeout configuration that's specified during a SubmitJob operation overrides the timeout configuration defined here. For more information, see Job Timeouts (https://docs.aws.amazon.com/batch/latest/userguide/job_timeouts.html) in the Batch User Guide.
   *
   * @schema JobDefinitionSpecForProvider#timeout
   */
  readonly timeout?: JobDefinitionSpecForProviderTimeout;

}

/**
 * Converts an object of type 'JobDefinitionSpecForProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProvider(obj: JobDefinitionSpecForProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'containerProperties': toJson_JobDefinitionSpecForProviderContainerProperties(obj.containerProperties),
    'jobDefinitionType': obj.jobDefinitionType,
    'nodeProperties': toJson_JobDefinitionSpecForProviderNodeProperties(obj.nodeProperties),
    'parameters': ((obj.parameters) === undefined) ? undefined : (Object.entries(obj.parameters).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'platformCapabilities': obj.platformCapabilities?.map(y => y),
    'propagateTags': obj.propagateTags,
    'region': obj.region,
    'retryStrategy': toJson_JobDefinitionSpecForProviderRetryStrategy(obj.retryStrategy),
    'tags': ((obj.tags) === undefined) ? undefined : (Object.entries(obj.tags).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'timeout': toJson_JobDefinitionSpecForProviderTimeout(obj.timeout),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A ManagementAction represents an action that the Crossplane controllers can take on an external resource.
 *
 * @schema JobDefinitionSpecManagementPolicies
 */
export enum JobDefinitionSpecManagementPolicies {
  /** Observe */
  OBSERVE = "Observe",
  /** Create */
  CREATE = "Create",
  /** Update */
  UPDATE = "Update",
  /** Delete */
  DELETE = "Delete",
  /** LateInitialize */
  LATE_INITIALIZE = "LateInitialize",
  /** * */
  VALUE_ASTERISK = "*",
}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema JobDefinitionSpecProviderConfigRef
 */
export interface JobDefinitionSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema JobDefinitionSpecProviderConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema JobDefinitionSpecProviderConfigRef#policy
   */
  readonly policy?: JobDefinitionSpecProviderConfigRefPolicy;

}

/**
 * Converts an object of type 'JobDefinitionSpecProviderConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecProviderConfigRef(obj: JobDefinitionSpecProviderConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_JobDefinitionSpecProviderConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema JobDefinitionSpecPublishConnectionDetailsTo
 */
export interface JobDefinitionSpecPublishConnectionDetailsTo {
  /**
   * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
   *
   * @schema JobDefinitionSpecPublishConnectionDetailsTo#configRef
   */
  readonly configRef?: JobDefinitionSpecPublishConnectionDetailsToConfigRef;

  /**
   * Metadata is the metadata for connection secret.
   *
   * @schema JobDefinitionSpecPublishConnectionDetailsTo#metadata
   */
  readonly metadata?: JobDefinitionSpecPublishConnectionDetailsToMetadata;

  /**
   * Name is the name of the connection secret.
   *
   * @schema JobDefinitionSpecPublishConnectionDetailsTo#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'JobDefinitionSpecPublishConnectionDetailsTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecPublishConnectionDetailsTo(obj: JobDefinitionSpecPublishConnectionDetailsTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configRef': toJson_JobDefinitionSpecPublishConnectionDetailsToConfigRef(obj.configRef),
    'metadata': toJson_JobDefinitionSpecPublishConnectionDetailsToMetadata(obj.metadata),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
 *
 * @schema JobDefinitionSpecWriteConnectionSecretToRef
 */
export interface JobDefinitionSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema JobDefinitionSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema JobDefinitionSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'JobDefinitionSpecWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecWriteConnectionSecretToRef(obj: JobDefinitionSpecWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An object with various properties specific to single-node container-based jobs. If the job definition's type parameter is container, then you must specify either containerProperties or nodeProperties.
 * If the job runs on Fargate resources, then you must not specify nodeProperties; use only containerProperties.
 *
 * @schema JobDefinitionSpecForProviderContainerProperties
 */
export interface JobDefinitionSpecForProviderContainerProperties {
  /**
   * The command that's passed to the container. This parameter maps to Cmd in the Create a container (https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the Docker Remote API (https://docs.docker.com/engine/api/v1.23/) and the COMMAND parameter to docker run (https://docs.docker.com/engine/reference/run/). For more information, see https://docs.docker.com/engine/reference/builder/#cmd (https://docs.docker.com/engine/reference/builder/#cmd).
   *
   * @schema JobDefinitionSpecForProviderContainerProperties#command
   */
  readonly command?: string[];

  /**
   * The environment variables to pass to a container. This parameter maps to Env in the Create a container (https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the Docker Remote API (https://docs.docker.com/engine/api/v1.23/) and the --env option to docker run (https://docs.docker.com/engine/reference/run/).
   * We don't recommend using plaintext environment variables for sensitive information, such as credential data.
   * Environment variables must not start with AWS_BATCH; this naming convention is reserved for variables that are set by the Batch service.
   *
   * @schema JobDefinitionSpecForProviderContainerProperties#environment
   */
  readonly environment?: JobDefinitionSpecForProviderContainerPropertiesEnvironment[];

  /**
   * ExecutionRoleARNRef is a reference to an ARN of the IAM role used to set the ExecutionRoleARN.
   *
   * @schema JobDefinitionSpecForProviderContainerProperties#executionRoleARNRef
   */
  readonly executionRoleArnRef?: JobDefinitionSpecForProviderContainerPropertiesExecutionRoleArnRef;

  /**
   * ExecutionRoleARNSelector selects references to an ARN of the IAM role used to set the ExecutionRoleARN.
   *
   * @schema JobDefinitionSpecForProviderContainerProperties#executionRoleARNSelector
   */
  readonly executionRoleArnSelector?: JobDefinitionSpecForProviderContainerPropertiesExecutionRoleArnSelector;

  /**
   * The Amazon Resource Name (ARN) of the execution role that Batch can assume. For jobs that run on Fargate resources, you must provide an execution role. For more information, see Batch execution IAM role (https://docs.aws.amazon.com/batch/latest/userguide/execution-IAM-role.html) in the Batch User Guide.
   *
   * @schema JobDefinitionSpecForProviderContainerProperties#executionRoleArn
   */
  readonly executionRoleArn?: string;

  /**
   * The platform configuration for jobs that are running on Fargate resources. Jobs that are running on EC2 resources must not specify this parameter.
   *
   * @schema JobDefinitionSpecForProviderContainerProperties#fargatePlatformConfiguration
   */
  readonly fargatePlatformConfiguration?: JobDefinitionSpecForProviderContainerPropertiesFargatePlatformConfiguration;

  /**
   * The image used to start a container. This string is passed directly to the Docker daemon. Images in the Docker Hub registry are available by default. Other repositories are specified with repository-url/image:tag . Up to 255 letters (uppercase and lowercase), numbers, hyphens, underscores, colons, periods, forward slashes, and number signs are allowed. This parameter maps to Image in the Create a container (https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the Docker Remote API (https://docs.docker.com/engine/api/v1.23/) and the IMAGE parameter of docker run (https://docs.docker.com/engine/reference/run/).
   * Docker image architecture must match the processor architecture of the compute resources that they're scheduled on. For example, ARM-based Docker images can only run on ARM-based compute resources.
   * * Images in Amazon ECR repositories use the full registry and repository URI (for example, 012345678910.dkr.ecr.<region-name>.amazonaws.com/<repository-name>).
   * * Images in official repositories on Docker Hub use a single name (for example, ubuntu or mongo).
   * * Images in other repositories on Docker Hub are qualified with an organization name (for example, amazon/amazon-ecs-agent).
   * * Images in other online repositories are qualified further by a domain name (for example, quay.io/assemblyline/ubuntu).
   *
   * @schema JobDefinitionSpecForProviderContainerProperties#image
   */
  readonly image?: string;

  /**
   * The instance type to use for a multi-node parallel job. All node groups in a multi-node parallel job must use the same instance type.
   * This parameter isn't applicable to single-node container jobs or jobs that run on Fargate resources, and shouldn't be provided.
   *
   * @schema JobDefinitionSpecForProviderContainerProperties#instanceType
   */
  readonly instanceType?: string;

  /**
   * JobRoleARNRef is a reference to an ARN of the IAM role used to set the JobRoleARN.
   *
   * @schema JobDefinitionSpecForProviderContainerProperties#jobRoleARNRef
   */
  readonly jobRoleArnRef?: JobDefinitionSpecForProviderContainerPropertiesJobRoleArnRef;

  /**
   * JobRoleARNSelector selects references to an ARN of the IAM role used to set the JobRoleARN.
   *
   * @schema JobDefinitionSpecForProviderContainerProperties#jobRoleARNSelector
   */
  readonly jobRoleArnSelector?: JobDefinitionSpecForProviderContainerPropertiesJobRoleArnSelector;

  /**
   * The Amazon Resource Name (ARN) of the IAM role that the container can assume for Amazon Web Services permissions. For more information, see IAM Roles for Tasks (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-iam-roles.html) in the Amazon Elastic Container Service Developer Guide.
   *
   * @schema JobDefinitionSpecForProviderContainerProperties#jobRoleArn
   */
  readonly jobRoleArn?: string;

  /**
   * Linux-specific modifications that are applied to the container, such as details for device mappings.
   *
   * @schema JobDefinitionSpecForProviderContainerProperties#linuxParameters
   */
  readonly linuxParameters?: JobDefinitionSpecForProviderContainerPropertiesLinuxParameters;

  /**
   * The log configuration specification for the container.
   * This parameter maps to LogConfig in the Create a container (https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the Docker Remote API (https://docs.docker.com/engine/api/v1.23/) and the --log-driver option to docker run (https://docs.docker.com/engine/reference/run/). By default, containers use the same logging driver that the Docker daemon uses. However the container might use a different logging driver than the Docker daemon by specifying a log driver with this parameter in the container definition. To use a different logging driver for a container, the log system must be configured properly on the container instance (or on a different log server for remote logging options). For more information on the options for different supported log drivers, see Configure logging drivers (https://docs.docker.com/engine/admin/logging/overview/) in the Docker documentation.
   * Batch currently supports a subset of the logging drivers available to the Docker daemon (shown in the LogConfiguration data type).
   * This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log into your container instance and run the following command: sudo docker version | grep "Server API version"
   * The Amazon ECS container agent running on a container instance must register the logging drivers available on that instance with the ECS_AVAILABLE_LOGGING_DRIVERS environment variable before containers placed on that instance can use these log configuration options. For more information, see Amazon ECS Container Agent Configuration (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html) in the Amazon Elastic Container Service Developer Guide.
   *
   * @schema JobDefinitionSpecForProviderContainerProperties#logConfiguration
   */
  readonly logConfiguration?: JobDefinitionSpecForProviderContainerPropertiesLogConfiguration;

  /**
   * The mount points for data volumes in your container. This parameter maps to Volumes in the Create a container (https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the Docker Remote API (https://docs.docker.com/engine/api/v1.23/) and the --volume option to docker run (https://docs.docker.com/engine/reference/run/).
   *
   * @schema JobDefinitionSpecForProviderContainerProperties#mountPoints
   */
  readonly mountPoints?: JobDefinitionSpecForProviderContainerPropertiesMountPoints[];

  /**
   * The network configuration for jobs that are running on Fargate resources. Jobs that are running on EC2 resources must not specify this parameter.
   *
   * @schema JobDefinitionSpecForProviderContainerProperties#networkConfiguration
   */
  readonly networkConfiguration?: JobDefinitionSpecForProviderContainerPropertiesNetworkConfiguration;

  /**
   * When this parameter is true, the container is given elevated permissions on the host container instance (similar to the root user). This parameter maps to Privileged in the Create a container (https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the Docker Remote API (https://docs.docker.com/engine/api/v1.23/) and the --privileged option to docker run (https://docs.docker.com/engine/reference/run/). The default value is false.
   * This parameter isn't applicable to jobs that are running on Fargate resources and shouldn't be provided, or specified as false.
   *
   * @schema JobDefinitionSpecForProviderContainerProperties#privileged
   */
  readonly privileged?: boolean;

  /**
   * When this parameter is true, the container is given read-only access to its root file system. This parameter maps to ReadonlyRootfs in the Create a container (https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the Docker Remote API (https://docs.docker.com/engine/api/v1.23/) and the --read-only option to docker run.
   *
   * @schema JobDefinitionSpecForProviderContainerProperties#readonlyRootFilesystem
   */
  readonly readonlyRootFilesystem?: boolean;

  /**
   * The type and amount of resources to assign to a container. The supported resources include GPU, MEMORY, and VCPU.
   *
   * @schema JobDefinitionSpecForProviderContainerProperties#resourceRequirements
   */
  readonly resourceRequirements?: JobDefinitionSpecForProviderContainerPropertiesResourceRequirements[];

  /**
   * The secrets for the container. For more information, see Specifying sensitive data (https://docs.aws.amazon.com/batch/latest/userguide/specifying-sensitive-data.html) in the Batch User Guide.
   *
   * @schema JobDefinitionSpecForProviderContainerProperties#secrets
   */
  readonly secrets?: JobDefinitionSpecForProviderContainerPropertiesSecrets[];

  /**
   * A list of ulimits to set in the container. This parameter maps to Ulimits in the Create a container (https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the Docker Remote API (https://docs.docker.com/engine/api/v1.23/) and the --ulimit option to docker run (https://docs.docker.com/engine/reference/run/).
   * This parameter isn't applicable to jobs that are running on Fargate resources and shouldn't be provided.
   *
   * @schema JobDefinitionSpecForProviderContainerProperties#ulimits
   */
  readonly ulimits?: JobDefinitionSpecForProviderContainerPropertiesUlimits[];

  /**
   * The user name to use inside the container. This parameter maps to User in the Create a container (https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the Docker Remote API (https://docs.docker.com/engine/api/v1.23/) and the --user option to docker run (https://docs.docker.com/engine/reference/run/).
   *
   * @schema JobDefinitionSpecForProviderContainerProperties#user
   */
  readonly user?: string;

  /**
   * A list of data volumes used in a job.
   *
   * @schema JobDefinitionSpecForProviderContainerProperties#volumes
   */
  readonly volumes?: JobDefinitionSpecForProviderContainerPropertiesVolumes[];

}

/**
 * Converts an object of type 'JobDefinitionSpecForProviderContainerProperties' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProviderContainerProperties(obj: JobDefinitionSpecForProviderContainerProperties | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'command': obj.command?.map(y => y),
    'environment': obj.environment?.map(y => toJson_JobDefinitionSpecForProviderContainerPropertiesEnvironment(y)),
    'executionRoleARNRef': toJson_JobDefinitionSpecForProviderContainerPropertiesExecutionRoleArnRef(obj.executionRoleArnRef),
    'executionRoleARNSelector': toJson_JobDefinitionSpecForProviderContainerPropertiesExecutionRoleArnSelector(obj.executionRoleArnSelector),
    'executionRoleArn': obj.executionRoleArn,
    'fargatePlatformConfiguration': toJson_JobDefinitionSpecForProviderContainerPropertiesFargatePlatformConfiguration(obj.fargatePlatformConfiguration),
    'image': obj.image,
    'instanceType': obj.instanceType,
    'jobRoleARNRef': toJson_JobDefinitionSpecForProviderContainerPropertiesJobRoleArnRef(obj.jobRoleArnRef),
    'jobRoleARNSelector': toJson_JobDefinitionSpecForProviderContainerPropertiesJobRoleArnSelector(obj.jobRoleArnSelector),
    'jobRoleArn': obj.jobRoleArn,
    'linuxParameters': toJson_JobDefinitionSpecForProviderContainerPropertiesLinuxParameters(obj.linuxParameters),
    'logConfiguration': toJson_JobDefinitionSpecForProviderContainerPropertiesLogConfiguration(obj.logConfiguration),
    'mountPoints': obj.mountPoints?.map(y => toJson_JobDefinitionSpecForProviderContainerPropertiesMountPoints(y)),
    'networkConfiguration': toJson_JobDefinitionSpecForProviderContainerPropertiesNetworkConfiguration(obj.networkConfiguration),
    'privileged': obj.privileged,
    'readonlyRootFilesystem': obj.readonlyRootFilesystem,
    'resourceRequirements': obj.resourceRequirements?.map(y => toJson_JobDefinitionSpecForProviderContainerPropertiesResourceRequirements(y)),
    'secrets': obj.secrets?.map(y => toJson_JobDefinitionSpecForProviderContainerPropertiesSecrets(y)),
    'ulimits': obj.ulimits?.map(y => toJson_JobDefinitionSpecForProviderContainerPropertiesUlimits(y)),
    'user': obj.user,
    'volumes': obj.volumes?.map(y => toJson_JobDefinitionSpecForProviderContainerPropertiesVolumes(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The type of job definition. For more information about multi-node parallel jobs, see Creating a multi-node parallel job definition (https://docs.aws.amazon.com/batch/latest/userguide/multi-node-job-def.html) in the Batch User Guide.
 * If the job is run on Fargate resources, then multinode isn't supported.
 * Type is a required field
 *
 * @schema JobDefinitionSpecForProviderJobDefinitionType
 */
export enum JobDefinitionSpecForProviderJobDefinitionType {
  /** container */
  CONTAINER = "container",
  /** multinode */
  MULTINODE = "multinode",
}

/**
 * An object with various properties specific to multi-node parallel jobs.
 * If the job runs on Fargate resources, then you must not specify nodeProperties; use containerProperties instead.
 *
 * @schema JobDefinitionSpecForProviderNodeProperties
 */
export interface JobDefinitionSpecForProviderNodeProperties {
  /**
   * Specifies the node index for the main node of a multi-node parallel job. This node index value must be fewer than the number of nodes.
   * MainNode is a required field
   *
   * @schema JobDefinitionSpecForProviderNodeProperties#mainNode
   */
  readonly mainNode: number;

  /**
   * A list of node ranges and their properties associated with a multi-node parallel job.
   * NodeRangeProperties is a required field
   *
   * @schema JobDefinitionSpecForProviderNodeProperties#nodeRangeProperties
   */
  readonly nodeRangeProperties: JobDefinitionSpecForProviderNodePropertiesNodeRangeProperties[];

  /**
   * The number of nodes associated with a multi-node parallel job.
   * NumNodes is a required field
   *
   * @schema JobDefinitionSpecForProviderNodeProperties#numNodes
   */
  readonly numNodes: number;

}

/**
 * Converts an object of type 'JobDefinitionSpecForProviderNodeProperties' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProviderNodeProperties(obj: JobDefinitionSpecForProviderNodeProperties | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'mainNode': obj.mainNode,
    'nodeRangeProperties': obj.nodeRangeProperties?.map(y => toJson_JobDefinitionSpecForProviderNodePropertiesNodeRangeProperties(y)),
    'numNodes': obj.numNodes,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The retry strategy to use for failed jobs that are submitted with this job definition. Any retry strategy that's specified during a SubmitJob operation overrides the retry strategy defined here. If a job is terminated due to a timeout, it isn't retried.
 *
 * @schema JobDefinitionSpecForProviderRetryStrategy
 */
export interface JobDefinitionSpecForProviderRetryStrategy {
  /**
   * The number of times to move a job to the RUNNABLE status. You can specify between 1 and 10 attempts. If the value of attempts is greater than one, the job is retried on failure the same number of attempts as the value.
   *
   * @schema JobDefinitionSpecForProviderRetryStrategy#attempts
   */
  readonly attempts?: number;

  /**
   * Array of up to 5 objects that specify conditions under which the job should be retried or failed. If this parameter is specified, then the attempts parameter must also be specified.
   *
   * @schema JobDefinitionSpecForProviderRetryStrategy#evaluateOnExit
   */
  readonly evaluateOnExit?: JobDefinitionSpecForProviderRetryStrategyEvaluateOnExit[];

}

/**
 * Converts an object of type 'JobDefinitionSpecForProviderRetryStrategy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProviderRetryStrategy(obj: JobDefinitionSpecForProviderRetryStrategy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'attempts': obj.attempts,
    'evaluateOnExit': obj.evaluateOnExit?.map(y => toJson_JobDefinitionSpecForProviderRetryStrategyEvaluateOnExit(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The timeout configuration for jobs that are submitted with this job definition, after which Batch terminates your jobs if they have not finished. If a job is terminated due to a timeout, it isn't retried. The minimum value for the timeout is 60 seconds. Any timeout configuration that's specified during a SubmitJob operation overrides the timeout configuration defined here. For more information, see Job Timeouts (https://docs.aws.amazon.com/batch/latest/userguide/job_timeouts.html) in the Batch User Guide.
 *
 * @schema JobDefinitionSpecForProviderTimeout
 */
export interface JobDefinitionSpecForProviderTimeout {
  /**
   * The time duration in seconds (measured from the job attempt's startedAt timestamp) after which Batch terminates your jobs if they have not finished. The minimum value for the timeout is 60 seconds.
   *
   * @schema JobDefinitionSpecForProviderTimeout#attemptDurationSeconds
   */
  readonly attemptDurationSeconds?: number;

}

/**
 * Converts an object of type 'JobDefinitionSpecForProviderTimeout' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProviderTimeout(obj: JobDefinitionSpecForProviderTimeout | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'attemptDurationSeconds': obj.attemptDurationSeconds,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema JobDefinitionSpecProviderConfigRefPolicy
 */
export interface JobDefinitionSpecProviderConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema JobDefinitionSpecProviderConfigRefPolicy#resolution
   */
  readonly resolution?: JobDefinitionSpecProviderConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema JobDefinitionSpecProviderConfigRefPolicy#resolve
   */
  readonly resolve?: JobDefinitionSpecProviderConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'JobDefinitionSpecProviderConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecProviderConfigRefPolicy(obj: JobDefinitionSpecProviderConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
 *
 * @schema JobDefinitionSpecPublishConnectionDetailsToConfigRef
 */
export interface JobDefinitionSpecPublishConnectionDetailsToConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema JobDefinitionSpecPublishConnectionDetailsToConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema JobDefinitionSpecPublishConnectionDetailsToConfigRef#policy
   */
  readonly policy?: JobDefinitionSpecPublishConnectionDetailsToConfigRefPolicy;

}

/**
 * Converts an object of type 'JobDefinitionSpecPublishConnectionDetailsToConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecPublishConnectionDetailsToConfigRef(obj: JobDefinitionSpecPublishConnectionDetailsToConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_JobDefinitionSpecPublishConnectionDetailsToConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Metadata is the metadata for connection secret.
 *
 * @schema JobDefinitionSpecPublishConnectionDetailsToMetadata
 */
export interface JobDefinitionSpecPublishConnectionDetailsToMetadata {
  /**
   * Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
   *
   * @schema JobDefinitionSpecPublishConnectionDetailsToMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
   *
   * @schema JobDefinitionSpecPublishConnectionDetailsToMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
   *
   * @schema JobDefinitionSpecPublishConnectionDetailsToMetadata#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'JobDefinitionSpecPublishConnectionDetailsToMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecPublishConnectionDetailsToMetadata(obj: JobDefinitionSpecPublishConnectionDetailsToMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * KeyValuePair defines a key-value pair object.
 *
 * @schema JobDefinitionSpecForProviderContainerPropertiesEnvironment
 */
export interface JobDefinitionSpecForProviderContainerPropertiesEnvironment {
  /**
   * The name of the key-value pair. For environment variables, this is the name of the environment variable.
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesEnvironment#name
   */
  readonly name?: string;

  /**
   * The value of the key-value pair. For environment variables, this is the value of the environment variable.
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesEnvironment#value
   */
  readonly value?: string;

}

/**
 * Converts an object of type 'JobDefinitionSpecForProviderContainerPropertiesEnvironment' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProviderContainerPropertiesEnvironment(obj: JobDefinitionSpecForProviderContainerPropertiesEnvironment | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ExecutionRoleARNRef is a reference to an ARN of the IAM role used to set the ExecutionRoleARN.
 *
 * @schema JobDefinitionSpecForProviderContainerPropertiesExecutionRoleArnRef
 */
export interface JobDefinitionSpecForProviderContainerPropertiesExecutionRoleArnRef {
  /**
   * Name of the referenced object.
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesExecutionRoleArnRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesExecutionRoleArnRef#policy
   */
  readonly policy?: JobDefinitionSpecForProviderContainerPropertiesExecutionRoleArnRefPolicy;

}

/**
 * Converts an object of type 'JobDefinitionSpecForProviderContainerPropertiesExecutionRoleArnRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProviderContainerPropertiesExecutionRoleArnRef(obj: JobDefinitionSpecForProviderContainerPropertiesExecutionRoleArnRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_JobDefinitionSpecForProviderContainerPropertiesExecutionRoleArnRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ExecutionRoleARNSelector selects references to an ARN of the IAM role used to set the ExecutionRoleARN.
 *
 * @schema JobDefinitionSpecForProviderContainerPropertiesExecutionRoleArnSelector
 */
export interface JobDefinitionSpecForProviderContainerPropertiesExecutionRoleArnSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesExecutionRoleArnSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesExecutionRoleArnSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

  /**
   * Policies for selection.
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesExecutionRoleArnSelector#policy
   */
  readonly policy?: JobDefinitionSpecForProviderContainerPropertiesExecutionRoleArnSelectorPolicy;

}

/**
 * Converts an object of type 'JobDefinitionSpecForProviderContainerPropertiesExecutionRoleArnSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProviderContainerPropertiesExecutionRoleArnSelector(obj: JobDefinitionSpecForProviderContainerPropertiesExecutionRoleArnSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchControllerRef': obj.matchControllerRef,
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'policy': toJson_JobDefinitionSpecForProviderContainerPropertiesExecutionRoleArnSelectorPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The platform configuration for jobs that are running on Fargate resources. Jobs that are running on EC2 resources must not specify this parameter.
 *
 * @schema JobDefinitionSpecForProviderContainerPropertiesFargatePlatformConfiguration
 */
export interface JobDefinitionSpecForProviderContainerPropertiesFargatePlatformConfiguration {
  /**
   * The Fargate platform version where the jobs are running. A platform version is specified only for jobs that are running on Fargate resources. If one isn't specified, the LATEST platform version is used by default. This uses a recent, approved version of the Fargate platform for compute resources. For more information, see Fargate platform versions (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html) in the Amazon Elastic Container Service Developer Guide.
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesFargatePlatformConfiguration#platformVersion
   */
  readonly platformVersion?: string;

}

/**
 * Converts an object of type 'JobDefinitionSpecForProviderContainerPropertiesFargatePlatformConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProviderContainerPropertiesFargatePlatformConfiguration(obj: JobDefinitionSpecForProviderContainerPropertiesFargatePlatformConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'platformVersion': obj.platformVersion,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * JobRoleARNRef is a reference to an ARN of the IAM role used to set the JobRoleARN.
 *
 * @schema JobDefinitionSpecForProviderContainerPropertiesJobRoleArnRef
 */
export interface JobDefinitionSpecForProviderContainerPropertiesJobRoleArnRef {
  /**
   * Name of the referenced object.
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesJobRoleArnRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesJobRoleArnRef#policy
   */
  readonly policy?: JobDefinitionSpecForProviderContainerPropertiesJobRoleArnRefPolicy;

}

/**
 * Converts an object of type 'JobDefinitionSpecForProviderContainerPropertiesJobRoleArnRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProviderContainerPropertiesJobRoleArnRef(obj: JobDefinitionSpecForProviderContainerPropertiesJobRoleArnRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_JobDefinitionSpecForProviderContainerPropertiesJobRoleArnRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * JobRoleARNSelector selects references to an ARN of the IAM role used to set the JobRoleARN.
 *
 * @schema JobDefinitionSpecForProviderContainerPropertiesJobRoleArnSelector
 */
export interface JobDefinitionSpecForProviderContainerPropertiesJobRoleArnSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesJobRoleArnSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesJobRoleArnSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

  /**
   * Policies for selection.
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesJobRoleArnSelector#policy
   */
  readonly policy?: JobDefinitionSpecForProviderContainerPropertiesJobRoleArnSelectorPolicy;

}

/**
 * Converts an object of type 'JobDefinitionSpecForProviderContainerPropertiesJobRoleArnSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProviderContainerPropertiesJobRoleArnSelector(obj: JobDefinitionSpecForProviderContainerPropertiesJobRoleArnSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchControllerRef': obj.matchControllerRef,
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'policy': toJson_JobDefinitionSpecForProviderContainerPropertiesJobRoleArnSelectorPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Linux-specific modifications that are applied to the container, such as details for device mappings.
 *
 * @schema JobDefinitionSpecForProviderContainerPropertiesLinuxParameters
 */
export interface JobDefinitionSpecForProviderContainerPropertiesLinuxParameters {
  /**
   * Any host devices to expose to the container. This parameter maps to Devices in the Create a container (https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the Docker Remote API (https://docs.docker.com/engine/api/v1.23/) and the --device option to docker run (https://docs.docker.com/engine/reference/run/).
   * This parameter isn't applicable to jobs that are running on Fargate resources and shouldn't be provided.
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesLinuxParameters#devices
   */
  readonly devices?: JobDefinitionSpecForProviderContainerPropertiesLinuxParametersDevices[];

  /**
   * If true, run an init process inside the container that forwards signals and reaps processes. This parameter maps to the --init option to docker run (https://docs.docker.com/engine/reference/run/). This parameter requires version 1.25 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log into your container instance and run the following command: sudo docker version | grep "Server API version"
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesLinuxParameters#initProcessEnabled
   */
  readonly initProcessEnabled?: boolean;

  /**
   * The total amount of swap memory (in MiB) a container can use. This parameter is translated to the --memory-swap option to docker run (https://docs.docker.com/engine/reference/run/) where the value is the sum of the container memory plus the maxSwap value. For more information, see --memory-swap details (https://docs.docker.com/config/containers/resource_constraints/#--memory-swap-details) in the Docker documentation.
   * If a maxSwap value of 0 is specified, the container doesn't use swap. Accepted values are 0 or any positive integer. If the maxSwap parameter is omitted, the container doesn't use the swap configuration for the container instance it is running on. A maxSwap value must be set for the swappiness parameter to be used.
   * This parameter isn't applicable to jobs that are running on Fargate resources and shouldn't be provided.
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesLinuxParameters#maxSwap
   */
  readonly maxSwap?: number;

  /**
   * The value for the size (in MiB) of the /dev/shm volume. This parameter maps to the --shm-size option to docker run (https://docs.docker.com/engine/reference/run/).
   * This parameter isn't applicable to jobs that are running on Fargate resources and shouldn't be provided.
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesLinuxParameters#sharedMemorySize
   */
  readonly sharedMemorySize?: number;

  /**
   * This allows you to tune a container's memory swappiness behavior. A swappiness value of 0 causes swapping not to happen unless absolutely necessary. A swappiness value of 100 causes pages to be swapped very aggressively. Accepted values are whole numbers between 0 and 100. If the swappiness parameter isn't specified, a default value of 60 is used. If a value isn't specified for maxSwap, then this parameter is ignored. If maxSwap is set to 0, the container doesn't use swap. This parameter maps to the --memory-swappiness option to docker run (https://docs.docker.com/engine/reference/run/).
   * Consider the following when you use a per-container swap configuration.
   * * Swap space must be enabled and allocated on the container instance for the containers to use. The Amazon ECS optimized AMIs don't have swap enabled by default. You must enable swap on the instance to use this feature. For more information, see Instance Store Swap Volumes (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-store-swap-volumes.html) in the Amazon EC2 User Guide for Linux Instances or How do I allocate memory to work as swap space in an Amazon EC2 instance by using a swap file? (http://aws.amazon.com/premiumsupport/knowledge-center/ec2-memory-swap-file/)
   * * The swap space parameters are only supported for job definitions using EC2 resources.
   * * If the maxSwap and swappiness parameters are omitted from a job definition, each container will have a default swappiness value of 60, and the total swap usage will be limited to two times the memory reservation of the container.
   * This parameter isn't applicable to jobs that are running on Fargate resources and shouldn't be provided.
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesLinuxParameters#swappiness
   */
  readonly swappiness?: number;

  /**
   * The container path, mount options, and size (in MiB) of the tmpfs mount. This parameter maps to the --tmpfs option to docker run (https://docs.docker.com/engine/reference/run/).
   * This parameter isn't applicable to jobs that are running on Fargate resources and shouldn't be provided.
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesLinuxParameters#tmpfs
   */
  readonly tmpfs?: JobDefinitionSpecForProviderContainerPropertiesLinuxParametersTmpfs[];

}

/**
 * Converts an object of type 'JobDefinitionSpecForProviderContainerPropertiesLinuxParameters' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProviderContainerPropertiesLinuxParameters(obj: JobDefinitionSpecForProviderContainerPropertiesLinuxParameters | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'devices': obj.devices?.map(y => toJson_JobDefinitionSpecForProviderContainerPropertiesLinuxParametersDevices(y)),
    'initProcessEnabled': obj.initProcessEnabled,
    'maxSwap': obj.maxSwap,
    'sharedMemorySize': obj.sharedMemorySize,
    'swappiness': obj.swappiness,
    'tmpfs': obj.tmpfs?.map(y => toJson_JobDefinitionSpecForProviderContainerPropertiesLinuxParametersTmpfs(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The log configuration specification for the container.
 * This parameter maps to LogConfig in the Create a container (https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the Docker Remote API (https://docs.docker.com/engine/api/v1.23/) and the --log-driver option to docker run (https://docs.docker.com/engine/reference/run/). By default, containers use the same logging driver that the Docker daemon uses. However the container might use a different logging driver than the Docker daemon by specifying a log driver with this parameter in the container definition. To use a different logging driver for a container, the log system must be configured properly on the container instance (or on a different log server for remote logging options). For more information on the options for different supported log drivers, see Configure logging drivers (https://docs.docker.com/engine/admin/logging/overview/) in the Docker documentation.
 * Batch currently supports a subset of the logging drivers available to the Docker daemon (shown in the LogConfiguration data type).
 * This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log into your container instance and run the following command: sudo docker version | grep "Server API version"
 * The Amazon ECS container agent running on a container instance must register the logging drivers available on that instance with the ECS_AVAILABLE_LOGGING_DRIVERS environment variable before containers placed on that instance can use these log configuration options. For more information, see Amazon ECS Container Agent Configuration (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html) in the Amazon Elastic Container Service Developer Guide.
 *
 * @schema JobDefinitionSpecForProviderContainerPropertiesLogConfiguration
 */
export interface JobDefinitionSpecForProviderContainerPropertiesLogConfiguration {
  /**
   * The log driver to use for the container. The valid values listed for this parameter are log drivers that the Amazon ECS container agent can communicate with by default.
   * The supported log drivers are awslogs, fluentd, gelf, json-file, journald, logentries, syslog, and splunk.
   * Jobs that are running on Fargate resources are restricted to the awslogs and splunk log drivers.
   * awslogs
   * Specifies the Amazon CloudWatch Logs logging driver. For more information, see Using the awslogs Log Driver (https://docs.aws.amazon.com/batch/latest/userguide/using_awslogs.html) in the Batch User Guide and Amazon CloudWatch Logs logging driver (https://docs.docker.com/config/containers/logging/awslogs/) in the Docker documentation.
   * fluentd
   * Specifies the Fluentd logging driver. For more information, including usage and options, see Fluentd logging driver (https://docs.docker.com/config/containers/logging/fluentd/) in the Docker documentation.
   * gelf
   * Specifies the Graylog Extended Format (GELF) logging driver. For more information, including usage and options, see Graylog Extended Format logging driver (https://docs.docker.com/config/containers/logging/gelf/) in the Docker documentation.
   * journald
   * Specifies the journald logging driver. For more information, including usage and options, see Journald logging driver (https://docs.docker.com/config/containers/logging/journald/) in the Docker documentation.
   * json-file
   * Specifies the JSON file logging driver. For more information, including usage and options, see JSON File logging driver (https://docs.docker.com/config/containers/logging/json-file/) in the Docker documentation.
   * splunk
   * Specifies the Splunk logging driver. For more information, including usage and options, see Splunk logging driver (https://docs.docker.com/config/containers/logging/splunk/) in the Docker documentation.
   * syslog
   * Specifies the syslog logging driver. For more information, including usage and options, see Syslog logging driver (https://docs.docker.com/config/containers/logging/syslog/) in the Docker documentation.
   * If you have a custom driver that's not listed earlier that you want to work with the Amazon ECS container agent, you can fork the Amazon ECS container agent project that's available on GitHub (https://github.com/aws/amazon-ecs-agent) and customize it to work with that driver. We encourage you to submit pull requests for changes that you want to have included. However, Amazon Web Services doesn't currently support running modified copies of this software.
   * This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log into your container instance and run the following command: sudo docker version | grep "Server API version"
   * LogDriver is a required field
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesLogConfiguration#logDriver
   */
  readonly logDriver: JobDefinitionSpecForProviderContainerPropertiesLogConfigurationLogDriver;

  /**
   * The configuration options to send to the log driver. This parameter requires version 1.19 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log into your container instance and run the following command: sudo docker version | grep "Server API version"
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesLogConfiguration#options
   */
  readonly options?: { [key: string]: string };

  /**
   * The secrets to pass to the log configuration. For more information, see Specifying Sensitive Data (https://docs.aws.amazon.com/batch/latest/userguide/specifying-sensitive-data.html) in the Batch User Guide.
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesLogConfiguration#secretOptions
   */
  readonly secretOptions?: JobDefinitionSpecForProviderContainerPropertiesLogConfigurationSecretOptions[];

}

/**
 * Converts an object of type 'JobDefinitionSpecForProviderContainerPropertiesLogConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProviderContainerPropertiesLogConfiguration(obj: JobDefinitionSpecForProviderContainerPropertiesLogConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'logDriver': obj.logDriver,
    'options': ((obj.options) === undefined) ? undefined : (Object.entries(obj.options).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'secretOptions': obj.secretOptions?.map(y => toJson_JobDefinitionSpecForProviderContainerPropertiesLogConfigurationSecretOptions(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * MountPoint defines the details on a Docker volume mount point that's used in a job's container properties. This parameter maps to Volumes in the Create a container (https://docs.docker.com/engine/reference/api/docker_remote_api_v1.19/#create-a-container) section of the Docker Remote API and the --volume option to docker run.
 *
 * @schema JobDefinitionSpecForProviderContainerPropertiesMountPoints
 */
export interface JobDefinitionSpecForProviderContainerPropertiesMountPoints {
  /**
   * The path on the container where the host volume is mounted.
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesMountPoints#containerPath
   */
  readonly containerPath?: string;

  /**
   * If this value is true, the container has read-only access to the volume. Otherwise, the container can write to the volume. The default value is false.
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesMountPoints#readOnly
   */
  readonly readOnly?: boolean;

  /**
   * The name of the volume to mount.
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesMountPoints#sourceVolume
   */
  readonly sourceVolume?: string;

}

/**
 * Converts an object of type 'JobDefinitionSpecForProviderContainerPropertiesMountPoints' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProviderContainerPropertiesMountPoints(obj: JobDefinitionSpecForProviderContainerPropertiesMountPoints | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'containerPath': obj.containerPath,
    'readOnly': obj.readOnly,
    'sourceVolume': obj.sourceVolume,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The network configuration for jobs that are running on Fargate resources. Jobs that are running on EC2 resources must not specify this parameter.
 *
 * @schema JobDefinitionSpecForProviderContainerPropertiesNetworkConfiguration
 */
export interface JobDefinitionSpecForProviderContainerPropertiesNetworkConfiguration {
  /**
   * Indicates whether the job should have a public IP address. For a job that is running on Fargate resources in a private subnet to send outbound traffic to the internet (for example, to pull container images), the private subnet requires a NAT gateway be attached to route requests to the internet. For more information, see Amazon ECS task networking (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html). The default value is "DISABLED".
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesNetworkConfiguration#assignPublicIp
   */
  readonly assignPublicIp?: JobDefinitionSpecForProviderContainerPropertiesNetworkConfigurationAssignPublicIp;

}

/**
 * Converts an object of type 'JobDefinitionSpecForProviderContainerPropertiesNetworkConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProviderContainerPropertiesNetworkConfiguration(obj: JobDefinitionSpecForProviderContainerPropertiesNetworkConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'assignPublicIp': obj.assignPublicIp,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ResourceRequirement defines the type and amount of a resource to assign to a container. The supported resources include GPU, MEMORY, and VCPU.
 *
 * @schema JobDefinitionSpecForProviderContainerPropertiesResourceRequirements
 */
export interface JobDefinitionSpecForProviderContainerPropertiesResourceRequirements {
  /**
   * The type of resource to assign to a container. The supported resources include GPU, MEMORY, and VCPU.
   * Type is a required field
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesResourceRequirements#resourceType
   */
  readonly resourceType: JobDefinitionSpecForProviderContainerPropertiesResourceRequirementsResourceType;

  /**
   * The quantity of the specified resource to reserve for the container. The values vary based on the type specified.
   * type="GPU"
   * The number of physical GPUs to reserve for the container. The number of GPUs reserved for all containers in a job shouldn't exceed the number of available GPUs on the compute resource that the job is launched on.
   * GPUs are not available for jobs that are running on Fargate resources.
   * type="MEMORY"
   * The memory hard limit (in MiB) present to the container. This parameter is supported for jobs that are running on EC2 resources. If your container attempts to exceed the memory specified, the container is terminated. This parameter maps to Memory in the Create a container (https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the Docker Remote API (https://docs.docker.com/engine/api/v1.23/) and the --memory option to docker run (https://docs.docker.com/engine/reference/run/). You must specify at least 4 MiB of memory for a job. This is required but can be specified in several places for multi-node parallel (MNP) jobs. It must be specified for each node at least once. This parameter maps to Memory in the Create a container (https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the Docker Remote API (https://docs.docker.com/engine/api/v1.23/) and the --memory option to docker run (https://docs.docker.com/engine/reference/run/).
   * If you're trying to maximize your resource utilization by providing your jobs as much memory as possible for a particular instance type, see Memory Management (https://docs.aws.amazon.com/batch/latest/userguide/memory-management.html) in the Batch User Guide.
   * For jobs that are running on Fargate resources, then value is the hard limit (in MiB), and must match one of the supported values and the VCPU values must be one of the values supported for that memory value.
   * value = 512
   * VCPU = 0.25
   * value = 1024
   * VCPU = 0.25 or 0.5
   * value = 2048
   * VCPU = 0.25, 0.5, or 1
   * value = 3072
   * VCPU = 0.5, or 1
   * value = 4096
   * VCPU = 0.5, 1, or 2
   * value = 5120, 6144, or 7168
   * VCPU = 1 or 2
   * value = 8192
   * VCPU = 1, 2, or 4
   * value = 9216, 10240, 11264, 12288, 13312, 14336, 15360, or 16384
   * VCPU = 2 or 4
   * value = 17408, 18432, 19456, 20480, 21504, 22528, 23552, 24576, 25600, 26624, 27648, 28672, 29696, or 30720
   * VCPU = 4
   * type="VCPU"
   * The number of vCPUs reserved for the container. This parameter maps to CpuShares in the Create a container (https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the Docker Remote API (https://docs.docker.com/engine/api/v1.23/) and the --cpu-shares option to docker run (https://docs.docker.com/engine/reference/run/). Each vCPU is equivalent to 1,024 CPU shares. For EC2 resources, you must specify at least one vCPU. This is required but can be specified in several places; it must be specified for each node at least once.
   * For jobs that are running on Fargate resources, then value must match one of the supported values and the MEMORY values must be one of the values supported for that VCPU value. The supported values are 0.25, 0.5, 1, 2, and 4
   * value = 0.25
   * MEMORY = 512, 1024, or 2048
   * value = 0.5
   * MEMORY = 1024, 2048, 3072, or 4096
   * value = 1
   * MEMORY = 2048, 3072, 4096, 5120, 6144, 7168, or 8192
   * value = 2
   * MEMORY = 4096, 5120, 6144, 7168, 8192, 9216, 10240, 11264, 12288, 13312, 14336, 15360, or 16384
   * value = 4
   * MEMORY = 8192, 9216, 10240, 11264, 12288, 13312, 14336, 15360, 16384, 17408, 18432, 19456, 20480, 21504, 22528, 23552, 24576, 25600, 26624, 27648, 28672, 29696, or 30720
   * Value is a required field
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesResourceRequirements#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'JobDefinitionSpecForProviderContainerPropertiesResourceRequirements' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProviderContainerPropertiesResourceRequirements(obj: JobDefinitionSpecForProviderContainerPropertiesResourceRequirements | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resourceType': obj.resourceType,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Secret defines the secret to expose to your container. Secrets can be exposed to a container in the following ways:
 * - To inject sensitive data into your containers as environment variables, use the secrets container definition parameter.
 * - To reference sensitive information in the log configuration of a container, use the secretOptions container definition parameter.
 * For more information, see Specifying sensitive data (https://docs.aws.amazon.com/batch/latest/userguide/specifying-sensitive-data.html) in the Batch User Guide.
 *
 * @schema JobDefinitionSpecForProviderContainerPropertiesSecrets
 */
export interface JobDefinitionSpecForProviderContainerPropertiesSecrets {
  /**
   * The name of the secret.
   * Name is a required field
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesSecrets#name
   */
  readonly name: string;

  /**
   * The secret to expose to the container. The supported values are either the full ARN of the Secrets Manager secret or the full ARN of the parameter in the Amazon Web Services Systems Manager Parameter Store.
   * If the Amazon Web Services Systems Manager Parameter Store parameter exists in the same Region as the job you're launching, then you can use either the full ARN or name of the parameter. If the parameter exists in a different Region, then the full ARN must be specified.
   * ValueFrom is a required field
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesSecrets#valueFrom
   */
  readonly valueFrom: string;

}

/**
 * Converts an object of type 'JobDefinitionSpecForProviderContainerPropertiesSecrets' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProviderContainerPropertiesSecrets(obj: JobDefinitionSpecForProviderContainerPropertiesSecrets | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'valueFrom': obj.valueFrom,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Ulimit defines the ulimit settings to pass to the container.
 * This object isn't applicable to jobs that are running on Fargate resources.
 *
 * @schema JobDefinitionSpecForProviderContainerPropertiesUlimits
 */
export interface JobDefinitionSpecForProviderContainerPropertiesUlimits {
  /**
   * The hard limit for the ulimit type.
   * HardLimit is a required field
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesUlimits#hardLimit
   */
  readonly hardLimit: number;

  /**
   * The type of the ulimit.
   * Name is a required field
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesUlimits#name
   */
  readonly name: string;

  /**
   * The soft limit for the ulimit type.
   * SoftLimit is a required field
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesUlimits#softLimit
   */
  readonly softLimit: number;

}

/**
 * Converts an object of type 'JobDefinitionSpecForProviderContainerPropertiesUlimits' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProviderContainerPropertiesUlimits(obj: JobDefinitionSpecForProviderContainerPropertiesUlimits | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'hardLimit': obj.hardLimit,
    'name': obj.name,
    'softLimit': obj.softLimit,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Volume defines a data volume used in a job's container properties.
 *
 * @schema JobDefinitionSpecForProviderContainerPropertiesVolumes
 */
export interface JobDefinitionSpecForProviderContainerPropertiesVolumes {
  /**
   * This parameter is specified when you are using an Amazon Elastic File System file system for job storage. Jobs that are running on Fargate resources must specify a platformVersion of at least 1.4.0.
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesVolumes#efsVolumeConfiguration
   */
  readonly efsVolumeConfiguration?: JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfiguration;

  /**
   * The contents of the host parameter determine whether your data volume persists on the host container instance and where it is stored. If the host parameter is empty, then the Docker daemon assigns a host path for your data volume. However, the data isn't guaranteed to persist after the containers associated with it stop running.
   * This parameter isn't applicable to jobs that are running on Fargate resources and shouldn't be provided.
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesVolumes#host
   */
  readonly host?: JobDefinitionSpecForProviderContainerPropertiesVolumesHost;

  /**
   * The name of the volume. Up to 255 letters (uppercase and lowercase), numbers, hyphens, and underscores are allowed. This name is referenced in the sourceVolume parameter of container definition mountPoints.
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesVolumes#name
   */
  readonly name?: string;

}

/**
 * Converts an object of type 'JobDefinitionSpecForProviderContainerPropertiesVolumes' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProviderContainerPropertiesVolumes(obj: JobDefinitionSpecForProviderContainerPropertiesVolumes | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'efsVolumeConfiguration': toJson_JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfiguration(obj.efsVolumeConfiguration),
    'host': toJson_JobDefinitionSpecForProviderContainerPropertiesVolumesHost(obj.host),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * NodeRangeProperty defines the properties of the node range for a multi-node parallel job.
 *
 * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangeProperties
 */
export interface JobDefinitionSpecForProviderNodePropertiesNodeRangeProperties {
  /**
   * The container details for the node range.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangeProperties#container
   */
  readonly container?: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainer;

  /**
   * The range of nodes, using node index values. A range of 0:3 indicates nodes with index values of 0 through 3. If the starting range value is omitted (:n), then 0 is used to start the range. If the ending range value is omitted (n:), then the highest possible node index is used to end the range. Your accumulative node ranges must account for all nodes (0:n). You can nest node ranges, for example 0:10 and 4:5, in which case the 4:5 range properties override the 0:10 properties.
   * TargetNodes is a required field
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangeProperties#targetNodes
   */
  readonly targetNodes: string;

}

/**
 * Converts an object of type 'JobDefinitionSpecForProviderNodePropertiesNodeRangeProperties' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProviderNodePropertiesNodeRangeProperties(obj: JobDefinitionSpecForProviderNodePropertiesNodeRangeProperties | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'container': toJson_JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainer(obj.container),
    'targetNodes': obj.targetNodes,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * EvaluateOnExit specifies a set of conditions to be met, and an action to take (RETRY or EXIT) if all conditions are met.
 *
 * @schema JobDefinitionSpecForProviderRetryStrategyEvaluateOnExit
 */
export interface JobDefinitionSpecForProviderRetryStrategyEvaluateOnExit {
  /**
   * Specifies the action to take if all of the specified conditions (onStatusReason, onReason, and onExitCode) are met. The values aren't case sensitive. (AWS gives lowercase back!) Action is a required field
   *
   * @schema JobDefinitionSpecForProviderRetryStrategyEvaluateOnExit#action
   */
  readonly action: JobDefinitionSpecForProviderRetryStrategyEvaluateOnExitAction;

  /**
   * Contains a glob pattern to match against the decimal representation of the ExitCode returned for a job. The pattern can be up to 512 characters in length. It can contain only numbers, and can optionally end with an asterisk (*) so that only the start of the string needs to be an exact match.
   *
   * @schema JobDefinitionSpecForProviderRetryStrategyEvaluateOnExit#onExitCode
   */
  readonly onExitCode?: string;

  /**
   * Contains a glob pattern to match against the Reason returned for a job. The pattern can be up to 512 characters in length. It can contain letters, numbers, periods (.), colons (:), and white space (including spaces and tabs). It can optionally end with an asterisk (*) so that only the start of the string needs to be an exact match.
   *
   * @schema JobDefinitionSpecForProviderRetryStrategyEvaluateOnExit#onReason
   */
  readonly onReason?: string;

  /**
   * Contains a glob pattern to match against the StatusReason returned for a job. The pattern can be up to 512 characters in length. It can contain letters, numbers, periods (.), colons (:), and white space (including spaces or tabs). It can optionally end with an asterisk (*) so that only the start of the string needs to be an exact match.
   *
   * @schema JobDefinitionSpecForProviderRetryStrategyEvaluateOnExit#onStatusReason
   */
  readonly onStatusReason?: string;

}

/**
 * Converts an object of type 'JobDefinitionSpecForProviderRetryStrategyEvaluateOnExit' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProviderRetryStrategyEvaluateOnExit(obj: JobDefinitionSpecForProviderRetryStrategyEvaluateOnExit | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'action': obj.action,
    'onExitCode': obj.onExitCode,
    'onReason': obj.onReason,
    'onStatusReason': obj.onStatusReason,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema JobDefinitionSpecProviderConfigRefPolicyResolution
 */
export enum JobDefinitionSpecProviderConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema JobDefinitionSpecProviderConfigRefPolicyResolve
 */
export enum JobDefinitionSpecProviderConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Policies for referencing.
 *
 * @schema JobDefinitionSpecPublishConnectionDetailsToConfigRefPolicy
 */
export interface JobDefinitionSpecPublishConnectionDetailsToConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema JobDefinitionSpecPublishConnectionDetailsToConfigRefPolicy#resolution
   */
  readonly resolution?: JobDefinitionSpecPublishConnectionDetailsToConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema JobDefinitionSpecPublishConnectionDetailsToConfigRefPolicy#resolve
   */
  readonly resolve?: JobDefinitionSpecPublishConnectionDetailsToConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'JobDefinitionSpecPublishConnectionDetailsToConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecPublishConnectionDetailsToConfigRefPolicy(obj: JobDefinitionSpecPublishConnectionDetailsToConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema JobDefinitionSpecForProviderContainerPropertiesExecutionRoleArnRefPolicy
 */
export interface JobDefinitionSpecForProviderContainerPropertiesExecutionRoleArnRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesExecutionRoleArnRefPolicy#resolution
   */
  readonly resolution?: JobDefinitionSpecForProviderContainerPropertiesExecutionRoleArnRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesExecutionRoleArnRefPolicy#resolve
   */
  readonly resolve?: JobDefinitionSpecForProviderContainerPropertiesExecutionRoleArnRefPolicyResolve;

}

/**
 * Converts an object of type 'JobDefinitionSpecForProviderContainerPropertiesExecutionRoleArnRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProviderContainerPropertiesExecutionRoleArnRefPolicy(obj: JobDefinitionSpecForProviderContainerPropertiesExecutionRoleArnRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for selection.
 *
 * @schema JobDefinitionSpecForProviderContainerPropertiesExecutionRoleArnSelectorPolicy
 */
export interface JobDefinitionSpecForProviderContainerPropertiesExecutionRoleArnSelectorPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesExecutionRoleArnSelectorPolicy#resolution
   */
  readonly resolution?: JobDefinitionSpecForProviderContainerPropertiesExecutionRoleArnSelectorPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesExecutionRoleArnSelectorPolicy#resolve
   */
  readonly resolve?: JobDefinitionSpecForProviderContainerPropertiesExecutionRoleArnSelectorPolicyResolve;

}

/**
 * Converts an object of type 'JobDefinitionSpecForProviderContainerPropertiesExecutionRoleArnSelectorPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProviderContainerPropertiesExecutionRoleArnSelectorPolicy(obj: JobDefinitionSpecForProviderContainerPropertiesExecutionRoleArnSelectorPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema JobDefinitionSpecForProviderContainerPropertiesJobRoleArnRefPolicy
 */
export interface JobDefinitionSpecForProviderContainerPropertiesJobRoleArnRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesJobRoleArnRefPolicy#resolution
   */
  readonly resolution?: JobDefinitionSpecForProviderContainerPropertiesJobRoleArnRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesJobRoleArnRefPolicy#resolve
   */
  readonly resolve?: JobDefinitionSpecForProviderContainerPropertiesJobRoleArnRefPolicyResolve;

}

/**
 * Converts an object of type 'JobDefinitionSpecForProviderContainerPropertiesJobRoleArnRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProviderContainerPropertiesJobRoleArnRefPolicy(obj: JobDefinitionSpecForProviderContainerPropertiesJobRoleArnRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for selection.
 *
 * @schema JobDefinitionSpecForProviderContainerPropertiesJobRoleArnSelectorPolicy
 */
export interface JobDefinitionSpecForProviderContainerPropertiesJobRoleArnSelectorPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesJobRoleArnSelectorPolicy#resolution
   */
  readonly resolution?: JobDefinitionSpecForProviderContainerPropertiesJobRoleArnSelectorPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesJobRoleArnSelectorPolicy#resolve
   */
  readonly resolve?: JobDefinitionSpecForProviderContainerPropertiesJobRoleArnSelectorPolicyResolve;

}

/**
 * Converts an object of type 'JobDefinitionSpecForProviderContainerPropertiesJobRoleArnSelectorPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProviderContainerPropertiesJobRoleArnSelectorPolicy(obj: JobDefinitionSpecForProviderContainerPropertiesJobRoleArnSelectorPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Device defines a container instance host device.
 * This object isn't applicable to jobs that are running on Fargate resources and shouldn't be provided.
 *
 * @schema JobDefinitionSpecForProviderContainerPropertiesLinuxParametersDevices
 */
export interface JobDefinitionSpecForProviderContainerPropertiesLinuxParametersDevices {
  /**
   * The path inside the container that's used to expose the host device. By default, the hostPath value is used.
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesLinuxParametersDevices#containerPath
   */
  readonly containerPath?: string;

  /**
   * The path for the device on the host container instance.
   * HostPath is a required field
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesLinuxParametersDevices#hostPath
   */
  readonly hostPath: string;

  /**
   * The explicit permissions to provide to the container for the device. By default, the container has permissions for read, write, and mknod for the device.
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesLinuxParametersDevices#permissions
   */
  readonly permissions?: string[];

}

/**
 * Converts an object of type 'JobDefinitionSpecForProviderContainerPropertiesLinuxParametersDevices' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProviderContainerPropertiesLinuxParametersDevices(obj: JobDefinitionSpecForProviderContainerPropertiesLinuxParametersDevices | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'containerPath': obj.containerPath,
    'hostPath': obj.hostPath,
    'permissions': obj.permissions?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Tmpfs defines the container path, mount options, and size of the tmpfs mount.
 * This object isn't applicable to jobs that are running on Fargate resources.
 *
 * @schema JobDefinitionSpecForProviderContainerPropertiesLinuxParametersTmpfs
 */
export interface JobDefinitionSpecForProviderContainerPropertiesLinuxParametersTmpfs {
  /**
   * The absolute file path in the container where the tmpfs volume is mounted.
   * ContainerPath is a required field
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesLinuxParametersTmpfs#containerPath
   */
  readonly containerPath: string;

  /**
   * The list of tmpfs volume mount options.
   * Valid values: "defaults" | "ro" | "rw" | "suid" | "nosuid" | "dev" | "nodev" | "exec" | "noexec" | "sync" | "async" | "dirsync" | "remount" | "mand" | "nomand" | "atime" | "noatime" | "diratime" | "nodiratime" | "bind" | "rbind" | "unbindable" | "runbindable" | "private" | "rprivate" | "shared" | "rshared" | "slave" | "rslave" | "relatime" | "norelatime" | "strictatime" | "nostrictatime" | "mode" | "uid" | "gid" | "nr_inodes" | "nr_blocks" | "mpol"
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesLinuxParametersTmpfs#mountOptions
   */
  readonly mountOptions?: string[];

  /**
   * The size (in MiB) of the tmpfs volume.
   * Size is a required field
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesLinuxParametersTmpfs#size
   */
  readonly size: number;

}

/**
 * Converts an object of type 'JobDefinitionSpecForProviderContainerPropertiesLinuxParametersTmpfs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProviderContainerPropertiesLinuxParametersTmpfs(obj: JobDefinitionSpecForProviderContainerPropertiesLinuxParametersTmpfs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'containerPath': obj.containerPath,
    'mountOptions': obj.mountOptions?.map(y => y),
    'size': obj.size,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The log driver to use for the container. The valid values listed for this parameter are log drivers that the Amazon ECS container agent can communicate with by default.
 * The supported log drivers are awslogs, fluentd, gelf, json-file, journald, logentries, syslog, and splunk.
 * Jobs that are running on Fargate resources are restricted to the awslogs and splunk log drivers.
 * awslogs
 * Specifies the Amazon CloudWatch Logs logging driver. For more information, see Using the awslogs Log Driver (https://docs.aws.amazon.com/batch/latest/userguide/using_awslogs.html) in the Batch User Guide and Amazon CloudWatch Logs logging driver (https://docs.docker.com/config/containers/logging/awslogs/) in the Docker documentation.
 * fluentd
 * Specifies the Fluentd logging driver. For more information, including usage and options, see Fluentd logging driver (https://docs.docker.com/config/containers/logging/fluentd/) in the Docker documentation.
 * gelf
 * Specifies the Graylog Extended Format (GELF) logging driver. For more information, including usage and options, see Graylog Extended Format logging driver (https://docs.docker.com/config/containers/logging/gelf/) in the Docker documentation.
 * journald
 * Specifies the journald logging driver. For more information, including usage and options, see Journald logging driver (https://docs.docker.com/config/containers/logging/journald/) in the Docker documentation.
 * json-file
 * Specifies the JSON file logging driver. For more information, including usage and options, see JSON File logging driver (https://docs.docker.com/config/containers/logging/json-file/) in the Docker documentation.
 * splunk
 * Specifies the Splunk logging driver. For more information, including usage and options, see Splunk logging driver (https://docs.docker.com/config/containers/logging/splunk/) in the Docker documentation.
 * syslog
 * Specifies the syslog logging driver. For more information, including usage and options, see Syslog logging driver (https://docs.docker.com/config/containers/logging/syslog/) in the Docker documentation.
 * If you have a custom driver that's not listed earlier that you want to work with the Amazon ECS container agent, you can fork the Amazon ECS container agent project that's available on GitHub (https://github.com/aws/amazon-ecs-agent) and customize it to work with that driver. We encourage you to submit pull requests for changes that you want to have included. However, Amazon Web Services doesn't currently support running modified copies of this software.
 * This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log into your container instance and run the following command: sudo docker version | grep "Server API version"
 * LogDriver is a required field
 *
 * @schema JobDefinitionSpecForProviderContainerPropertiesLogConfigurationLogDriver
 */
export enum JobDefinitionSpecForProviderContainerPropertiesLogConfigurationLogDriver {
  /** json-file */
  JSON_HYPHEN_FILE = "json-file",
  /** syslog */
  SYSLOG = "syslog",
  /** journald */
  JOURNALD = "journald",
  /** gelf */
  GELF = "gelf",
  /** fluentd */
  FLUENTD = "fluentd",
  /** awslogs */
  AWSLOGS = "awslogs",
  /** splunk */
  SPLUNK = "splunk",
}

/**
 * Secret defines the secret to expose to your container. Secrets can be exposed to a container in the following ways:
 * - To inject sensitive data into your containers as environment variables, use the secrets container definition parameter.
 * - To reference sensitive information in the log configuration of a container, use the secretOptions container definition parameter.
 * For more information, see Specifying sensitive data (https://docs.aws.amazon.com/batch/latest/userguide/specifying-sensitive-data.html) in the Batch User Guide.
 *
 * @schema JobDefinitionSpecForProviderContainerPropertiesLogConfigurationSecretOptions
 */
export interface JobDefinitionSpecForProviderContainerPropertiesLogConfigurationSecretOptions {
  /**
   * The name of the secret.
   * Name is a required field
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesLogConfigurationSecretOptions#name
   */
  readonly name: string;

  /**
   * The secret to expose to the container. The supported values are either the full ARN of the Secrets Manager secret or the full ARN of the parameter in the Amazon Web Services Systems Manager Parameter Store.
   * If the Amazon Web Services Systems Manager Parameter Store parameter exists in the same Region as the job you're launching, then you can use either the full ARN or name of the parameter. If the parameter exists in a different Region, then the full ARN must be specified.
   * ValueFrom is a required field
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesLogConfigurationSecretOptions#valueFrom
   */
  readonly valueFrom: string;

}

/**
 * Converts an object of type 'JobDefinitionSpecForProviderContainerPropertiesLogConfigurationSecretOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProviderContainerPropertiesLogConfigurationSecretOptions(obj: JobDefinitionSpecForProviderContainerPropertiesLogConfigurationSecretOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'valueFrom': obj.valueFrom,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Indicates whether the job should have a public IP address. For a job that is running on Fargate resources in a private subnet to send outbound traffic to the internet (for example, to pull container images), the private subnet requires a NAT gateway be attached to route requests to the internet. For more information, see Amazon ECS task networking (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html). The default value is "DISABLED".
 *
 * @schema JobDefinitionSpecForProviderContainerPropertiesNetworkConfigurationAssignPublicIp
 */
export enum JobDefinitionSpecForProviderContainerPropertiesNetworkConfigurationAssignPublicIp {
  /** ENABLED */
  ENABLED = "ENABLED",
  /** DISABLED */
  DISABLED = "DISABLED",
}

/**
 * The type of resource to assign to a container. The supported resources include GPU, MEMORY, and VCPU.
 * Type is a required field
 *
 * @schema JobDefinitionSpecForProviderContainerPropertiesResourceRequirementsResourceType
 */
export enum JobDefinitionSpecForProviderContainerPropertiesResourceRequirementsResourceType {
  /** GPU */
  GPU = "GPU",
  /** MEMORY */
  MEMORY = "MEMORY",
  /** VCPU */
  VCPU = "VCPU",
}

/**
 * This parameter is specified when you are using an Amazon Elastic File System file system for job storage. Jobs that are running on Fargate resources must specify a platformVersion of at least 1.4.0.
 *
 * @schema JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfiguration
 */
export interface JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfiguration {
  /**
   * The authorization configuration details for the Amazon EFS file system.
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfiguration#authorizationConfig
   */
  readonly authorizationConfig?: JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationAuthorizationConfig;

  /**
   * The Amazon EFS file system ID to use.
   * FileSystemID is a required field
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfiguration#fileSystemId
   */
  readonly fileSystemId?: string;

  /**
   * FileSystemIDRef are references to Filesystem used to set the FileSystemID.
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfiguration#fileSystemIdRef
   */
  readonly fileSystemIdRef?: JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationFileSystemIdRef;

  /**
   * FileSystemIDSelector selects references to Filesystem used to set the FileSystemID.
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfiguration#fileSystemIdSelector
   */
  readonly fileSystemIdSelector?: JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationFileSystemIdSelector;

  /**
   * The directory within the Amazon EFS file system to mount as the root directory inside the host. If this parameter is omitted, the root of the Amazon EFS volume is used instead. Specifying / has the same effect as omitting this parameter. The maximum length is 4,096 characters.
   * If an EFS access point is specified in the authorizationConfig, the root directory parameter must either be omitted or set to /, which enforces the path set on the Amazon EFS access point.
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfiguration#rootDirectory
   */
  readonly rootDirectory?: string;

  /**
   * Determines whether to enable encryption for Amazon EFS data in transit between the Amazon ECS host and the Amazon EFS server. Transit encryption must be enabled if Amazon EFS IAM authorization is used. If this parameter is omitted, the default value of DISABLED is used. For more information, see Encrypting data in transit (https://docs.aws.amazon.com/efs/latest/ug/encryption-in-transit.html) in the Amazon Elastic File System User Guide.
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfiguration#transitEncryption
   */
  readonly transitEncryption?: JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationTransitEncryption;

  /**
   * The port to use when sending encrypted data between the Amazon ECS host and the Amazon EFS server. If you don't specify a transit encryption port, it uses the port selection strategy that the Amazon EFS mount helper uses. The value must be between 0 and 65,535. For more information, see EFS Mount Helper (https://docs.aws.amazon.com/efs/latest/ug/efs-mount-helper.html) in the Amazon Elastic File System User Guide.
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfiguration#transitEncryptionPort
   */
  readonly transitEncryptionPort?: number;

}

/**
 * Converts an object of type 'JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfiguration(obj: JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'authorizationConfig': toJson_JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationAuthorizationConfig(obj.authorizationConfig),
    'fileSystemId': obj.fileSystemId,
    'fileSystemIdRef': toJson_JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationFileSystemIdRef(obj.fileSystemIdRef),
    'fileSystemIdSelector': toJson_JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationFileSystemIdSelector(obj.fileSystemIdSelector),
    'rootDirectory': obj.rootDirectory,
    'transitEncryption': obj.transitEncryption,
    'transitEncryptionPort': obj.transitEncryptionPort,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The contents of the host parameter determine whether your data volume persists on the host container instance and where it is stored. If the host parameter is empty, then the Docker daemon assigns a host path for your data volume. However, the data isn't guaranteed to persist after the containers associated with it stop running.
 * This parameter isn't applicable to jobs that are running on Fargate resources and shouldn't be provided.
 *
 * @schema JobDefinitionSpecForProviderContainerPropertiesVolumesHost
 */
export interface JobDefinitionSpecForProviderContainerPropertiesVolumesHost {
  /**
   * The path on the host container instance that's presented to the container. If this parameter is empty, then the Docker daemon has assigned a host path for you. If this parameter contains a file location, then the data volume persists at the specified location on the host container instance until you delete it manually. If the source path location doesn't exist on the host container instance, the Docker daemon creates it. If the location does exist, the contents of the source path folder are exported.
   * This parameter isn't applicable to jobs that run on Fargate resources and shouldn't be provided.
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesVolumesHost#sourcePath
   */
  readonly sourcePath?: string;

}

/**
 * Converts an object of type 'JobDefinitionSpecForProviderContainerPropertiesVolumesHost' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProviderContainerPropertiesVolumesHost(obj: JobDefinitionSpecForProviderContainerPropertiesVolumesHost | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'sourcePath': obj.sourcePath,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The container details for the node range.
 *
 * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainer
 */
export interface JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainer {
  /**
   * The command that's passed to the container. This parameter maps to Cmd in the Create a container (https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the Docker Remote API (https://docs.docker.com/engine/api/v1.23/) and the COMMAND parameter to docker run (https://docs.docker.com/engine/reference/run/). For more information, see https://docs.docker.com/engine/reference/builder/#cmd (https://docs.docker.com/engine/reference/builder/#cmd).
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainer#command
   */
  readonly command?: string[];

  /**
   * The environment variables to pass to a container. This parameter maps to Env in the Create a container (https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the Docker Remote API (https://docs.docker.com/engine/api/v1.23/) and the --env option to docker run (https://docs.docker.com/engine/reference/run/).
   * We don't recommend using plaintext environment variables for sensitive information, such as credential data.
   * Environment variables must not start with AWS_BATCH; this naming convention is reserved for variables that are set by the Batch service.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainer#environment
   */
  readonly environment?: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerEnvironment[];

  /**
   * ExecutionRoleARNRef is a reference to an ARN of the IAM role used to set the ExecutionRoleARN.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainer#executionRoleARNRef
   */
  readonly executionRoleArnRef?: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerExecutionRoleArnRef;

  /**
   * ExecutionRoleARNSelector selects references to an ARN of the IAM role used to set the ExecutionRoleARN.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainer#executionRoleARNSelector
   */
  readonly executionRoleArnSelector?: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerExecutionRoleArnSelector;

  /**
   * The Amazon Resource Name (ARN) of the execution role that Batch can assume. For jobs that run on Fargate resources, you must provide an execution role. For more information, see Batch execution IAM role (https://docs.aws.amazon.com/batch/latest/userguide/execution-IAM-role.html) in the Batch User Guide.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainer#executionRoleArn
   */
  readonly executionRoleArn?: string;

  /**
   * The platform configuration for jobs that are running on Fargate resources. Jobs that are running on EC2 resources must not specify this parameter.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainer#fargatePlatformConfiguration
   */
  readonly fargatePlatformConfiguration?: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerFargatePlatformConfiguration;

  /**
   * The image used to start a container. This string is passed directly to the Docker daemon. Images in the Docker Hub registry are available by default. Other repositories are specified with repository-url/image:tag . Up to 255 letters (uppercase and lowercase), numbers, hyphens, underscores, colons, periods, forward slashes, and number signs are allowed. This parameter maps to Image in the Create a container (https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the Docker Remote API (https://docs.docker.com/engine/api/v1.23/) and the IMAGE parameter of docker run (https://docs.docker.com/engine/reference/run/).
   * Docker image architecture must match the processor architecture of the compute resources that they're scheduled on. For example, ARM-based Docker images can only run on ARM-based compute resources.
   * * Images in Amazon ECR repositories use the full registry and repository URI (for example, 012345678910.dkr.ecr.<region-name>.amazonaws.com/<repository-name>).
   * * Images in official repositories on Docker Hub use a single name (for example, ubuntu or mongo).
   * * Images in other repositories on Docker Hub are qualified with an organization name (for example, amazon/amazon-ecs-agent).
   * * Images in other online repositories are qualified further by a domain name (for example, quay.io/assemblyline/ubuntu).
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainer#image
   */
  readonly image?: string;

  /**
   * The instance type to use for a multi-node parallel job. All node groups in a multi-node parallel job must use the same instance type.
   * This parameter isn't applicable to single-node container jobs or jobs that run on Fargate resources, and shouldn't be provided.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainer#instanceType
   */
  readonly instanceType?: string;

  /**
   * JobRoleARNRef is a reference to an ARN of the IAM role used to set the JobRoleARN.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainer#jobRoleARNRef
   */
  readonly jobRoleArnRef?: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerJobRoleArnRef;

  /**
   * JobRoleARNSelector selects references to an ARN of the IAM role used to set the JobRoleARN.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainer#jobRoleARNSelector
   */
  readonly jobRoleArnSelector?: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerJobRoleArnSelector;

  /**
   * The Amazon Resource Name (ARN) of the IAM role that the container can assume for Amazon Web Services permissions. For more information, see IAM Roles for Tasks (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-iam-roles.html) in the Amazon Elastic Container Service Developer Guide.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainer#jobRoleArn
   */
  readonly jobRoleArn?: string;

  /**
   * Linux-specific modifications that are applied to the container, such as details for device mappings.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainer#linuxParameters
   */
  readonly linuxParameters?: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerLinuxParameters;

  /**
   * The log configuration specification for the container.
   * This parameter maps to LogConfig in the Create a container (https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the Docker Remote API (https://docs.docker.com/engine/api/v1.23/) and the --log-driver option to docker run (https://docs.docker.com/engine/reference/run/). By default, containers use the same logging driver that the Docker daemon uses. However the container might use a different logging driver than the Docker daemon by specifying a log driver with this parameter in the container definition. To use a different logging driver for a container, the log system must be configured properly on the container instance (or on a different log server for remote logging options). For more information on the options for different supported log drivers, see Configure logging drivers (https://docs.docker.com/engine/admin/logging/overview/) in the Docker documentation.
   * Batch currently supports a subset of the logging drivers available to the Docker daemon (shown in the LogConfiguration data type).
   * This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log into your container instance and run the following command: sudo docker version | grep "Server API version"
   * The Amazon ECS container agent running on a container instance must register the logging drivers available on that instance with the ECS_AVAILABLE_LOGGING_DRIVERS environment variable before containers placed on that instance can use these log configuration options. For more information, see Amazon ECS Container Agent Configuration (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html) in the Amazon Elastic Container Service Developer Guide.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainer#logConfiguration
   */
  readonly logConfiguration?: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerLogConfiguration;

  /**
   * The mount points for data volumes in your container. This parameter maps to Volumes in the Create a container (https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the Docker Remote API (https://docs.docker.com/engine/api/v1.23/) and the --volume option to docker run (https://docs.docker.com/engine/reference/run/).
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainer#mountPoints
   */
  readonly mountPoints?: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerMountPoints[];

  /**
   * The network configuration for jobs that are running on Fargate resources. Jobs that are running on EC2 resources must not specify this parameter.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainer#networkConfiguration
   */
  readonly networkConfiguration?: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerNetworkConfiguration;

  /**
   * When this parameter is true, the container is given elevated permissions on the host container instance (similar to the root user). This parameter maps to Privileged in the Create a container (https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the Docker Remote API (https://docs.docker.com/engine/api/v1.23/) and the --privileged option to docker run (https://docs.docker.com/engine/reference/run/). The default value is false.
   * This parameter isn't applicable to jobs that are running on Fargate resources and shouldn't be provided, or specified as false.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainer#privileged
   */
  readonly privileged?: boolean;

  /**
   * When this parameter is true, the container is given read-only access to its root file system. This parameter maps to ReadonlyRootfs in the Create a container (https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the Docker Remote API (https://docs.docker.com/engine/api/v1.23/) and the --read-only option to docker run.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainer#readonlyRootFilesystem
   */
  readonly readonlyRootFilesystem?: boolean;

  /**
   * The type and amount of resources to assign to a container. The supported resources include GPU, MEMORY, and VCPU.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainer#resourceRequirements
   */
  readonly resourceRequirements?: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerResourceRequirements[];

  /**
   * The secrets for the container. For more information, see Specifying sensitive data (https://docs.aws.amazon.com/batch/latest/userguide/specifying-sensitive-data.html) in the Batch User Guide.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainer#secrets
   */
  readonly secrets?: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerSecrets[];

  /**
   * A list of ulimits to set in the container. This parameter maps to Ulimits in the Create a container (https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the Docker Remote API (https://docs.docker.com/engine/api/v1.23/) and the --ulimit option to docker run (https://docs.docker.com/engine/reference/run/).
   * This parameter isn't applicable to jobs that are running on Fargate resources and shouldn't be provided.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainer#ulimits
   */
  readonly ulimits?: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerUlimits[];

  /**
   * The user name to use inside the container. This parameter maps to User in the Create a container (https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the Docker Remote API (https://docs.docker.com/engine/api/v1.23/) and the --user option to docker run (https://docs.docker.com/engine/reference/run/).
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainer#user
   */
  readonly user?: string;

  /**
   * A list of data volumes used in a job.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainer#volumes
   */
  readonly volumes?: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumes[];

}

/**
 * Converts an object of type 'JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainer' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainer(obj: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainer | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'command': obj.command?.map(y => y),
    'environment': obj.environment?.map(y => toJson_JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerEnvironment(y)),
    'executionRoleARNRef': toJson_JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerExecutionRoleArnRef(obj.executionRoleArnRef),
    'executionRoleARNSelector': toJson_JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerExecutionRoleArnSelector(obj.executionRoleArnSelector),
    'executionRoleArn': obj.executionRoleArn,
    'fargatePlatformConfiguration': toJson_JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerFargatePlatformConfiguration(obj.fargatePlatformConfiguration),
    'image': obj.image,
    'instanceType': obj.instanceType,
    'jobRoleARNRef': toJson_JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerJobRoleArnRef(obj.jobRoleArnRef),
    'jobRoleARNSelector': toJson_JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerJobRoleArnSelector(obj.jobRoleArnSelector),
    'jobRoleArn': obj.jobRoleArn,
    'linuxParameters': toJson_JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerLinuxParameters(obj.linuxParameters),
    'logConfiguration': toJson_JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerLogConfiguration(obj.logConfiguration),
    'mountPoints': obj.mountPoints?.map(y => toJson_JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerMountPoints(y)),
    'networkConfiguration': toJson_JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerNetworkConfiguration(obj.networkConfiguration),
    'privileged': obj.privileged,
    'readonlyRootFilesystem': obj.readonlyRootFilesystem,
    'resourceRequirements': obj.resourceRequirements?.map(y => toJson_JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerResourceRequirements(y)),
    'secrets': obj.secrets?.map(y => toJson_JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerSecrets(y)),
    'ulimits': obj.ulimits?.map(y => toJson_JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerUlimits(y)),
    'user': obj.user,
    'volumes': obj.volumes?.map(y => toJson_JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumes(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Specifies the action to take if all of the specified conditions (onStatusReason, onReason, and onExitCode) are met. The values aren't case sensitive. (AWS gives lowercase back!) Action is a required field
 *
 * @schema JobDefinitionSpecForProviderRetryStrategyEvaluateOnExitAction
 */
export enum JobDefinitionSpecForProviderRetryStrategyEvaluateOnExitAction {
  /** retry */
  RETRY = "retry",
  /** exit */
  EXIT = "exit",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema JobDefinitionSpecPublishConnectionDetailsToConfigRefPolicyResolution
 */
export enum JobDefinitionSpecPublishConnectionDetailsToConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema JobDefinitionSpecPublishConnectionDetailsToConfigRefPolicyResolve
 */
export enum JobDefinitionSpecPublishConnectionDetailsToConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema JobDefinitionSpecForProviderContainerPropertiesExecutionRoleArnRefPolicyResolution
 */
export enum JobDefinitionSpecForProviderContainerPropertiesExecutionRoleArnRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema JobDefinitionSpecForProviderContainerPropertiesExecutionRoleArnRefPolicyResolve
 */
export enum JobDefinitionSpecForProviderContainerPropertiesExecutionRoleArnRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema JobDefinitionSpecForProviderContainerPropertiesExecutionRoleArnSelectorPolicyResolution
 */
export enum JobDefinitionSpecForProviderContainerPropertiesExecutionRoleArnSelectorPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema JobDefinitionSpecForProviderContainerPropertiesExecutionRoleArnSelectorPolicyResolve
 */
export enum JobDefinitionSpecForProviderContainerPropertiesExecutionRoleArnSelectorPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema JobDefinitionSpecForProviderContainerPropertiesJobRoleArnRefPolicyResolution
 */
export enum JobDefinitionSpecForProviderContainerPropertiesJobRoleArnRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema JobDefinitionSpecForProviderContainerPropertiesJobRoleArnRefPolicyResolve
 */
export enum JobDefinitionSpecForProviderContainerPropertiesJobRoleArnRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema JobDefinitionSpecForProviderContainerPropertiesJobRoleArnSelectorPolicyResolution
 */
export enum JobDefinitionSpecForProviderContainerPropertiesJobRoleArnSelectorPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema JobDefinitionSpecForProviderContainerPropertiesJobRoleArnSelectorPolicyResolve
 */
export enum JobDefinitionSpecForProviderContainerPropertiesJobRoleArnSelectorPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * The authorization configuration details for the Amazon EFS file system.
 *
 * @schema JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationAuthorizationConfig
 */
export interface JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationAuthorizationConfig {
  /**
   * The Amazon EFS access point ID to use. If an access point is specified, the root directory value specified in the EFSVolumeConfiguration must either be omitted or set to / which will enforce the path set on the EFS access point. If an access point is used, transit encryption must be enabled in the EFSVolumeConfiguration. For more information, see Working with Amazon EFS Access Points (https://docs.aws.amazon.com/efs/latest/ug/efs-access-points.html) in the Amazon Elastic File System User Guide.
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationAuthorizationConfig#accessPointId
   */
  readonly accessPointId?: string;

  /**
   * AccessPointIDRef are references to AccessPoint used to set the AccessPointID.
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationAuthorizationConfig#accessPointIdRef
   */
  readonly accessPointIdRef?: JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdRef;

  /**
   * AccessPointIDSelector selects references to AccessPoint used to set the AccessPointID.
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationAuthorizationConfig#accessPointIdSelector
   */
  readonly accessPointIdSelector?: JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdSelector;

  /**
   * Whether or not to use the Batch job IAM role defined in a job definition when mounting the Amazon EFS file system. If enabled, transit encryption must be enabled in the EFSVolumeConfiguration. If this parameter is omitted, the default value of DISABLED is used. For more information, see Using Amazon EFS Access Points (https://docs.aws.amazon.com/batch/latest/userguide/efs-volumes.html#efs-volume-accesspoints) in the Batch User Guide. EFS IAM authorization requires that TransitEncryption be ENABLED and that a JobRoleArn is specified.
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationAuthorizationConfig#iam
   */
  readonly iam?: JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationAuthorizationConfigIam;

}

/**
 * Converts an object of type 'JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationAuthorizationConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationAuthorizationConfig(obj: JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationAuthorizationConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'accessPointId': obj.accessPointId,
    'accessPointIdRef': toJson_JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdRef(obj.accessPointIdRef),
    'accessPointIdSelector': toJson_JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdSelector(obj.accessPointIdSelector),
    'iam': obj.iam,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * FileSystemIDRef are references to Filesystem used to set the FileSystemID.
 *
 * @schema JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationFileSystemIdRef
 */
export interface JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationFileSystemIdRef {
  /**
   * Name of the referenced object.
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationFileSystemIdRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationFileSystemIdRef#policy
   */
  readonly policy?: JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationFileSystemIdRefPolicy;

}

/**
 * Converts an object of type 'JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationFileSystemIdRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationFileSystemIdRef(obj: JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationFileSystemIdRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationFileSystemIdRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * FileSystemIDSelector selects references to Filesystem used to set the FileSystemID.
 *
 * @schema JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationFileSystemIdSelector
 */
export interface JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationFileSystemIdSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationFileSystemIdSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationFileSystemIdSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

  /**
   * Policies for selection.
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationFileSystemIdSelector#policy
   */
  readonly policy?: JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationFileSystemIdSelectorPolicy;

}

/**
 * Converts an object of type 'JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationFileSystemIdSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationFileSystemIdSelector(obj: JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationFileSystemIdSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchControllerRef': obj.matchControllerRef,
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'policy': toJson_JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationFileSystemIdSelectorPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Determines whether to enable encryption for Amazon EFS data in transit between the Amazon ECS host and the Amazon EFS server. Transit encryption must be enabled if Amazon EFS IAM authorization is used. If this parameter is omitted, the default value of DISABLED is used. For more information, see Encrypting data in transit (https://docs.aws.amazon.com/efs/latest/ug/encryption-in-transit.html) in the Amazon Elastic File System User Guide.
 *
 * @schema JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationTransitEncryption
 */
export enum JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationTransitEncryption {
  /** ENABLED */
  ENABLED = "ENABLED",
  /** DISABLED */
  DISABLED = "DISABLED",
}

/**
 * KeyValuePair defines a key-value pair object.
 *
 * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerEnvironment
 */
export interface JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerEnvironment {
  /**
   * The name of the key-value pair. For environment variables, this is the name of the environment variable.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerEnvironment#name
   */
  readonly name?: string;

  /**
   * The value of the key-value pair. For environment variables, this is the value of the environment variable.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerEnvironment#value
   */
  readonly value?: string;

}

/**
 * Converts an object of type 'JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerEnvironment' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerEnvironment(obj: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerEnvironment | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ExecutionRoleARNRef is a reference to an ARN of the IAM role used to set the ExecutionRoleARN.
 *
 * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerExecutionRoleArnRef
 */
export interface JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerExecutionRoleArnRef {
  /**
   * Name of the referenced object.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerExecutionRoleArnRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerExecutionRoleArnRef#policy
   */
  readonly policy?: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerExecutionRoleArnRefPolicy;

}

/**
 * Converts an object of type 'JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerExecutionRoleArnRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerExecutionRoleArnRef(obj: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerExecutionRoleArnRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerExecutionRoleArnRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ExecutionRoleARNSelector selects references to an ARN of the IAM role used to set the ExecutionRoleARN.
 *
 * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerExecutionRoleArnSelector
 */
export interface JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerExecutionRoleArnSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerExecutionRoleArnSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerExecutionRoleArnSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

  /**
   * Policies for selection.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerExecutionRoleArnSelector#policy
   */
  readonly policy?: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerExecutionRoleArnSelectorPolicy;

}

/**
 * Converts an object of type 'JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerExecutionRoleArnSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerExecutionRoleArnSelector(obj: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerExecutionRoleArnSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchControllerRef': obj.matchControllerRef,
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'policy': toJson_JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerExecutionRoleArnSelectorPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The platform configuration for jobs that are running on Fargate resources. Jobs that are running on EC2 resources must not specify this parameter.
 *
 * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerFargatePlatformConfiguration
 */
export interface JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerFargatePlatformConfiguration {
  /**
   * The Fargate platform version where the jobs are running. A platform version is specified only for jobs that are running on Fargate resources. If one isn't specified, the LATEST platform version is used by default. This uses a recent, approved version of the Fargate platform for compute resources. For more information, see Fargate platform versions (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html) in the Amazon Elastic Container Service Developer Guide.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerFargatePlatformConfiguration#platformVersion
   */
  readonly platformVersion?: string;

}

/**
 * Converts an object of type 'JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerFargatePlatformConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerFargatePlatformConfiguration(obj: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerFargatePlatformConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'platformVersion': obj.platformVersion,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * JobRoleARNRef is a reference to an ARN of the IAM role used to set the JobRoleARN.
 *
 * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerJobRoleArnRef
 */
export interface JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerJobRoleArnRef {
  /**
   * Name of the referenced object.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerJobRoleArnRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerJobRoleArnRef#policy
   */
  readonly policy?: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerJobRoleArnRefPolicy;

}

/**
 * Converts an object of type 'JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerJobRoleArnRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerJobRoleArnRef(obj: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerJobRoleArnRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerJobRoleArnRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * JobRoleARNSelector selects references to an ARN of the IAM role used to set the JobRoleARN.
 *
 * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerJobRoleArnSelector
 */
export interface JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerJobRoleArnSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerJobRoleArnSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerJobRoleArnSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

  /**
   * Policies for selection.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerJobRoleArnSelector#policy
   */
  readonly policy?: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerJobRoleArnSelectorPolicy;

}

/**
 * Converts an object of type 'JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerJobRoleArnSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerJobRoleArnSelector(obj: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerJobRoleArnSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchControllerRef': obj.matchControllerRef,
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'policy': toJson_JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerJobRoleArnSelectorPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Linux-specific modifications that are applied to the container, such as details for device mappings.
 *
 * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerLinuxParameters
 */
export interface JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerLinuxParameters {
  /**
   * Any host devices to expose to the container. This parameter maps to Devices in the Create a container (https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the Docker Remote API (https://docs.docker.com/engine/api/v1.23/) and the --device option to docker run (https://docs.docker.com/engine/reference/run/).
   * This parameter isn't applicable to jobs that are running on Fargate resources and shouldn't be provided.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerLinuxParameters#devices
   */
  readonly devices?: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerLinuxParametersDevices[];

  /**
   * If true, run an init process inside the container that forwards signals and reaps processes. This parameter maps to the --init option to docker run (https://docs.docker.com/engine/reference/run/). This parameter requires version 1.25 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log into your container instance and run the following command: sudo docker version | grep "Server API version"
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerLinuxParameters#initProcessEnabled
   */
  readonly initProcessEnabled?: boolean;

  /**
   * The total amount of swap memory (in MiB) a container can use. This parameter is translated to the --memory-swap option to docker run (https://docs.docker.com/engine/reference/run/) where the value is the sum of the container memory plus the maxSwap value. For more information, see --memory-swap details (https://docs.docker.com/config/containers/resource_constraints/#--memory-swap-details) in the Docker documentation.
   * If a maxSwap value of 0 is specified, the container doesn't use swap. Accepted values are 0 or any positive integer. If the maxSwap parameter is omitted, the container doesn't use the swap configuration for the container instance it is running on. A maxSwap value must be set for the swappiness parameter to be used.
   * This parameter isn't applicable to jobs that are running on Fargate resources and shouldn't be provided.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerLinuxParameters#maxSwap
   */
  readonly maxSwap?: number;

  /**
   * The value for the size (in MiB) of the /dev/shm volume. This parameter maps to the --shm-size option to docker run (https://docs.docker.com/engine/reference/run/).
   * This parameter isn't applicable to jobs that are running on Fargate resources and shouldn't be provided.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerLinuxParameters#sharedMemorySize
   */
  readonly sharedMemorySize?: number;

  /**
   * This allows you to tune a container's memory swappiness behavior. A swappiness value of 0 causes swapping not to happen unless absolutely necessary. A swappiness value of 100 causes pages to be swapped very aggressively. Accepted values are whole numbers between 0 and 100. If the swappiness parameter isn't specified, a default value of 60 is used. If a value isn't specified for maxSwap, then this parameter is ignored. If maxSwap is set to 0, the container doesn't use swap. This parameter maps to the --memory-swappiness option to docker run (https://docs.docker.com/engine/reference/run/).
   * Consider the following when you use a per-container swap configuration.
   * * Swap space must be enabled and allocated on the container instance for the containers to use. The Amazon ECS optimized AMIs don't have swap enabled by default. You must enable swap on the instance to use this feature. For more information, see Instance Store Swap Volumes (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-store-swap-volumes.html) in the Amazon EC2 User Guide for Linux Instances or How do I allocate memory to work as swap space in an Amazon EC2 instance by using a swap file? (http://aws.amazon.com/premiumsupport/knowledge-center/ec2-memory-swap-file/)
   * * The swap space parameters are only supported for job definitions using EC2 resources.
   * * If the maxSwap and swappiness parameters are omitted from a job definition, each container will have a default swappiness value of 60, and the total swap usage will be limited to two times the memory reservation of the container.
   * This parameter isn't applicable to jobs that are running on Fargate resources and shouldn't be provided.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerLinuxParameters#swappiness
   */
  readonly swappiness?: number;

  /**
   * The container path, mount options, and size (in MiB) of the tmpfs mount. This parameter maps to the --tmpfs option to docker run (https://docs.docker.com/engine/reference/run/).
   * This parameter isn't applicable to jobs that are running on Fargate resources and shouldn't be provided.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerLinuxParameters#tmpfs
   */
  readonly tmpfs?: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerLinuxParametersTmpfs[];

}

/**
 * Converts an object of type 'JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerLinuxParameters' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerLinuxParameters(obj: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerLinuxParameters | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'devices': obj.devices?.map(y => toJson_JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerLinuxParametersDevices(y)),
    'initProcessEnabled': obj.initProcessEnabled,
    'maxSwap': obj.maxSwap,
    'sharedMemorySize': obj.sharedMemorySize,
    'swappiness': obj.swappiness,
    'tmpfs': obj.tmpfs?.map(y => toJson_JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerLinuxParametersTmpfs(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The log configuration specification for the container.
 * This parameter maps to LogConfig in the Create a container (https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the Docker Remote API (https://docs.docker.com/engine/api/v1.23/) and the --log-driver option to docker run (https://docs.docker.com/engine/reference/run/). By default, containers use the same logging driver that the Docker daemon uses. However the container might use a different logging driver than the Docker daemon by specifying a log driver with this parameter in the container definition. To use a different logging driver for a container, the log system must be configured properly on the container instance (or on a different log server for remote logging options). For more information on the options for different supported log drivers, see Configure logging drivers (https://docs.docker.com/engine/admin/logging/overview/) in the Docker documentation.
 * Batch currently supports a subset of the logging drivers available to the Docker daemon (shown in the LogConfiguration data type).
 * This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log into your container instance and run the following command: sudo docker version | grep "Server API version"
 * The Amazon ECS container agent running on a container instance must register the logging drivers available on that instance with the ECS_AVAILABLE_LOGGING_DRIVERS environment variable before containers placed on that instance can use these log configuration options. For more information, see Amazon ECS Container Agent Configuration (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html) in the Amazon Elastic Container Service Developer Guide.
 *
 * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerLogConfiguration
 */
export interface JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerLogConfiguration {
  /**
   * The log driver to use for the container. The valid values listed for this parameter are log drivers that the Amazon ECS container agent can communicate with by default.
   * The supported log drivers are awslogs, fluentd, gelf, json-file, journald, logentries, syslog, and splunk.
   * Jobs that are running on Fargate resources are restricted to the awslogs and splunk log drivers.
   * awslogs
   * Specifies the Amazon CloudWatch Logs logging driver. For more information, see Using the awslogs Log Driver (https://docs.aws.amazon.com/batch/latest/userguide/using_awslogs.html) in the Batch User Guide and Amazon CloudWatch Logs logging driver (https://docs.docker.com/config/containers/logging/awslogs/) in the Docker documentation.
   * fluentd
   * Specifies the Fluentd logging driver. For more information, including usage and options, see Fluentd logging driver (https://docs.docker.com/config/containers/logging/fluentd/) in the Docker documentation.
   * gelf
   * Specifies the Graylog Extended Format (GELF) logging driver. For more information, including usage and options, see Graylog Extended Format logging driver (https://docs.docker.com/config/containers/logging/gelf/) in the Docker documentation.
   * journald
   * Specifies the journald logging driver. For more information, including usage and options, see Journald logging driver (https://docs.docker.com/config/containers/logging/journald/) in the Docker documentation.
   * json-file
   * Specifies the JSON file logging driver. For more information, including usage and options, see JSON File logging driver (https://docs.docker.com/config/containers/logging/json-file/) in the Docker documentation.
   * splunk
   * Specifies the Splunk logging driver. For more information, including usage and options, see Splunk logging driver (https://docs.docker.com/config/containers/logging/splunk/) in the Docker documentation.
   * syslog
   * Specifies the syslog logging driver. For more information, including usage and options, see Syslog logging driver (https://docs.docker.com/config/containers/logging/syslog/) in the Docker documentation.
   * If you have a custom driver that's not listed earlier that you want to work with the Amazon ECS container agent, you can fork the Amazon ECS container agent project that's available on GitHub (https://github.com/aws/amazon-ecs-agent) and customize it to work with that driver. We encourage you to submit pull requests for changes that you want to have included. However, Amazon Web Services doesn't currently support running modified copies of this software.
   * This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log into your container instance and run the following command: sudo docker version | grep "Server API version"
   * LogDriver is a required field
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerLogConfiguration#logDriver
   */
  readonly logDriver: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerLogConfigurationLogDriver;

  /**
   * The configuration options to send to the log driver. This parameter requires version 1.19 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log into your container instance and run the following command: sudo docker version | grep "Server API version"
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerLogConfiguration#options
   */
  readonly options?: { [key: string]: string };

  /**
   * The secrets to pass to the log configuration. For more information, see Specifying Sensitive Data (https://docs.aws.amazon.com/batch/latest/userguide/specifying-sensitive-data.html) in the Batch User Guide.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerLogConfiguration#secretOptions
   */
  readonly secretOptions?: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerLogConfigurationSecretOptions[];

}

/**
 * Converts an object of type 'JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerLogConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerLogConfiguration(obj: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerLogConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'logDriver': obj.logDriver,
    'options': ((obj.options) === undefined) ? undefined : (Object.entries(obj.options).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'secretOptions': obj.secretOptions?.map(y => toJson_JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerLogConfigurationSecretOptions(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * MountPoint defines the details on a Docker volume mount point that's used in a job's container properties. This parameter maps to Volumes in the Create a container (https://docs.docker.com/engine/reference/api/docker_remote_api_v1.19/#create-a-container) section of the Docker Remote API and the --volume option to docker run.
 *
 * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerMountPoints
 */
export interface JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerMountPoints {
  /**
   * The path on the container where the host volume is mounted.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerMountPoints#containerPath
   */
  readonly containerPath?: string;

  /**
   * If this value is true, the container has read-only access to the volume. Otherwise, the container can write to the volume. The default value is false.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerMountPoints#readOnly
   */
  readonly readOnly?: boolean;

  /**
   * The name of the volume to mount.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerMountPoints#sourceVolume
   */
  readonly sourceVolume?: string;

}

/**
 * Converts an object of type 'JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerMountPoints' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerMountPoints(obj: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerMountPoints | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'containerPath': obj.containerPath,
    'readOnly': obj.readOnly,
    'sourceVolume': obj.sourceVolume,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The network configuration for jobs that are running on Fargate resources. Jobs that are running on EC2 resources must not specify this parameter.
 *
 * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerNetworkConfiguration
 */
export interface JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerNetworkConfiguration {
  /**
   * Indicates whether the job should have a public IP address. For a job that is running on Fargate resources in a private subnet to send outbound traffic to the internet (for example, to pull container images), the private subnet requires a NAT gateway be attached to route requests to the internet. For more information, see Amazon ECS task networking (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html). The default value is "DISABLED".
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerNetworkConfiguration#assignPublicIp
   */
  readonly assignPublicIp?: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerNetworkConfigurationAssignPublicIp;

}

/**
 * Converts an object of type 'JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerNetworkConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerNetworkConfiguration(obj: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerNetworkConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'assignPublicIp': obj.assignPublicIp,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ResourceRequirement defines the type and amount of a resource to assign to a container. The supported resources include GPU, MEMORY, and VCPU.
 *
 * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerResourceRequirements
 */
export interface JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerResourceRequirements {
  /**
   * The type of resource to assign to a container. The supported resources include GPU, MEMORY, and VCPU.
   * Type is a required field
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerResourceRequirements#resourceType
   */
  readonly resourceType: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerResourceRequirementsResourceType;

  /**
   * The quantity of the specified resource to reserve for the container. The values vary based on the type specified.
   * type="GPU"
   * The number of physical GPUs to reserve for the container. The number of GPUs reserved for all containers in a job shouldn't exceed the number of available GPUs on the compute resource that the job is launched on.
   * GPUs are not available for jobs that are running on Fargate resources.
   * type="MEMORY"
   * The memory hard limit (in MiB) present to the container. This parameter is supported for jobs that are running on EC2 resources. If your container attempts to exceed the memory specified, the container is terminated. This parameter maps to Memory in the Create a container (https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the Docker Remote API (https://docs.docker.com/engine/api/v1.23/) and the --memory option to docker run (https://docs.docker.com/engine/reference/run/). You must specify at least 4 MiB of memory for a job. This is required but can be specified in several places for multi-node parallel (MNP) jobs. It must be specified for each node at least once. This parameter maps to Memory in the Create a container (https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the Docker Remote API (https://docs.docker.com/engine/api/v1.23/) and the --memory option to docker run (https://docs.docker.com/engine/reference/run/).
   * If you're trying to maximize your resource utilization by providing your jobs as much memory as possible for a particular instance type, see Memory Management (https://docs.aws.amazon.com/batch/latest/userguide/memory-management.html) in the Batch User Guide.
   * For jobs that are running on Fargate resources, then value is the hard limit (in MiB), and must match one of the supported values and the VCPU values must be one of the values supported for that memory value.
   * value = 512
   * VCPU = 0.25
   * value = 1024
   * VCPU = 0.25 or 0.5
   * value = 2048
   * VCPU = 0.25, 0.5, or 1
   * value = 3072
   * VCPU = 0.5, or 1
   * value = 4096
   * VCPU = 0.5, 1, or 2
   * value = 5120, 6144, or 7168
   * VCPU = 1 or 2
   * value = 8192
   * VCPU = 1, 2, or 4
   * value = 9216, 10240, 11264, 12288, 13312, 14336, 15360, or 16384
   * VCPU = 2 or 4
   * value = 17408, 18432, 19456, 20480, 21504, 22528, 23552, 24576, 25600, 26624, 27648, 28672, 29696, or 30720
   * VCPU = 4
   * type="VCPU"
   * The number of vCPUs reserved for the container. This parameter maps to CpuShares in the Create a container (https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the Docker Remote API (https://docs.docker.com/engine/api/v1.23/) and the --cpu-shares option to docker run (https://docs.docker.com/engine/reference/run/). Each vCPU is equivalent to 1,024 CPU shares. For EC2 resources, you must specify at least one vCPU. This is required but can be specified in several places; it must be specified for each node at least once.
   * For jobs that are running on Fargate resources, then value must match one of the supported values and the MEMORY values must be one of the values supported for that VCPU value. The supported values are 0.25, 0.5, 1, 2, and 4
   * value = 0.25
   * MEMORY = 512, 1024, or 2048
   * value = 0.5
   * MEMORY = 1024, 2048, 3072, or 4096
   * value = 1
   * MEMORY = 2048, 3072, 4096, 5120, 6144, 7168, or 8192
   * value = 2
   * MEMORY = 4096, 5120, 6144, 7168, 8192, 9216, 10240, 11264, 12288, 13312, 14336, 15360, or 16384
   * value = 4
   * MEMORY = 8192, 9216, 10240, 11264, 12288, 13312, 14336, 15360, 16384, 17408, 18432, 19456, 20480, 21504, 22528, 23552, 24576, 25600, 26624, 27648, 28672, 29696, or 30720
   * Value is a required field
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerResourceRequirements#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerResourceRequirements' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerResourceRequirements(obj: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerResourceRequirements | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resourceType': obj.resourceType,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Secret defines the secret to expose to your container. Secrets can be exposed to a container in the following ways:
 * - To inject sensitive data into your containers as environment variables, use the secrets container definition parameter.
 * - To reference sensitive information in the log configuration of a container, use the secretOptions container definition parameter.
 * For more information, see Specifying sensitive data (https://docs.aws.amazon.com/batch/latest/userguide/specifying-sensitive-data.html) in the Batch User Guide.
 *
 * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerSecrets
 */
export interface JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerSecrets {
  /**
   * The name of the secret.
   * Name is a required field
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerSecrets#name
   */
  readonly name: string;

  /**
   * The secret to expose to the container. The supported values are either the full ARN of the Secrets Manager secret or the full ARN of the parameter in the Amazon Web Services Systems Manager Parameter Store.
   * If the Amazon Web Services Systems Manager Parameter Store parameter exists in the same Region as the job you're launching, then you can use either the full ARN or name of the parameter. If the parameter exists in a different Region, then the full ARN must be specified.
   * ValueFrom is a required field
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerSecrets#valueFrom
   */
  readonly valueFrom: string;

}

/**
 * Converts an object of type 'JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerSecrets' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerSecrets(obj: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerSecrets | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'valueFrom': obj.valueFrom,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Ulimit defines the ulimit settings to pass to the container.
 * This object isn't applicable to jobs that are running on Fargate resources.
 *
 * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerUlimits
 */
export interface JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerUlimits {
  /**
   * The hard limit for the ulimit type.
   * HardLimit is a required field
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerUlimits#hardLimit
   */
  readonly hardLimit: number;

  /**
   * The type of the ulimit.
   * Name is a required field
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerUlimits#name
   */
  readonly name: string;

  /**
   * The soft limit for the ulimit type.
   * SoftLimit is a required field
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerUlimits#softLimit
   */
  readonly softLimit: number;

}

/**
 * Converts an object of type 'JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerUlimits' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerUlimits(obj: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerUlimits | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'hardLimit': obj.hardLimit,
    'name': obj.name,
    'softLimit': obj.softLimit,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Volume defines a data volume used in a job's container properties.
 *
 * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumes
 */
export interface JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumes {
  /**
   * This parameter is specified when you are using an Amazon Elastic File System file system for job storage. Jobs that are running on Fargate resources must specify a platformVersion of at least 1.4.0.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumes#efsVolumeConfiguration
   */
  readonly efsVolumeConfiguration?: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfiguration;

  /**
   * The contents of the host parameter determine whether your data volume persists on the host container instance and where it is stored. If the host parameter is empty, then the Docker daemon assigns a host path for your data volume. However, the data isn't guaranteed to persist after the containers associated with it stop running.
   * This parameter isn't applicable to jobs that are running on Fargate resources and shouldn't be provided.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumes#host
   */
  readonly host?: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesHost;

  /**
   * The name of the volume. Up to 255 letters (uppercase and lowercase), numbers, hyphens, and underscores are allowed. This name is referenced in the sourceVolume parameter of container definition mountPoints.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumes#name
   */
  readonly name?: string;

}

/**
 * Converts an object of type 'JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumes' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumes(obj: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumes | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'efsVolumeConfiguration': toJson_JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfiguration(obj.efsVolumeConfiguration),
    'host': toJson_JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesHost(obj.host),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * AccessPointIDRef are references to AccessPoint used to set the AccessPointID.
 *
 * @schema JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdRef
 */
export interface JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdRef {
  /**
   * Name of the referenced object.
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdRef#policy
   */
  readonly policy?: JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdRefPolicy;

}

/**
 * Converts an object of type 'JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdRef(obj: JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * AccessPointIDSelector selects references to AccessPoint used to set the AccessPointID.
 *
 * @schema JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdSelector
 */
export interface JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

  /**
   * Policies for selection.
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdSelector#policy
   */
  readonly policy?: JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdSelectorPolicy;

}

/**
 * Converts an object of type 'JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdSelector(obj: JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchControllerRef': obj.matchControllerRef,
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'policy': toJson_JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdSelectorPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Whether or not to use the Batch job IAM role defined in a job definition when mounting the Amazon EFS file system. If enabled, transit encryption must be enabled in the EFSVolumeConfiguration. If this parameter is omitted, the default value of DISABLED is used. For more information, see Using Amazon EFS Access Points (https://docs.aws.amazon.com/batch/latest/userguide/efs-volumes.html#efs-volume-accesspoints) in the Batch User Guide. EFS IAM authorization requires that TransitEncryption be ENABLED and that a JobRoleArn is specified.
 *
 * @schema JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationAuthorizationConfigIam
 */
export enum JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationAuthorizationConfigIam {
  /** ENABLED */
  ENABLED = "ENABLED",
  /** DISABLED */
  DISABLED = "DISABLED",
}

/**
 * Policies for referencing.
 *
 * @schema JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationFileSystemIdRefPolicy
 */
export interface JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationFileSystemIdRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationFileSystemIdRefPolicy#resolution
   */
  readonly resolution?: JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationFileSystemIdRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationFileSystemIdRefPolicy#resolve
   */
  readonly resolve?: JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationFileSystemIdRefPolicyResolve;

}

/**
 * Converts an object of type 'JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationFileSystemIdRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationFileSystemIdRefPolicy(obj: JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationFileSystemIdRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for selection.
 *
 * @schema JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationFileSystemIdSelectorPolicy
 */
export interface JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationFileSystemIdSelectorPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationFileSystemIdSelectorPolicy#resolution
   */
  readonly resolution?: JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationFileSystemIdSelectorPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationFileSystemIdSelectorPolicy#resolve
   */
  readonly resolve?: JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationFileSystemIdSelectorPolicyResolve;

}

/**
 * Converts an object of type 'JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationFileSystemIdSelectorPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationFileSystemIdSelectorPolicy(obj: JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationFileSystemIdSelectorPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerExecutionRoleArnRefPolicy
 */
export interface JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerExecutionRoleArnRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerExecutionRoleArnRefPolicy#resolution
   */
  readonly resolution?: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerExecutionRoleArnRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerExecutionRoleArnRefPolicy#resolve
   */
  readonly resolve?: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerExecutionRoleArnRefPolicyResolve;

}

/**
 * Converts an object of type 'JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerExecutionRoleArnRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerExecutionRoleArnRefPolicy(obj: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerExecutionRoleArnRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for selection.
 *
 * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerExecutionRoleArnSelectorPolicy
 */
export interface JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerExecutionRoleArnSelectorPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerExecutionRoleArnSelectorPolicy#resolution
   */
  readonly resolution?: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerExecutionRoleArnSelectorPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerExecutionRoleArnSelectorPolicy#resolve
   */
  readonly resolve?: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerExecutionRoleArnSelectorPolicyResolve;

}

/**
 * Converts an object of type 'JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerExecutionRoleArnSelectorPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerExecutionRoleArnSelectorPolicy(obj: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerExecutionRoleArnSelectorPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerJobRoleArnRefPolicy
 */
export interface JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerJobRoleArnRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerJobRoleArnRefPolicy#resolution
   */
  readonly resolution?: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerJobRoleArnRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerJobRoleArnRefPolicy#resolve
   */
  readonly resolve?: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerJobRoleArnRefPolicyResolve;

}

/**
 * Converts an object of type 'JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerJobRoleArnRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerJobRoleArnRefPolicy(obj: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerJobRoleArnRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for selection.
 *
 * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerJobRoleArnSelectorPolicy
 */
export interface JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerJobRoleArnSelectorPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerJobRoleArnSelectorPolicy#resolution
   */
  readonly resolution?: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerJobRoleArnSelectorPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerJobRoleArnSelectorPolicy#resolve
   */
  readonly resolve?: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerJobRoleArnSelectorPolicyResolve;

}

/**
 * Converts an object of type 'JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerJobRoleArnSelectorPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerJobRoleArnSelectorPolicy(obj: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerJobRoleArnSelectorPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Device defines a container instance host device.
 * This object isn't applicable to jobs that are running on Fargate resources and shouldn't be provided.
 *
 * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerLinuxParametersDevices
 */
export interface JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerLinuxParametersDevices {
  /**
   * The path inside the container that's used to expose the host device. By default, the hostPath value is used.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerLinuxParametersDevices#containerPath
   */
  readonly containerPath?: string;

  /**
   * The path for the device on the host container instance.
   * HostPath is a required field
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerLinuxParametersDevices#hostPath
   */
  readonly hostPath: string;

  /**
   * The explicit permissions to provide to the container for the device. By default, the container has permissions for read, write, and mknod for the device.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerLinuxParametersDevices#permissions
   */
  readonly permissions?: string[];

}

/**
 * Converts an object of type 'JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerLinuxParametersDevices' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerLinuxParametersDevices(obj: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerLinuxParametersDevices | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'containerPath': obj.containerPath,
    'hostPath': obj.hostPath,
    'permissions': obj.permissions?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Tmpfs defines the container path, mount options, and size of the tmpfs mount.
 * This object isn't applicable to jobs that are running on Fargate resources.
 *
 * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerLinuxParametersTmpfs
 */
export interface JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerLinuxParametersTmpfs {
  /**
   * The absolute file path in the container where the tmpfs volume is mounted.
   * ContainerPath is a required field
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerLinuxParametersTmpfs#containerPath
   */
  readonly containerPath: string;

  /**
   * The list of tmpfs volume mount options.
   * Valid values: "defaults" | "ro" | "rw" | "suid" | "nosuid" | "dev" | "nodev" | "exec" | "noexec" | "sync" | "async" | "dirsync" | "remount" | "mand" | "nomand" | "atime" | "noatime" | "diratime" | "nodiratime" | "bind" | "rbind" | "unbindable" | "runbindable" | "private" | "rprivate" | "shared" | "rshared" | "slave" | "rslave" | "relatime" | "norelatime" | "strictatime" | "nostrictatime" | "mode" | "uid" | "gid" | "nr_inodes" | "nr_blocks" | "mpol"
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerLinuxParametersTmpfs#mountOptions
   */
  readonly mountOptions?: string[];

  /**
   * The size (in MiB) of the tmpfs volume.
   * Size is a required field
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerLinuxParametersTmpfs#size
   */
  readonly size: number;

}

/**
 * Converts an object of type 'JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerLinuxParametersTmpfs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerLinuxParametersTmpfs(obj: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerLinuxParametersTmpfs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'containerPath': obj.containerPath,
    'mountOptions': obj.mountOptions?.map(y => y),
    'size': obj.size,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The log driver to use for the container. The valid values listed for this parameter are log drivers that the Amazon ECS container agent can communicate with by default.
 * The supported log drivers are awslogs, fluentd, gelf, json-file, journald, logentries, syslog, and splunk.
 * Jobs that are running on Fargate resources are restricted to the awslogs and splunk log drivers.
 * awslogs
 * Specifies the Amazon CloudWatch Logs logging driver. For more information, see Using the awslogs Log Driver (https://docs.aws.amazon.com/batch/latest/userguide/using_awslogs.html) in the Batch User Guide and Amazon CloudWatch Logs logging driver (https://docs.docker.com/config/containers/logging/awslogs/) in the Docker documentation.
 * fluentd
 * Specifies the Fluentd logging driver. For more information, including usage and options, see Fluentd logging driver (https://docs.docker.com/config/containers/logging/fluentd/) in the Docker documentation.
 * gelf
 * Specifies the Graylog Extended Format (GELF) logging driver. For more information, including usage and options, see Graylog Extended Format logging driver (https://docs.docker.com/config/containers/logging/gelf/) in the Docker documentation.
 * journald
 * Specifies the journald logging driver. For more information, including usage and options, see Journald logging driver (https://docs.docker.com/config/containers/logging/journald/) in the Docker documentation.
 * json-file
 * Specifies the JSON file logging driver. For more information, including usage and options, see JSON File logging driver (https://docs.docker.com/config/containers/logging/json-file/) in the Docker documentation.
 * splunk
 * Specifies the Splunk logging driver. For more information, including usage and options, see Splunk logging driver (https://docs.docker.com/config/containers/logging/splunk/) in the Docker documentation.
 * syslog
 * Specifies the syslog logging driver. For more information, including usage and options, see Syslog logging driver (https://docs.docker.com/config/containers/logging/syslog/) in the Docker documentation.
 * If you have a custom driver that's not listed earlier that you want to work with the Amazon ECS container agent, you can fork the Amazon ECS container agent project that's available on GitHub (https://github.com/aws/amazon-ecs-agent) and customize it to work with that driver. We encourage you to submit pull requests for changes that you want to have included. However, Amazon Web Services doesn't currently support running modified copies of this software.
 * This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log into your container instance and run the following command: sudo docker version | grep "Server API version"
 * LogDriver is a required field
 *
 * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerLogConfigurationLogDriver
 */
export enum JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerLogConfigurationLogDriver {
  /** json-file */
  JSON_HYPHEN_FILE = "json-file",
  /** syslog */
  SYSLOG = "syslog",
  /** journald */
  JOURNALD = "journald",
  /** gelf */
  GELF = "gelf",
  /** fluentd */
  FLUENTD = "fluentd",
  /** awslogs */
  AWSLOGS = "awslogs",
  /** splunk */
  SPLUNK = "splunk",
}

/**
 * Secret defines the secret to expose to your container. Secrets can be exposed to a container in the following ways:
 * - To inject sensitive data into your containers as environment variables, use the secrets container definition parameter.
 * - To reference sensitive information in the log configuration of a container, use the secretOptions container definition parameter.
 * For more information, see Specifying sensitive data (https://docs.aws.amazon.com/batch/latest/userguide/specifying-sensitive-data.html) in the Batch User Guide.
 *
 * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerLogConfigurationSecretOptions
 */
export interface JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerLogConfigurationSecretOptions {
  /**
   * The name of the secret.
   * Name is a required field
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerLogConfigurationSecretOptions#name
   */
  readonly name: string;

  /**
   * The secret to expose to the container. The supported values are either the full ARN of the Secrets Manager secret or the full ARN of the parameter in the Amazon Web Services Systems Manager Parameter Store.
   * If the Amazon Web Services Systems Manager Parameter Store parameter exists in the same Region as the job you're launching, then you can use either the full ARN or name of the parameter. If the parameter exists in a different Region, then the full ARN must be specified.
   * ValueFrom is a required field
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerLogConfigurationSecretOptions#valueFrom
   */
  readonly valueFrom: string;

}

/**
 * Converts an object of type 'JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerLogConfigurationSecretOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerLogConfigurationSecretOptions(obj: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerLogConfigurationSecretOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'valueFrom': obj.valueFrom,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Indicates whether the job should have a public IP address. For a job that is running on Fargate resources in a private subnet to send outbound traffic to the internet (for example, to pull container images), the private subnet requires a NAT gateway be attached to route requests to the internet. For more information, see Amazon ECS task networking (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html). The default value is "DISABLED".
 *
 * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerNetworkConfigurationAssignPublicIp
 */
export enum JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerNetworkConfigurationAssignPublicIp {
  /** ENABLED */
  ENABLED = "ENABLED",
  /** DISABLED */
  DISABLED = "DISABLED",
}

/**
 * The type of resource to assign to a container. The supported resources include GPU, MEMORY, and VCPU.
 * Type is a required field
 *
 * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerResourceRequirementsResourceType
 */
export enum JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerResourceRequirementsResourceType {
  /** GPU */
  GPU = "GPU",
  /** MEMORY */
  MEMORY = "MEMORY",
  /** VCPU */
  VCPU = "VCPU",
}

/**
 * This parameter is specified when you are using an Amazon Elastic File System file system for job storage. Jobs that are running on Fargate resources must specify a platformVersion of at least 1.4.0.
 *
 * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfiguration
 */
export interface JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfiguration {
  /**
   * The authorization configuration details for the Amazon EFS file system.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfiguration#authorizationConfig
   */
  readonly authorizationConfig?: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationAuthorizationConfig;

  /**
   * The Amazon EFS file system ID to use.
   * FileSystemID is a required field
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfiguration#fileSystemId
   */
  readonly fileSystemId?: string;

  /**
   * FileSystemIDRef are references to Filesystem used to set the FileSystemID.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfiguration#fileSystemIdRef
   */
  readonly fileSystemIdRef?: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationFileSystemIdRef;

  /**
   * FileSystemIDSelector selects references to Filesystem used to set the FileSystemID.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfiguration#fileSystemIdSelector
   */
  readonly fileSystemIdSelector?: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationFileSystemIdSelector;

  /**
   * The directory within the Amazon EFS file system to mount as the root directory inside the host. If this parameter is omitted, the root of the Amazon EFS volume is used instead. Specifying / has the same effect as omitting this parameter. The maximum length is 4,096 characters.
   * If an EFS access point is specified in the authorizationConfig, the root directory parameter must either be omitted or set to /, which enforces the path set on the Amazon EFS access point.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfiguration#rootDirectory
   */
  readonly rootDirectory?: string;

  /**
   * Determines whether to enable encryption for Amazon EFS data in transit between the Amazon ECS host and the Amazon EFS server. Transit encryption must be enabled if Amazon EFS IAM authorization is used. If this parameter is omitted, the default value of DISABLED is used. For more information, see Encrypting data in transit (https://docs.aws.amazon.com/efs/latest/ug/encryption-in-transit.html) in the Amazon Elastic File System User Guide.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfiguration#transitEncryption
   */
  readonly transitEncryption?: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationTransitEncryption;

  /**
   * The port to use when sending encrypted data between the Amazon ECS host and the Amazon EFS server. If you don't specify a transit encryption port, it uses the port selection strategy that the Amazon EFS mount helper uses. The value must be between 0 and 65,535. For more information, see EFS Mount Helper (https://docs.aws.amazon.com/efs/latest/ug/efs-mount-helper.html) in the Amazon Elastic File System User Guide.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfiguration#transitEncryptionPort
   */
  readonly transitEncryptionPort?: number;

}

/**
 * Converts an object of type 'JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfiguration(obj: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'authorizationConfig': toJson_JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationAuthorizationConfig(obj.authorizationConfig),
    'fileSystemId': obj.fileSystemId,
    'fileSystemIdRef': toJson_JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationFileSystemIdRef(obj.fileSystemIdRef),
    'fileSystemIdSelector': toJson_JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationFileSystemIdSelector(obj.fileSystemIdSelector),
    'rootDirectory': obj.rootDirectory,
    'transitEncryption': obj.transitEncryption,
    'transitEncryptionPort': obj.transitEncryptionPort,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The contents of the host parameter determine whether your data volume persists on the host container instance and where it is stored. If the host parameter is empty, then the Docker daemon assigns a host path for your data volume. However, the data isn't guaranteed to persist after the containers associated with it stop running.
 * This parameter isn't applicable to jobs that are running on Fargate resources and shouldn't be provided.
 *
 * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesHost
 */
export interface JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesHost {
  /**
   * The path on the host container instance that's presented to the container. If this parameter is empty, then the Docker daemon has assigned a host path for you. If this parameter contains a file location, then the data volume persists at the specified location on the host container instance until you delete it manually. If the source path location doesn't exist on the host container instance, the Docker daemon creates it. If the location does exist, the contents of the source path folder are exported.
   * This parameter isn't applicable to jobs that run on Fargate resources and shouldn't be provided.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesHost#sourcePath
   */
  readonly sourcePath?: string;

}

/**
 * Converts an object of type 'JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesHost' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesHost(obj: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesHost | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'sourcePath': obj.sourcePath,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdRefPolicy
 */
export interface JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdRefPolicy#resolution
   */
  readonly resolution?: JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdRefPolicy#resolve
   */
  readonly resolve?: JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdRefPolicyResolve;

}

/**
 * Converts an object of type 'JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdRefPolicy(obj: JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for selection.
 *
 * @schema JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdSelectorPolicy
 */
export interface JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdSelectorPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdSelectorPolicy#resolution
   */
  readonly resolution?: JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdSelectorPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdSelectorPolicy#resolve
   */
  readonly resolve?: JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdSelectorPolicyResolve;

}

/**
 * Converts an object of type 'JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdSelectorPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdSelectorPolicy(obj: JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdSelectorPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationFileSystemIdRefPolicyResolution
 */
export enum JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationFileSystemIdRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationFileSystemIdRefPolicyResolve
 */
export enum JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationFileSystemIdRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationFileSystemIdSelectorPolicyResolution
 */
export enum JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationFileSystemIdSelectorPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationFileSystemIdSelectorPolicyResolve
 */
export enum JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationFileSystemIdSelectorPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerExecutionRoleArnRefPolicyResolution
 */
export enum JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerExecutionRoleArnRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerExecutionRoleArnRefPolicyResolve
 */
export enum JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerExecutionRoleArnRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerExecutionRoleArnSelectorPolicyResolution
 */
export enum JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerExecutionRoleArnSelectorPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerExecutionRoleArnSelectorPolicyResolve
 */
export enum JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerExecutionRoleArnSelectorPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerJobRoleArnRefPolicyResolution
 */
export enum JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerJobRoleArnRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerJobRoleArnRefPolicyResolve
 */
export enum JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerJobRoleArnRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerJobRoleArnSelectorPolicyResolution
 */
export enum JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerJobRoleArnSelectorPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerJobRoleArnSelectorPolicyResolve
 */
export enum JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerJobRoleArnSelectorPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * The authorization configuration details for the Amazon EFS file system.
 *
 * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationAuthorizationConfig
 */
export interface JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationAuthorizationConfig {
  /**
   * The Amazon EFS access point ID to use. If an access point is specified, the root directory value specified in the EFSVolumeConfiguration must either be omitted or set to / which will enforce the path set on the EFS access point. If an access point is used, transit encryption must be enabled in the EFSVolumeConfiguration. For more information, see Working with Amazon EFS Access Points (https://docs.aws.amazon.com/efs/latest/ug/efs-access-points.html) in the Amazon Elastic File System User Guide.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationAuthorizationConfig#accessPointId
   */
  readonly accessPointId?: string;

  /**
   * AccessPointIDRef are references to AccessPoint used to set the AccessPointID.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationAuthorizationConfig#accessPointIdRef
   */
  readonly accessPointIdRef?: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdRef;

  /**
   * AccessPointIDSelector selects references to AccessPoint used to set the AccessPointID.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationAuthorizationConfig#accessPointIdSelector
   */
  readonly accessPointIdSelector?: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdSelector;

  /**
   * Whether or not to use the Batch job IAM role defined in a job definition when mounting the Amazon EFS file system. If enabled, transit encryption must be enabled in the EFSVolumeConfiguration. If this parameter is omitted, the default value of DISABLED is used. For more information, see Using Amazon EFS Access Points (https://docs.aws.amazon.com/batch/latest/userguide/efs-volumes.html#efs-volume-accesspoints) in the Batch User Guide. EFS IAM authorization requires that TransitEncryption be ENABLED and that a JobRoleArn is specified.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationAuthorizationConfig#iam
   */
  readonly iam?: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationAuthorizationConfigIam;

}

/**
 * Converts an object of type 'JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationAuthorizationConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationAuthorizationConfig(obj: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationAuthorizationConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'accessPointId': obj.accessPointId,
    'accessPointIdRef': toJson_JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdRef(obj.accessPointIdRef),
    'accessPointIdSelector': toJson_JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdSelector(obj.accessPointIdSelector),
    'iam': obj.iam,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * FileSystemIDRef are references to Filesystem used to set the FileSystemID.
 *
 * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationFileSystemIdRef
 */
export interface JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationFileSystemIdRef {
  /**
   * Name of the referenced object.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationFileSystemIdRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationFileSystemIdRef#policy
   */
  readonly policy?: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationFileSystemIdRefPolicy;

}

/**
 * Converts an object of type 'JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationFileSystemIdRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationFileSystemIdRef(obj: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationFileSystemIdRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationFileSystemIdRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * FileSystemIDSelector selects references to Filesystem used to set the FileSystemID.
 *
 * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationFileSystemIdSelector
 */
export interface JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationFileSystemIdSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationFileSystemIdSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationFileSystemIdSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

  /**
   * Policies for selection.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationFileSystemIdSelector#policy
   */
  readonly policy?: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationFileSystemIdSelectorPolicy;

}

/**
 * Converts an object of type 'JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationFileSystemIdSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationFileSystemIdSelector(obj: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationFileSystemIdSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchControllerRef': obj.matchControllerRef,
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'policy': toJson_JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationFileSystemIdSelectorPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Determines whether to enable encryption for Amazon EFS data in transit between the Amazon ECS host and the Amazon EFS server. Transit encryption must be enabled if Amazon EFS IAM authorization is used. If this parameter is omitted, the default value of DISABLED is used. For more information, see Encrypting data in transit (https://docs.aws.amazon.com/efs/latest/ug/encryption-in-transit.html) in the Amazon Elastic File System User Guide.
 *
 * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationTransitEncryption
 */
export enum JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationTransitEncryption {
  /** ENABLED */
  ENABLED = "ENABLED",
  /** DISABLED */
  DISABLED = "DISABLED",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdRefPolicyResolution
 */
export enum JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdRefPolicyResolve
 */
export enum JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdSelectorPolicyResolution
 */
export enum JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdSelectorPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdSelectorPolicyResolve
 */
export enum JobDefinitionSpecForProviderContainerPropertiesVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdSelectorPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * AccessPointIDRef are references to AccessPoint used to set the AccessPointID.
 *
 * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdRef
 */
export interface JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdRef {
  /**
   * Name of the referenced object.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdRef#policy
   */
  readonly policy?: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdRefPolicy;

}

/**
 * Converts an object of type 'JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdRef(obj: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * AccessPointIDSelector selects references to AccessPoint used to set the AccessPointID.
 *
 * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdSelector
 */
export interface JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

  /**
   * Policies for selection.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdSelector#policy
   */
  readonly policy?: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdSelectorPolicy;

}

/**
 * Converts an object of type 'JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdSelector(obj: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchControllerRef': obj.matchControllerRef,
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'policy': toJson_JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdSelectorPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Whether or not to use the Batch job IAM role defined in a job definition when mounting the Amazon EFS file system. If enabled, transit encryption must be enabled in the EFSVolumeConfiguration. If this parameter is omitted, the default value of DISABLED is used. For more information, see Using Amazon EFS Access Points (https://docs.aws.amazon.com/batch/latest/userguide/efs-volumes.html#efs-volume-accesspoints) in the Batch User Guide. EFS IAM authorization requires that TransitEncryption be ENABLED and that a JobRoleArn is specified.
 *
 * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationAuthorizationConfigIam
 */
export enum JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationAuthorizationConfigIam {
  /** ENABLED */
  ENABLED = "ENABLED",
  /** DISABLED */
  DISABLED = "DISABLED",
}

/**
 * Policies for referencing.
 *
 * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationFileSystemIdRefPolicy
 */
export interface JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationFileSystemIdRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationFileSystemIdRefPolicy#resolution
   */
  readonly resolution?: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationFileSystemIdRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationFileSystemIdRefPolicy#resolve
   */
  readonly resolve?: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationFileSystemIdRefPolicyResolve;

}

/**
 * Converts an object of type 'JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationFileSystemIdRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationFileSystemIdRefPolicy(obj: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationFileSystemIdRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for selection.
 *
 * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationFileSystemIdSelectorPolicy
 */
export interface JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationFileSystemIdSelectorPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationFileSystemIdSelectorPolicy#resolution
   */
  readonly resolution?: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationFileSystemIdSelectorPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationFileSystemIdSelectorPolicy#resolve
   */
  readonly resolve?: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationFileSystemIdSelectorPolicyResolve;

}

/**
 * Converts an object of type 'JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationFileSystemIdSelectorPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationFileSystemIdSelectorPolicy(obj: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationFileSystemIdSelectorPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdRefPolicy
 */
export interface JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdRefPolicy#resolution
   */
  readonly resolution?: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdRefPolicy#resolve
   */
  readonly resolve?: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdRefPolicyResolve;

}

/**
 * Converts an object of type 'JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdRefPolicy(obj: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for selection.
 *
 * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdSelectorPolicy
 */
export interface JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdSelectorPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdSelectorPolicy#resolution
   */
  readonly resolution?: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdSelectorPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdSelectorPolicy#resolve
   */
  readonly resolve?: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdSelectorPolicyResolve;

}

/**
 * Converts an object of type 'JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdSelectorPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdSelectorPolicy(obj: JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdSelectorPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationFileSystemIdRefPolicyResolution
 */
export enum JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationFileSystemIdRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationFileSystemIdRefPolicyResolve
 */
export enum JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationFileSystemIdRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationFileSystemIdSelectorPolicyResolution
 */
export enum JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationFileSystemIdSelectorPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationFileSystemIdSelectorPolicyResolve
 */
export enum JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationFileSystemIdSelectorPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdRefPolicyResolution
 */
export enum JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdRefPolicyResolve
 */
export enum JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdSelectorPolicyResolution
 */
export enum JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdSelectorPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdSelectorPolicyResolve
 */
export enum JobDefinitionSpecForProviderNodePropertiesNodeRangePropertiesContainerVolumesEfsVolumeConfigurationAuthorizationConfigAccessPointIdSelectorPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}


/**
 * JobQueue is the Schema for the JobQueues API
 *
 * @schema JobQueue
 */
export class JobQueue extends ApiObject {
  /**
   * Returns the apiVersion and kind for "JobQueue"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'batch.aws.crossplane.io/v1alpha1',
    kind: 'JobQueue',
  }

  /**
   * Renders a Kubernetes manifest for "JobQueue".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: JobQueueProps): any {
    return {
      ...JobQueue.GVK,
      ...toJson_JobQueueProps(props),
    };
  }

  /**
   * Defines a "JobQueue" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: JobQueueProps) {
    super(scope, id, {
      ...JobQueue.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...JobQueue.GVK,
      ...toJson_JobQueueProps(resolved),
    };
  }
}

/**
 * JobQueue is the Schema for the JobQueues API
 *
 * @schema JobQueue
 */
export interface JobQueueProps {
  /**
   * @schema JobQueue#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * JobQueueSpec defines the desired state of JobQueue
   *
   * @schema JobQueue#spec
   */
  readonly spec: JobQueueSpec;

}

/**
 * Converts an object of type 'JobQueueProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobQueueProps(obj: JobQueueProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_JobQueueSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * JobQueueSpec defines the desired state of JobQueue
 *
 * @schema JobQueueSpec
 */
export interface JobQueueSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
   *
   * @schema JobQueueSpec#deletionPolicy
   */
  readonly deletionPolicy?: JobQueueSpecDeletionPolicy;

  /**
   * JobQueueParameters defines the desired state of JobQueue
   *
   * @schema JobQueueSpec#forProvider
   */
  readonly forProvider: JobQueueSpecForProvider;

  /**
   * THIS IS A BETA FIELD. It is on by default but can be opted out through a Crossplane feature flag. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
   *
   * @schema JobQueueSpec#managementPolicies
   */
  readonly managementPolicies?: JobQueueSpecManagementPolicies[];

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema JobQueueSpec#providerConfigRef
   */
  readonly providerConfigRef?: JobQueueSpecProviderConfigRef;

  /**
   * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema JobQueueSpec#publishConnectionDetailsTo
   */
  readonly publishConnectionDetailsTo?: JobQueueSpecPublishConnectionDetailsTo;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
   *
   * @schema JobQueueSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: JobQueueSpecWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'JobQueueSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobQueueSpec(obj: JobQueueSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'deletionPolicy': obj.deletionPolicy,
    'forProvider': toJson_JobQueueSpecForProvider(obj.forProvider),
    'managementPolicies': obj.managementPolicies?.map(y => y),
    'providerConfigRef': toJson_JobQueueSpecProviderConfigRef(obj.providerConfigRef),
    'publishConnectionDetailsTo': toJson_JobQueueSpecPublishConnectionDetailsTo(obj.publishConnectionDetailsTo),
    'writeConnectionSecretToRef': toJson_JobQueueSpecWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
 *
 * @schema JobQueueSpecDeletionPolicy
 */
export enum JobQueueSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * JobQueueParameters defines the desired state of JobQueue
 *
 * @schema JobQueueSpecForProvider
 */
export interface JobQueueSpecForProvider {
  /**
   * The set of compute environments mapped to a job queue and their order relative to each other. The job scheduler uses this parameter to determine which compute environment should run a specific job. Compute environments must be in the VALID state before you can associate them with a job queue. You can associate up to three compute environments with a job queue. All of the compute environments must be either EC2 (EC2 or SPOT) or Fargate (FARGATE or FARGATE_SPOT); EC2 and Fargate compute environments can't be mixed.
   * All compute environments that are associated with a job queue must share the same architecture. Batch doesn't support mixing compute environment architecture types in a single job queue.
   * ComputeEnvironmentOrder is a required field
   *
   * @schema JobQueueSpecForProvider#computeEnvironmentOrder
   */
  readonly computeEnvironmentOrder: JobQueueSpecForProviderComputeEnvironmentOrder[];

  /**
   * Custom parameter to control the state of the job queue. The valid values are ENABLED or DISABLED.
   * The state of the job queue. If the job queue state is ENABLED, it is able to accept jobs. If the job queue state is DISABLED, new jobs can't be added to the queue, but jobs already in the queue can finish.
   *
   * @schema JobQueueSpecForProvider#desiredState
   */
  readonly desiredState?: JobQueueSpecForProviderDesiredState;

  /**
   * The priority of the job queue. Job queues with a higher priority (or a higher integer value for the priority parameter) are evaluated first when associated with the same compute environment. Priority is determined in descending order. For example, a job queue with a priority value of 10 is given scheduling preference over a job queue with a priority value of 1. All of the compute environments must be either EC2 (EC2 or SPOT) or Fargate (FARGATE or FARGATE_SPOT); EC2 and Fargate compute environments can't be mixed.
   *
   * @schema JobQueueSpecForProvider#priority
   */
  readonly priority: number;

  /**
   * Region is which region the JobQueue will be created.
   *
   * @schema JobQueueSpecForProvider#region
   */
  readonly region: string;

  /**
   * The Amazon Resource Name (ARN) of the fair share scheduling policy. If this parameter is specified, the job queue uses a fair share scheduling policy. If this parameter isn't specified, the job queue uses a first in, first out (FIFO) scheduling policy. After a job queue is created, you can replace but can't remove the fair share scheduling policy. The format is aws:Partition:batch:Region:Account:scheduling-policy/Name . An example is aws:aws:batch:us-west-2:123456789012:scheduling-policy/MySchedulingPolicy.
   *
   * @schema JobQueueSpecForProvider#schedulingPolicyARN
   */
  readonly schedulingPolicyArn?: string;

  /**
   * The tags that you apply to the job queue to help you categorize and organize your resources. Each tag consists of a key and an optional value. For more information, see Tagging your Batch resources (https://docs.aws.amazon.com/batch/latest/userguide/using-tags.html) in Batch User Guide.
   *
   * @schema JobQueueSpecForProvider#tags
   */
  readonly tags?: { [key: string]: string };

}

/**
 * Converts an object of type 'JobQueueSpecForProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobQueueSpecForProvider(obj: JobQueueSpecForProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'computeEnvironmentOrder': obj.computeEnvironmentOrder?.map(y => toJson_JobQueueSpecForProviderComputeEnvironmentOrder(y)),
    'desiredState': obj.desiredState,
    'priority': obj.priority,
    'region': obj.region,
    'schedulingPolicyARN': obj.schedulingPolicyArn,
    'tags': ((obj.tags) === undefined) ? undefined : (Object.entries(obj.tags).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A ManagementAction represents an action that the Crossplane controllers can take on an external resource.
 *
 * @schema JobQueueSpecManagementPolicies
 */
export enum JobQueueSpecManagementPolicies {
  /** Observe */
  OBSERVE = "Observe",
  /** Create */
  CREATE = "Create",
  /** Update */
  UPDATE = "Update",
  /** Delete */
  DELETE = "Delete",
  /** LateInitialize */
  LATE_INITIALIZE = "LateInitialize",
  /** * */
  VALUE_ASTERISK = "*",
}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema JobQueueSpecProviderConfigRef
 */
export interface JobQueueSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema JobQueueSpecProviderConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema JobQueueSpecProviderConfigRef#policy
   */
  readonly policy?: JobQueueSpecProviderConfigRefPolicy;

}

/**
 * Converts an object of type 'JobQueueSpecProviderConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobQueueSpecProviderConfigRef(obj: JobQueueSpecProviderConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_JobQueueSpecProviderConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema JobQueueSpecPublishConnectionDetailsTo
 */
export interface JobQueueSpecPublishConnectionDetailsTo {
  /**
   * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
   *
   * @schema JobQueueSpecPublishConnectionDetailsTo#configRef
   */
  readonly configRef?: JobQueueSpecPublishConnectionDetailsToConfigRef;

  /**
   * Metadata is the metadata for connection secret.
   *
   * @schema JobQueueSpecPublishConnectionDetailsTo#metadata
   */
  readonly metadata?: JobQueueSpecPublishConnectionDetailsToMetadata;

  /**
   * Name is the name of the connection secret.
   *
   * @schema JobQueueSpecPublishConnectionDetailsTo#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'JobQueueSpecPublishConnectionDetailsTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobQueueSpecPublishConnectionDetailsTo(obj: JobQueueSpecPublishConnectionDetailsTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configRef': toJson_JobQueueSpecPublishConnectionDetailsToConfigRef(obj.configRef),
    'metadata': toJson_JobQueueSpecPublishConnectionDetailsToMetadata(obj.metadata),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
 *
 * @schema JobQueueSpecWriteConnectionSecretToRef
 */
export interface JobQueueSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema JobQueueSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema JobQueueSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'JobQueueSpecWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobQueueSpecWriteConnectionSecretToRef(obj: JobQueueSpecWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CustomComputeEnvironmentOrder includes custom additional fields for ComputeEnvironmentOrder
 *
 * @schema JobQueueSpecForProviderComputeEnvironmentOrder
 */
export interface JobQueueSpecForProviderComputeEnvironmentOrder {
  /**
   * The Amazon Resource Name (ARN) of the compute environment.
   * ComputeEnvironment is a required field
   *
   * @schema JobQueueSpecForProviderComputeEnvironmentOrder#computeEnvironment
   */
  readonly computeEnvironment?: string;

  /**
   * ComputeEnvironmentRef is a reference to ComputeEnvironment used to set the ComputeEnvironment.
   *
   * @schema JobQueueSpecForProviderComputeEnvironmentOrder#computeEnvironmentRef
   */
  readonly computeEnvironmentRef?: JobQueueSpecForProviderComputeEnvironmentOrderComputeEnvironmentRef;

  /**
   * ComputeEnvironmentsSelector selects a reference to ComputeEnvironment used to set the ComputeEnvironment.
   *
   * @schema JobQueueSpecForProviderComputeEnvironmentOrder#computeEnvironmentSelector
   */
  readonly computeEnvironmentSelector?: JobQueueSpecForProviderComputeEnvironmentOrderComputeEnvironmentSelector;

  /**
   * The order of the compute environment. Compute environments are tried in ascending order. For example, if two compute environments are associated with a job queue, the compute environment with a lower order integer value is tried for job placement first.
   * Order is a required field
   *
   * @schema JobQueueSpecForProviderComputeEnvironmentOrder#order
   */
  readonly order: number;

}

/**
 * Converts an object of type 'JobQueueSpecForProviderComputeEnvironmentOrder' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobQueueSpecForProviderComputeEnvironmentOrder(obj: JobQueueSpecForProviderComputeEnvironmentOrder | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'computeEnvironment': obj.computeEnvironment,
    'computeEnvironmentRef': toJson_JobQueueSpecForProviderComputeEnvironmentOrderComputeEnvironmentRef(obj.computeEnvironmentRef),
    'computeEnvironmentSelector': toJson_JobQueueSpecForProviderComputeEnvironmentOrderComputeEnvironmentSelector(obj.computeEnvironmentSelector),
    'order': obj.order,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Custom parameter to control the state of the job queue. The valid values are ENABLED or DISABLED.
 * The state of the job queue. If the job queue state is ENABLED, it is able to accept jobs. If the job queue state is DISABLED, new jobs can't be added to the queue, but jobs already in the queue can finish.
 *
 * @schema JobQueueSpecForProviderDesiredState
 */
export enum JobQueueSpecForProviderDesiredState {
  /** ENABLED */
  ENABLED = "ENABLED",
  /** DISABLED */
  DISABLED = "DISABLED",
}

/**
 * Policies for referencing.
 *
 * @schema JobQueueSpecProviderConfigRefPolicy
 */
export interface JobQueueSpecProviderConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema JobQueueSpecProviderConfigRefPolicy#resolution
   */
  readonly resolution?: JobQueueSpecProviderConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema JobQueueSpecProviderConfigRefPolicy#resolve
   */
  readonly resolve?: JobQueueSpecProviderConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'JobQueueSpecProviderConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobQueueSpecProviderConfigRefPolicy(obj: JobQueueSpecProviderConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
 *
 * @schema JobQueueSpecPublishConnectionDetailsToConfigRef
 */
export interface JobQueueSpecPublishConnectionDetailsToConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema JobQueueSpecPublishConnectionDetailsToConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema JobQueueSpecPublishConnectionDetailsToConfigRef#policy
   */
  readonly policy?: JobQueueSpecPublishConnectionDetailsToConfigRefPolicy;

}

/**
 * Converts an object of type 'JobQueueSpecPublishConnectionDetailsToConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobQueueSpecPublishConnectionDetailsToConfigRef(obj: JobQueueSpecPublishConnectionDetailsToConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_JobQueueSpecPublishConnectionDetailsToConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Metadata is the metadata for connection secret.
 *
 * @schema JobQueueSpecPublishConnectionDetailsToMetadata
 */
export interface JobQueueSpecPublishConnectionDetailsToMetadata {
  /**
   * Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
   *
   * @schema JobQueueSpecPublishConnectionDetailsToMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
   *
   * @schema JobQueueSpecPublishConnectionDetailsToMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
   *
   * @schema JobQueueSpecPublishConnectionDetailsToMetadata#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'JobQueueSpecPublishConnectionDetailsToMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobQueueSpecPublishConnectionDetailsToMetadata(obj: JobQueueSpecPublishConnectionDetailsToMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ComputeEnvironmentRef is a reference to ComputeEnvironment used to set the ComputeEnvironment.
 *
 * @schema JobQueueSpecForProviderComputeEnvironmentOrderComputeEnvironmentRef
 */
export interface JobQueueSpecForProviderComputeEnvironmentOrderComputeEnvironmentRef {
  /**
   * Name of the referenced object.
   *
   * @schema JobQueueSpecForProviderComputeEnvironmentOrderComputeEnvironmentRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema JobQueueSpecForProviderComputeEnvironmentOrderComputeEnvironmentRef#policy
   */
  readonly policy?: JobQueueSpecForProviderComputeEnvironmentOrderComputeEnvironmentRefPolicy;

}

/**
 * Converts an object of type 'JobQueueSpecForProviderComputeEnvironmentOrderComputeEnvironmentRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobQueueSpecForProviderComputeEnvironmentOrderComputeEnvironmentRef(obj: JobQueueSpecForProviderComputeEnvironmentOrderComputeEnvironmentRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_JobQueueSpecForProviderComputeEnvironmentOrderComputeEnvironmentRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ComputeEnvironmentsSelector selects a reference to ComputeEnvironment used to set the ComputeEnvironment.
 *
 * @schema JobQueueSpecForProviderComputeEnvironmentOrderComputeEnvironmentSelector
 */
export interface JobQueueSpecForProviderComputeEnvironmentOrderComputeEnvironmentSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema JobQueueSpecForProviderComputeEnvironmentOrderComputeEnvironmentSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema JobQueueSpecForProviderComputeEnvironmentOrderComputeEnvironmentSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

  /**
   * Policies for selection.
   *
   * @schema JobQueueSpecForProviderComputeEnvironmentOrderComputeEnvironmentSelector#policy
   */
  readonly policy?: JobQueueSpecForProviderComputeEnvironmentOrderComputeEnvironmentSelectorPolicy;

}

/**
 * Converts an object of type 'JobQueueSpecForProviderComputeEnvironmentOrderComputeEnvironmentSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobQueueSpecForProviderComputeEnvironmentOrderComputeEnvironmentSelector(obj: JobQueueSpecForProviderComputeEnvironmentOrderComputeEnvironmentSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchControllerRef': obj.matchControllerRef,
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'policy': toJson_JobQueueSpecForProviderComputeEnvironmentOrderComputeEnvironmentSelectorPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema JobQueueSpecProviderConfigRefPolicyResolution
 */
export enum JobQueueSpecProviderConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema JobQueueSpecProviderConfigRefPolicyResolve
 */
export enum JobQueueSpecProviderConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Policies for referencing.
 *
 * @schema JobQueueSpecPublishConnectionDetailsToConfigRefPolicy
 */
export interface JobQueueSpecPublishConnectionDetailsToConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema JobQueueSpecPublishConnectionDetailsToConfigRefPolicy#resolution
   */
  readonly resolution?: JobQueueSpecPublishConnectionDetailsToConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema JobQueueSpecPublishConnectionDetailsToConfigRefPolicy#resolve
   */
  readonly resolve?: JobQueueSpecPublishConnectionDetailsToConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'JobQueueSpecPublishConnectionDetailsToConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobQueueSpecPublishConnectionDetailsToConfigRefPolicy(obj: JobQueueSpecPublishConnectionDetailsToConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema JobQueueSpecForProviderComputeEnvironmentOrderComputeEnvironmentRefPolicy
 */
export interface JobQueueSpecForProviderComputeEnvironmentOrderComputeEnvironmentRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema JobQueueSpecForProviderComputeEnvironmentOrderComputeEnvironmentRefPolicy#resolution
   */
  readonly resolution?: JobQueueSpecForProviderComputeEnvironmentOrderComputeEnvironmentRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema JobQueueSpecForProviderComputeEnvironmentOrderComputeEnvironmentRefPolicy#resolve
   */
  readonly resolve?: JobQueueSpecForProviderComputeEnvironmentOrderComputeEnvironmentRefPolicyResolve;

}

/**
 * Converts an object of type 'JobQueueSpecForProviderComputeEnvironmentOrderComputeEnvironmentRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobQueueSpecForProviderComputeEnvironmentOrderComputeEnvironmentRefPolicy(obj: JobQueueSpecForProviderComputeEnvironmentOrderComputeEnvironmentRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for selection.
 *
 * @schema JobQueueSpecForProviderComputeEnvironmentOrderComputeEnvironmentSelectorPolicy
 */
export interface JobQueueSpecForProviderComputeEnvironmentOrderComputeEnvironmentSelectorPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema JobQueueSpecForProviderComputeEnvironmentOrderComputeEnvironmentSelectorPolicy#resolution
   */
  readonly resolution?: JobQueueSpecForProviderComputeEnvironmentOrderComputeEnvironmentSelectorPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema JobQueueSpecForProviderComputeEnvironmentOrderComputeEnvironmentSelectorPolicy#resolve
   */
  readonly resolve?: JobQueueSpecForProviderComputeEnvironmentOrderComputeEnvironmentSelectorPolicyResolve;

}

/**
 * Converts an object of type 'JobQueueSpecForProviderComputeEnvironmentOrderComputeEnvironmentSelectorPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobQueueSpecForProviderComputeEnvironmentOrderComputeEnvironmentSelectorPolicy(obj: JobQueueSpecForProviderComputeEnvironmentOrderComputeEnvironmentSelectorPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema JobQueueSpecPublishConnectionDetailsToConfigRefPolicyResolution
 */
export enum JobQueueSpecPublishConnectionDetailsToConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema JobQueueSpecPublishConnectionDetailsToConfigRefPolicyResolve
 */
export enum JobQueueSpecPublishConnectionDetailsToConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema JobQueueSpecForProviderComputeEnvironmentOrderComputeEnvironmentRefPolicyResolution
 */
export enum JobQueueSpecForProviderComputeEnvironmentOrderComputeEnvironmentRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema JobQueueSpecForProviderComputeEnvironmentOrderComputeEnvironmentRefPolicyResolve
 */
export enum JobQueueSpecForProviderComputeEnvironmentOrderComputeEnvironmentRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema JobQueueSpecForProviderComputeEnvironmentOrderComputeEnvironmentSelectorPolicyResolution
 */
export enum JobQueueSpecForProviderComputeEnvironmentOrderComputeEnvironmentSelectorPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema JobQueueSpecForProviderComputeEnvironmentOrderComputeEnvironmentSelectorPolicyResolve
 */
export enum JobQueueSpecForProviderComputeEnvironmentOrderComputeEnvironmentSelectorPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

