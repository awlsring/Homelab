// @ts-nocheck
// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 * A ProviderConfig configures a Helm 'provider', i.e. a connection to a particular
 *
 * @schema ProviderConfig
 */
export class ProviderConfig extends ApiObject {
  /**
   * Returns the apiVersion and kind for "ProviderConfig"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'helm.crossplane.io/v1alpha1',
    kind: 'ProviderConfig',
  }

  /**
   * Renders a Kubernetes manifest for "ProviderConfig".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: ProviderConfigProps): any {
    return {
      ...ProviderConfig.GVK,
      ...toJson_ProviderConfigProps(props),
    };
  }

  /**
   * Defines a "ProviderConfig" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: ProviderConfigProps) {
    super(scope, id, {
      ...ProviderConfig.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...ProviderConfig.GVK,
      ...toJson_ProviderConfigProps(resolved),
    };
  }
}

/**
 * A ProviderConfig configures a Helm 'provider', i.e. a connection to a particular
 *
 * @schema ProviderConfig
 */
export interface ProviderConfigProps {
  /**
   * @schema ProviderConfig#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * A ProviderConfigSpec defines the desired state of a Provider.
   *
   * @schema ProviderConfig#spec
   */
  readonly spec: ProviderConfigSpec;

}

/**
 * Converts an object of type 'ProviderConfigProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProviderConfigProps(obj: ProviderConfigProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_ProviderConfigSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A ProviderConfigSpec defines the desired state of a Provider.
 *
 * @schema ProviderConfigSpec
 */
export interface ProviderConfigSpec {
  /**
   * Credentials used to connect to the Kubernetes API. Typically a kubeconfig file. Use InjectedIdentity for in-cluster config.
   *
   * @schema ProviderConfigSpec#credentials
   */
  readonly credentials: ProviderConfigSpecCredentials;

  /**
   * Identity used to authenticate to the Kubernetes API. The identity credentials can be used to supplement kubeconfig 'credentials', for example by configuring a bearer token source such as OAuth.
   *
   * @schema ProviderConfigSpec#identity
   */
  readonly identity?: ProviderConfigSpecIdentity;

}

/**
 * Converts an object of type 'ProviderConfigSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProviderConfigSpec(obj: ProviderConfigSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'credentials': toJson_ProviderConfigSpecCredentials(obj.credentials),
    'identity': toJson_ProviderConfigSpecIdentity(obj.identity),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Credentials used to connect to the Kubernetes API. Typically a kubeconfig file. Use InjectedIdentity for in-cluster config.
 *
 * @schema ProviderConfigSpecCredentials
 */
export interface ProviderConfigSpecCredentials {
  /**
   * Env is a reference to an environment variable that contains credentials that must be used to connect to the provider.
   *
   * @schema ProviderConfigSpecCredentials#env
   */
  readonly env?: ProviderConfigSpecCredentialsEnv;

  /**
   * Fs is a reference to a filesystem location that contains credentials that must be used to connect to the provider.
   *
   * @schema ProviderConfigSpecCredentials#fs
   */
  readonly fs?: ProviderConfigSpecCredentialsFs;

  /**
   * A SecretRef is a reference to a secret key that contains the credentials that must be used to connect to the provider.
   *
   * @schema ProviderConfigSpecCredentials#secretRef
   */
  readonly secretRef?: ProviderConfigSpecCredentialsSecretRef;

  /**
   * Source of the provider credentials.
   *
   * @schema ProviderConfigSpecCredentials#source
   */
  readonly source: ProviderConfigSpecCredentialsSource;

}

/**
 * Converts an object of type 'ProviderConfigSpecCredentials' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProviderConfigSpecCredentials(obj: ProviderConfigSpecCredentials | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'env': toJson_ProviderConfigSpecCredentialsEnv(obj.env),
    'fs': toJson_ProviderConfigSpecCredentialsFs(obj.fs),
    'secretRef': toJson_ProviderConfigSpecCredentialsSecretRef(obj.secretRef),
    'source': obj.source,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Identity used to authenticate to the Kubernetes API. The identity credentials can be used to supplement kubeconfig 'credentials', for example by configuring a bearer token source such as OAuth.
 *
 * @schema ProviderConfigSpecIdentity
 */
export interface ProviderConfigSpecIdentity {
  /**
   * Env is a reference to an environment variable that contains credentials that must be used to connect to the provider.
   *
   * @schema ProviderConfigSpecIdentity#env
   */
  readonly env?: ProviderConfigSpecIdentityEnv;

  /**
   * Fs is a reference to a filesystem location that contains credentials that must be used to connect to the provider.
   *
   * @schema ProviderConfigSpecIdentity#fs
   */
  readonly fs?: ProviderConfigSpecIdentityFs;

  /**
   * A SecretRef is a reference to a secret key that contains the credentials that must be used to connect to the provider.
   *
   * @schema ProviderConfigSpecIdentity#secretRef
   */
  readonly secretRef?: ProviderConfigSpecIdentitySecretRef;

  /**
   * Source of the provider credentials.
   *
   * @schema ProviderConfigSpecIdentity#source
   */
  readonly source: ProviderConfigSpecIdentitySource;

  /**
   * Type of identity.
   *
   * @schema ProviderConfigSpecIdentity#type
   */
  readonly type: ProviderConfigSpecIdentityType;

}

/**
 * Converts an object of type 'ProviderConfigSpecIdentity' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProviderConfigSpecIdentity(obj: ProviderConfigSpecIdentity | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'env': toJson_ProviderConfigSpecIdentityEnv(obj.env),
    'fs': toJson_ProviderConfigSpecIdentityFs(obj.fs),
    'secretRef': toJson_ProviderConfigSpecIdentitySecretRef(obj.secretRef),
    'source': obj.source,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Env is a reference to an environment variable that contains credentials that must be used to connect to the provider.
 *
 * @schema ProviderConfigSpecCredentialsEnv
 */
export interface ProviderConfigSpecCredentialsEnv {
  /**
   * Name is the name of an environment variable.
   *
   * @schema ProviderConfigSpecCredentialsEnv#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'ProviderConfigSpecCredentialsEnv' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProviderConfigSpecCredentialsEnv(obj: ProviderConfigSpecCredentialsEnv | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Fs is a reference to a filesystem location that contains credentials that must be used to connect to the provider.
 *
 * @schema ProviderConfigSpecCredentialsFs
 */
export interface ProviderConfigSpecCredentialsFs {
  /**
   * Path is a filesystem path.
   *
   * @schema ProviderConfigSpecCredentialsFs#path
   */
  readonly path: string;

}

/**
 * Converts an object of type 'ProviderConfigSpecCredentialsFs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProviderConfigSpecCredentialsFs(obj: ProviderConfigSpecCredentialsFs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'path': obj.path,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A SecretRef is a reference to a secret key that contains the credentials that must be used to connect to the provider.
 *
 * @schema ProviderConfigSpecCredentialsSecretRef
 */
export interface ProviderConfigSpecCredentialsSecretRef {
  /**
   * The key to select.
   *
   * @schema ProviderConfigSpecCredentialsSecretRef#key
   */
  readonly key: string;

  /**
   * Name of the secret.
   *
   * @schema ProviderConfigSpecCredentialsSecretRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema ProviderConfigSpecCredentialsSecretRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'ProviderConfigSpecCredentialsSecretRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProviderConfigSpecCredentialsSecretRef(obj: ProviderConfigSpecCredentialsSecretRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Source of the provider credentials.
 *
 * @schema ProviderConfigSpecCredentialsSource
 */
export enum ProviderConfigSpecCredentialsSource {
  /** None */
  NONE = "None",
  /** Secret */
  SECRET = "Secret",
  /** InjectedIdentity */
  INJECTED_IDENTITY = "InjectedIdentity",
  /** Environment */
  ENVIRONMENT = "Environment",
  /** Filesystem */
  FILESYSTEM = "Filesystem",
}

/**
 * Env is a reference to an environment variable that contains credentials that must be used to connect to the provider.
 *
 * @schema ProviderConfigSpecIdentityEnv
 */
export interface ProviderConfigSpecIdentityEnv {
  /**
   * Name is the name of an environment variable.
   *
   * @schema ProviderConfigSpecIdentityEnv#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'ProviderConfigSpecIdentityEnv' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProviderConfigSpecIdentityEnv(obj: ProviderConfigSpecIdentityEnv | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Fs is a reference to a filesystem location that contains credentials that must be used to connect to the provider.
 *
 * @schema ProviderConfigSpecIdentityFs
 */
export interface ProviderConfigSpecIdentityFs {
  /**
   * Path is a filesystem path.
   *
   * @schema ProviderConfigSpecIdentityFs#path
   */
  readonly path: string;

}

/**
 * Converts an object of type 'ProviderConfigSpecIdentityFs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProviderConfigSpecIdentityFs(obj: ProviderConfigSpecIdentityFs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'path': obj.path,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A SecretRef is a reference to a secret key that contains the credentials that must be used to connect to the provider.
 *
 * @schema ProviderConfigSpecIdentitySecretRef
 */
export interface ProviderConfigSpecIdentitySecretRef {
  /**
   * The key to select.
   *
   * @schema ProviderConfigSpecIdentitySecretRef#key
   */
  readonly key: string;

  /**
   * Name of the secret.
   *
   * @schema ProviderConfigSpecIdentitySecretRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema ProviderConfigSpecIdentitySecretRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'ProviderConfigSpecIdentitySecretRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProviderConfigSpecIdentitySecretRef(obj: ProviderConfigSpecIdentitySecretRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Source of the provider credentials.
 *
 * @schema ProviderConfigSpecIdentitySource
 */
export enum ProviderConfigSpecIdentitySource {
  /** None */
  NONE = "None",
  /** Secret */
  SECRET = "Secret",
  /** InjectedIdentity */
  INJECTED_IDENTITY = "InjectedIdentity",
  /** Environment */
  ENVIRONMENT = "Environment",
  /** Filesystem */
  FILESYSTEM = "Filesystem",
}

/**
 * Type of identity.
 *
 * @schema ProviderConfigSpecIdentityType
 */
export enum ProviderConfigSpecIdentityType {
  /** GoogleApplicationCredentials */
  GOOGLE_APPLICATION_CREDENTIALS = "GoogleApplicationCredentials",
}


/**
 * A ProviderConfig configures a Helm 'provider', i.e. a connection to a particular
 *
 * @schema ProviderConfigV1Beta1
 */
export class ProviderConfigV1Beta1 extends ApiObject {
  /**
   * Returns the apiVersion and kind for "ProviderConfigV1Beta1"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'helm.crossplane.io/v1beta1',
    kind: 'ProviderConfig',
  }

  /**
   * Renders a Kubernetes manifest for "ProviderConfigV1Beta1".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: ProviderConfigV1Beta1Props): any {
    return {
      ...ProviderConfigV1Beta1.GVK,
      ...toJson_ProviderConfigV1Beta1Props(props),
    };
  }

  /**
   * Defines a "ProviderConfigV1Beta1" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: ProviderConfigV1Beta1Props) {
    super(scope, id, {
      ...ProviderConfigV1Beta1.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...ProviderConfigV1Beta1.GVK,
      ...toJson_ProviderConfigV1Beta1Props(resolved),
    };
  }
}

/**
 * A ProviderConfig configures a Helm 'provider', i.e. a connection to a particular
 *
 * @schema ProviderConfigV1Beta1
 */
export interface ProviderConfigV1Beta1Props {
  /**
   * @schema ProviderConfigV1Beta1#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * A ProviderConfigSpec defines the desired state of a Provider.
   *
   * @schema ProviderConfigV1Beta1#spec
   */
  readonly spec: ProviderConfigV1Beta1Spec;

}

/**
 * Converts an object of type 'ProviderConfigV1Beta1Props' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProviderConfigV1Beta1Props(obj: ProviderConfigV1Beta1Props | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_ProviderConfigV1Beta1Spec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A ProviderConfigSpec defines the desired state of a Provider.
 *
 * @schema ProviderConfigV1Beta1Spec
 */
export interface ProviderConfigV1Beta1Spec {
  /**
   * Credentials used to connect to the Kubernetes API. Typically a kubeconfig file. Use InjectedIdentity for in-cluster config.
   *
   * @schema ProviderConfigV1Beta1Spec#credentials
   */
  readonly credentials: ProviderConfigV1Beta1SpecCredentials;

  /**
   * Identity used to authenticate to the Kubernetes API. The identity credentials can be used to supplement kubeconfig 'credentials', for example by configuring a bearer token source such as OAuth.
   *
   * @schema ProviderConfigV1Beta1Spec#identity
   */
  readonly identity?: ProviderConfigV1Beta1SpecIdentity;

}

/**
 * Converts an object of type 'ProviderConfigV1Beta1Spec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProviderConfigV1Beta1Spec(obj: ProviderConfigV1Beta1Spec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'credentials': toJson_ProviderConfigV1Beta1SpecCredentials(obj.credentials),
    'identity': toJson_ProviderConfigV1Beta1SpecIdentity(obj.identity),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Credentials used to connect to the Kubernetes API. Typically a kubeconfig file. Use InjectedIdentity for in-cluster config.
 *
 * @schema ProviderConfigV1Beta1SpecCredentials
 */
export interface ProviderConfigV1Beta1SpecCredentials {
  /**
   * Env is a reference to an environment variable that contains credentials that must be used to connect to the provider.
   *
   * @schema ProviderConfigV1Beta1SpecCredentials#env
   */
  readonly env?: ProviderConfigV1Beta1SpecCredentialsEnv;

  /**
   * Fs is a reference to a filesystem location that contains credentials that must be used to connect to the provider.
   *
   * @schema ProviderConfigV1Beta1SpecCredentials#fs
   */
  readonly fs?: ProviderConfigV1Beta1SpecCredentialsFs;

  /**
   * A SecretRef is a reference to a secret key that contains the credentials that must be used to connect to the provider.
   *
   * @schema ProviderConfigV1Beta1SpecCredentials#secretRef
   */
  readonly secretRef?: ProviderConfigV1Beta1SpecCredentialsSecretRef;

  /**
   * Source of the provider credentials.
   *
   * @schema ProviderConfigV1Beta1SpecCredentials#source
   */
  readonly source: ProviderConfigV1Beta1SpecCredentialsSource;

}

/**
 * Converts an object of type 'ProviderConfigV1Beta1SpecCredentials' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProviderConfigV1Beta1SpecCredentials(obj: ProviderConfigV1Beta1SpecCredentials | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'env': toJson_ProviderConfigV1Beta1SpecCredentialsEnv(obj.env),
    'fs': toJson_ProviderConfigV1Beta1SpecCredentialsFs(obj.fs),
    'secretRef': toJson_ProviderConfigV1Beta1SpecCredentialsSecretRef(obj.secretRef),
    'source': obj.source,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Identity used to authenticate to the Kubernetes API. The identity credentials can be used to supplement kubeconfig 'credentials', for example by configuring a bearer token source such as OAuth.
 *
 * @schema ProviderConfigV1Beta1SpecIdentity
 */
export interface ProviderConfigV1Beta1SpecIdentity {
  /**
   * Env is a reference to an environment variable that contains credentials that must be used to connect to the provider.
   *
   * @schema ProviderConfigV1Beta1SpecIdentity#env
   */
  readonly env?: ProviderConfigV1Beta1SpecIdentityEnv;

  /**
   * Fs is a reference to a filesystem location that contains credentials that must be used to connect to the provider.
   *
   * @schema ProviderConfigV1Beta1SpecIdentity#fs
   */
  readonly fs?: ProviderConfigV1Beta1SpecIdentityFs;

  /**
   * A SecretRef is a reference to a secret key that contains the credentials that must be used to connect to the provider.
   *
   * @schema ProviderConfigV1Beta1SpecIdentity#secretRef
   */
  readonly secretRef?: ProviderConfigV1Beta1SpecIdentitySecretRef;

  /**
   * Source of the provider credentials.
   *
   * @schema ProviderConfigV1Beta1SpecIdentity#source
   */
  readonly source: ProviderConfigV1Beta1SpecIdentitySource;

  /**
   * Type of identity.
   *
   * @schema ProviderConfigV1Beta1SpecIdentity#type
   */
  readonly type: ProviderConfigV1Beta1SpecIdentityType;

}

/**
 * Converts an object of type 'ProviderConfigV1Beta1SpecIdentity' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProviderConfigV1Beta1SpecIdentity(obj: ProviderConfigV1Beta1SpecIdentity | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'env': toJson_ProviderConfigV1Beta1SpecIdentityEnv(obj.env),
    'fs': toJson_ProviderConfigV1Beta1SpecIdentityFs(obj.fs),
    'secretRef': toJson_ProviderConfigV1Beta1SpecIdentitySecretRef(obj.secretRef),
    'source': obj.source,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Env is a reference to an environment variable that contains credentials that must be used to connect to the provider.
 *
 * @schema ProviderConfigV1Beta1SpecCredentialsEnv
 */
export interface ProviderConfigV1Beta1SpecCredentialsEnv {
  /**
   * Name is the name of an environment variable.
   *
   * @schema ProviderConfigV1Beta1SpecCredentialsEnv#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'ProviderConfigV1Beta1SpecCredentialsEnv' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProviderConfigV1Beta1SpecCredentialsEnv(obj: ProviderConfigV1Beta1SpecCredentialsEnv | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Fs is a reference to a filesystem location that contains credentials that must be used to connect to the provider.
 *
 * @schema ProviderConfigV1Beta1SpecCredentialsFs
 */
export interface ProviderConfigV1Beta1SpecCredentialsFs {
  /**
   * Path is a filesystem path.
   *
   * @schema ProviderConfigV1Beta1SpecCredentialsFs#path
   */
  readonly path: string;

}

/**
 * Converts an object of type 'ProviderConfigV1Beta1SpecCredentialsFs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProviderConfigV1Beta1SpecCredentialsFs(obj: ProviderConfigV1Beta1SpecCredentialsFs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'path': obj.path,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A SecretRef is a reference to a secret key that contains the credentials that must be used to connect to the provider.
 *
 * @schema ProviderConfigV1Beta1SpecCredentialsSecretRef
 */
export interface ProviderConfigV1Beta1SpecCredentialsSecretRef {
  /**
   * The key to select.
   *
   * @schema ProviderConfigV1Beta1SpecCredentialsSecretRef#key
   */
  readonly key: string;

  /**
   * Name of the secret.
   *
   * @schema ProviderConfigV1Beta1SpecCredentialsSecretRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema ProviderConfigV1Beta1SpecCredentialsSecretRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'ProviderConfigV1Beta1SpecCredentialsSecretRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProviderConfigV1Beta1SpecCredentialsSecretRef(obj: ProviderConfigV1Beta1SpecCredentialsSecretRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Source of the provider credentials.
 *
 * @schema ProviderConfigV1Beta1SpecCredentialsSource
 */
export enum ProviderConfigV1Beta1SpecCredentialsSource {
  /** None */
  NONE = "None",
  /** Secret */
  SECRET = "Secret",
  /** InjectedIdentity */
  INJECTED_IDENTITY = "InjectedIdentity",
  /** Environment */
  ENVIRONMENT = "Environment",
  /** Filesystem */
  FILESYSTEM = "Filesystem",
}

/**
 * Env is a reference to an environment variable that contains credentials that must be used to connect to the provider.
 *
 * @schema ProviderConfigV1Beta1SpecIdentityEnv
 */
export interface ProviderConfigV1Beta1SpecIdentityEnv {
  /**
   * Name is the name of an environment variable.
   *
   * @schema ProviderConfigV1Beta1SpecIdentityEnv#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'ProviderConfigV1Beta1SpecIdentityEnv' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProviderConfigV1Beta1SpecIdentityEnv(obj: ProviderConfigV1Beta1SpecIdentityEnv | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Fs is a reference to a filesystem location that contains credentials that must be used to connect to the provider.
 *
 * @schema ProviderConfigV1Beta1SpecIdentityFs
 */
export interface ProviderConfigV1Beta1SpecIdentityFs {
  /**
   * Path is a filesystem path.
   *
   * @schema ProviderConfigV1Beta1SpecIdentityFs#path
   */
  readonly path: string;

}

/**
 * Converts an object of type 'ProviderConfigV1Beta1SpecIdentityFs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProviderConfigV1Beta1SpecIdentityFs(obj: ProviderConfigV1Beta1SpecIdentityFs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'path': obj.path,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A SecretRef is a reference to a secret key that contains the credentials that must be used to connect to the provider.
 *
 * @schema ProviderConfigV1Beta1SpecIdentitySecretRef
 */
export interface ProviderConfigV1Beta1SpecIdentitySecretRef {
  /**
   * The key to select.
   *
   * @schema ProviderConfigV1Beta1SpecIdentitySecretRef#key
   */
  readonly key: string;

  /**
   * Name of the secret.
   *
   * @schema ProviderConfigV1Beta1SpecIdentitySecretRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema ProviderConfigV1Beta1SpecIdentitySecretRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'ProviderConfigV1Beta1SpecIdentitySecretRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProviderConfigV1Beta1SpecIdentitySecretRef(obj: ProviderConfigV1Beta1SpecIdentitySecretRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Source of the provider credentials.
 *
 * @schema ProviderConfigV1Beta1SpecIdentitySource
 */
export enum ProviderConfigV1Beta1SpecIdentitySource {
  /** None */
  NONE = "None",
  /** Secret */
  SECRET = "Secret",
  /** InjectedIdentity */
  INJECTED_IDENTITY = "InjectedIdentity",
  /** Environment */
  ENVIRONMENT = "Environment",
  /** Filesystem */
  FILESYSTEM = "Filesystem",
}

/**
 * Type of identity.
 *
 * @schema ProviderConfigV1Beta1SpecIdentityType
 */
export enum ProviderConfigV1Beta1SpecIdentityType {
  /** GoogleApplicationCredentials */
  GOOGLE_APPLICATION_CREDENTIALS = "GoogleApplicationCredentials",
}

