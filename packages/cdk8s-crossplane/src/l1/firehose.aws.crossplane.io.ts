// @ts-nocheck
// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 * DeliveryStream is the Schema for the DeliveryStreams API
 *
 * @schema DeliveryStream
 */
export class DeliveryStream extends ApiObject {
  /**
   * Returns the apiVersion and kind for "DeliveryStream"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'firehose.aws.crossplane.io/v1alpha1',
    kind: 'DeliveryStream',
  }

  /**
   * Renders a Kubernetes manifest for "DeliveryStream".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: DeliveryStreamProps): any {
    return {
      ...DeliveryStream.GVK,
      ...toJson_DeliveryStreamProps(props),
    };
  }

  /**
   * Defines a "DeliveryStream" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: DeliveryStreamProps) {
    super(scope, id, {
      ...DeliveryStream.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...DeliveryStream.GVK,
      ...toJson_DeliveryStreamProps(resolved),
    };
  }
}

/**
 * DeliveryStream is the Schema for the DeliveryStreams API
 *
 * @schema DeliveryStream
 */
export interface DeliveryStreamProps {
  /**
   * @schema DeliveryStream#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * DeliveryStreamSpec defines the desired state of DeliveryStream
   *
   * @schema DeliveryStream#spec
   */
  readonly spec: DeliveryStreamSpec;

}

/**
 * Converts an object of type 'DeliveryStreamProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamProps(obj: DeliveryStreamProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_DeliveryStreamSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DeliveryStreamSpec defines the desired state of DeliveryStream
 *
 * @schema DeliveryStreamSpec
 */
export interface DeliveryStreamSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
   *
   * @schema DeliveryStreamSpec#deletionPolicy
   */
  readonly deletionPolicy?: DeliveryStreamSpecDeletionPolicy;

  /**
   * DeliveryStreamParameters defines the desired state of DeliveryStream
   *
   * @schema DeliveryStreamSpec#forProvider
   */
  readonly forProvider: DeliveryStreamSpecForProvider;

  /**
   * THIS IS A BETA FIELD. It is on by default but can be opted out through a Crossplane feature flag. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
   *
   * @schema DeliveryStreamSpec#managementPolicies
   */
  readonly managementPolicies?: DeliveryStreamSpecManagementPolicies[];

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema DeliveryStreamSpec#providerConfigRef
   */
  readonly providerConfigRef?: DeliveryStreamSpecProviderConfigRef;

  /**
   * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema DeliveryStreamSpec#publishConnectionDetailsTo
   */
  readonly publishConnectionDetailsTo?: DeliveryStreamSpecPublishConnectionDetailsTo;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
   *
   * @schema DeliveryStreamSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: DeliveryStreamSpecWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'DeliveryStreamSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpec(obj: DeliveryStreamSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'deletionPolicy': obj.deletionPolicy,
    'forProvider': toJson_DeliveryStreamSpecForProvider(obj.forProvider),
    'managementPolicies': obj.managementPolicies?.map(y => y),
    'providerConfigRef': toJson_DeliveryStreamSpecProviderConfigRef(obj.providerConfigRef),
    'publishConnectionDetailsTo': toJson_DeliveryStreamSpecPublishConnectionDetailsTo(obj.publishConnectionDetailsTo),
    'writeConnectionSecretToRef': toJson_DeliveryStreamSpecWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
 *
 * @schema DeliveryStreamSpecDeletionPolicy
 */
export enum DeliveryStreamSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * DeliveryStreamParameters defines the desired state of DeliveryStream
 *
 * @schema DeliveryStreamSpecForProvider
 */
export interface DeliveryStreamSpecForProvider {
  /**
   * The destination in the Serverless offering for Amazon OpenSearch Service. You can specify only one destination.
   *
   * @schema DeliveryStreamSpecForProvider#amazonOpenSearchServerlessDestinationConfiguration
   */
  readonly amazonOpenSearchServerlessDestinationConfiguration?: DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfiguration;

  /**
   * The destination in Amazon OpenSearch Service. You can specify only one destination.
   *
   * @schema DeliveryStreamSpecForProvider#amazonopensearchserviceDestinationConfiguration
   */
  readonly amazonopensearchserviceDestinationConfiguration?: DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfiguration;

  /**
   * Used to specify the type and Amazon Resource Name (ARN) of the KMS key needed for Server-Side Encryption (SSE).
   *
   * @schema DeliveryStreamSpecForProvider#deliveryStreamEncryptionConfigurationInput
   */
  readonly deliveryStreamEncryptionConfigurationInput?: DeliveryStreamSpecForProviderDeliveryStreamEncryptionConfigurationInput;

  /**
   * The name of the delivery stream. This name must be unique per Amazon Web Services account in the same Amazon Web Services Region. If the delivery streams are in different accounts or different Regions, you can have multiple delivery streams with the same name.
   *
   * @schema DeliveryStreamSpecForProvider#deliveryStreamName
   */
  readonly deliveryStreamName: string;

  /**
   * The delivery stream type. This parameter can be one of the following values:
   * * DirectPut: Provider applications access the delivery stream directly.
   * * KinesisStreamAsSource: The delivery stream uses a Kinesis data stream as a source.
   *
   * @schema DeliveryStreamSpecForProvider#deliveryStreamType
   */
  readonly deliveryStreamType?: string;

  /**
   * The destination in Amazon ES. You can specify only one destination.
   *
   * @schema DeliveryStreamSpecForProvider#elasticsearchDestinationConfiguration
   */
  readonly elasticsearchDestinationConfiguration?: DeliveryStreamSpecForProviderElasticsearchDestinationConfiguration;

  /**
   * The destination in Amazon S3. You can specify only one destination.
   *
   * @schema DeliveryStreamSpecForProvider#extendedS3DestinationConfiguration
   */
  readonly extendedS3DestinationConfiguration?: DeliveryStreamSpecForProviderExtendedS3DestinationConfiguration;

  /**
   * Enables configuring Kinesis Firehose to deliver data to any HTTP endpoint destination. You can specify only one destination.
   *
   * @schema DeliveryStreamSpecForProvider#httpEndpointDestinationConfiguration
   */
  readonly httpEndpointDestinationConfiguration?: DeliveryStreamSpecForProviderHttpEndpointDestinationConfiguration;

  /**
   * When a Kinesis data stream is used as the source for the delivery stream, a KinesisStreamSourceConfiguration containing the Kinesis data stream Amazon Resource Name (ARN) and the role ARN for the source stream.
   *
   * @schema DeliveryStreamSpecForProvider#kinesisStreamSourceConfiguration
   */
  readonly kinesisStreamSourceConfiguration?: DeliveryStreamSpecForProviderKinesisStreamSourceConfiguration;

  /**
   * @schema DeliveryStreamSpecForProvider#kmsKeyARN
   */
  readonly kmsKeyArn?: string;

  /**
   * A Reference to a named object.
   *
   * @schema DeliveryStreamSpecForProvider#kmsKeyARNRef
   */
  readonly kmsKeyArnRef?: DeliveryStreamSpecForProviderKmsKeyArnRef;

  /**
   * A Selector selects an object.
   *
   * @schema DeliveryStreamSpecForProvider#kmsKeyARNSelector
   */
  readonly kmsKeyArnSelector?: DeliveryStreamSpecForProviderKmsKeyArnSelector;

  /**
   * The destination in Amazon Redshift. You can specify only one destination.
   *
   * @schema DeliveryStreamSpecForProvider#redshiftDestinationConfiguration
   */
  readonly redshiftDestinationConfiguration?: DeliveryStreamSpecForProviderRedshiftDestinationConfiguration;

  /**
   * Region is which region the DeliveryStream will be created.
   *
   * @schema DeliveryStreamSpecForProvider#region
   */
  readonly region: string;

  /**
   * [Deprecated] The destination in Amazon S3. You can specify only one destination.
   *
   * @schema DeliveryStreamSpecForProvider#s3DestinationConfiguration
   */
  readonly s3DestinationConfiguration?: DeliveryStreamSpecForProviderS3DestinationConfiguration;

  /**
   * The destination in Splunk. You can specify only one destination.
   *
   * @schema DeliveryStreamSpecForProvider#splunkDestinationConfiguration
   */
  readonly splunkDestinationConfiguration?: DeliveryStreamSpecForProviderSplunkDestinationConfiguration;

  /**
   * A set of tags to assign to the delivery stream. A tag is a key-value pair that you can define and assign to Amazon Web Services resources. Tags are metadata. For example, you can add friendly names and descriptions or other types of information that can help you distinguish the delivery stream. For more information about tags, see Using Cost Allocation Tags (https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html) in the Amazon Web Services Billing and Cost Management User Guide.
   * You can specify up to 50 tags when creating a delivery stream.
   *
   * @schema DeliveryStreamSpecForProvider#tags
   */
  readonly tags?: DeliveryStreamSpecForProviderTags[];

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProvider(obj: DeliveryStreamSpecForProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'amazonOpenSearchServerlessDestinationConfiguration': toJson_DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfiguration(obj.amazonOpenSearchServerlessDestinationConfiguration),
    'amazonopensearchserviceDestinationConfiguration': toJson_DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfiguration(obj.amazonopensearchserviceDestinationConfiguration),
    'deliveryStreamEncryptionConfigurationInput': toJson_DeliveryStreamSpecForProviderDeliveryStreamEncryptionConfigurationInput(obj.deliveryStreamEncryptionConfigurationInput),
    'deliveryStreamName': obj.deliveryStreamName,
    'deliveryStreamType': obj.deliveryStreamType,
    'elasticsearchDestinationConfiguration': toJson_DeliveryStreamSpecForProviderElasticsearchDestinationConfiguration(obj.elasticsearchDestinationConfiguration),
    'extendedS3DestinationConfiguration': toJson_DeliveryStreamSpecForProviderExtendedS3DestinationConfiguration(obj.extendedS3DestinationConfiguration),
    'httpEndpointDestinationConfiguration': toJson_DeliveryStreamSpecForProviderHttpEndpointDestinationConfiguration(obj.httpEndpointDestinationConfiguration),
    'kinesisStreamSourceConfiguration': toJson_DeliveryStreamSpecForProviderKinesisStreamSourceConfiguration(obj.kinesisStreamSourceConfiguration),
    'kmsKeyARN': obj.kmsKeyArn,
    'kmsKeyARNRef': toJson_DeliveryStreamSpecForProviderKmsKeyArnRef(obj.kmsKeyArnRef),
    'kmsKeyARNSelector': toJson_DeliveryStreamSpecForProviderKmsKeyArnSelector(obj.kmsKeyArnSelector),
    'redshiftDestinationConfiguration': toJson_DeliveryStreamSpecForProviderRedshiftDestinationConfiguration(obj.redshiftDestinationConfiguration),
    'region': obj.region,
    's3DestinationConfiguration': toJson_DeliveryStreamSpecForProviderS3DestinationConfiguration(obj.s3DestinationConfiguration),
    'splunkDestinationConfiguration': toJson_DeliveryStreamSpecForProviderSplunkDestinationConfiguration(obj.splunkDestinationConfiguration),
    'tags': obj.tags?.map(y => toJson_DeliveryStreamSpecForProviderTags(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A ManagementAction represents an action that the Crossplane controllers can take on an external resource.
 *
 * @schema DeliveryStreamSpecManagementPolicies
 */
export enum DeliveryStreamSpecManagementPolicies {
  /** Observe */
  OBSERVE = "Observe",
  /** Create */
  CREATE = "Create",
  /** Update */
  UPDATE = "Update",
  /** Delete */
  DELETE = "Delete",
  /** LateInitialize */
  LATE_INITIALIZE = "LateInitialize",
  /** * */
  VALUE_ASTERISK = "*",
}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema DeliveryStreamSpecProviderConfigRef
 */
export interface DeliveryStreamSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema DeliveryStreamSpecProviderConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema DeliveryStreamSpecProviderConfigRef#policy
   */
  readonly policy?: DeliveryStreamSpecProviderConfigRefPolicy;

}

/**
 * Converts an object of type 'DeliveryStreamSpecProviderConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecProviderConfigRef(obj: DeliveryStreamSpecProviderConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_DeliveryStreamSpecProviderConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema DeliveryStreamSpecPublishConnectionDetailsTo
 */
export interface DeliveryStreamSpecPublishConnectionDetailsTo {
  /**
   * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
   *
   * @schema DeliveryStreamSpecPublishConnectionDetailsTo#configRef
   */
  readonly configRef?: DeliveryStreamSpecPublishConnectionDetailsToConfigRef;

  /**
   * Metadata is the metadata for connection secret.
   *
   * @schema DeliveryStreamSpecPublishConnectionDetailsTo#metadata
   */
  readonly metadata?: DeliveryStreamSpecPublishConnectionDetailsToMetadata;

  /**
   * Name is the name of the connection secret.
   *
   * @schema DeliveryStreamSpecPublishConnectionDetailsTo#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecPublishConnectionDetailsTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecPublishConnectionDetailsTo(obj: DeliveryStreamSpecPublishConnectionDetailsTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configRef': toJson_DeliveryStreamSpecPublishConnectionDetailsToConfigRef(obj.configRef),
    'metadata': toJson_DeliveryStreamSpecPublishConnectionDetailsToMetadata(obj.metadata),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
 *
 * @schema DeliveryStreamSpecWriteConnectionSecretToRef
 */
export interface DeliveryStreamSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema DeliveryStreamSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema DeliveryStreamSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecWriteConnectionSecretToRef(obj: DeliveryStreamSpecWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The destination in the Serverless offering for Amazon OpenSearch Service. You can specify only one destination.
 *
 * @schema DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfiguration
 */
export interface DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfiguration {
  /**
   * Describes the buffering to perform before delivering data to the Serverless offering for Amazon OpenSearch Service destination.
   *
   * @schema DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfiguration#bufferingHints
   */
  readonly bufferingHints?: DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationBufferingHints;

  /**
   * Describes the Amazon CloudWatch logging options for your delivery stream.
   *
   * @schema DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfiguration#cloudWatchLoggingOptions
   */
  readonly cloudWatchLoggingOptions?: DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationCloudWatchLoggingOptions;

  /**
   * @schema DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfiguration#collectionEndpoint
   */
  readonly collectionEndpoint?: string;

  /**
   * @schema DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfiguration#indexName
   */
  readonly indexName?: string;

  /**
   * Describes a data processing configuration.
   *
   * @schema DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfiguration#processingConfiguration
   */
  readonly processingConfiguration?: DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationProcessingConfiguration;

  /**
   * Configures retry behavior in case Kinesis Data Firehose is unable to deliver documents to the Serverless offering for Amazon OpenSearch Service.
   *
   * @schema DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfiguration#retryOptions
   */
  readonly retryOptions?: DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationRetryOptions;

  /**
   * @schema DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfiguration#roleARN
   */
  readonly roleArn?: string;

  /**
   * @schema DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfiguration#s3BackupMode
   */
  readonly s3BackupMode?: string;

  /**
   * Describes the configuration of a destination in Amazon S3.
   *
   * @schema DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfiguration#s3Configuration
   */
  readonly s3Configuration?: DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationS3Configuration;

  /**
   * The details of the VPC of the Amazon ES destination.
   *
   * @schema DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfiguration#vpcConfiguration
   */
  readonly vpcConfiguration?: DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationVpcConfiguration;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfiguration(obj: DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'bufferingHints': toJson_DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationBufferingHints(obj.bufferingHints),
    'cloudWatchLoggingOptions': toJson_DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationCloudWatchLoggingOptions(obj.cloudWatchLoggingOptions),
    'collectionEndpoint': obj.collectionEndpoint,
    'indexName': obj.indexName,
    'processingConfiguration': toJson_DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationProcessingConfiguration(obj.processingConfiguration),
    'retryOptions': toJson_DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationRetryOptions(obj.retryOptions),
    'roleARN': obj.roleArn,
    's3BackupMode': obj.s3BackupMode,
    's3Configuration': toJson_DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationS3Configuration(obj.s3Configuration),
    'vpcConfiguration': toJson_DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationVpcConfiguration(obj.vpcConfiguration),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The destination in Amazon OpenSearch Service. You can specify only one destination.
 *
 * @schema DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfiguration
 */
export interface DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfiguration {
  /**
   * Describes the buffering to perform before delivering data to the Amazon OpenSearch Service destination.
   *
   * @schema DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfiguration#bufferingHints
   */
  readonly bufferingHints?: DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationBufferingHints;

  /**
   * Describes the Amazon CloudWatch logging options for your delivery stream.
   *
   * @schema DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfiguration#cloudWatchLoggingOptions
   */
  readonly cloudWatchLoggingOptions?: DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationCloudWatchLoggingOptions;

  /**
   * @schema DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfiguration#clusterEndpoint
   */
  readonly clusterEndpoint?: string;

  /**
   * @schema DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfiguration#domainARN
   */
  readonly domainArn?: string;

  /**
   * @schema DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfiguration#indexName
   */
  readonly indexName?: string;

  /**
   * @schema DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfiguration#indexRotationPeriod
   */
  readonly indexRotationPeriod?: string;

  /**
   * Describes a data processing configuration.
   *
   * @schema DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfiguration#processingConfiguration
   */
  readonly processingConfiguration?: DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationProcessingConfiguration;

  /**
   * Configures retry behavior in case Kinesis Data Firehose is unable to deliver documents to Amazon OpenSearch Service.
   *
   * @schema DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfiguration#retryOptions
   */
  readonly retryOptions?: DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationRetryOptions;

  /**
   * @schema DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfiguration#roleARN
   */
  readonly roleArn?: string;

  /**
   * @schema DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfiguration#s3BackupMode
   */
  readonly s3BackupMode?: string;

  /**
   * Describes the configuration of a destination in Amazon S3.
   *
   * @schema DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfiguration#s3Configuration
   */
  readonly s3Configuration?: DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationS3Configuration;

  /**
   * @schema DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfiguration#typeName
   */
  readonly typeName?: string;

  /**
   * The details of the VPC of the Amazon ES destination.
   *
   * @schema DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfiguration#vpcConfiguration
   */
  readonly vpcConfiguration?: DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationVpcConfiguration;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfiguration(obj: DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'bufferingHints': toJson_DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationBufferingHints(obj.bufferingHints),
    'cloudWatchLoggingOptions': toJson_DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationCloudWatchLoggingOptions(obj.cloudWatchLoggingOptions),
    'clusterEndpoint': obj.clusterEndpoint,
    'domainARN': obj.domainArn,
    'indexName': obj.indexName,
    'indexRotationPeriod': obj.indexRotationPeriod,
    'processingConfiguration': toJson_DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationProcessingConfiguration(obj.processingConfiguration),
    'retryOptions': toJson_DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationRetryOptions(obj.retryOptions),
    'roleARN': obj.roleArn,
    's3BackupMode': obj.s3BackupMode,
    's3Configuration': toJson_DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationS3Configuration(obj.s3Configuration),
    'typeName': obj.typeName,
    'vpcConfiguration': toJson_DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationVpcConfiguration(obj.vpcConfiguration),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Used to specify the type and Amazon Resource Name (ARN) of the KMS key needed for Server-Side Encryption (SSE).
 *
 * @schema DeliveryStreamSpecForProviderDeliveryStreamEncryptionConfigurationInput
 */
export interface DeliveryStreamSpecForProviderDeliveryStreamEncryptionConfigurationInput {
  /**
   * @schema DeliveryStreamSpecForProviderDeliveryStreamEncryptionConfigurationInput#keyARN
   */
  readonly keyArn?: string;

  /**
   * @schema DeliveryStreamSpecForProviderDeliveryStreamEncryptionConfigurationInput#keyType
   */
  readonly keyType?: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderDeliveryStreamEncryptionConfigurationInput' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderDeliveryStreamEncryptionConfigurationInput(obj: DeliveryStreamSpecForProviderDeliveryStreamEncryptionConfigurationInput | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'keyARN': obj.keyArn,
    'keyType': obj.keyType,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The destination in Amazon ES. You can specify only one destination.
 *
 * @schema DeliveryStreamSpecForProviderElasticsearchDestinationConfiguration
 */
export interface DeliveryStreamSpecForProviderElasticsearchDestinationConfiguration {
  /**
   * Describes the buffering to perform before delivering data to the Amazon ES destination.
   *
   * @schema DeliveryStreamSpecForProviderElasticsearchDestinationConfiguration#bufferingHints
   */
  readonly bufferingHints?: DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationBufferingHints;

  /**
   * Describes the Amazon CloudWatch logging options for your delivery stream.
   *
   * @schema DeliveryStreamSpecForProviderElasticsearchDestinationConfiguration#cloudWatchLoggingOptions
   */
  readonly cloudWatchLoggingOptions?: DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationCloudWatchLoggingOptions;

  /**
   * @schema DeliveryStreamSpecForProviderElasticsearchDestinationConfiguration#clusterEndpoint
   */
  readonly clusterEndpoint?: string;

  /**
   * @schema DeliveryStreamSpecForProviderElasticsearchDestinationConfiguration#domainARN
   */
  readonly domainArn?: string;

  /**
   * @schema DeliveryStreamSpecForProviderElasticsearchDestinationConfiguration#indexName
   */
  readonly indexName?: string;

  /**
   * @schema DeliveryStreamSpecForProviderElasticsearchDestinationConfiguration#indexRotationPeriod
   */
  readonly indexRotationPeriod?: string;

  /**
   * Describes a data processing configuration.
   *
   * @schema DeliveryStreamSpecForProviderElasticsearchDestinationConfiguration#processingConfiguration
   */
  readonly processingConfiguration?: DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationProcessingConfiguration;

  /**
   * Configures retry behavior in case Kinesis Data Firehose is unable to deliver documents to Amazon ES.
   *
   * @schema DeliveryStreamSpecForProviderElasticsearchDestinationConfiguration#retryOptions
   */
  readonly retryOptions?: DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationRetryOptions;

  /**
   * @schema DeliveryStreamSpecForProviderElasticsearchDestinationConfiguration#roleARN
   */
  readonly roleArn?: string;

  /**
   * @schema DeliveryStreamSpecForProviderElasticsearchDestinationConfiguration#s3BackupMode
   */
  readonly s3BackupMode?: string;

  /**
   * Describes the configuration of a destination in Amazon S3.
   *
   * @schema DeliveryStreamSpecForProviderElasticsearchDestinationConfiguration#s3Configuration
   */
  readonly s3Configuration?: DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationS3Configuration;

  /**
   * @schema DeliveryStreamSpecForProviderElasticsearchDestinationConfiguration#typeName
   */
  readonly typeName?: string;

  /**
   * The details of the VPC of the Amazon ES destination.
   *
   * @schema DeliveryStreamSpecForProviderElasticsearchDestinationConfiguration#vpcConfiguration
   */
  readonly vpcConfiguration?: DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationVpcConfiguration;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderElasticsearchDestinationConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderElasticsearchDestinationConfiguration(obj: DeliveryStreamSpecForProviderElasticsearchDestinationConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'bufferingHints': toJson_DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationBufferingHints(obj.bufferingHints),
    'cloudWatchLoggingOptions': toJson_DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationCloudWatchLoggingOptions(obj.cloudWatchLoggingOptions),
    'clusterEndpoint': obj.clusterEndpoint,
    'domainARN': obj.domainArn,
    'indexName': obj.indexName,
    'indexRotationPeriod': obj.indexRotationPeriod,
    'processingConfiguration': toJson_DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationProcessingConfiguration(obj.processingConfiguration),
    'retryOptions': toJson_DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationRetryOptions(obj.retryOptions),
    'roleARN': obj.roleArn,
    's3BackupMode': obj.s3BackupMode,
    's3Configuration': toJson_DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationS3Configuration(obj.s3Configuration),
    'typeName': obj.typeName,
    'vpcConfiguration': toJson_DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationVpcConfiguration(obj.vpcConfiguration),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The destination in Amazon S3. You can specify only one destination.
 *
 * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfiguration
 */
export interface DeliveryStreamSpecForProviderExtendedS3DestinationConfiguration {
  /**
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfiguration#bucketARN
   */
  readonly bucketArn?: string;

  /**
   * Describes hints for the buffering to perform before delivering data to the destination. These options are treated as hints, and therefore Kinesis Data Firehose might choose to use different values when it is optimal. The SizeInMBs and IntervalInSeconds parameters are optional. However, if specify a value for one of them, you must also provide a value for the other.
   *
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfiguration#bufferingHints
   */
  readonly bufferingHints?: DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationBufferingHints;

  /**
   * Describes the Amazon CloudWatch logging options for your delivery stream.
   *
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfiguration#cloudWatchLoggingOptions
   */
  readonly cloudWatchLoggingOptions?: DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationCloudWatchLoggingOptions;

  /**
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfiguration#compressionFormat
   */
  readonly compressionFormat?: string;

  /**
   * Specifies that you want Kinesis Data Firehose to convert data from the JSON format to the Parquet or ORC format before writing it to Amazon S3. Kinesis Data Firehose uses the serializer and deserializer that you specify, in addition to the column information from the Amazon Web Services Glue table, to deserialize your input data from JSON and then serialize it to the Parquet or ORC format. For more information, see Kinesis Data Firehose Record Format Conversion (https://docs.aws.amazon.com/firehose/latest/dev/record-format-conversion.html).
   *
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfiguration#dataFormatConversionConfiguration
   */
  readonly dataFormatConversionConfiguration?: DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfiguration;

  /**
   * The configuration of the dynamic partitioning mechanism that creates smaller data sets from the streaming data by partitioning it based on partition keys. Currently, dynamic partitioning is only supported for Amazon S3 destinations.
   *
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfiguration#dynamicPartitioningConfiguration
   */
  readonly dynamicPartitioningConfiguration?: DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDynamicPartitioningConfiguration;

  /**
   * Describes the encryption for a destination in Amazon S3.
   *
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfiguration#encryptionConfiguration
   */
  readonly encryptionConfiguration?: DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationEncryptionConfiguration;

  /**
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfiguration#errorOutputPrefix
   */
  readonly errorOutputPrefix?: string;

  /**
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfiguration#prefix
   */
  readonly prefix?: string;

  /**
   * Describes a data processing configuration.
   *
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfiguration#processingConfiguration
   */
  readonly processingConfiguration?: DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationProcessingConfiguration;

  /**
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfiguration#roleARN
   */
  readonly roleArn?: string;

  /**
   * Describes the configuration of a destination in Amazon S3.
   *
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfiguration#s3BackupConfiguration
   */
  readonly s3BackupConfiguration?: DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationS3BackupConfiguration;

  /**
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfiguration#s3BackupMode
   */
  readonly s3BackupMode?: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderExtendedS3DestinationConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderExtendedS3DestinationConfiguration(obj: DeliveryStreamSpecForProviderExtendedS3DestinationConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'bucketARN': obj.bucketArn,
    'bufferingHints': toJson_DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationBufferingHints(obj.bufferingHints),
    'cloudWatchLoggingOptions': toJson_DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationCloudWatchLoggingOptions(obj.cloudWatchLoggingOptions),
    'compressionFormat': obj.compressionFormat,
    'dataFormatConversionConfiguration': toJson_DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfiguration(obj.dataFormatConversionConfiguration),
    'dynamicPartitioningConfiguration': toJson_DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDynamicPartitioningConfiguration(obj.dynamicPartitioningConfiguration),
    'encryptionConfiguration': toJson_DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationEncryptionConfiguration(obj.encryptionConfiguration),
    'errorOutputPrefix': obj.errorOutputPrefix,
    'prefix': obj.prefix,
    'processingConfiguration': toJson_DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationProcessingConfiguration(obj.processingConfiguration),
    'roleARN': obj.roleArn,
    's3BackupConfiguration': toJson_DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationS3BackupConfiguration(obj.s3BackupConfiguration),
    's3BackupMode': obj.s3BackupMode,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Enables configuring Kinesis Firehose to deliver data to any HTTP endpoint destination. You can specify only one destination.
 *
 * @schema DeliveryStreamSpecForProviderHttpEndpointDestinationConfiguration
 */
export interface DeliveryStreamSpecForProviderHttpEndpointDestinationConfiguration {
  /**
   * Describes the buffering options that can be applied before data is delivered to the HTTP endpoint destination. Kinesis Data Firehose treats these options as hints, and it might choose to use more optimal values. The SizeInMBs and IntervalInSeconds parameters are optional. However, if specify a value for one of them, you must also provide a value for the other.
   *
   * @schema DeliveryStreamSpecForProviderHttpEndpointDestinationConfiguration#bufferingHints
   */
  readonly bufferingHints?: DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationBufferingHints;

  /**
   * Describes the Amazon CloudWatch logging options for your delivery stream.
   *
   * @schema DeliveryStreamSpecForProviderHttpEndpointDestinationConfiguration#cloudWatchLoggingOptions
   */
  readonly cloudWatchLoggingOptions?: DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationCloudWatchLoggingOptions;

  /**
   * Describes the configuration of the HTTP endpoint to which Kinesis Firehose delivers data.
   *
   * @schema DeliveryStreamSpecForProviderHttpEndpointDestinationConfiguration#endpointConfiguration
   */
  readonly endpointConfiguration?: DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationEndpointConfiguration;

  /**
   * Describes a data processing configuration.
   *
   * @schema DeliveryStreamSpecForProviderHttpEndpointDestinationConfiguration#processingConfiguration
   */
  readonly processingConfiguration?: DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationProcessingConfiguration;

  /**
   * The configuration of the HTTP endpoint request.
   *
   * @schema DeliveryStreamSpecForProviderHttpEndpointDestinationConfiguration#requestConfiguration
   */
  readonly requestConfiguration?: DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationRequestConfiguration;

  /**
   * Describes the retry behavior in case Kinesis Data Firehose is unable to deliver data to the specified HTTP endpoint destination, or if it doesn't receive a valid acknowledgment of receipt from the specified HTTP endpoint destination.
   *
   * @schema DeliveryStreamSpecForProviderHttpEndpointDestinationConfiguration#retryOptions
   */
  readonly retryOptions?: DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationRetryOptions;

  /**
   * @schema DeliveryStreamSpecForProviderHttpEndpointDestinationConfiguration#roleARN
   */
  readonly roleArn?: string;

  /**
   * @schema DeliveryStreamSpecForProviderHttpEndpointDestinationConfiguration#s3BackupMode
   */
  readonly s3BackupMode?: string;

  /**
   * Describes the configuration of a destination in Amazon S3.
   *
   * @schema DeliveryStreamSpecForProviderHttpEndpointDestinationConfiguration#s3Configuration
   */
  readonly s3Configuration?: DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationS3Configuration;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderHttpEndpointDestinationConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderHttpEndpointDestinationConfiguration(obj: DeliveryStreamSpecForProviderHttpEndpointDestinationConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'bufferingHints': toJson_DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationBufferingHints(obj.bufferingHints),
    'cloudWatchLoggingOptions': toJson_DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationCloudWatchLoggingOptions(obj.cloudWatchLoggingOptions),
    'endpointConfiguration': toJson_DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationEndpointConfiguration(obj.endpointConfiguration),
    'processingConfiguration': toJson_DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationProcessingConfiguration(obj.processingConfiguration),
    'requestConfiguration': toJson_DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationRequestConfiguration(obj.requestConfiguration),
    'retryOptions': toJson_DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationRetryOptions(obj.retryOptions),
    'roleARN': obj.roleArn,
    's3BackupMode': obj.s3BackupMode,
    's3Configuration': toJson_DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationS3Configuration(obj.s3Configuration),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * When a Kinesis data stream is used as the source for the delivery stream, a KinesisStreamSourceConfiguration containing the Kinesis data stream Amazon Resource Name (ARN) and the role ARN for the source stream.
 *
 * @schema DeliveryStreamSpecForProviderKinesisStreamSourceConfiguration
 */
export interface DeliveryStreamSpecForProviderKinesisStreamSourceConfiguration {
  /**
   * @schema DeliveryStreamSpecForProviderKinesisStreamSourceConfiguration#kinesisStreamARN
   */
  readonly kinesisStreamArn?: string;

  /**
   * @schema DeliveryStreamSpecForProviderKinesisStreamSourceConfiguration#roleARN
   */
  readonly roleArn?: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderKinesisStreamSourceConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderKinesisStreamSourceConfiguration(obj: DeliveryStreamSpecForProviderKinesisStreamSourceConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'kinesisStreamARN': obj.kinesisStreamArn,
    'roleARN': obj.roleArn,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A Reference to a named object.
 *
 * @schema DeliveryStreamSpecForProviderKmsKeyArnRef
 */
export interface DeliveryStreamSpecForProviderKmsKeyArnRef {
  /**
   * Name of the referenced object.
   *
   * @schema DeliveryStreamSpecForProviderKmsKeyArnRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema DeliveryStreamSpecForProviderKmsKeyArnRef#policy
   */
  readonly policy?: DeliveryStreamSpecForProviderKmsKeyArnRefPolicy;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderKmsKeyArnRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderKmsKeyArnRef(obj: DeliveryStreamSpecForProviderKmsKeyArnRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_DeliveryStreamSpecForProviderKmsKeyArnRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A Selector selects an object.
 *
 * @schema DeliveryStreamSpecForProviderKmsKeyArnSelector
 */
export interface DeliveryStreamSpecForProviderKmsKeyArnSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema DeliveryStreamSpecForProviderKmsKeyArnSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema DeliveryStreamSpecForProviderKmsKeyArnSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

  /**
   * Policies for selection.
   *
   * @schema DeliveryStreamSpecForProviderKmsKeyArnSelector#policy
   */
  readonly policy?: DeliveryStreamSpecForProviderKmsKeyArnSelectorPolicy;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderKmsKeyArnSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderKmsKeyArnSelector(obj: DeliveryStreamSpecForProviderKmsKeyArnSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchControllerRef': obj.matchControllerRef,
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'policy': toJson_DeliveryStreamSpecForProviderKmsKeyArnSelectorPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The destination in Amazon Redshift. You can specify only one destination.
 *
 * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfiguration
 */
export interface DeliveryStreamSpecForProviderRedshiftDestinationConfiguration {
  /**
   * Describes the Amazon CloudWatch logging options for your delivery stream.
   *
   * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfiguration#cloudWatchLoggingOptions
   */
  readonly cloudWatchLoggingOptions?: DeliveryStreamSpecForProviderRedshiftDestinationConfigurationCloudWatchLoggingOptions;

  /**
   * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfiguration#clusterJDBCURL
   */
  readonly clusterJdbcurl?: string;

  /**
   * Describes a COPY command for Amazon Redshift.
   *
   * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfiguration#copyCommand
   */
  readonly copyCommand?: DeliveryStreamSpecForProviderRedshiftDestinationConfigurationCopyCommand;

  /**
   * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfiguration#password
   */
  readonly password?: string;

  /**
   * Describes a data processing configuration.
   *
   * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfiguration#processingConfiguration
   */
  readonly processingConfiguration?: DeliveryStreamSpecForProviderRedshiftDestinationConfigurationProcessingConfiguration;

  /**
   * Configures retry behavior in case Kinesis Data Firehose is unable to deliver documents to Amazon Redshift.
   *
   * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfiguration#retryOptions
   */
  readonly retryOptions?: DeliveryStreamSpecForProviderRedshiftDestinationConfigurationRetryOptions;

  /**
   * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfiguration#roleARN
   */
  readonly roleArn?: string;

  /**
   * Describes the configuration of a destination in Amazon S3.
   *
   * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfiguration#s3BackupConfiguration
   */
  readonly s3BackupConfiguration?: DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3BackupConfiguration;

  /**
   * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfiguration#s3BackupMode
   */
  readonly s3BackupMode?: string;

  /**
   * Describes the configuration of a destination in Amazon S3.
   *
   * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfiguration#s3Configuration
   */
  readonly s3Configuration?: DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3Configuration;

  /**
   * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfiguration#username
   */
  readonly username?: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderRedshiftDestinationConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderRedshiftDestinationConfiguration(obj: DeliveryStreamSpecForProviderRedshiftDestinationConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'cloudWatchLoggingOptions': toJson_DeliveryStreamSpecForProviderRedshiftDestinationConfigurationCloudWatchLoggingOptions(obj.cloudWatchLoggingOptions),
    'clusterJDBCURL': obj.clusterJdbcurl,
    'copyCommand': toJson_DeliveryStreamSpecForProviderRedshiftDestinationConfigurationCopyCommand(obj.copyCommand),
    'password': obj.password,
    'processingConfiguration': toJson_DeliveryStreamSpecForProviderRedshiftDestinationConfigurationProcessingConfiguration(obj.processingConfiguration),
    'retryOptions': toJson_DeliveryStreamSpecForProviderRedshiftDestinationConfigurationRetryOptions(obj.retryOptions),
    'roleARN': obj.roleArn,
    's3BackupConfiguration': toJson_DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3BackupConfiguration(obj.s3BackupConfiguration),
    's3BackupMode': obj.s3BackupMode,
    's3Configuration': toJson_DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3Configuration(obj.s3Configuration),
    'username': obj.username,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * [Deprecated] The destination in Amazon S3. You can specify only one destination.
 *
 * @schema DeliveryStreamSpecForProviderS3DestinationConfiguration
 */
export interface DeliveryStreamSpecForProviderS3DestinationConfiguration {
  /**
   * @schema DeliveryStreamSpecForProviderS3DestinationConfiguration#bucketARN
   */
  readonly bucketArn?: string;

  /**
   * Describes hints for the buffering to perform before delivering data to the destination. These options are treated as hints, and therefore Kinesis Data Firehose might choose to use different values when it is optimal. The SizeInMBs and IntervalInSeconds parameters are optional. However, if specify a value for one of them, you must also provide a value for the other.
   *
   * @schema DeliveryStreamSpecForProviderS3DestinationConfiguration#bufferingHints
   */
  readonly bufferingHints?: DeliveryStreamSpecForProviderS3DestinationConfigurationBufferingHints;

  /**
   * Describes the Amazon CloudWatch logging options for your delivery stream.
   *
   * @schema DeliveryStreamSpecForProviderS3DestinationConfiguration#cloudWatchLoggingOptions
   */
  readonly cloudWatchLoggingOptions?: DeliveryStreamSpecForProviderS3DestinationConfigurationCloudWatchLoggingOptions;

  /**
   * @schema DeliveryStreamSpecForProviderS3DestinationConfiguration#compressionFormat
   */
  readonly compressionFormat?: string;

  /**
   * Describes the encryption for a destination in Amazon S3.
   *
   * @schema DeliveryStreamSpecForProviderS3DestinationConfiguration#encryptionConfiguration
   */
  readonly encryptionConfiguration?: DeliveryStreamSpecForProviderS3DestinationConfigurationEncryptionConfiguration;

  /**
   * @schema DeliveryStreamSpecForProviderS3DestinationConfiguration#errorOutputPrefix
   */
  readonly errorOutputPrefix?: string;

  /**
   * @schema DeliveryStreamSpecForProviderS3DestinationConfiguration#prefix
   */
  readonly prefix?: string;

  /**
   * @schema DeliveryStreamSpecForProviderS3DestinationConfiguration#roleARN
   */
  readonly roleArn?: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderS3DestinationConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderS3DestinationConfiguration(obj: DeliveryStreamSpecForProviderS3DestinationConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'bucketARN': obj.bucketArn,
    'bufferingHints': toJson_DeliveryStreamSpecForProviderS3DestinationConfigurationBufferingHints(obj.bufferingHints),
    'cloudWatchLoggingOptions': toJson_DeliveryStreamSpecForProviderS3DestinationConfigurationCloudWatchLoggingOptions(obj.cloudWatchLoggingOptions),
    'compressionFormat': obj.compressionFormat,
    'encryptionConfiguration': toJson_DeliveryStreamSpecForProviderS3DestinationConfigurationEncryptionConfiguration(obj.encryptionConfiguration),
    'errorOutputPrefix': obj.errorOutputPrefix,
    'prefix': obj.prefix,
    'roleARN': obj.roleArn,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The destination in Splunk. You can specify only one destination.
 *
 * @schema DeliveryStreamSpecForProviderSplunkDestinationConfiguration
 */
export interface DeliveryStreamSpecForProviderSplunkDestinationConfiguration {
  /**
   * Describes the Amazon CloudWatch logging options for your delivery stream.
   *
   * @schema DeliveryStreamSpecForProviderSplunkDestinationConfiguration#cloudWatchLoggingOptions
   */
  readonly cloudWatchLoggingOptions?: DeliveryStreamSpecForProviderSplunkDestinationConfigurationCloudWatchLoggingOptions;

  /**
   * @schema DeliveryStreamSpecForProviderSplunkDestinationConfiguration#hECAcknowledgmentTimeoutInSeconds
   */
  readonly hEcAcknowledgmentTimeoutInSeconds?: number;

  /**
   * @schema DeliveryStreamSpecForProviderSplunkDestinationConfiguration#hECEndpoint
   */
  readonly hEcEndpoint?: string;

  /**
   * @schema DeliveryStreamSpecForProviderSplunkDestinationConfiguration#hECEndpointType
   */
  readonly hEcEndpointType?: string;

  /**
   * @schema DeliveryStreamSpecForProviderSplunkDestinationConfiguration#hECToken
   */
  readonly hEcToken?: string;

  /**
   * Describes a data processing configuration.
   *
   * @schema DeliveryStreamSpecForProviderSplunkDestinationConfiguration#processingConfiguration
   */
  readonly processingConfiguration?: DeliveryStreamSpecForProviderSplunkDestinationConfigurationProcessingConfiguration;

  /**
   * Configures retry behavior in case Kinesis Data Firehose is unable to deliver documents to Splunk, or if it doesn't receive an acknowledgment from Splunk.
   *
   * @schema DeliveryStreamSpecForProviderSplunkDestinationConfiguration#retryOptions
   */
  readonly retryOptions?: DeliveryStreamSpecForProviderSplunkDestinationConfigurationRetryOptions;

  /**
   * @schema DeliveryStreamSpecForProviderSplunkDestinationConfiguration#s3BackupMode
   */
  readonly s3BackupMode?: string;

  /**
   * Describes the configuration of a destination in Amazon S3.
   *
   * @schema DeliveryStreamSpecForProviderSplunkDestinationConfiguration#s3Configuration
   */
  readonly s3Configuration?: DeliveryStreamSpecForProviderSplunkDestinationConfigurationS3Configuration;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderSplunkDestinationConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderSplunkDestinationConfiguration(obj: DeliveryStreamSpecForProviderSplunkDestinationConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'cloudWatchLoggingOptions': toJson_DeliveryStreamSpecForProviderSplunkDestinationConfigurationCloudWatchLoggingOptions(obj.cloudWatchLoggingOptions),
    'hECAcknowledgmentTimeoutInSeconds': obj.hEcAcknowledgmentTimeoutInSeconds,
    'hECEndpoint': obj.hEcEndpoint,
    'hECEndpointType': obj.hEcEndpointType,
    'hECToken': obj.hEcToken,
    'processingConfiguration': toJson_DeliveryStreamSpecForProviderSplunkDestinationConfigurationProcessingConfiguration(obj.processingConfiguration),
    'retryOptions': toJson_DeliveryStreamSpecForProviderSplunkDestinationConfigurationRetryOptions(obj.retryOptions),
    's3BackupMode': obj.s3BackupMode,
    's3Configuration': toJson_DeliveryStreamSpecForProviderSplunkDestinationConfigurationS3Configuration(obj.s3Configuration),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DeliveryStreamSpecForProviderTags
 */
export interface DeliveryStreamSpecForProviderTags {
  /**
   * @schema DeliveryStreamSpecForProviderTags#key
   */
  readonly key?: string;

  /**
   * @schema DeliveryStreamSpecForProviderTags#value
   */
  readonly value?: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderTags' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderTags(obj: DeliveryStreamSpecForProviderTags | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema DeliveryStreamSpecProviderConfigRefPolicy
 */
export interface DeliveryStreamSpecProviderConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema DeliveryStreamSpecProviderConfigRefPolicy#resolution
   */
  readonly resolution?: DeliveryStreamSpecProviderConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema DeliveryStreamSpecProviderConfigRefPolicy#resolve
   */
  readonly resolve?: DeliveryStreamSpecProviderConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'DeliveryStreamSpecProviderConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecProviderConfigRefPolicy(obj: DeliveryStreamSpecProviderConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
 *
 * @schema DeliveryStreamSpecPublishConnectionDetailsToConfigRef
 */
export interface DeliveryStreamSpecPublishConnectionDetailsToConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema DeliveryStreamSpecPublishConnectionDetailsToConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema DeliveryStreamSpecPublishConnectionDetailsToConfigRef#policy
   */
  readonly policy?: DeliveryStreamSpecPublishConnectionDetailsToConfigRefPolicy;

}

/**
 * Converts an object of type 'DeliveryStreamSpecPublishConnectionDetailsToConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecPublishConnectionDetailsToConfigRef(obj: DeliveryStreamSpecPublishConnectionDetailsToConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_DeliveryStreamSpecPublishConnectionDetailsToConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Metadata is the metadata for connection secret.
 *
 * @schema DeliveryStreamSpecPublishConnectionDetailsToMetadata
 */
export interface DeliveryStreamSpecPublishConnectionDetailsToMetadata {
  /**
   * Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
   *
   * @schema DeliveryStreamSpecPublishConnectionDetailsToMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
   *
   * @schema DeliveryStreamSpecPublishConnectionDetailsToMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
   *
   * @schema DeliveryStreamSpecPublishConnectionDetailsToMetadata#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecPublishConnectionDetailsToMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecPublishConnectionDetailsToMetadata(obj: DeliveryStreamSpecPublishConnectionDetailsToMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes the buffering to perform before delivering data to the Serverless offering for Amazon OpenSearch Service destination.
 *
 * @schema DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationBufferingHints
 */
export interface DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationBufferingHints {
  /**
   * @schema DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationBufferingHints#intervalInSeconds
   */
  readonly intervalInSeconds?: number;

  /**
   * @schema DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationBufferingHints#sizeInMBs
   */
  readonly sizeInMBs?: number;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationBufferingHints' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationBufferingHints(obj: DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationBufferingHints | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'intervalInSeconds': obj.intervalInSeconds,
    'sizeInMBs': obj.sizeInMBs,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes the Amazon CloudWatch logging options for your delivery stream.
 *
 * @schema DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationCloudWatchLoggingOptions
 */
export interface DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationCloudWatchLoggingOptions {
  /**
   * @schema DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationCloudWatchLoggingOptions#enabled
   */
  readonly enabled?: boolean;

  /**
   * @schema DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationCloudWatchLoggingOptions#logGroupName
   */
  readonly logGroupName?: string;

  /**
   * @schema DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationCloudWatchLoggingOptions#logStreamName
   */
  readonly logStreamName?: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationCloudWatchLoggingOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationCloudWatchLoggingOptions(obj: DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationCloudWatchLoggingOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
    'logGroupName': obj.logGroupName,
    'logStreamName': obj.logStreamName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes a data processing configuration.
 *
 * @schema DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationProcessingConfiguration
 */
export interface DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationProcessingConfiguration {
  /**
   * @schema DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationProcessingConfiguration#enabled
   */
  readonly enabled?: boolean;

  /**
   * @schema DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationProcessingConfiguration#processors
   */
  readonly processors?: DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationProcessingConfigurationProcessors[];

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationProcessingConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationProcessingConfiguration(obj: DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationProcessingConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
    'processors': obj.processors?.map(y => toJson_DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationProcessingConfigurationProcessors(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Configures retry behavior in case Kinesis Data Firehose is unable to deliver documents to the Serverless offering for Amazon OpenSearch Service.
 *
 * @schema DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationRetryOptions
 */
export interface DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationRetryOptions {
  /**
   * @schema DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationRetryOptions#durationInSeconds
   */
  readonly durationInSeconds?: number;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationRetryOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationRetryOptions(obj: DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationRetryOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'durationInSeconds': obj.durationInSeconds,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes the configuration of a destination in Amazon S3.
 *
 * @schema DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationS3Configuration
 */
export interface DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationS3Configuration {
  /**
   * @schema DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationS3Configuration#bucketARN
   */
  readonly bucketArn?: string;

  /**
   * Describes hints for the buffering to perform before delivering data to the destination. These options are treated as hints, and therefore Kinesis Data Firehose might choose to use different values when it is optimal. The SizeInMBs and IntervalInSeconds parameters are optional. However, if specify a value for one of them, you must also provide a value for the other.
   *
   * @schema DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationS3Configuration#bufferingHints
   */
  readonly bufferingHints?: DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationS3ConfigurationBufferingHints;

  /**
   * Describes the Amazon CloudWatch logging options for your delivery stream.
   *
   * @schema DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationS3Configuration#cloudWatchLoggingOptions
   */
  readonly cloudWatchLoggingOptions?: DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationS3ConfigurationCloudWatchLoggingOptions;

  /**
   * @schema DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationS3Configuration#compressionFormat
   */
  readonly compressionFormat?: string;

  /**
   * Describes the encryption for a destination in Amazon S3.
   *
   * @schema DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationS3Configuration#encryptionConfiguration
   */
  readonly encryptionConfiguration?: DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationS3ConfigurationEncryptionConfiguration;

  /**
   * @schema DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationS3Configuration#errorOutputPrefix
   */
  readonly errorOutputPrefix?: string;

  /**
   * @schema DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationS3Configuration#prefix
   */
  readonly prefix?: string;

  /**
   * @schema DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationS3Configuration#roleARN
   */
  readonly roleArn?: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationS3Configuration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationS3Configuration(obj: DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationS3Configuration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'bucketARN': obj.bucketArn,
    'bufferingHints': toJson_DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationS3ConfigurationBufferingHints(obj.bufferingHints),
    'cloudWatchLoggingOptions': toJson_DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationS3ConfigurationCloudWatchLoggingOptions(obj.cloudWatchLoggingOptions),
    'compressionFormat': obj.compressionFormat,
    'encryptionConfiguration': toJson_DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationS3ConfigurationEncryptionConfiguration(obj.encryptionConfiguration),
    'errorOutputPrefix': obj.errorOutputPrefix,
    'prefix': obj.prefix,
    'roleARN': obj.roleArn,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The details of the VPC of the Amazon ES destination.
 *
 * @schema DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationVpcConfiguration
 */
export interface DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationVpcConfiguration {
  /**
   * @schema DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationVpcConfiguration#roleARN
   */
  readonly roleArn?: string;

  /**
   * @schema DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationVpcConfiguration#securityGroupIDs
   */
  readonly securityGroupIDs?: string[];

  /**
   * @schema DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationVpcConfiguration#subnetIDs
   */
  readonly subnetIDs?: string[];

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationVpcConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationVpcConfiguration(obj: DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationVpcConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'roleARN': obj.roleArn,
    'securityGroupIDs': obj.securityGroupIDs?.map(y => y),
    'subnetIDs': obj.subnetIDs?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes the buffering to perform before delivering data to the Amazon OpenSearch Service destination.
 *
 * @schema DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationBufferingHints
 */
export interface DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationBufferingHints {
  /**
   * @schema DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationBufferingHints#intervalInSeconds
   */
  readonly intervalInSeconds?: number;

  /**
   * @schema DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationBufferingHints#sizeInMBs
   */
  readonly sizeInMBs?: number;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationBufferingHints' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationBufferingHints(obj: DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationBufferingHints | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'intervalInSeconds': obj.intervalInSeconds,
    'sizeInMBs': obj.sizeInMBs,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes the Amazon CloudWatch logging options for your delivery stream.
 *
 * @schema DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationCloudWatchLoggingOptions
 */
export interface DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationCloudWatchLoggingOptions {
  /**
   * @schema DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationCloudWatchLoggingOptions#enabled
   */
  readonly enabled?: boolean;

  /**
   * @schema DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationCloudWatchLoggingOptions#logGroupName
   */
  readonly logGroupName?: string;

  /**
   * @schema DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationCloudWatchLoggingOptions#logStreamName
   */
  readonly logStreamName?: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationCloudWatchLoggingOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationCloudWatchLoggingOptions(obj: DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationCloudWatchLoggingOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
    'logGroupName': obj.logGroupName,
    'logStreamName': obj.logStreamName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes a data processing configuration.
 *
 * @schema DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationProcessingConfiguration
 */
export interface DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationProcessingConfiguration {
  /**
   * @schema DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationProcessingConfiguration#enabled
   */
  readonly enabled?: boolean;

  /**
   * @schema DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationProcessingConfiguration#processors
   */
  readonly processors?: DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationProcessingConfigurationProcessors[];

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationProcessingConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationProcessingConfiguration(obj: DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationProcessingConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
    'processors': obj.processors?.map(y => toJson_DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationProcessingConfigurationProcessors(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Configures retry behavior in case Kinesis Data Firehose is unable to deliver documents to Amazon OpenSearch Service.
 *
 * @schema DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationRetryOptions
 */
export interface DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationRetryOptions {
  /**
   * @schema DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationRetryOptions#durationInSeconds
   */
  readonly durationInSeconds?: number;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationRetryOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationRetryOptions(obj: DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationRetryOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'durationInSeconds': obj.durationInSeconds,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes the configuration of a destination in Amazon S3.
 *
 * @schema DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationS3Configuration
 */
export interface DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationS3Configuration {
  /**
   * @schema DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationS3Configuration#bucketARN
   */
  readonly bucketArn?: string;

  /**
   * Describes hints for the buffering to perform before delivering data to the destination. These options are treated as hints, and therefore Kinesis Data Firehose might choose to use different values when it is optimal. The SizeInMBs and IntervalInSeconds parameters are optional. However, if specify a value for one of them, you must also provide a value for the other.
   *
   * @schema DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationS3Configuration#bufferingHints
   */
  readonly bufferingHints?: DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationS3ConfigurationBufferingHints;

  /**
   * Describes the Amazon CloudWatch logging options for your delivery stream.
   *
   * @schema DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationS3Configuration#cloudWatchLoggingOptions
   */
  readonly cloudWatchLoggingOptions?: DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationS3ConfigurationCloudWatchLoggingOptions;

  /**
   * @schema DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationS3Configuration#compressionFormat
   */
  readonly compressionFormat?: string;

  /**
   * Describes the encryption for a destination in Amazon S3.
   *
   * @schema DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationS3Configuration#encryptionConfiguration
   */
  readonly encryptionConfiguration?: DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationS3ConfigurationEncryptionConfiguration;

  /**
   * @schema DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationS3Configuration#errorOutputPrefix
   */
  readonly errorOutputPrefix?: string;

  /**
   * @schema DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationS3Configuration#prefix
   */
  readonly prefix?: string;

  /**
   * @schema DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationS3Configuration#roleARN
   */
  readonly roleArn?: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationS3Configuration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationS3Configuration(obj: DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationS3Configuration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'bucketARN': obj.bucketArn,
    'bufferingHints': toJson_DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationS3ConfigurationBufferingHints(obj.bufferingHints),
    'cloudWatchLoggingOptions': toJson_DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationS3ConfigurationCloudWatchLoggingOptions(obj.cloudWatchLoggingOptions),
    'compressionFormat': obj.compressionFormat,
    'encryptionConfiguration': toJson_DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationS3ConfigurationEncryptionConfiguration(obj.encryptionConfiguration),
    'errorOutputPrefix': obj.errorOutputPrefix,
    'prefix': obj.prefix,
    'roleARN': obj.roleArn,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The details of the VPC of the Amazon ES destination.
 *
 * @schema DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationVpcConfiguration
 */
export interface DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationVpcConfiguration {
  /**
   * @schema DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationVpcConfiguration#roleARN
   */
  readonly roleArn?: string;

  /**
   * @schema DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationVpcConfiguration#securityGroupIDs
   */
  readonly securityGroupIDs?: string[];

  /**
   * @schema DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationVpcConfiguration#subnetIDs
   */
  readonly subnetIDs?: string[];

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationVpcConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationVpcConfiguration(obj: DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationVpcConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'roleARN': obj.roleArn,
    'securityGroupIDs': obj.securityGroupIDs?.map(y => y),
    'subnetIDs': obj.subnetIDs?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes the buffering to perform before delivering data to the Amazon ES destination.
 *
 * @schema DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationBufferingHints
 */
export interface DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationBufferingHints {
  /**
   * @schema DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationBufferingHints#intervalInSeconds
   */
  readonly intervalInSeconds?: number;

  /**
   * @schema DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationBufferingHints#sizeInMBs
   */
  readonly sizeInMBs?: number;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationBufferingHints' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationBufferingHints(obj: DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationBufferingHints | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'intervalInSeconds': obj.intervalInSeconds,
    'sizeInMBs': obj.sizeInMBs,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes the Amazon CloudWatch logging options for your delivery stream.
 *
 * @schema DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationCloudWatchLoggingOptions
 */
export interface DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationCloudWatchLoggingOptions {
  /**
   * @schema DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationCloudWatchLoggingOptions#enabled
   */
  readonly enabled?: boolean;

  /**
   * @schema DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationCloudWatchLoggingOptions#logGroupName
   */
  readonly logGroupName?: string;

  /**
   * @schema DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationCloudWatchLoggingOptions#logStreamName
   */
  readonly logStreamName?: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationCloudWatchLoggingOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationCloudWatchLoggingOptions(obj: DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationCloudWatchLoggingOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
    'logGroupName': obj.logGroupName,
    'logStreamName': obj.logStreamName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes a data processing configuration.
 *
 * @schema DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationProcessingConfiguration
 */
export interface DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationProcessingConfiguration {
  /**
   * @schema DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationProcessingConfiguration#enabled
   */
  readonly enabled?: boolean;

  /**
   * @schema DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationProcessingConfiguration#processors
   */
  readonly processors?: DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationProcessingConfigurationProcessors[];

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationProcessingConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationProcessingConfiguration(obj: DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationProcessingConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
    'processors': obj.processors?.map(y => toJson_DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationProcessingConfigurationProcessors(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Configures retry behavior in case Kinesis Data Firehose is unable to deliver documents to Amazon ES.
 *
 * @schema DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationRetryOptions
 */
export interface DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationRetryOptions {
  /**
   * @schema DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationRetryOptions#durationInSeconds
   */
  readonly durationInSeconds?: number;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationRetryOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationRetryOptions(obj: DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationRetryOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'durationInSeconds': obj.durationInSeconds,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes the configuration of a destination in Amazon S3.
 *
 * @schema DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationS3Configuration
 */
export interface DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationS3Configuration {
  /**
   * @schema DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationS3Configuration#bucketARN
   */
  readonly bucketArn?: string;

  /**
   * Describes hints for the buffering to perform before delivering data to the destination. These options are treated as hints, and therefore Kinesis Data Firehose might choose to use different values when it is optimal. The SizeInMBs and IntervalInSeconds parameters are optional. However, if specify a value for one of them, you must also provide a value for the other.
   *
   * @schema DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationS3Configuration#bufferingHints
   */
  readonly bufferingHints?: DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationS3ConfigurationBufferingHints;

  /**
   * Describes the Amazon CloudWatch logging options for your delivery stream.
   *
   * @schema DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationS3Configuration#cloudWatchLoggingOptions
   */
  readonly cloudWatchLoggingOptions?: DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationS3ConfigurationCloudWatchLoggingOptions;

  /**
   * @schema DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationS3Configuration#compressionFormat
   */
  readonly compressionFormat?: string;

  /**
   * Describes the encryption for a destination in Amazon S3.
   *
   * @schema DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationS3Configuration#encryptionConfiguration
   */
  readonly encryptionConfiguration?: DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationS3ConfigurationEncryptionConfiguration;

  /**
   * @schema DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationS3Configuration#errorOutputPrefix
   */
  readonly errorOutputPrefix?: string;

  /**
   * @schema DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationS3Configuration#prefix
   */
  readonly prefix?: string;

  /**
   * @schema DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationS3Configuration#roleARN
   */
  readonly roleArn?: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationS3Configuration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationS3Configuration(obj: DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationS3Configuration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'bucketARN': obj.bucketArn,
    'bufferingHints': toJson_DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationS3ConfigurationBufferingHints(obj.bufferingHints),
    'cloudWatchLoggingOptions': toJson_DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationS3ConfigurationCloudWatchLoggingOptions(obj.cloudWatchLoggingOptions),
    'compressionFormat': obj.compressionFormat,
    'encryptionConfiguration': toJson_DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationS3ConfigurationEncryptionConfiguration(obj.encryptionConfiguration),
    'errorOutputPrefix': obj.errorOutputPrefix,
    'prefix': obj.prefix,
    'roleARN': obj.roleArn,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The details of the VPC of the Amazon ES destination.
 *
 * @schema DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationVpcConfiguration
 */
export interface DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationVpcConfiguration {
  /**
   * @schema DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationVpcConfiguration#roleARN
   */
  readonly roleArn?: string;

  /**
   * @schema DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationVpcConfiguration#securityGroupIDs
   */
  readonly securityGroupIDs?: string[];

  /**
   * @schema DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationVpcConfiguration#subnetIDs
   */
  readonly subnetIDs?: string[];

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationVpcConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationVpcConfiguration(obj: DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationVpcConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'roleARN': obj.roleArn,
    'securityGroupIDs': obj.securityGroupIDs?.map(y => y),
    'subnetIDs': obj.subnetIDs?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes hints for the buffering to perform before delivering data to the destination. These options are treated as hints, and therefore Kinesis Data Firehose might choose to use different values when it is optimal. The SizeInMBs and IntervalInSeconds parameters are optional. However, if specify a value for one of them, you must also provide a value for the other.
 *
 * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationBufferingHints
 */
export interface DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationBufferingHints {
  /**
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationBufferingHints#intervalInSeconds
   */
  readonly intervalInSeconds?: number;

  /**
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationBufferingHints#sizeInMBs
   */
  readonly sizeInMBs?: number;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationBufferingHints' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationBufferingHints(obj: DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationBufferingHints | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'intervalInSeconds': obj.intervalInSeconds,
    'sizeInMBs': obj.sizeInMBs,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes the Amazon CloudWatch logging options for your delivery stream.
 *
 * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationCloudWatchLoggingOptions
 */
export interface DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationCloudWatchLoggingOptions {
  /**
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationCloudWatchLoggingOptions#enabled
   */
  readonly enabled?: boolean;

  /**
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationCloudWatchLoggingOptions#logGroupName
   */
  readonly logGroupName?: string;

  /**
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationCloudWatchLoggingOptions#logStreamName
   */
  readonly logStreamName?: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationCloudWatchLoggingOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationCloudWatchLoggingOptions(obj: DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationCloudWatchLoggingOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
    'logGroupName': obj.logGroupName,
    'logStreamName': obj.logStreamName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Specifies that you want Kinesis Data Firehose to convert data from the JSON format to the Parquet or ORC format before writing it to Amazon S3. Kinesis Data Firehose uses the serializer and deserializer that you specify, in addition to the column information from the Amazon Web Services Glue table, to deserialize your input data from JSON and then serialize it to the Parquet or ORC format. For more information, see Kinesis Data Firehose Record Format Conversion (https://docs.aws.amazon.com/firehose/latest/dev/record-format-conversion.html).
 *
 * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfiguration
 */
export interface DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfiguration {
  /**
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfiguration#enabled
   */
  readonly enabled?: boolean;

  /**
   * Specifies the deserializer you want to use to convert the format of the input data. This parameter is required if Enabled is set to true.
   *
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfiguration#inputFormatConfiguration
   */
  readonly inputFormatConfiguration?: DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationInputFormatConfiguration;

  /**
   * Specifies the serializer that you want Kinesis Data Firehose to use to convert the format of your data before it writes it to Amazon S3. This parameter is required if Enabled is set to true.
   *
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfiguration#outputFormatConfiguration
   */
  readonly outputFormatConfiguration?: DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationOutputFormatConfiguration;

  /**
   * Specifies the schema to which you want Kinesis Data Firehose to configure your data before it writes it to Amazon S3. This parameter is required if Enabled is set to true.
   *
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfiguration#schemaConfiguration
   */
  readonly schemaConfiguration?: DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationSchemaConfiguration;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfiguration(obj: DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
    'inputFormatConfiguration': toJson_DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationInputFormatConfiguration(obj.inputFormatConfiguration),
    'outputFormatConfiguration': toJson_DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationOutputFormatConfiguration(obj.outputFormatConfiguration),
    'schemaConfiguration': toJson_DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationSchemaConfiguration(obj.schemaConfiguration),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The configuration of the dynamic partitioning mechanism that creates smaller data sets from the streaming data by partitioning it based on partition keys. Currently, dynamic partitioning is only supported for Amazon S3 destinations.
 *
 * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDynamicPartitioningConfiguration
 */
export interface DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDynamicPartitioningConfiguration {
  /**
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDynamicPartitioningConfiguration#enabled
   */
  readonly enabled?: boolean;

  /**
   * The retry behavior in case Kinesis Data Firehose is unable to deliver data to an Amazon S3 prefix.
   *
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDynamicPartitioningConfiguration#retryOptions
   */
  readonly retryOptions?: DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDynamicPartitioningConfigurationRetryOptions;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDynamicPartitioningConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDynamicPartitioningConfiguration(obj: DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDynamicPartitioningConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
    'retryOptions': toJson_DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDynamicPartitioningConfigurationRetryOptions(obj.retryOptions),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes the encryption for a destination in Amazon S3.
 *
 * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationEncryptionConfiguration
 */
export interface DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationEncryptionConfiguration {
  /**
   * Describes an encryption key for a destination in Amazon S3.
   *
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationEncryptionConfiguration#kmsEncryptionConfig
   */
  readonly kmsEncryptionConfig?: DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationEncryptionConfigurationKmsEncryptionConfig;

  /**
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationEncryptionConfiguration#noEncryptionConfig
   */
  readonly noEncryptionConfig?: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationEncryptionConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationEncryptionConfiguration(obj: DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationEncryptionConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'kmsEncryptionConfig': toJson_DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationEncryptionConfigurationKmsEncryptionConfig(obj.kmsEncryptionConfig),
    'noEncryptionConfig': obj.noEncryptionConfig,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes a data processing configuration.
 *
 * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationProcessingConfiguration
 */
export interface DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationProcessingConfiguration {
  /**
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationProcessingConfiguration#enabled
   */
  readonly enabled?: boolean;

  /**
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationProcessingConfiguration#processors
   */
  readonly processors?: DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationProcessingConfigurationProcessors[];

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationProcessingConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationProcessingConfiguration(obj: DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationProcessingConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
    'processors': obj.processors?.map(y => toJson_DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationProcessingConfigurationProcessors(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes the configuration of a destination in Amazon S3.
 *
 * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationS3BackupConfiguration
 */
export interface DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationS3BackupConfiguration {
  /**
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationS3BackupConfiguration#bucketARN
   */
  readonly bucketArn?: string;

  /**
   * Describes hints for the buffering to perform before delivering data to the destination. These options are treated as hints, and therefore Kinesis Data Firehose might choose to use different values when it is optimal. The SizeInMBs and IntervalInSeconds parameters are optional. However, if specify a value for one of them, you must also provide a value for the other.
   *
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationS3BackupConfiguration#bufferingHints
   */
  readonly bufferingHints?: DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationS3BackupConfigurationBufferingHints;

  /**
   * Describes the Amazon CloudWatch logging options for your delivery stream.
   *
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationS3BackupConfiguration#cloudWatchLoggingOptions
   */
  readonly cloudWatchLoggingOptions?: DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationS3BackupConfigurationCloudWatchLoggingOptions;

  /**
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationS3BackupConfiguration#compressionFormat
   */
  readonly compressionFormat?: string;

  /**
   * Describes the encryption for a destination in Amazon S3.
   *
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationS3BackupConfiguration#encryptionConfiguration
   */
  readonly encryptionConfiguration?: DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationS3BackupConfigurationEncryptionConfiguration;

  /**
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationS3BackupConfiguration#errorOutputPrefix
   */
  readonly errorOutputPrefix?: string;

  /**
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationS3BackupConfiguration#prefix
   */
  readonly prefix?: string;

  /**
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationS3BackupConfiguration#roleARN
   */
  readonly roleArn?: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationS3BackupConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationS3BackupConfiguration(obj: DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationS3BackupConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'bucketARN': obj.bucketArn,
    'bufferingHints': toJson_DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationS3BackupConfigurationBufferingHints(obj.bufferingHints),
    'cloudWatchLoggingOptions': toJson_DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationS3BackupConfigurationCloudWatchLoggingOptions(obj.cloudWatchLoggingOptions),
    'compressionFormat': obj.compressionFormat,
    'encryptionConfiguration': toJson_DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationS3BackupConfigurationEncryptionConfiguration(obj.encryptionConfiguration),
    'errorOutputPrefix': obj.errorOutputPrefix,
    'prefix': obj.prefix,
    'roleARN': obj.roleArn,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes the buffering options that can be applied before data is delivered to the HTTP endpoint destination. Kinesis Data Firehose treats these options as hints, and it might choose to use more optimal values. The SizeInMBs and IntervalInSeconds parameters are optional. However, if specify a value for one of them, you must also provide a value for the other.
 *
 * @schema DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationBufferingHints
 */
export interface DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationBufferingHints {
  /**
   * @schema DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationBufferingHints#intervalInSeconds
   */
  readonly intervalInSeconds?: number;

  /**
   * @schema DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationBufferingHints#sizeInMBs
   */
  readonly sizeInMBs?: number;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationBufferingHints' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationBufferingHints(obj: DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationBufferingHints | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'intervalInSeconds': obj.intervalInSeconds,
    'sizeInMBs': obj.sizeInMBs,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes the Amazon CloudWatch logging options for your delivery stream.
 *
 * @schema DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationCloudWatchLoggingOptions
 */
export interface DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationCloudWatchLoggingOptions {
  /**
   * @schema DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationCloudWatchLoggingOptions#enabled
   */
  readonly enabled?: boolean;

  /**
   * @schema DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationCloudWatchLoggingOptions#logGroupName
   */
  readonly logGroupName?: string;

  /**
   * @schema DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationCloudWatchLoggingOptions#logStreamName
   */
  readonly logStreamName?: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationCloudWatchLoggingOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationCloudWatchLoggingOptions(obj: DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationCloudWatchLoggingOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
    'logGroupName': obj.logGroupName,
    'logStreamName': obj.logStreamName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes the configuration of the HTTP endpoint to which Kinesis Firehose delivers data.
 *
 * @schema DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationEndpointConfiguration
 */
export interface DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationEndpointConfiguration {
  /**
   * @schema DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationEndpointConfiguration#accessKey
   */
  readonly accessKey?: string;

  /**
   * @schema DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationEndpointConfiguration#name
   */
  readonly name?: string;

  /**
   * @schema DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationEndpointConfiguration#url
   */
  readonly url?: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationEndpointConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationEndpointConfiguration(obj: DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationEndpointConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'accessKey': obj.accessKey,
    'name': obj.name,
    'url': obj.url,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes a data processing configuration.
 *
 * @schema DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationProcessingConfiguration
 */
export interface DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationProcessingConfiguration {
  /**
   * @schema DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationProcessingConfiguration#enabled
   */
  readonly enabled?: boolean;

  /**
   * @schema DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationProcessingConfiguration#processors
   */
  readonly processors?: DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationProcessingConfigurationProcessors[];

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationProcessingConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationProcessingConfiguration(obj: DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationProcessingConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
    'processors': obj.processors?.map(y => toJson_DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationProcessingConfigurationProcessors(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The configuration of the HTTP endpoint request.
 *
 * @schema DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationRequestConfiguration
 */
export interface DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationRequestConfiguration {
  /**
   * @schema DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationRequestConfiguration#commonAttributes
   */
  readonly commonAttributes?: DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationRequestConfigurationCommonAttributes[];

  /**
   * @schema DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationRequestConfiguration#contentEncoding
   */
  readonly contentEncoding?: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationRequestConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationRequestConfiguration(obj: DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationRequestConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'commonAttributes': obj.commonAttributes?.map(y => toJson_DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationRequestConfigurationCommonAttributes(y)),
    'contentEncoding': obj.contentEncoding,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes the retry behavior in case Kinesis Data Firehose is unable to deliver data to the specified HTTP endpoint destination, or if it doesn't receive a valid acknowledgment of receipt from the specified HTTP endpoint destination.
 *
 * @schema DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationRetryOptions
 */
export interface DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationRetryOptions {
  /**
   * @schema DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationRetryOptions#durationInSeconds
   */
  readonly durationInSeconds?: number;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationRetryOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationRetryOptions(obj: DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationRetryOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'durationInSeconds': obj.durationInSeconds,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes the configuration of a destination in Amazon S3.
 *
 * @schema DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationS3Configuration
 */
export interface DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationS3Configuration {
  /**
   * @schema DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationS3Configuration#bucketARN
   */
  readonly bucketArn?: string;

  /**
   * Describes hints for the buffering to perform before delivering data to the destination. These options are treated as hints, and therefore Kinesis Data Firehose might choose to use different values when it is optimal. The SizeInMBs and IntervalInSeconds parameters are optional. However, if specify a value for one of them, you must also provide a value for the other.
   *
   * @schema DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationS3Configuration#bufferingHints
   */
  readonly bufferingHints?: DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationS3ConfigurationBufferingHints;

  /**
   * Describes the Amazon CloudWatch logging options for your delivery stream.
   *
   * @schema DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationS3Configuration#cloudWatchLoggingOptions
   */
  readonly cloudWatchLoggingOptions?: DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationS3ConfigurationCloudWatchLoggingOptions;

  /**
   * @schema DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationS3Configuration#compressionFormat
   */
  readonly compressionFormat?: string;

  /**
   * Describes the encryption for a destination in Amazon S3.
   *
   * @schema DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationS3Configuration#encryptionConfiguration
   */
  readonly encryptionConfiguration?: DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationS3ConfigurationEncryptionConfiguration;

  /**
   * @schema DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationS3Configuration#errorOutputPrefix
   */
  readonly errorOutputPrefix?: string;

  /**
   * @schema DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationS3Configuration#prefix
   */
  readonly prefix?: string;

  /**
   * @schema DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationS3Configuration#roleARN
   */
  readonly roleArn?: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationS3Configuration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationS3Configuration(obj: DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationS3Configuration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'bucketARN': obj.bucketArn,
    'bufferingHints': toJson_DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationS3ConfigurationBufferingHints(obj.bufferingHints),
    'cloudWatchLoggingOptions': toJson_DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationS3ConfigurationCloudWatchLoggingOptions(obj.cloudWatchLoggingOptions),
    'compressionFormat': obj.compressionFormat,
    'encryptionConfiguration': toJson_DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationS3ConfigurationEncryptionConfiguration(obj.encryptionConfiguration),
    'errorOutputPrefix': obj.errorOutputPrefix,
    'prefix': obj.prefix,
    'roleARN': obj.roleArn,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema DeliveryStreamSpecForProviderKmsKeyArnRefPolicy
 */
export interface DeliveryStreamSpecForProviderKmsKeyArnRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema DeliveryStreamSpecForProviderKmsKeyArnRefPolicy#resolution
   */
  readonly resolution?: DeliveryStreamSpecForProviderKmsKeyArnRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema DeliveryStreamSpecForProviderKmsKeyArnRefPolicy#resolve
   */
  readonly resolve?: DeliveryStreamSpecForProviderKmsKeyArnRefPolicyResolve;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderKmsKeyArnRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderKmsKeyArnRefPolicy(obj: DeliveryStreamSpecForProviderKmsKeyArnRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for selection.
 *
 * @schema DeliveryStreamSpecForProviderKmsKeyArnSelectorPolicy
 */
export interface DeliveryStreamSpecForProviderKmsKeyArnSelectorPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema DeliveryStreamSpecForProviderKmsKeyArnSelectorPolicy#resolution
   */
  readonly resolution?: DeliveryStreamSpecForProviderKmsKeyArnSelectorPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema DeliveryStreamSpecForProviderKmsKeyArnSelectorPolicy#resolve
   */
  readonly resolve?: DeliveryStreamSpecForProviderKmsKeyArnSelectorPolicyResolve;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderKmsKeyArnSelectorPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderKmsKeyArnSelectorPolicy(obj: DeliveryStreamSpecForProviderKmsKeyArnSelectorPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes the Amazon CloudWatch logging options for your delivery stream.
 *
 * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfigurationCloudWatchLoggingOptions
 */
export interface DeliveryStreamSpecForProviderRedshiftDestinationConfigurationCloudWatchLoggingOptions {
  /**
   * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfigurationCloudWatchLoggingOptions#enabled
   */
  readonly enabled?: boolean;

  /**
   * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfigurationCloudWatchLoggingOptions#logGroupName
   */
  readonly logGroupName?: string;

  /**
   * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfigurationCloudWatchLoggingOptions#logStreamName
   */
  readonly logStreamName?: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderRedshiftDestinationConfigurationCloudWatchLoggingOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderRedshiftDestinationConfigurationCloudWatchLoggingOptions(obj: DeliveryStreamSpecForProviderRedshiftDestinationConfigurationCloudWatchLoggingOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
    'logGroupName': obj.logGroupName,
    'logStreamName': obj.logStreamName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes a COPY command for Amazon Redshift.
 *
 * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfigurationCopyCommand
 */
export interface DeliveryStreamSpecForProviderRedshiftDestinationConfigurationCopyCommand {
  /**
   * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfigurationCopyCommand#copyOptions
   */
  readonly copyOptions?: string;

  /**
   * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfigurationCopyCommand#dataTableColumns
   */
  readonly dataTableColumns?: string;

  /**
   * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfigurationCopyCommand#dataTableName
   */
  readonly dataTableName?: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderRedshiftDestinationConfigurationCopyCommand' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderRedshiftDestinationConfigurationCopyCommand(obj: DeliveryStreamSpecForProviderRedshiftDestinationConfigurationCopyCommand | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'copyOptions': obj.copyOptions,
    'dataTableColumns': obj.dataTableColumns,
    'dataTableName': obj.dataTableName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes a data processing configuration.
 *
 * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfigurationProcessingConfiguration
 */
export interface DeliveryStreamSpecForProviderRedshiftDestinationConfigurationProcessingConfiguration {
  /**
   * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfigurationProcessingConfiguration#enabled
   */
  readonly enabled?: boolean;

  /**
   * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfigurationProcessingConfiguration#processors
   */
  readonly processors?: DeliveryStreamSpecForProviderRedshiftDestinationConfigurationProcessingConfigurationProcessors[];

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderRedshiftDestinationConfigurationProcessingConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderRedshiftDestinationConfigurationProcessingConfiguration(obj: DeliveryStreamSpecForProviderRedshiftDestinationConfigurationProcessingConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
    'processors': obj.processors?.map(y => toJson_DeliveryStreamSpecForProviderRedshiftDestinationConfigurationProcessingConfigurationProcessors(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Configures retry behavior in case Kinesis Data Firehose is unable to deliver documents to Amazon Redshift.
 *
 * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfigurationRetryOptions
 */
export interface DeliveryStreamSpecForProviderRedshiftDestinationConfigurationRetryOptions {
  /**
   * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfigurationRetryOptions#durationInSeconds
   */
  readonly durationInSeconds?: number;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderRedshiftDestinationConfigurationRetryOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderRedshiftDestinationConfigurationRetryOptions(obj: DeliveryStreamSpecForProviderRedshiftDestinationConfigurationRetryOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'durationInSeconds': obj.durationInSeconds,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes the configuration of a destination in Amazon S3.
 *
 * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3BackupConfiguration
 */
export interface DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3BackupConfiguration {
  /**
   * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3BackupConfiguration#bucketARN
   */
  readonly bucketArn?: string;

  /**
   * Describes hints for the buffering to perform before delivering data to the destination. These options are treated as hints, and therefore Kinesis Data Firehose might choose to use different values when it is optimal. The SizeInMBs and IntervalInSeconds parameters are optional. However, if specify a value for one of them, you must also provide a value for the other.
   *
   * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3BackupConfiguration#bufferingHints
   */
  readonly bufferingHints?: DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3BackupConfigurationBufferingHints;

  /**
   * Describes the Amazon CloudWatch logging options for your delivery stream.
   *
   * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3BackupConfiguration#cloudWatchLoggingOptions
   */
  readonly cloudWatchLoggingOptions?: DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3BackupConfigurationCloudWatchLoggingOptions;

  /**
   * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3BackupConfiguration#compressionFormat
   */
  readonly compressionFormat?: string;

  /**
   * Describes the encryption for a destination in Amazon S3.
   *
   * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3BackupConfiguration#encryptionConfiguration
   */
  readonly encryptionConfiguration?: DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3BackupConfigurationEncryptionConfiguration;

  /**
   * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3BackupConfiguration#errorOutputPrefix
   */
  readonly errorOutputPrefix?: string;

  /**
   * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3BackupConfiguration#prefix
   */
  readonly prefix?: string;

  /**
   * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3BackupConfiguration#roleARN
   */
  readonly roleArn?: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3BackupConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3BackupConfiguration(obj: DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3BackupConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'bucketARN': obj.bucketArn,
    'bufferingHints': toJson_DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3BackupConfigurationBufferingHints(obj.bufferingHints),
    'cloudWatchLoggingOptions': toJson_DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3BackupConfigurationCloudWatchLoggingOptions(obj.cloudWatchLoggingOptions),
    'compressionFormat': obj.compressionFormat,
    'encryptionConfiguration': toJson_DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3BackupConfigurationEncryptionConfiguration(obj.encryptionConfiguration),
    'errorOutputPrefix': obj.errorOutputPrefix,
    'prefix': obj.prefix,
    'roleARN': obj.roleArn,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes the configuration of a destination in Amazon S3.
 *
 * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3Configuration
 */
export interface DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3Configuration {
  /**
   * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3Configuration#bucketARN
   */
  readonly bucketArn?: string;

  /**
   * Describes hints for the buffering to perform before delivering data to the destination. These options are treated as hints, and therefore Kinesis Data Firehose might choose to use different values when it is optimal. The SizeInMBs and IntervalInSeconds parameters are optional. However, if specify a value for one of them, you must also provide a value for the other.
   *
   * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3Configuration#bufferingHints
   */
  readonly bufferingHints?: DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3ConfigurationBufferingHints;

  /**
   * Describes the Amazon CloudWatch logging options for your delivery stream.
   *
   * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3Configuration#cloudWatchLoggingOptions
   */
  readonly cloudWatchLoggingOptions?: DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3ConfigurationCloudWatchLoggingOptions;

  /**
   * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3Configuration#compressionFormat
   */
  readonly compressionFormat?: string;

  /**
   * Describes the encryption for a destination in Amazon S3.
   *
   * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3Configuration#encryptionConfiguration
   */
  readonly encryptionConfiguration?: DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3ConfigurationEncryptionConfiguration;

  /**
   * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3Configuration#errorOutputPrefix
   */
  readonly errorOutputPrefix?: string;

  /**
   * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3Configuration#prefix
   */
  readonly prefix?: string;

  /**
   * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3Configuration#roleARN
   */
  readonly roleArn?: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3Configuration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3Configuration(obj: DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3Configuration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'bucketARN': obj.bucketArn,
    'bufferingHints': toJson_DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3ConfigurationBufferingHints(obj.bufferingHints),
    'cloudWatchLoggingOptions': toJson_DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3ConfigurationCloudWatchLoggingOptions(obj.cloudWatchLoggingOptions),
    'compressionFormat': obj.compressionFormat,
    'encryptionConfiguration': toJson_DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3ConfigurationEncryptionConfiguration(obj.encryptionConfiguration),
    'errorOutputPrefix': obj.errorOutputPrefix,
    'prefix': obj.prefix,
    'roleARN': obj.roleArn,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes hints for the buffering to perform before delivering data to the destination. These options are treated as hints, and therefore Kinesis Data Firehose might choose to use different values when it is optimal. The SizeInMBs and IntervalInSeconds parameters are optional. However, if specify a value for one of them, you must also provide a value for the other.
 *
 * @schema DeliveryStreamSpecForProviderS3DestinationConfigurationBufferingHints
 */
export interface DeliveryStreamSpecForProviderS3DestinationConfigurationBufferingHints {
  /**
   * @schema DeliveryStreamSpecForProviderS3DestinationConfigurationBufferingHints#intervalInSeconds
   */
  readonly intervalInSeconds?: number;

  /**
   * @schema DeliveryStreamSpecForProviderS3DestinationConfigurationBufferingHints#sizeInMBs
   */
  readonly sizeInMBs?: number;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderS3DestinationConfigurationBufferingHints' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderS3DestinationConfigurationBufferingHints(obj: DeliveryStreamSpecForProviderS3DestinationConfigurationBufferingHints | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'intervalInSeconds': obj.intervalInSeconds,
    'sizeInMBs': obj.sizeInMBs,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes the Amazon CloudWatch logging options for your delivery stream.
 *
 * @schema DeliveryStreamSpecForProviderS3DestinationConfigurationCloudWatchLoggingOptions
 */
export interface DeliveryStreamSpecForProviderS3DestinationConfigurationCloudWatchLoggingOptions {
  /**
   * @schema DeliveryStreamSpecForProviderS3DestinationConfigurationCloudWatchLoggingOptions#enabled
   */
  readonly enabled?: boolean;

  /**
   * @schema DeliveryStreamSpecForProviderS3DestinationConfigurationCloudWatchLoggingOptions#logGroupName
   */
  readonly logGroupName?: string;

  /**
   * @schema DeliveryStreamSpecForProviderS3DestinationConfigurationCloudWatchLoggingOptions#logStreamName
   */
  readonly logStreamName?: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderS3DestinationConfigurationCloudWatchLoggingOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderS3DestinationConfigurationCloudWatchLoggingOptions(obj: DeliveryStreamSpecForProviderS3DestinationConfigurationCloudWatchLoggingOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
    'logGroupName': obj.logGroupName,
    'logStreamName': obj.logStreamName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes the encryption for a destination in Amazon S3.
 *
 * @schema DeliveryStreamSpecForProviderS3DestinationConfigurationEncryptionConfiguration
 */
export interface DeliveryStreamSpecForProviderS3DestinationConfigurationEncryptionConfiguration {
  /**
   * Describes an encryption key for a destination in Amazon S3.
   *
   * @schema DeliveryStreamSpecForProviderS3DestinationConfigurationEncryptionConfiguration#kmsEncryptionConfig
   */
  readonly kmsEncryptionConfig?: DeliveryStreamSpecForProviderS3DestinationConfigurationEncryptionConfigurationKmsEncryptionConfig;

  /**
   * @schema DeliveryStreamSpecForProviderS3DestinationConfigurationEncryptionConfiguration#noEncryptionConfig
   */
  readonly noEncryptionConfig?: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderS3DestinationConfigurationEncryptionConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderS3DestinationConfigurationEncryptionConfiguration(obj: DeliveryStreamSpecForProviderS3DestinationConfigurationEncryptionConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'kmsEncryptionConfig': toJson_DeliveryStreamSpecForProviderS3DestinationConfigurationEncryptionConfigurationKmsEncryptionConfig(obj.kmsEncryptionConfig),
    'noEncryptionConfig': obj.noEncryptionConfig,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes the Amazon CloudWatch logging options for your delivery stream.
 *
 * @schema DeliveryStreamSpecForProviderSplunkDestinationConfigurationCloudWatchLoggingOptions
 */
export interface DeliveryStreamSpecForProviderSplunkDestinationConfigurationCloudWatchLoggingOptions {
  /**
   * @schema DeliveryStreamSpecForProviderSplunkDestinationConfigurationCloudWatchLoggingOptions#enabled
   */
  readonly enabled?: boolean;

  /**
   * @schema DeliveryStreamSpecForProviderSplunkDestinationConfigurationCloudWatchLoggingOptions#logGroupName
   */
  readonly logGroupName?: string;

  /**
   * @schema DeliveryStreamSpecForProviderSplunkDestinationConfigurationCloudWatchLoggingOptions#logStreamName
   */
  readonly logStreamName?: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderSplunkDestinationConfigurationCloudWatchLoggingOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderSplunkDestinationConfigurationCloudWatchLoggingOptions(obj: DeliveryStreamSpecForProviderSplunkDestinationConfigurationCloudWatchLoggingOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
    'logGroupName': obj.logGroupName,
    'logStreamName': obj.logStreamName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes a data processing configuration.
 *
 * @schema DeliveryStreamSpecForProviderSplunkDestinationConfigurationProcessingConfiguration
 */
export interface DeliveryStreamSpecForProviderSplunkDestinationConfigurationProcessingConfiguration {
  /**
   * @schema DeliveryStreamSpecForProviderSplunkDestinationConfigurationProcessingConfiguration#enabled
   */
  readonly enabled?: boolean;

  /**
   * @schema DeliveryStreamSpecForProviderSplunkDestinationConfigurationProcessingConfiguration#processors
   */
  readonly processors?: DeliveryStreamSpecForProviderSplunkDestinationConfigurationProcessingConfigurationProcessors[];

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderSplunkDestinationConfigurationProcessingConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderSplunkDestinationConfigurationProcessingConfiguration(obj: DeliveryStreamSpecForProviderSplunkDestinationConfigurationProcessingConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
    'processors': obj.processors?.map(y => toJson_DeliveryStreamSpecForProviderSplunkDestinationConfigurationProcessingConfigurationProcessors(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Configures retry behavior in case Kinesis Data Firehose is unable to deliver documents to Splunk, or if it doesn't receive an acknowledgment from Splunk.
 *
 * @schema DeliveryStreamSpecForProviderSplunkDestinationConfigurationRetryOptions
 */
export interface DeliveryStreamSpecForProviderSplunkDestinationConfigurationRetryOptions {
  /**
   * @schema DeliveryStreamSpecForProviderSplunkDestinationConfigurationRetryOptions#durationInSeconds
   */
  readonly durationInSeconds?: number;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderSplunkDestinationConfigurationRetryOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderSplunkDestinationConfigurationRetryOptions(obj: DeliveryStreamSpecForProviderSplunkDestinationConfigurationRetryOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'durationInSeconds': obj.durationInSeconds,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes the configuration of a destination in Amazon S3.
 *
 * @schema DeliveryStreamSpecForProviderSplunkDestinationConfigurationS3Configuration
 */
export interface DeliveryStreamSpecForProviderSplunkDestinationConfigurationS3Configuration {
  /**
   * @schema DeliveryStreamSpecForProviderSplunkDestinationConfigurationS3Configuration#bucketARN
   */
  readonly bucketArn?: string;

  /**
   * Describes hints for the buffering to perform before delivering data to the destination. These options are treated as hints, and therefore Kinesis Data Firehose might choose to use different values when it is optimal. The SizeInMBs and IntervalInSeconds parameters are optional. However, if specify a value for one of them, you must also provide a value for the other.
   *
   * @schema DeliveryStreamSpecForProviderSplunkDestinationConfigurationS3Configuration#bufferingHints
   */
  readonly bufferingHints?: DeliveryStreamSpecForProviderSplunkDestinationConfigurationS3ConfigurationBufferingHints;

  /**
   * Describes the Amazon CloudWatch logging options for your delivery stream.
   *
   * @schema DeliveryStreamSpecForProviderSplunkDestinationConfigurationS3Configuration#cloudWatchLoggingOptions
   */
  readonly cloudWatchLoggingOptions?: DeliveryStreamSpecForProviderSplunkDestinationConfigurationS3ConfigurationCloudWatchLoggingOptions;

  /**
   * @schema DeliveryStreamSpecForProviderSplunkDestinationConfigurationS3Configuration#compressionFormat
   */
  readonly compressionFormat?: string;

  /**
   * Describes the encryption for a destination in Amazon S3.
   *
   * @schema DeliveryStreamSpecForProviderSplunkDestinationConfigurationS3Configuration#encryptionConfiguration
   */
  readonly encryptionConfiguration?: DeliveryStreamSpecForProviderSplunkDestinationConfigurationS3ConfigurationEncryptionConfiguration;

  /**
   * @schema DeliveryStreamSpecForProviderSplunkDestinationConfigurationS3Configuration#errorOutputPrefix
   */
  readonly errorOutputPrefix?: string;

  /**
   * @schema DeliveryStreamSpecForProviderSplunkDestinationConfigurationS3Configuration#prefix
   */
  readonly prefix?: string;

  /**
   * @schema DeliveryStreamSpecForProviderSplunkDestinationConfigurationS3Configuration#roleARN
   */
  readonly roleArn?: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderSplunkDestinationConfigurationS3Configuration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderSplunkDestinationConfigurationS3Configuration(obj: DeliveryStreamSpecForProviderSplunkDestinationConfigurationS3Configuration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'bucketARN': obj.bucketArn,
    'bufferingHints': toJson_DeliveryStreamSpecForProviderSplunkDestinationConfigurationS3ConfigurationBufferingHints(obj.bufferingHints),
    'cloudWatchLoggingOptions': toJson_DeliveryStreamSpecForProviderSplunkDestinationConfigurationS3ConfigurationCloudWatchLoggingOptions(obj.cloudWatchLoggingOptions),
    'compressionFormat': obj.compressionFormat,
    'encryptionConfiguration': toJson_DeliveryStreamSpecForProviderSplunkDestinationConfigurationS3ConfigurationEncryptionConfiguration(obj.encryptionConfiguration),
    'errorOutputPrefix': obj.errorOutputPrefix,
    'prefix': obj.prefix,
    'roleARN': obj.roleArn,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema DeliveryStreamSpecProviderConfigRefPolicyResolution
 */
export enum DeliveryStreamSpecProviderConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema DeliveryStreamSpecProviderConfigRefPolicyResolve
 */
export enum DeliveryStreamSpecProviderConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Policies for referencing.
 *
 * @schema DeliveryStreamSpecPublishConnectionDetailsToConfigRefPolicy
 */
export interface DeliveryStreamSpecPublishConnectionDetailsToConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema DeliveryStreamSpecPublishConnectionDetailsToConfigRefPolicy#resolution
   */
  readonly resolution?: DeliveryStreamSpecPublishConnectionDetailsToConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema DeliveryStreamSpecPublishConnectionDetailsToConfigRefPolicy#resolve
   */
  readonly resolve?: DeliveryStreamSpecPublishConnectionDetailsToConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'DeliveryStreamSpecPublishConnectionDetailsToConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecPublishConnectionDetailsToConfigRefPolicy(obj: DeliveryStreamSpecPublishConnectionDetailsToConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationProcessingConfigurationProcessors
 */
export interface DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationProcessingConfigurationProcessors {
  /**
   * @schema DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationProcessingConfigurationProcessors#parameters
   */
  readonly parameters?: DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationProcessingConfigurationProcessorsParameters[];

  /**
   * @schema DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationProcessingConfigurationProcessors#type_
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationProcessingConfigurationProcessors' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationProcessingConfigurationProcessors(obj: DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationProcessingConfigurationProcessors | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'parameters': obj.parameters?.map(y => toJson_DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationProcessingConfigurationProcessorsParameters(y)),
    'type_': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes hints for the buffering to perform before delivering data to the destination. These options are treated as hints, and therefore Kinesis Data Firehose might choose to use different values when it is optimal. The SizeInMBs and IntervalInSeconds parameters are optional. However, if specify a value for one of them, you must also provide a value for the other.
 *
 * @schema DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationS3ConfigurationBufferingHints
 */
export interface DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationS3ConfigurationBufferingHints {
  /**
   * @schema DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationS3ConfigurationBufferingHints#intervalInSeconds
   */
  readonly intervalInSeconds?: number;

  /**
   * @schema DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationS3ConfigurationBufferingHints#sizeInMBs
   */
  readonly sizeInMBs?: number;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationS3ConfigurationBufferingHints' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationS3ConfigurationBufferingHints(obj: DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationS3ConfigurationBufferingHints | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'intervalInSeconds': obj.intervalInSeconds,
    'sizeInMBs': obj.sizeInMBs,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes the Amazon CloudWatch logging options for your delivery stream.
 *
 * @schema DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationS3ConfigurationCloudWatchLoggingOptions
 */
export interface DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationS3ConfigurationCloudWatchLoggingOptions {
  /**
   * @schema DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationS3ConfigurationCloudWatchLoggingOptions#enabled
   */
  readonly enabled?: boolean;

  /**
   * @schema DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationS3ConfigurationCloudWatchLoggingOptions#logGroupName
   */
  readonly logGroupName?: string;

  /**
   * @schema DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationS3ConfigurationCloudWatchLoggingOptions#logStreamName
   */
  readonly logStreamName?: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationS3ConfigurationCloudWatchLoggingOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationS3ConfigurationCloudWatchLoggingOptions(obj: DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationS3ConfigurationCloudWatchLoggingOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
    'logGroupName': obj.logGroupName,
    'logStreamName': obj.logStreamName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes the encryption for a destination in Amazon S3.
 *
 * @schema DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationS3ConfigurationEncryptionConfiguration
 */
export interface DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationS3ConfigurationEncryptionConfiguration {
  /**
   * Describes an encryption key for a destination in Amazon S3.
   *
   * @schema DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationS3ConfigurationEncryptionConfiguration#kmsEncryptionConfig
   */
  readonly kmsEncryptionConfig?: DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationS3ConfigurationEncryptionConfigurationKmsEncryptionConfig;

  /**
   * @schema DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationS3ConfigurationEncryptionConfiguration#noEncryptionConfig
   */
  readonly noEncryptionConfig?: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationS3ConfigurationEncryptionConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationS3ConfigurationEncryptionConfiguration(obj: DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationS3ConfigurationEncryptionConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'kmsEncryptionConfig': toJson_DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationS3ConfigurationEncryptionConfigurationKmsEncryptionConfig(obj.kmsEncryptionConfig),
    'noEncryptionConfig': obj.noEncryptionConfig,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationProcessingConfigurationProcessors
 */
export interface DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationProcessingConfigurationProcessors {
  /**
   * @schema DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationProcessingConfigurationProcessors#parameters
   */
  readonly parameters?: DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationProcessingConfigurationProcessorsParameters[];

  /**
   * @schema DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationProcessingConfigurationProcessors#type_
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationProcessingConfigurationProcessors' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationProcessingConfigurationProcessors(obj: DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationProcessingConfigurationProcessors | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'parameters': obj.parameters?.map(y => toJson_DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationProcessingConfigurationProcessorsParameters(y)),
    'type_': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes hints for the buffering to perform before delivering data to the destination. These options are treated as hints, and therefore Kinesis Data Firehose might choose to use different values when it is optimal. The SizeInMBs and IntervalInSeconds parameters are optional. However, if specify a value for one of them, you must also provide a value for the other.
 *
 * @schema DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationS3ConfigurationBufferingHints
 */
export interface DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationS3ConfigurationBufferingHints {
  /**
   * @schema DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationS3ConfigurationBufferingHints#intervalInSeconds
   */
  readonly intervalInSeconds?: number;

  /**
   * @schema DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationS3ConfigurationBufferingHints#sizeInMBs
   */
  readonly sizeInMBs?: number;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationS3ConfigurationBufferingHints' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationS3ConfigurationBufferingHints(obj: DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationS3ConfigurationBufferingHints | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'intervalInSeconds': obj.intervalInSeconds,
    'sizeInMBs': obj.sizeInMBs,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes the Amazon CloudWatch logging options for your delivery stream.
 *
 * @schema DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationS3ConfigurationCloudWatchLoggingOptions
 */
export interface DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationS3ConfigurationCloudWatchLoggingOptions {
  /**
   * @schema DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationS3ConfigurationCloudWatchLoggingOptions#enabled
   */
  readonly enabled?: boolean;

  /**
   * @schema DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationS3ConfigurationCloudWatchLoggingOptions#logGroupName
   */
  readonly logGroupName?: string;

  /**
   * @schema DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationS3ConfigurationCloudWatchLoggingOptions#logStreamName
   */
  readonly logStreamName?: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationS3ConfigurationCloudWatchLoggingOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationS3ConfigurationCloudWatchLoggingOptions(obj: DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationS3ConfigurationCloudWatchLoggingOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
    'logGroupName': obj.logGroupName,
    'logStreamName': obj.logStreamName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes the encryption for a destination in Amazon S3.
 *
 * @schema DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationS3ConfigurationEncryptionConfiguration
 */
export interface DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationS3ConfigurationEncryptionConfiguration {
  /**
   * Describes an encryption key for a destination in Amazon S3.
   *
   * @schema DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationS3ConfigurationEncryptionConfiguration#kmsEncryptionConfig
   */
  readonly kmsEncryptionConfig?: DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationS3ConfigurationEncryptionConfigurationKmsEncryptionConfig;

  /**
   * @schema DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationS3ConfigurationEncryptionConfiguration#noEncryptionConfig
   */
  readonly noEncryptionConfig?: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationS3ConfigurationEncryptionConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationS3ConfigurationEncryptionConfiguration(obj: DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationS3ConfigurationEncryptionConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'kmsEncryptionConfig': toJson_DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationS3ConfigurationEncryptionConfigurationKmsEncryptionConfig(obj.kmsEncryptionConfig),
    'noEncryptionConfig': obj.noEncryptionConfig,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationProcessingConfigurationProcessors
 */
export interface DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationProcessingConfigurationProcessors {
  /**
   * @schema DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationProcessingConfigurationProcessors#parameters
   */
  readonly parameters?: DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationProcessingConfigurationProcessorsParameters[];

  /**
   * @schema DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationProcessingConfigurationProcessors#type_
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationProcessingConfigurationProcessors' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationProcessingConfigurationProcessors(obj: DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationProcessingConfigurationProcessors | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'parameters': obj.parameters?.map(y => toJson_DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationProcessingConfigurationProcessorsParameters(y)),
    'type_': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes hints for the buffering to perform before delivering data to the destination. These options are treated as hints, and therefore Kinesis Data Firehose might choose to use different values when it is optimal. The SizeInMBs and IntervalInSeconds parameters are optional. However, if specify a value for one of them, you must also provide a value for the other.
 *
 * @schema DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationS3ConfigurationBufferingHints
 */
export interface DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationS3ConfigurationBufferingHints {
  /**
   * @schema DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationS3ConfigurationBufferingHints#intervalInSeconds
   */
  readonly intervalInSeconds?: number;

  /**
   * @schema DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationS3ConfigurationBufferingHints#sizeInMBs
   */
  readonly sizeInMBs?: number;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationS3ConfigurationBufferingHints' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationS3ConfigurationBufferingHints(obj: DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationS3ConfigurationBufferingHints | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'intervalInSeconds': obj.intervalInSeconds,
    'sizeInMBs': obj.sizeInMBs,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes the Amazon CloudWatch logging options for your delivery stream.
 *
 * @schema DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationS3ConfigurationCloudWatchLoggingOptions
 */
export interface DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationS3ConfigurationCloudWatchLoggingOptions {
  /**
   * @schema DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationS3ConfigurationCloudWatchLoggingOptions#enabled
   */
  readonly enabled?: boolean;

  /**
   * @schema DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationS3ConfigurationCloudWatchLoggingOptions#logGroupName
   */
  readonly logGroupName?: string;

  /**
   * @schema DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationS3ConfigurationCloudWatchLoggingOptions#logStreamName
   */
  readonly logStreamName?: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationS3ConfigurationCloudWatchLoggingOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationS3ConfigurationCloudWatchLoggingOptions(obj: DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationS3ConfigurationCloudWatchLoggingOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
    'logGroupName': obj.logGroupName,
    'logStreamName': obj.logStreamName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes the encryption for a destination in Amazon S3.
 *
 * @schema DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationS3ConfigurationEncryptionConfiguration
 */
export interface DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationS3ConfigurationEncryptionConfiguration {
  /**
   * Describes an encryption key for a destination in Amazon S3.
   *
   * @schema DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationS3ConfigurationEncryptionConfiguration#kmsEncryptionConfig
   */
  readonly kmsEncryptionConfig?: DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationS3ConfigurationEncryptionConfigurationKmsEncryptionConfig;

  /**
   * @schema DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationS3ConfigurationEncryptionConfiguration#noEncryptionConfig
   */
  readonly noEncryptionConfig?: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationS3ConfigurationEncryptionConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationS3ConfigurationEncryptionConfiguration(obj: DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationS3ConfigurationEncryptionConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'kmsEncryptionConfig': toJson_DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationS3ConfigurationEncryptionConfigurationKmsEncryptionConfig(obj.kmsEncryptionConfig),
    'noEncryptionConfig': obj.noEncryptionConfig,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Specifies the deserializer you want to use to convert the format of the input data. This parameter is required if Enabled is set to true.
 *
 * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationInputFormatConfiguration
 */
export interface DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationInputFormatConfiguration {
  /**
   * The deserializer you want Kinesis Data Firehose to use for converting the input data from JSON. Kinesis Data Firehose then serializes the data to its final format using the Serializer. Kinesis Data Firehose supports two types of deserializers: the Apache Hive JSON SerDe (https://cwiki.apache.org/confluence/display/Hive/LanguageManual+DDL#LanguageManualDDL-JSON) and the OpenX JSON SerDe (https://github.com/rcongiu/Hive-JSON-Serde).
   *
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationInputFormatConfiguration#deserializer
   */
  readonly deserializer?: DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializer;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationInputFormatConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationInputFormatConfiguration(obj: DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationInputFormatConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'deserializer': toJson_DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializer(obj.deserializer),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Specifies the serializer that you want Kinesis Data Firehose to use to convert the format of your data before it writes it to Amazon S3. This parameter is required if Enabled is set to true.
 *
 * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationOutputFormatConfiguration
 */
export interface DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationOutputFormatConfiguration {
  /**
   * The serializer that you want Kinesis Data Firehose to use to convert data to the target format before writing it to Amazon S3. Kinesis Data Firehose supports two types of serializers: the ORC SerDe (https://hive.apache.org/javadocs/r1.2.2/api/org/apache/hadoop/hive/ql/io/orc/OrcSerde.html) and the Parquet SerDe (https://hive.apache.org/javadocs/r1.2.2/api/org/apache/hadoop/hive/ql/io/parquet/serde/ParquetHiveSerDe.html).
   *
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationOutputFormatConfiguration#serializer
   */
  readonly serializer?: DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializer;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationOutputFormatConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationOutputFormatConfiguration(obj: DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationOutputFormatConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'serializer': toJson_DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializer(obj.serializer),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Specifies the schema to which you want Kinesis Data Firehose to configure your data before it writes it to Amazon S3. This parameter is required if Enabled is set to true.
 *
 * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationSchemaConfiguration
 */
export interface DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationSchemaConfiguration {
  /**
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationSchemaConfiguration#catalogID
   */
  readonly catalogId?: string;

  /**
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationSchemaConfiguration#databaseName
   */
  readonly databaseName?: string;

  /**
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationSchemaConfiguration#region
   */
  readonly region?: string;

  /**
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationSchemaConfiguration#roleARN
   */
  readonly roleArn?: string;

  /**
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationSchemaConfiguration#tableName
   */
  readonly tableName?: string;

  /**
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationSchemaConfiguration#versionID
   */
  readonly versionId?: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationSchemaConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationSchemaConfiguration(obj: DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationSchemaConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'catalogID': obj.catalogId,
    'databaseName': obj.databaseName,
    'region': obj.region,
    'roleARN': obj.roleArn,
    'tableName': obj.tableName,
    'versionID': obj.versionId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The retry behavior in case Kinesis Data Firehose is unable to deliver data to an Amazon S3 prefix.
 *
 * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDynamicPartitioningConfigurationRetryOptions
 */
export interface DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDynamicPartitioningConfigurationRetryOptions {
  /**
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDynamicPartitioningConfigurationRetryOptions#durationInSeconds
   */
  readonly durationInSeconds?: number;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDynamicPartitioningConfigurationRetryOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDynamicPartitioningConfigurationRetryOptions(obj: DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDynamicPartitioningConfigurationRetryOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'durationInSeconds': obj.durationInSeconds,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes an encryption key for a destination in Amazon S3.
 *
 * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationEncryptionConfigurationKmsEncryptionConfig
 */
export interface DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationEncryptionConfigurationKmsEncryptionConfig {
  /**
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationEncryptionConfigurationKmsEncryptionConfig#awsKMSKeyARN
   */
  readonly awsKmsKeyArn?: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationEncryptionConfigurationKmsEncryptionConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationEncryptionConfigurationKmsEncryptionConfig(obj: DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationEncryptionConfigurationKmsEncryptionConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'awsKMSKeyARN': obj.awsKmsKeyArn,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationProcessingConfigurationProcessors
 */
export interface DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationProcessingConfigurationProcessors {
  /**
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationProcessingConfigurationProcessors#parameters
   */
  readonly parameters?: DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationProcessingConfigurationProcessorsParameters[];

  /**
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationProcessingConfigurationProcessors#type_
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationProcessingConfigurationProcessors' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationProcessingConfigurationProcessors(obj: DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationProcessingConfigurationProcessors | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'parameters': obj.parameters?.map(y => toJson_DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationProcessingConfigurationProcessorsParameters(y)),
    'type_': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes hints for the buffering to perform before delivering data to the destination. These options are treated as hints, and therefore Kinesis Data Firehose might choose to use different values when it is optimal. The SizeInMBs and IntervalInSeconds parameters are optional. However, if specify a value for one of them, you must also provide a value for the other.
 *
 * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationS3BackupConfigurationBufferingHints
 */
export interface DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationS3BackupConfigurationBufferingHints {
  /**
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationS3BackupConfigurationBufferingHints#intervalInSeconds
   */
  readonly intervalInSeconds?: number;

  /**
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationS3BackupConfigurationBufferingHints#sizeInMBs
   */
  readonly sizeInMBs?: number;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationS3BackupConfigurationBufferingHints' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationS3BackupConfigurationBufferingHints(obj: DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationS3BackupConfigurationBufferingHints | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'intervalInSeconds': obj.intervalInSeconds,
    'sizeInMBs': obj.sizeInMBs,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes the Amazon CloudWatch logging options for your delivery stream.
 *
 * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationS3BackupConfigurationCloudWatchLoggingOptions
 */
export interface DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationS3BackupConfigurationCloudWatchLoggingOptions {
  /**
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationS3BackupConfigurationCloudWatchLoggingOptions#enabled
   */
  readonly enabled?: boolean;

  /**
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationS3BackupConfigurationCloudWatchLoggingOptions#logGroupName
   */
  readonly logGroupName?: string;

  /**
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationS3BackupConfigurationCloudWatchLoggingOptions#logStreamName
   */
  readonly logStreamName?: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationS3BackupConfigurationCloudWatchLoggingOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationS3BackupConfigurationCloudWatchLoggingOptions(obj: DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationS3BackupConfigurationCloudWatchLoggingOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
    'logGroupName': obj.logGroupName,
    'logStreamName': obj.logStreamName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes the encryption for a destination in Amazon S3.
 *
 * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationS3BackupConfigurationEncryptionConfiguration
 */
export interface DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationS3BackupConfigurationEncryptionConfiguration {
  /**
   * Describes an encryption key for a destination in Amazon S3.
   *
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationS3BackupConfigurationEncryptionConfiguration#kmsEncryptionConfig
   */
  readonly kmsEncryptionConfig?: DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationS3BackupConfigurationEncryptionConfigurationKmsEncryptionConfig;

  /**
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationS3BackupConfigurationEncryptionConfiguration#noEncryptionConfig
   */
  readonly noEncryptionConfig?: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationS3BackupConfigurationEncryptionConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationS3BackupConfigurationEncryptionConfiguration(obj: DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationS3BackupConfigurationEncryptionConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'kmsEncryptionConfig': toJson_DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationS3BackupConfigurationEncryptionConfigurationKmsEncryptionConfig(obj.kmsEncryptionConfig),
    'noEncryptionConfig': obj.noEncryptionConfig,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationProcessingConfigurationProcessors
 */
export interface DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationProcessingConfigurationProcessors {
  /**
   * @schema DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationProcessingConfigurationProcessors#parameters
   */
  readonly parameters?: DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationProcessingConfigurationProcessorsParameters[];

  /**
   * @schema DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationProcessingConfigurationProcessors#type_
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationProcessingConfigurationProcessors' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationProcessingConfigurationProcessors(obj: DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationProcessingConfigurationProcessors | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'parameters': obj.parameters?.map(y => toJson_DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationProcessingConfigurationProcessorsParameters(y)),
    'type_': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationRequestConfigurationCommonAttributes
 */
export interface DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationRequestConfigurationCommonAttributes {
  /**
   * @schema DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationRequestConfigurationCommonAttributes#attributeName
   */
  readonly attributeName?: string;

  /**
   * @schema DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationRequestConfigurationCommonAttributes#attributeValue
   */
  readonly attributeValue?: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationRequestConfigurationCommonAttributes' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationRequestConfigurationCommonAttributes(obj: DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationRequestConfigurationCommonAttributes | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'attributeName': obj.attributeName,
    'attributeValue': obj.attributeValue,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes hints for the buffering to perform before delivering data to the destination. These options are treated as hints, and therefore Kinesis Data Firehose might choose to use different values when it is optimal. The SizeInMBs and IntervalInSeconds parameters are optional. However, if specify a value for one of them, you must also provide a value for the other.
 *
 * @schema DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationS3ConfigurationBufferingHints
 */
export interface DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationS3ConfigurationBufferingHints {
  /**
   * @schema DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationS3ConfigurationBufferingHints#intervalInSeconds
   */
  readonly intervalInSeconds?: number;

  /**
   * @schema DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationS3ConfigurationBufferingHints#sizeInMBs
   */
  readonly sizeInMBs?: number;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationS3ConfigurationBufferingHints' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationS3ConfigurationBufferingHints(obj: DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationS3ConfigurationBufferingHints | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'intervalInSeconds': obj.intervalInSeconds,
    'sizeInMBs': obj.sizeInMBs,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes the Amazon CloudWatch logging options for your delivery stream.
 *
 * @schema DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationS3ConfigurationCloudWatchLoggingOptions
 */
export interface DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationS3ConfigurationCloudWatchLoggingOptions {
  /**
   * @schema DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationS3ConfigurationCloudWatchLoggingOptions#enabled
   */
  readonly enabled?: boolean;

  /**
   * @schema DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationS3ConfigurationCloudWatchLoggingOptions#logGroupName
   */
  readonly logGroupName?: string;

  /**
   * @schema DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationS3ConfigurationCloudWatchLoggingOptions#logStreamName
   */
  readonly logStreamName?: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationS3ConfigurationCloudWatchLoggingOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationS3ConfigurationCloudWatchLoggingOptions(obj: DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationS3ConfigurationCloudWatchLoggingOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
    'logGroupName': obj.logGroupName,
    'logStreamName': obj.logStreamName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes the encryption for a destination in Amazon S3.
 *
 * @schema DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationS3ConfigurationEncryptionConfiguration
 */
export interface DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationS3ConfigurationEncryptionConfiguration {
  /**
   * Describes an encryption key for a destination in Amazon S3.
   *
   * @schema DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationS3ConfigurationEncryptionConfiguration#kmsEncryptionConfig
   */
  readonly kmsEncryptionConfig?: DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationS3ConfigurationEncryptionConfigurationKmsEncryptionConfig;

  /**
   * @schema DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationS3ConfigurationEncryptionConfiguration#noEncryptionConfig
   */
  readonly noEncryptionConfig?: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationS3ConfigurationEncryptionConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationS3ConfigurationEncryptionConfiguration(obj: DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationS3ConfigurationEncryptionConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'kmsEncryptionConfig': toJson_DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationS3ConfigurationEncryptionConfigurationKmsEncryptionConfig(obj.kmsEncryptionConfig),
    'noEncryptionConfig': obj.noEncryptionConfig,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema DeliveryStreamSpecForProviderKmsKeyArnRefPolicyResolution
 */
export enum DeliveryStreamSpecForProviderKmsKeyArnRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema DeliveryStreamSpecForProviderKmsKeyArnRefPolicyResolve
 */
export enum DeliveryStreamSpecForProviderKmsKeyArnRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema DeliveryStreamSpecForProviderKmsKeyArnSelectorPolicyResolution
 */
export enum DeliveryStreamSpecForProviderKmsKeyArnSelectorPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema DeliveryStreamSpecForProviderKmsKeyArnSelectorPolicyResolve
 */
export enum DeliveryStreamSpecForProviderKmsKeyArnSelectorPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfigurationProcessingConfigurationProcessors
 */
export interface DeliveryStreamSpecForProviderRedshiftDestinationConfigurationProcessingConfigurationProcessors {
  /**
   * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfigurationProcessingConfigurationProcessors#parameters
   */
  readonly parameters?: DeliveryStreamSpecForProviderRedshiftDestinationConfigurationProcessingConfigurationProcessorsParameters[];

  /**
   * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfigurationProcessingConfigurationProcessors#type_
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderRedshiftDestinationConfigurationProcessingConfigurationProcessors' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderRedshiftDestinationConfigurationProcessingConfigurationProcessors(obj: DeliveryStreamSpecForProviderRedshiftDestinationConfigurationProcessingConfigurationProcessors | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'parameters': obj.parameters?.map(y => toJson_DeliveryStreamSpecForProviderRedshiftDestinationConfigurationProcessingConfigurationProcessorsParameters(y)),
    'type_': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes hints for the buffering to perform before delivering data to the destination. These options are treated as hints, and therefore Kinesis Data Firehose might choose to use different values when it is optimal. The SizeInMBs and IntervalInSeconds parameters are optional. However, if specify a value for one of them, you must also provide a value for the other.
 *
 * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3BackupConfigurationBufferingHints
 */
export interface DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3BackupConfigurationBufferingHints {
  /**
   * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3BackupConfigurationBufferingHints#intervalInSeconds
   */
  readonly intervalInSeconds?: number;

  /**
   * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3BackupConfigurationBufferingHints#sizeInMBs
   */
  readonly sizeInMBs?: number;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3BackupConfigurationBufferingHints' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3BackupConfigurationBufferingHints(obj: DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3BackupConfigurationBufferingHints | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'intervalInSeconds': obj.intervalInSeconds,
    'sizeInMBs': obj.sizeInMBs,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes the Amazon CloudWatch logging options for your delivery stream.
 *
 * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3BackupConfigurationCloudWatchLoggingOptions
 */
export interface DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3BackupConfigurationCloudWatchLoggingOptions {
  /**
   * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3BackupConfigurationCloudWatchLoggingOptions#enabled
   */
  readonly enabled?: boolean;

  /**
   * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3BackupConfigurationCloudWatchLoggingOptions#logGroupName
   */
  readonly logGroupName?: string;

  /**
   * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3BackupConfigurationCloudWatchLoggingOptions#logStreamName
   */
  readonly logStreamName?: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3BackupConfigurationCloudWatchLoggingOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3BackupConfigurationCloudWatchLoggingOptions(obj: DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3BackupConfigurationCloudWatchLoggingOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
    'logGroupName': obj.logGroupName,
    'logStreamName': obj.logStreamName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes the encryption for a destination in Amazon S3.
 *
 * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3BackupConfigurationEncryptionConfiguration
 */
export interface DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3BackupConfigurationEncryptionConfiguration {
  /**
   * Describes an encryption key for a destination in Amazon S3.
   *
   * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3BackupConfigurationEncryptionConfiguration#kmsEncryptionConfig
   */
  readonly kmsEncryptionConfig?: DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3BackupConfigurationEncryptionConfigurationKmsEncryptionConfig;

  /**
   * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3BackupConfigurationEncryptionConfiguration#noEncryptionConfig
   */
  readonly noEncryptionConfig?: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3BackupConfigurationEncryptionConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3BackupConfigurationEncryptionConfiguration(obj: DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3BackupConfigurationEncryptionConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'kmsEncryptionConfig': toJson_DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3BackupConfigurationEncryptionConfigurationKmsEncryptionConfig(obj.kmsEncryptionConfig),
    'noEncryptionConfig': obj.noEncryptionConfig,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes hints for the buffering to perform before delivering data to the destination. These options are treated as hints, and therefore Kinesis Data Firehose might choose to use different values when it is optimal. The SizeInMBs and IntervalInSeconds parameters are optional. However, if specify a value for one of them, you must also provide a value for the other.
 *
 * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3ConfigurationBufferingHints
 */
export interface DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3ConfigurationBufferingHints {
  /**
   * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3ConfigurationBufferingHints#intervalInSeconds
   */
  readonly intervalInSeconds?: number;

  /**
   * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3ConfigurationBufferingHints#sizeInMBs
   */
  readonly sizeInMBs?: number;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3ConfigurationBufferingHints' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3ConfigurationBufferingHints(obj: DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3ConfigurationBufferingHints | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'intervalInSeconds': obj.intervalInSeconds,
    'sizeInMBs': obj.sizeInMBs,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes the Amazon CloudWatch logging options for your delivery stream.
 *
 * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3ConfigurationCloudWatchLoggingOptions
 */
export interface DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3ConfigurationCloudWatchLoggingOptions {
  /**
   * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3ConfigurationCloudWatchLoggingOptions#enabled
   */
  readonly enabled?: boolean;

  /**
   * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3ConfigurationCloudWatchLoggingOptions#logGroupName
   */
  readonly logGroupName?: string;

  /**
   * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3ConfigurationCloudWatchLoggingOptions#logStreamName
   */
  readonly logStreamName?: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3ConfigurationCloudWatchLoggingOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3ConfigurationCloudWatchLoggingOptions(obj: DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3ConfigurationCloudWatchLoggingOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
    'logGroupName': obj.logGroupName,
    'logStreamName': obj.logStreamName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes the encryption for a destination in Amazon S3.
 *
 * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3ConfigurationEncryptionConfiguration
 */
export interface DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3ConfigurationEncryptionConfiguration {
  /**
   * Describes an encryption key for a destination in Amazon S3.
   *
   * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3ConfigurationEncryptionConfiguration#kmsEncryptionConfig
   */
  readonly kmsEncryptionConfig?: DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3ConfigurationEncryptionConfigurationKmsEncryptionConfig;

  /**
   * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3ConfigurationEncryptionConfiguration#noEncryptionConfig
   */
  readonly noEncryptionConfig?: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3ConfigurationEncryptionConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3ConfigurationEncryptionConfiguration(obj: DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3ConfigurationEncryptionConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'kmsEncryptionConfig': toJson_DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3ConfigurationEncryptionConfigurationKmsEncryptionConfig(obj.kmsEncryptionConfig),
    'noEncryptionConfig': obj.noEncryptionConfig,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes an encryption key for a destination in Amazon S3.
 *
 * @schema DeliveryStreamSpecForProviderS3DestinationConfigurationEncryptionConfigurationKmsEncryptionConfig
 */
export interface DeliveryStreamSpecForProviderS3DestinationConfigurationEncryptionConfigurationKmsEncryptionConfig {
  /**
   * @schema DeliveryStreamSpecForProviderS3DestinationConfigurationEncryptionConfigurationKmsEncryptionConfig#awsKMSKeyARN
   */
  readonly awsKmsKeyArn?: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderS3DestinationConfigurationEncryptionConfigurationKmsEncryptionConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderS3DestinationConfigurationEncryptionConfigurationKmsEncryptionConfig(obj: DeliveryStreamSpecForProviderS3DestinationConfigurationEncryptionConfigurationKmsEncryptionConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'awsKMSKeyARN': obj.awsKmsKeyArn,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DeliveryStreamSpecForProviderSplunkDestinationConfigurationProcessingConfigurationProcessors
 */
export interface DeliveryStreamSpecForProviderSplunkDestinationConfigurationProcessingConfigurationProcessors {
  /**
   * @schema DeliveryStreamSpecForProviderSplunkDestinationConfigurationProcessingConfigurationProcessors#parameters
   */
  readonly parameters?: DeliveryStreamSpecForProviderSplunkDestinationConfigurationProcessingConfigurationProcessorsParameters[];

  /**
   * @schema DeliveryStreamSpecForProviderSplunkDestinationConfigurationProcessingConfigurationProcessors#type_
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderSplunkDestinationConfigurationProcessingConfigurationProcessors' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderSplunkDestinationConfigurationProcessingConfigurationProcessors(obj: DeliveryStreamSpecForProviderSplunkDestinationConfigurationProcessingConfigurationProcessors | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'parameters': obj.parameters?.map(y => toJson_DeliveryStreamSpecForProviderSplunkDestinationConfigurationProcessingConfigurationProcessorsParameters(y)),
    'type_': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes hints for the buffering to perform before delivering data to the destination. These options are treated as hints, and therefore Kinesis Data Firehose might choose to use different values when it is optimal. The SizeInMBs and IntervalInSeconds parameters are optional. However, if specify a value for one of them, you must also provide a value for the other.
 *
 * @schema DeliveryStreamSpecForProviderSplunkDestinationConfigurationS3ConfigurationBufferingHints
 */
export interface DeliveryStreamSpecForProviderSplunkDestinationConfigurationS3ConfigurationBufferingHints {
  /**
   * @schema DeliveryStreamSpecForProviderSplunkDestinationConfigurationS3ConfigurationBufferingHints#intervalInSeconds
   */
  readonly intervalInSeconds?: number;

  /**
   * @schema DeliveryStreamSpecForProviderSplunkDestinationConfigurationS3ConfigurationBufferingHints#sizeInMBs
   */
  readonly sizeInMBs?: number;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderSplunkDestinationConfigurationS3ConfigurationBufferingHints' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderSplunkDestinationConfigurationS3ConfigurationBufferingHints(obj: DeliveryStreamSpecForProviderSplunkDestinationConfigurationS3ConfigurationBufferingHints | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'intervalInSeconds': obj.intervalInSeconds,
    'sizeInMBs': obj.sizeInMBs,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes the Amazon CloudWatch logging options for your delivery stream.
 *
 * @schema DeliveryStreamSpecForProviderSplunkDestinationConfigurationS3ConfigurationCloudWatchLoggingOptions
 */
export interface DeliveryStreamSpecForProviderSplunkDestinationConfigurationS3ConfigurationCloudWatchLoggingOptions {
  /**
   * @schema DeliveryStreamSpecForProviderSplunkDestinationConfigurationS3ConfigurationCloudWatchLoggingOptions#enabled
   */
  readonly enabled?: boolean;

  /**
   * @schema DeliveryStreamSpecForProviderSplunkDestinationConfigurationS3ConfigurationCloudWatchLoggingOptions#logGroupName
   */
  readonly logGroupName?: string;

  /**
   * @schema DeliveryStreamSpecForProviderSplunkDestinationConfigurationS3ConfigurationCloudWatchLoggingOptions#logStreamName
   */
  readonly logStreamName?: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderSplunkDestinationConfigurationS3ConfigurationCloudWatchLoggingOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderSplunkDestinationConfigurationS3ConfigurationCloudWatchLoggingOptions(obj: DeliveryStreamSpecForProviderSplunkDestinationConfigurationS3ConfigurationCloudWatchLoggingOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
    'logGroupName': obj.logGroupName,
    'logStreamName': obj.logStreamName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes the encryption for a destination in Amazon S3.
 *
 * @schema DeliveryStreamSpecForProviderSplunkDestinationConfigurationS3ConfigurationEncryptionConfiguration
 */
export interface DeliveryStreamSpecForProviderSplunkDestinationConfigurationS3ConfigurationEncryptionConfiguration {
  /**
   * Describes an encryption key for a destination in Amazon S3.
   *
   * @schema DeliveryStreamSpecForProviderSplunkDestinationConfigurationS3ConfigurationEncryptionConfiguration#kmsEncryptionConfig
   */
  readonly kmsEncryptionConfig?: DeliveryStreamSpecForProviderSplunkDestinationConfigurationS3ConfigurationEncryptionConfigurationKmsEncryptionConfig;

  /**
   * @schema DeliveryStreamSpecForProviderSplunkDestinationConfigurationS3ConfigurationEncryptionConfiguration#noEncryptionConfig
   */
  readonly noEncryptionConfig?: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderSplunkDestinationConfigurationS3ConfigurationEncryptionConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderSplunkDestinationConfigurationS3ConfigurationEncryptionConfiguration(obj: DeliveryStreamSpecForProviderSplunkDestinationConfigurationS3ConfigurationEncryptionConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'kmsEncryptionConfig': toJson_DeliveryStreamSpecForProviderSplunkDestinationConfigurationS3ConfigurationEncryptionConfigurationKmsEncryptionConfig(obj.kmsEncryptionConfig),
    'noEncryptionConfig': obj.noEncryptionConfig,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema DeliveryStreamSpecPublishConnectionDetailsToConfigRefPolicyResolution
 */
export enum DeliveryStreamSpecPublishConnectionDetailsToConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema DeliveryStreamSpecPublishConnectionDetailsToConfigRefPolicyResolve
 */
export enum DeliveryStreamSpecPublishConnectionDetailsToConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * @schema DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationProcessingConfigurationProcessorsParameters
 */
export interface DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationProcessingConfigurationProcessorsParameters {
  /**
   * @schema DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationProcessingConfigurationProcessorsParameters#parameterName
   */
  readonly parameterName?: string;

  /**
   * @schema DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationProcessingConfigurationProcessorsParameters#parameterValue
   */
  readonly parameterValue?: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationProcessingConfigurationProcessorsParameters' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationProcessingConfigurationProcessorsParameters(obj: DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationProcessingConfigurationProcessorsParameters | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'parameterName': obj.parameterName,
    'parameterValue': obj.parameterValue,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes an encryption key for a destination in Amazon S3.
 *
 * @schema DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationS3ConfigurationEncryptionConfigurationKmsEncryptionConfig
 */
export interface DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationS3ConfigurationEncryptionConfigurationKmsEncryptionConfig {
  /**
   * @schema DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationS3ConfigurationEncryptionConfigurationKmsEncryptionConfig#awsKMSKeyARN
   */
  readonly awsKmsKeyArn?: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationS3ConfigurationEncryptionConfigurationKmsEncryptionConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationS3ConfigurationEncryptionConfigurationKmsEncryptionConfig(obj: DeliveryStreamSpecForProviderAmazonOpenSearchServerlessDestinationConfigurationS3ConfigurationEncryptionConfigurationKmsEncryptionConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'awsKMSKeyARN': obj.awsKmsKeyArn,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationProcessingConfigurationProcessorsParameters
 */
export interface DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationProcessingConfigurationProcessorsParameters {
  /**
   * @schema DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationProcessingConfigurationProcessorsParameters#parameterName
   */
  readonly parameterName?: string;

  /**
   * @schema DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationProcessingConfigurationProcessorsParameters#parameterValue
   */
  readonly parameterValue?: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationProcessingConfigurationProcessorsParameters' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationProcessingConfigurationProcessorsParameters(obj: DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationProcessingConfigurationProcessorsParameters | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'parameterName': obj.parameterName,
    'parameterValue': obj.parameterValue,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes an encryption key for a destination in Amazon S3.
 *
 * @schema DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationS3ConfigurationEncryptionConfigurationKmsEncryptionConfig
 */
export interface DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationS3ConfigurationEncryptionConfigurationKmsEncryptionConfig {
  /**
   * @schema DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationS3ConfigurationEncryptionConfigurationKmsEncryptionConfig#awsKMSKeyARN
   */
  readonly awsKmsKeyArn?: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationS3ConfigurationEncryptionConfigurationKmsEncryptionConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationS3ConfigurationEncryptionConfigurationKmsEncryptionConfig(obj: DeliveryStreamSpecForProviderAmazonopensearchserviceDestinationConfigurationS3ConfigurationEncryptionConfigurationKmsEncryptionConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'awsKMSKeyARN': obj.awsKmsKeyArn,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationProcessingConfigurationProcessorsParameters
 */
export interface DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationProcessingConfigurationProcessorsParameters {
  /**
   * @schema DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationProcessingConfigurationProcessorsParameters#parameterName
   */
  readonly parameterName?: string;

  /**
   * @schema DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationProcessingConfigurationProcessorsParameters#parameterValue
   */
  readonly parameterValue?: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationProcessingConfigurationProcessorsParameters' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationProcessingConfigurationProcessorsParameters(obj: DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationProcessingConfigurationProcessorsParameters | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'parameterName': obj.parameterName,
    'parameterValue': obj.parameterValue,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes an encryption key for a destination in Amazon S3.
 *
 * @schema DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationS3ConfigurationEncryptionConfigurationKmsEncryptionConfig
 */
export interface DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationS3ConfigurationEncryptionConfigurationKmsEncryptionConfig {
  /**
   * @schema DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationS3ConfigurationEncryptionConfigurationKmsEncryptionConfig#awsKMSKeyARN
   */
  readonly awsKmsKeyArn?: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationS3ConfigurationEncryptionConfigurationKmsEncryptionConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationS3ConfigurationEncryptionConfigurationKmsEncryptionConfig(obj: DeliveryStreamSpecForProviderElasticsearchDestinationConfigurationS3ConfigurationEncryptionConfigurationKmsEncryptionConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'awsKMSKeyARN': obj.awsKmsKeyArn,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The deserializer you want Kinesis Data Firehose to use for converting the input data from JSON. Kinesis Data Firehose then serializes the data to its final format using the Serializer. Kinesis Data Firehose supports two types of deserializers: the Apache Hive JSON SerDe (https://cwiki.apache.org/confluence/display/Hive/LanguageManual+DDL#LanguageManualDDL-JSON) and the OpenX JSON SerDe (https://github.com/rcongiu/Hive-JSON-Serde).
 *
 * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializer
 */
export interface DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializer {
  /**
   * The native Hive / HCatalog JsonSerDe. Used by Kinesis Data Firehose for deserializing data, which means converting it from the JSON format in preparation for serializing it to the Parquet or ORC format. This is one of two deserializers you can choose, depending on which one offers the functionality you need. The other option is the OpenX SerDe.
   *
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializer#hiveJSONSerDe
   */
  readonly hiveJsonSerDe?: DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDe;

  /**
   * The OpenX SerDe. Used by Kinesis Data Firehose for deserializing data, which means converting it from the JSON format in preparation for serializing it to the Parquet or ORC format. This is one of two deserializers you can choose, depending on which one offers the functionality you need. The other option is the native Hive / HCatalog JsonSerDe.
   *
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializer#openXJSONSerDe
   */
  readonly openXjsonSerDe?: DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXjsonSerDe;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializer' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializer(obj: DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializer | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'hiveJSONSerDe': toJson_DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDe(obj.hiveJsonSerDe),
    'openXJSONSerDe': toJson_DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXjsonSerDe(obj.openXjsonSerDe),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The serializer that you want Kinesis Data Firehose to use to convert data to the target format before writing it to Amazon S3. Kinesis Data Firehose supports two types of serializers: the ORC SerDe (https://hive.apache.org/javadocs/r1.2.2/api/org/apache/hadoop/hive/ql/io/orc/OrcSerde.html) and the Parquet SerDe (https://hive.apache.org/javadocs/r1.2.2/api/org/apache/hadoop/hive/ql/io/parquet/serde/ParquetHiveSerDe.html).
 *
 * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializer
 */
export interface DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializer {
  /**
   * A serializer to use for converting data to the ORC format before storing it in Amazon S3. For more information, see Apache ORC (https://orc.apache.org/docs/).
   *
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializer#orcSerDe
   */
  readonly orcSerDe?: DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDe;

  /**
   * A serializer to use for converting data to the Parquet format before storing it in Amazon S3. For more information, see Apache Parquet (https://parquet.apache.org/documentation/latest/).
   *
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializer#parquetSerDe
   */
  readonly parquetSerDe?: DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDe;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializer' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializer(obj: DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializer | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'orcSerDe': toJson_DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDe(obj.orcSerDe),
    'parquetSerDe': toJson_DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDe(obj.parquetSerDe),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationProcessingConfigurationProcessorsParameters
 */
export interface DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationProcessingConfigurationProcessorsParameters {
  /**
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationProcessingConfigurationProcessorsParameters#parameterName
   */
  readonly parameterName?: string;

  /**
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationProcessingConfigurationProcessorsParameters#parameterValue
   */
  readonly parameterValue?: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationProcessingConfigurationProcessorsParameters' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationProcessingConfigurationProcessorsParameters(obj: DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationProcessingConfigurationProcessorsParameters | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'parameterName': obj.parameterName,
    'parameterValue': obj.parameterValue,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes an encryption key for a destination in Amazon S3.
 *
 * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationS3BackupConfigurationEncryptionConfigurationKmsEncryptionConfig
 */
export interface DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationS3BackupConfigurationEncryptionConfigurationKmsEncryptionConfig {
  /**
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationS3BackupConfigurationEncryptionConfigurationKmsEncryptionConfig#awsKMSKeyARN
   */
  readonly awsKmsKeyArn?: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationS3BackupConfigurationEncryptionConfigurationKmsEncryptionConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationS3BackupConfigurationEncryptionConfigurationKmsEncryptionConfig(obj: DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationS3BackupConfigurationEncryptionConfigurationKmsEncryptionConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'awsKMSKeyARN': obj.awsKmsKeyArn,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationProcessingConfigurationProcessorsParameters
 */
export interface DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationProcessingConfigurationProcessorsParameters {
  /**
   * @schema DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationProcessingConfigurationProcessorsParameters#parameterName
   */
  readonly parameterName?: string;

  /**
   * @schema DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationProcessingConfigurationProcessorsParameters#parameterValue
   */
  readonly parameterValue?: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationProcessingConfigurationProcessorsParameters' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationProcessingConfigurationProcessorsParameters(obj: DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationProcessingConfigurationProcessorsParameters | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'parameterName': obj.parameterName,
    'parameterValue': obj.parameterValue,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes an encryption key for a destination in Amazon S3.
 *
 * @schema DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationS3ConfigurationEncryptionConfigurationKmsEncryptionConfig
 */
export interface DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationS3ConfigurationEncryptionConfigurationKmsEncryptionConfig {
  /**
   * @schema DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationS3ConfigurationEncryptionConfigurationKmsEncryptionConfig#awsKMSKeyARN
   */
  readonly awsKmsKeyArn?: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationS3ConfigurationEncryptionConfigurationKmsEncryptionConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationS3ConfigurationEncryptionConfigurationKmsEncryptionConfig(obj: DeliveryStreamSpecForProviderHttpEndpointDestinationConfigurationS3ConfigurationEncryptionConfigurationKmsEncryptionConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'awsKMSKeyARN': obj.awsKmsKeyArn,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfigurationProcessingConfigurationProcessorsParameters
 */
export interface DeliveryStreamSpecForProviderRedshiftDestinationConfigurationProcessingConfigurationProcessorsParameters {
  /**
   * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfigurationProcessingConfigurationProcessorsParameters#parameterName
   */
  readonly parameterName?: string;

  /**
   * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfigurationProcessingConfigurationProcessorsParameters#parameterValue
   */
  readonly parameterValue?: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderRedshiftDestinationConfigurationProcessingConfigurationProcessorsParameters' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderRedshiftDestinationConfigurationProcessingConfigurationProcessorsParameters(obj: DeliveryStreamSpecForProviderRedshiftDestinationConfigurationProcessingConfigurationProcessorsParameters | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'parameterName': obj.parameterName,
    'parameterValue': obj.parameterValue,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes an encryption key for a destination in Amazon S3.
 *
 * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3BackupConfigurationEncryptionConfigurationKmsEncryptionConfig
 */
export interface DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3BackupConfigurationEncryptionConfigurationKmsEncryptionConfig {
  /**
   * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3BackupConfigurationEncryptionConfigurationKmsEncryptionConfig#awsKMSKeyARN
   */
  readonly awsKmsKeyArn?: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3BackupConfigurationEncryptionConfigurationKmsEncryptionConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3BackupConfigurationEncryptionConfigurationKmsEncryptionConfig(obj: DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3BackupConfigurationEncryptionConfigurationKmsEncryptionConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'awsKMSKeyARN': obj.awsKmsKeyArn,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes an encryption key for a destination in Amazon S3.
 *
 * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3ConfigurationEncryptionConfigurationKmsEncryptionConfig
 */
export interface DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3ConfigurationEncryptionConfigurationKmsEncryptionConfig {
  /**
   * @schema DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3ConfigurationEncryptionConfigurationKmsEncryptionConfig#awsKMSKeyARN
   */
  readonly awsKmsKeyArn?: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3ConfigurationEncryptionConfigurationKmsEncryptionConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3ConfigurationEncryptionConfigurationKmsEncryptionConfig(obj: DeliveryStreamSpecForProviderRedshiftDestinationConfigurationS3ConfigurationEncryptionConfigurationKmsEncryptionConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'awsKMSKeyARN': obj.awsKmsKeyArn,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DeliveryStreamSpecForProviderSplunkDestinationConfigurationProcessingConfigurationProcessorsParameters
 */
export interface DeliveryStreamSpecForProviderSplunkDestinationConfigurationProcessingConfigurationProcessorsParameters {
  /**
   * @schema DeliveryStreamSpecForProviderSplunkDestinationConfigurationProcessingConfigurationProcessorsParameters#parameterName
   */
  readonly parameterName?: string;

  /**
   * @schema DeliveryStreamSpecForProviderSplunkDestinationConfigurationProcessingConfigurationProcessorsParameters#parameterValue
   */
  readonly parameterValue?: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderSplunkDestinationConfigurationProcessingConfigurationProcessorsParameters' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderSplunkDestinationConfigurationProcessingConfigurationProcessorsParameters(obj: DeliveryStreamSpecForProviderSplunkDestinationConfigurationProcessingConfigurationProcessorsParameters | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'parameterName': obj.parameterName,
    'parameterValue': obj.parameterValue,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes an encryption key for a destination in Amazon S3.
 *
 * @schema DeliveryStreamSpecForProviderSplunkDestinationConfigurationS3ConfigurationEncryptionConfigurationKmsEncryptionConfig
 */
export interface DeliveryStreamSpecForProviderSplunkDestinationConfigurationS3ConfigurationEncryptionConfigurationKmsEncryptionConfig {
  /**
   * @schema DeliveryStreamSpecForProviderSplunkDestinationConfigurationS3ConfigurationEncryptionConfigurationKmsEncryptionConfig#awsKMSKeyARN
   */
  readonly awsKmsKeyArn?: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderSplunkDestinationConfigurationS3ConfigurationEncryptionConfigurationKmsEncryptionConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderSplunkDestinationConfigurationS3ConfigurationEncryptionConfigurationKmsEncryptionConfig(obj: DeliveryStreamSpecForProviderSplunkDestinationConfigurationS3ConfigurationEncryptionConfigurationKmsEncryptionConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'awsKMSKeyARN': obj.awsKmsKeyArn,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The native Hive / HCatalog JsonSerDe. Used by Kinesis Data Firehose for deserializing data, which means converting it from the JSON format in preparation for serializing it to the Parquet or ORC format. This is one of two deserializers you can choose, depending on which one offers the functionality you need. The other option is the OpenX SerDe.
 *
 * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDe
 */
export interface DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDe {
  /**
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDe#timestampFormats
   */
  readonly timestampFormats?: string[];

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDe' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDe(obj: DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDe | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'timestampFormats': obj.timestampFormats?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The OpenX SerDe. Used by Kinesis Data Firehose for deserializing data, which means converting it from the JSON format in preparation for serializing it to the Parquet or ORC format. This is one of two deserializers you can choose, depending on which one offers the functionality you need. The other option is the native Hive / HCatalog JsonSerDe.
 *
 * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXjsonSerDe
 */
export interface DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXjsonSerDe {
  /**
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXjsonSerDe#caseInsensitive
   */
  readonly caseInsensitive?: boolean;

  /**
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXjsonSerDe#columnToJSONKeyMappings
   */
  readonly columnToJsonKeyMappings?: { [key: string]: string };

  /**
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXjsonSerDe#convertDotsInJSONKeysToUnderscores
   */
  readonly convertDotsInJsonKeysToUnderscores?: boolean;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXjsonSerDe' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXjsonSerDe(obj: DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXjsonSerDe | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'caseInsensitive': obj.caseInsensitive,
    'columnToJSONKeyMappings': ((obj.columnToJsonKeyMappings) === undefined) ? undefined : (Object.entries(obj.columnToJsonKeyMappings).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'convertDotsInJSONKeysToUnderscores': obj.convertDotsInJsonKeysToUnderscores,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A serializer to use for converting data to the ORC format before storing it in Amazon S3. For more information, see Apache ORC (https://orc.apache.org/docs/).
 *
 * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDe
 */
export interface DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDe {
  /**
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDe#blockSizeBytes
   */
  readonly blockSizeBytes?: number;

  /**
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDe#bloomFilterColumns
   */
  readonly bloomFilterColumns?: string[];

  /**
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDe#bloomFilterFalsePositiveProbability
   */
  readonly bloomFilterFalsePositiveProbability?: number;

  /**
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDe#compression
   */
  readonly compression?: string;

  /**
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDe#dictionaryKeyThreshold
   */
  readonly dictionaryKeyThreshold?: number;

  /**
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDe#enablePadding
   */
  readonly enablePadding?: boolean;

  /**
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDe#formatVersion
   */
  readonly formatVersion?: string;

  /**
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDe#paddingTolerance
   */
  readonly paddingTolerance?: number;

  /**
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDe#rowIndexStride
   */
  readonly rowIndexStride?: number;

  /**
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDe#stripeSizeBytes
   */
  readonly stripeSizeBytes?: number;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDe' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDe(obj: DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDe | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'blockSizeBytes': obj.blockSizeBytes,
    'bloomFilterColumns': obj.bloomFilterColumns?.map(y => y),
    'bloomFilterFalsePositiveProbability': obj.bloomFilterFalsePositiveProbability,
    'compression': obj.compression,
    'dictionaryKeyThreshold': obj.dictionaryKeyThreshold,
    'enablePadding': obj.enablePadding,
    'formatVersion': obj.formatVersion,
    'paddingTolerance': obj.paddingTolerance,
    'rowIndexStride': obj.rowIndexStride,
    'stripeSizeBytes': obj.stripeSizeBytes,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A serializer to use for converting data to the Parquet format before storing it in Amazon S3. For more information, see Apache Parquet (https://parquet.apache.org/documentation/latest/).
 *
 * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDe
 */
export interface DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDe {
  /**
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDe#blockSizeBytes
   */
  readonly blockSizeBytes?: number;

  /**
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDe#compression
   */
  readonly compression?: string;

  /**
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDe#enableDictionaryCompression
   */
  readonly enableDictionaryCompression?: boolean;

  /**
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDe#maxPaddingBytes
   */
  readonly maxPaddingBytes?: number;

  /**
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDe#pageSizeBytes
   */
  readonly pageSizeBytes?: number;

  /**
   * @schema DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDe#writerVersion
   */
  readonly writerVersion?: string;

}

/**
 * Converts an object of type 'DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDe' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDe(obj: DeliveryStreamSpecForProviderExtendedS3DestinationConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDe | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'blockSizeBytes': obj.blockSizeBytes,
    'compression': obj.compression,
    'enableDictionaryCompression': obj.enableDictionaryCompression,
    'maxPaddingBytes': obj.maxPaddingBytes,
    'pageSizeBytes': obj.pageSizeBytes,
    'writerVersion': obj.writerVersion,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

