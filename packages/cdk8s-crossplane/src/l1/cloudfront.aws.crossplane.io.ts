// @ts-nocheck
// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 * CachePolicy is the Schema for the CachePolicies API
 *
 * @schema CachePolicy
 */
export class CachePolicy extends ApiObject {
  /**
   * Returns the apiVersion and kind for "CachePolicy"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'cloudfront.aws.crossplane.io/v1alpha1',
    kind: 'CachePolicy',
  }

  /**
   * Renders a Kubernetes manifest for "CachePolicy".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: CachePolicyProps): any {
    return {
      ...CachePolicy.GVK,
      ...toJson_CachePolicyProps(props),
    };
  }

  /**
   * Defines a "CachePolicy" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: CachePolicyProps) {
    super(scope, id, {
      ...CachePolicy.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...CachePolicy.GVK,
      ...toJson_CachePolicyProps(resolved),
    };
  }
}

/**
 * CachePolicy is the Schema for the CachePolicies API
 *
 * @schema CachePolicy
 */
export interface CachePolicyProps {
  /**
   * @schema CachePolicy#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * CachePolicySpec defines the desired state of CachePolicy
   *
   * @schema CachePolicy#spec
   */
  readonly spec: CachePolicySpec;

}

/**
 * Converts an object of type 'CachePolicyProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CachePolicyProps(obj: CachePolicyProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_CachePolicySpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CachePolicySpec defines the desired state of CachePolicy
 *
 * @schema CachePolicySpec
 */
export interface CachePolicySpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
   *
   * @schema CachePolicySpec#deletionPolicy
   */
  readonly deletionPolicy?: CachePolicySpecDeletionPolicy;

  /**
   * CachePolicyParameters defines the desired state of CachePolicy
   *
   * @schema CachePolicySpec#forProvider
   */
  readonly forProvider: CachePolicySpecForProvider;

  /**
   * THIS IS A BETA FIELD. It is on by default but can be opted out through a Crossplane feature flag. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
   *
   * @schema CachePolicySpec#managementPolicies
   */
  readonly managementPolicies?: CachePolicySpecManagementPolicies[];

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema CachePolicySpec#providerConfigRef
   */
  readonly providerConfigRef?: CachePolicySpecProviderConfigRef;

  /**
   * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema CachePolicySpec#publishConnectionDetailsTo
   */
  readonly publishConnectionDetailsTo?: CachePolicySpecPublishConnectionDetailsTo;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
   *
   * @schema CachePolicySpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: CachePolicySpecWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'CachePolicySpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CachePolicySpec(obj: CachePolicySpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'deletionPolicy': obj.deletionPolicy,
    'forProvider': toJson_CachePolicySpecForProvider(obj.forProvider),
    'managementPolicies': obj.managementPolicies?.map(y => y),
    'providerConfigRef': toJson_CachePolicySpecProviderConfigRef(obj.providerConfigRef),
    'publishConnectionDetailsTo': toJson_CachePolicySpecPublishConnectionDetailsTo(obj.publishConnectionDetailsTo),
    'writeConnectionSecretToRef': toJson_CachePolicySpecWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
 *
 * @schema CachePolicySpecDeletionPolicy
 */
export enum CachePolicySpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * CachePolicyParameters defines the desired state of CachePolicy
 *
 * @schema CachePolicySpecForProvider
 */
export interface CachePolicySpecForProvider {
  /**
   * A cache policy configuration.
   *
   * @schema CachePolicySpecForProvider#cachePolicyConfig
   */
  readonly cachePolicyConfig: CachePolicySpecForProviderCachePolicyConfig;

  /**
   * Region is which region the CachePolicy will be created.
   *
   * @schema CachePolicySpecForProvider#region
   */
  readonly region: string;

}

/**
 * Converts an object of type 'CachePolicySpecForProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CachePolicySpecForProvider(obj: CachePolicySpecForProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'cachePolicyConfig': toJson_CachePolicySpecForProviderCachePolicyConfig(obj.cachePolicyConfig),
    'region': obj.region,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A ManagementAction represents an action that the Crossplane controllers can take on an external resource.
 *
 * @schema CachePolicySpecManagementPolicies
 */
export enum CachePolicySpecManagementPolicies {
  /** Observe */
  OBSERVE = "Observe",
  /** Create */
  CREATE = "Create",
  /** Update */
  UPDATE = "Update",
  /** Delete */
  DELETE = "Delete",
  /** LateInitialize */
  LATE_INITIALIZE = "LateInitialize",
  /** * */
  VALUE_ASTERISK = "*",
}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema CachePolicySpecProviderConfigRef
 */
export interface CachePolicySpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema CachePolicySpecProviderConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema CachePolicySpecProviderConfigRef#policy
   */
  readonly policy?: CachePolicySpecProviderConfigRefPolicy;

}

/**
 * Converts an object of type 'CachePolicySpecProviderConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CachePolicySpecProviderConfigRef(obj: CachePolicySpecProviderConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_CachePolicySpecProviderConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema CachePolicySpecPublishConnectionDetailsTo
 */
export interface CachePolicySpecPublishConnectionDetailsTo {
  /**
   * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
   *
   * @schema CachePolicySpecPublishConnectionDetailsTo#configRef
   */
  readonly configRef?: CachePolicySpecPublishConnectionDetailsToConfigRef;

  /**
   * Metadata is the metadata for connection secret.
   *
   * @schema CachePolicySpecPublishConnectionDetailsTo#metadata
   */
  readonly metadata?: CachePolicySpecPublishConnectionDetailsToMetadata;

  /**
   * Name is the name of the connection secret.
   *
   * @schema CachePolicySpecPublishConnectionDetailsTo#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'CachePolicySpecPublishConnectionDetailsTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CachePolicySpecPublishConnectionDetailsTo(obj: CachePolicySpecPublishConnectionDetailsTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configRef': toJson_CachePolicySpecPublishConnectionDetailsToConfigRef(obj.configRef),
    'metadata': toJson_CachePolicySpecPublishConnectionDetailsToMetadata(obj.metadata),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
 *
 * @schema CachePolicySpecWriteConnectionSecretToRef
 */
export interface CachePolicySpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema CachePolicySpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema CachePolicySpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'CachePolicySpecWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CachePolicySpecWriteConnectionSecretToRef(obj: CachePolicySpecWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A cache policy configuration.
 *
 * @schema CachePolicySpecForProviderCachePolicyConfig
 */
export interface CachePolicySpecForProviderCachePolicyConfig {
  /**
   * @schema CachePolicySpecForProviderCachePolicyConfig#comment
   */
  readonly comment?: string;

  /**
   * @schema CachePolicySpecForProviderCachePolicyConfig#defaultTTL
   */
  readonly defaultTtl?: number;

  /**
   * @schema CachePolicySpecForProviderCachePolicyConfig#maxTTL
   */
  readonly maxTtl?: number;

  /**
   * @schema CachePolicySpecForProviderCachePolicyConfig#minTTL
   */
  readonly minTtl?: number;

  /**
   * @schema CachePolicySpecForProviderCachePolicyConfig#name
   */
  readonly name?: string;

  /**
   * This object determines the values that CloudFront includes in the cache key. These values can include HTTP headers, cookies, and URL query strings. CloudFront uses the cache key to find an object in its cache that it can return to the viewer.
   * The headers, cookies, and query strings that are included in the cache key are also included in requests that CloudFront sends to the origin. CloudFront sends a request when it can't find an object in its cache that matches the request's cache key. If you want to send values to the origin but not include them in the cache key, use OriginRequestPolicy.
   *
   * @schema CachePolicySpecForProviderCachePolicyConfig#parametersInCacheKeyAndForwardedToOrigin
   */
  readonly parametersInCacheKeyAndForwardedToOrigin?: CachePolicySpecForProviderCachePolicyConfigParametersInCacheKeyAndForwardedToOrigin;

}

/**
 * Converts an object of type 'CachePolicySpecForProviderCachePolicyConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CachePolicySpecForProviderCachePolicyConfig(obj: CachePolicySpecForProviderCachePolicyConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'comment': obj.comment,
    'defaultTTL': obj.defaultTtl,
    'maxTTL': obj.maxTtl,
    'minTTL': obj.minTtl,
    'name': obj.name,
    'parametersInCacheKeyAndForwardedToOrigin': toJson_CachePolicySpecForProviderCachePolicyConfigParametersInCacheKeyAndForwardedToOrigin(obj.parametersInCacheKeyAndForwardedToOrigin),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema CachePolicySpecProviderConfigRefPolicy
 */
export interface CachePolicySpecProviderConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema CachePolicySpecProviderConfigRefPolicy#resolution
   */
  readonly resolution?: CachePolicySpecProviderConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema CachePolicySpecProviderConfigRefPolicy#resolve
   */
  readonly resolve?: CachePolicySpecProviderConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'CachePolicySpecProviderConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CachePolicySpecProviderConfigRefPolicy(obj: CachePolicySpecProviderConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
 *
 * @schema CachePolicySpecPublishConnectionDetailsToConfigRef
 */
export interface CachePolicySpecPublishConnectionDetailsToConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema CachePolicySpecPublishConnectionDetailsToConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema CachePolicySpecPublishConnectionDetailsToConfigRef#policy
   */
  readonly policy?: CachePolicySpecPublishConnectionDetailsToConfigRefPolicy;

}

/**
 * Converts an object of type 'CachePolicySpecPublishConnectionDetailsToConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CachePolicySpecPublishConnectionDetailsToConfigRef(obj: CachePolicySpecPublishConnectionDetailsToConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_CachePolicySpecPublishConnectionDetailsToConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Metadata is the metadata for connection secret.
 *
 * @schema CachePolicySpecPublishConnectionDetailsToMetadata
 */
export interface CachePolicySpecPublishConnectionDetailsToMetadata {
  /**
   * Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
   *
   * @schema CachePolicySpecPublishConnectionDetailsToMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
   *
   * @schema CachePolicySpecPublishConnectionDetailsToMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
   *
   * @schema CachePolicySpecPublishConnectionDetailsToMetadata#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'CachePolicySpecPublishConnectionDetailsToMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CachePolicySpecPublishConnectionDetailsToMetadata(obj: CachePolicySpecPublishConnectionDetailsToMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * This object determines the values that CloudFront includes in the cache key. These values can include HTTP headers, cookies, and URL query strings. CloudFront uses the cache key to find an object in its cache that it can return to the viewer.
 * The headers, cookies, and query strings that are included in the cache key are also included in requests that CloudFront sends to the origin. CloudFront sends a request when it can't find an object in its cache that matches the request's cache key. If you want to send values to the origin but not include them in the cache key, use OriginRequestPolicy.
 *
 * @schema CachePolicySpecForProviderCachePolicyConfigParametersInCacheKeyAndForwardedToOrigin
 */
export interface CachePolicySpecForProviderCachePolicyConfigParametersInCacheKeyAndForwardedToOrigin {
  /**
   * An object that determines whether any cookies in viewer requests (and if so, which cookies) are included in the cache key and in requests that CloudFront sends to the origin.
   *
   * @schema CachePolicySpecForProviderCachePolicyConfigParametersInCacheKeyAndForwardedToOrigin#cookiesConfig
   */
  readonly cookiesConfig?: CachePolicySpecForProviderCachePolicyConfigParametersInCacheKeyAndForwardedToOriginCookiesConfig;

  /**
   * @schema CachePolicySpecForProviderCachePolicyConfigParametersInCacheKeyAndForwardedToOrigin#enableAcceptEncodingBrotli
   */
  readonly enableAcceptEncodingBrotli?: boolean;

  /**
   * @schema CachePolicySpecForProviderCachePolicyConfigParametersInCacheKeyAndForwardedToOrigin#enableAcceptEncodingGzip
   */
  readonly enableAcceptEncodingGzip?: boolean;

  /**
   * An object that determines whether any HTTP headers (and if so, which headers) are included in the cache key and in requests that CloudFront sends to the origin.
   *
   * @schema CachePolicySpecForProviderCachePolicyConfigParametersInCacheKeyAndForwardedToOrigin#headersConfig
   */
  readonly headersConfig?: CachePolicySpecForProviderCachePolicyConfigParametersInCacheKeyAndForwardedToOriginHeadersConfig;

  /**
   * An object that determines whether any URL query strings in viewer requests (and if so, which query strings) are included in the cache key and in requests that CloudFront sends to the origin.
   *
   * @schema CachePolicySpecForProviderCachePolicyConfigParametersInCacheKeyAndForwardedToOrigin#queryStringsConfig
   */
  readonly queryStringsConfig?: CachePolicySpecForProviderCachePolicyConfigParametersInCacheKeyAndForwardedToOriginQueryStringsConfig;

}

/**
 * Converts an object of type 'CachePolicySpecForProviderCachePolicyConfigParametersInCacheKeyAndForwardedToOrigin' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CachePolicySpecForProviderCachePolicyConfigParametersInCacheKeyAndForwardedToOrigin(obj: CachePolicySpecForProviderCachePolicyConfigParametersInCacheKeyAndForwardedToOrigin | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'cookiesConfig': toJson_CachePolicySpecForProviderCachePolicyConfigParametersInCacheKeyAndForwardedToOriginCookiesConfig(obj.cookiesConfig),
    'enableAcceptEncodingBrotli': obj.enableAcceptEncodingBrotli,
    'enableAcceptEncodingGzip': obj.enableAcceptEncodingGzip,
    'headersConfig': toJson_CachePolicySpecForProviderCachePolicyConfigParametersInCacheKeyAndForwardedToOriginHeadersConfig(obj.headersConfig),
    'queryStringsConfig': toJson_CachePolicySpecForProviderCachePolicyConfigParametersInCacheKeyAndForwardedToOriginQueryStringsConfig(obj.queryStringsConfig),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema CachePolicySpecProviderConfigRefPolicyResolution
 */
export enum CachePolicySpecProviderConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema CachePolicySpecProviderConfigRefPolicyResolve
 */
export enum CachePolicySpecProviderConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Policies for referencing.
 *
 * @schema CachePolicySpecPublishConnectionDetailsToConfigRefPolicy
 */
export interface CachePolicySpecPublishConnectionDetailsToConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema CachePolicySpecPublishConnectionDetailsToConfigRefPolicy#resolution
   */
  readonly resolution?: CachePolicySpecPublishConnectionDetailsToConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema CachePolicySpecPublishConnectionDetailsToConfigRefPolicy#resolve
   */
  readonly resolve?: CachePolicySpecPublishConnectionDetailsToConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'CachePolicySpecPublishConnectionDetailsToConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CachePolicySpecPublishConnectionDetailsToConfigRefPolicy(obj: CachePolicySpecPublishConnectionDetailsToConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An object that determines whether any cookies in viewer requests (and if so, which cookies) are included in the cache key and in requests that CloudFront sends to the origin.
 *
 * @schema CachePolicySpecForProviderCachePolicyConfigParametersInCacheKeyAndForwardedToOriginCookiesConfig
 */
export interface CachePolicySpecForProviderCachePolicyConfigParametersInCacheKeyAndForwardedToOriginCookiesConfig {
  /**
   * @schema CachePolicySpecForProviderCachePolicyConfigParametersInCacheKeyAndForwardedToOriginCookiesConfig#cookieBehavior
   */
  readonly cookieBehavior?: string;

  /**
   * Contains a list of cookie names.
   *
   * @schema CachePolicySpecForProviderCachePolicyConfigParametersInCacheKeyAndForwardedToOriginCookiesConfig#cookies
   */
  readonly cookies?: CachePolicySpecForProviderCachePolicyConfigParametersInCacheKeyAndForwardedToOriginCookiesConfigCookies;

}

/**
 * Converts an object of type 'CachePolicySpecForProviderCachePolicyConfigParametersInCacheKeyAndForwardedToOriginCookiesConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CachePolicySpecForProviderCachePolicyConfigParametersInCacheKeyAndForwardedToOriginCookiesConfig(obj: CachePolicySpecForProviderCachePolicyConfigParametersInCacheKeyAndForwardedToOriginCookiesConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'cookieBehavior': obj.cookieBehavior,
    'cookies': toJson_CachePolicySpecForProviderCachePolicyConfigParametersInCacheKeyAndForwardedToOriginCookiesConfigCookies(obj.cookies),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An object that determines whether any HTTP headers (and if so, which headers) are included in the cache key and in requests that CloudFront sends to the origin.
 *
 * @schema CachePolicySpecForProviderCachePolicyConfigParametersInCacheKeyAndForwardedToOriginHeadersConfig
 */
export interface CachePolicySpecForProviderCachePolicyConfigParametersInCacheKeyAndForwardedToOriginHeadersConfig {
  /**
   * @schema CachePolicySpecForProviderCachePolicyConfigParametersInCacheKeyAndForwardedToOriginHeadersConfig#headerBehavior
   */
  readonly headerBehavior?: string;

  /**
   * Contains a list of HTTP header names.
   *
   * @schema CachePolicySpecForProviderCachePolicyConfigParametersInCacheKeyAndForwardedToOriginHeadersConfig#headers
   */
  readonly headers?: CachePolicySpecForProviderCachePolicyConfigParametersInCacheKeyAndForwardedToOriginHeadersConfigHeaders;

}

/**
 * Converts an object of type 'CachePolicySpecForProviderCachePolicyConfigParametersInCacheKeyAndForwardedToOriginHeadersConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CachePolicySpecForProviderCachePolicyConfigParametersInCacheKeyAndForwardedToOriginHeadersConfig(obj: CachePolicySpecForProviderCachePolicyConfigParametersInCacheKeyAndForwardedToOriginHeadersConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'headerBehavior': obj.headerBehavior,
    'headers': toJson_CachePolicySpecForProviderCachePolicyConfigParametersInCacheKeyAndForwardedToOriginHeadersConfigHeaders(obj.headers),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An object that determines whether any URL query strings in viewer requests (and if so, which query strings) are included in the cache key and in requests that CloudFront sends to the origin.
 *
 * @schema CachePolicySpecForProviderCachePolicyConfigParametersInCacheKeyAndForwardedToOriginQueryStringsConfig
 */
export interface CachePolicySpecForProviderCachePolicyConfigParametersInCacheKeyAndForwardedToOriginQueryStringsConfig {
  /**
   * @schema CachePolicySpecForProviderCachePolicyConfigParametersInCacheKeyAndForwardedToOriginQueryStringsConfig#queryStringBehavior
   */
  readonly queryStringBehavior?: string;

  /**
   * Contains a list of query string names.
   *
   * @schema CachePolicySpecForProviderCachePolicyConfigParametersInCacheKeyAndForwardedToOriginQueryStringsConfig#queryStrings
   */
  readonly queryStrings?: CachePolicySpecForProviderCachePolicyConfigParametersInCacheKeyAndForwardedToOriginQueryStringsConfigQueryStrings;

}

/**
 * Converts an object of type 'CachePolicySpecForProviderCachePolicyConfigParametersInCacheKeyAndForwardedToOriginQueryStringsConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CachePolicySpecForProviderCachePolicyConfigParametersInCacheKeyAndForwardedToOriginQueryStringsConfig(obj: CachePolicySpecForProviderCachePolicyConfigParametersInCacheKeyAndForwardedToOriginQueryStringsConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'queryStringBehavior': obj.queryStringBehavior,
    'queryStrings': toJson_CachePolicySpecForProviderCachePolicyConfigParametersInCacheKeyAndForwardedToOriginQueryStringsConfigQueryStrings(obj.queryStrings),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema CachePolicySpecPublishConnectionDetailsToConfigRefPolicyResolution
 */
export enum CachePolicySpecPublishConnectionDetailsToConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema CachePolicySpecPublishConnectionDetailsToConfigRefPolicyResolve
 */
export enum CachePolicySpecPublishConnectionDetailsToConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Contains a list of cookie names.
 *
 * @schema CachePolicySpecForProviderCachePolicyConfigParametersInCacheKeyAndForwardedToOriginCookiesConfigCookies
 */
export interface CachePolicySpecForProviderCachePolicyConfigParametersInCacheKeyAndForwardedToOriginCookiesConfigCookies {
  /**
   * @schema CachePolicySpecForProviderCachePolicyConfigParametersInCacheKeyAndForwardedToOriginCookiesConfigCookies#items
   */
  readonly items?: string[];

  /**
   * @schema CachePolicySpecForProviderCachePolicyConfigParametersInCacheKeyAndForwardedToOriginCookiesConfigCookies#quantity
   */
  readonly quantity?: number;

}

/**
 * Converts an object of type 'CachePolicySpecForProviderCachePolicyConfigParametersInCacheKeyAndForwardedToOriginCookiesConfigCookies' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CachePolicySpecForProviderCachePolicyConfigParametersInCacheKeyAndForwardedToOriginCookiesConfigCookies(obj: CachePolicySpecForProviderCachePolicyConfigParametersInCacheKeyAndForwardedToOriginCookiesConfigCookies | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'items': obj.items?.map(y => y),
    'quantity': obj.quantity,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Contains a list of HTTP header names.
 *
 * @schema CachePolicySpecForProviderCachePolicyConfigParametersInCacheKeyAndForwardedToOriginHeadersConfigHeaders
 */
export interface CachePolicySpecForProviderCachePolicyConfigParametersInCacheKeyAndForwardedToOriginHeadersConfigHeaders {
  /**
   * @schema CachePolicySpecForProviderCachePolicyConfigParametersInCacheKeyAndForwardedToOriginHeadersConfigHeaders#items
   */
  readonly items?: string[];

}

/**
 * Converts an object of type 'CachePolicySpecForProviderCachePolicyConfigParametersInCacheKeyAndForwardedToOriginHeadersConfigHeaders' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CachePolicySpecForProviderCachePolicyConfigParametersInCacheKeyAndForwardedToOriginHeadersConfigHeaders(obj: CachePolicySpecForProviderCachePolicyConfigParametersInCacheKeyAndForwardedToOriginHeadersConfigHeaders | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'items': obj.items?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Contains a list of query string names.
 *
 * @schema CachePolicySpecForProviderCachePolicyConfigParametersInCacheKeyAndForwardedToOriginQueryStringsConfigQueryStrings
 */
export interface CachePolicySpecForProviderCachePolicyConfigParametersInCacheKeyAndForwardedToOriginQueryStringsConfigQueryStrings {
  /**
   * @schema CachePolicySpecForProviderCachePolicyConfigParametersInCacheKeyAndForwardedToOriginQueryStringsConfigQueryStrings#items
   */
  readonly items?: string[];

  /**
   * @schema CachePolicySpecForProviderCachePolicyConfigParametersInCacheKeyAndForwardedToOriginQueryStringsConfigQueryStrings#quantity
   */
  readonly quantity?: number;

}

/**
 * Converts an object of type 'CachePolicySpecForProviderCachePolicyConfigParametersInCacheKeyAndForwardedToOriginQueryStringsConfigQueryStrings' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CachePolicySpecForProviderCachePolicyConfigParametersInCacheKeyAndForwardedToOriginQueryStringsConfigQueryStrings(obj: CachePolicySpecForProviderCachePolicyConfigParametersInCacheKeyAndForwardedToOriginQueryStringsConfigQueryStrings | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'items': obj.items?.map(y => y),
    'quantity': obj.quantity,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * CloudFrontOriginAccessIdentity is the Schema for the CloudFrontOriginAccessIdentities API
 *
 * @schema CloudFrontOriginAccessIdentity
 */
export class CloudFrontOriginAccessIdentity extends ApiObject {
  /**
   * Returns the apiVersion and kind for "CloudFrontOriginAccessIdentity"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'cloudfront.aws.crossplane.io/v1alpha1',
    kind: 'CloudFrontOriginAccessIdentity',
  }

  /**
   * Renders a Kubernetes manifest for "CloudFrontOriginAccessIdentity".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: CloudFrontOriginAccessIdentityProps): any {
    return {
      ...CloudFrontOriginAccessIdentity.GVK,
      ...toJson_CloudFrontOriginAccessIdentityProps(props),
    };
  }

  /**
   * Defines a "CloudFrontOriginAccessIdentity" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: CloudFrontOriginAccessIdentityProps) {
    super(scope, id, {
      ...CloudFrontOriginAccessIdentity.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...CloudFrontOriginAccessIdentity.GVK,
      ...toJson_CloudFrontOriginAccessIdentityProps(resolved),
    };
  }
}

/**
 * CloudFrontOriginAccessIdentity is the Schema for the CloudFrontOriginAccessIdentities API
 *
 * @schema CloudFrontOriginAccessIdentity
 */
export interface CloudFrontOriginAccessIdentityProps {
  /**
   * @schema CloudFrontOriginAccessIdentity#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * CloudFrontOriginAccessIdentitySpec defines the desired state of CloudFrontOriginAccessIdentity
   *
   * @schema CloudFrontOriginAccessIdentity#spec
   */
  readonly spec: CloudFrontOriginAccessIdentitySpec;

}

/**
 * Converts an object of type 'CloudFrontOriginAccessIdentityProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudFrontOriginAccessIdentityProps(obj: CloudFrontOriginAccessIdentityProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_CloudFrontOriginAccessIdentitySpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CloudFrontOriginAccessIdentitySpec defines the desired state of CloudFrontOriginAccessIdentity
 *
 * @schema CloudFrontOriginAccessIdentitySpec
 */
export interface CloudFrontOriginAccessIdentitySpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
   *
   * @schema CloudFrontOriginAccessIdentitySpec#deletionPolicy
   */
  readonly deletionPolicy?: CloudFrontOriginAccessIdentitySpecDeletionPolicy;

  /**
   * CloudFrontOriginAccessIdentityParameters defines the desired state of CloudFrontOriginAccessIdentity
   *
   * @schema CloudFrontOriginAccessIdentitySpec#forProvider
   */
  readonly forProvider: CloudFrontOriginAccessIdentitySpecForProvider;

  /**
   * THIS IS A BETA FIELD. It is on by default but can be opted out through a Crossplane feature flag. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
   *
   * @schema CloudFrontOriginAccessIdentitySpec#managementPolicies
   */
  readonly managementPolicies?: CloudFrontOriginAccessIdentitySpecManagementPolicies[];

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema CloudFrontOriginAccessIdentitySpec#providerConfigRef
   */
  readonly providerConfigRef?: CloudFrontOriginAccessIdentitySpecProviderConfigRef;

  /**
   * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema CloudFrontOriginAccessIdentitySpec#publishConnectionDetailsTo
   */
  readonly publishConnectionDetailsTo?: CloudFrontOriginAccessIdentitySpecPublishConnectionDetailsTo;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
   *
   * @schema CloudFrontOriginAccessIdentitySpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: CloudFrontOriginAccessIdentitySpecWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'CloudFrontOriginAccessIdentitySpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudFrontOriginAccessIdentitySpec(obj: CloudFrontOriginAccessIdentitySpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'deletionPolicy': obj.deletionPolicy,
    'forProvider': toJson_CloudFrontOriginAccessIdentitySpecForProvider(obj.forProvider),
    'managementPolicies': obj.managementPolicies?.map(y => y),
    'providerConfigRef': toJson_CloudFrontOriginAccessIdentitySpecProviderConfigRef(obj.providerConfigRef),
    'publishConnectionDetailsTo': toJson_CloudFrontOriginAccessIdentitySpecPublishConnectionDetailsTo(obj.publishConnectionDetailsTo),
    'writeConnectionSecretToRef': toJson_CloudFrontOriginAccessIdentitySpecWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
 *
 * @schema CloudFrontOriginAccessIdentitySpecDeletionPolicy
 */
export enum CloudFrontOriginAccessIdentitySpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * CloudFrontOriginAccessIdentityParameters defines the desired state of CloudFrontOriginAccessIdentity
 *
 * @schema CloudFrontOriginAccessIdentitySpecForProvider
 */
export interface CloudFrontOriginAccessIdentitySpecForProvider {
  /**
   * The current configuration information for the identity.
   *
   * @schema CloudFrontOriginAccessIdentitySpecForProvider#cloudFrontOriginAccessIdentityConfig
   */
  readonly cloudFrontOriginAccessIdentityConfig: CloudFrontOriginAccessIdentitySpecForProviderCloudFrontOriginAccessIdentityConfig;

  /**
   * Region is which region the CloudFrontOriginAccessIdentity will be created.
   *
   * @schema CloudFrontOriginAccessIdentitySpecForProvider#region
   */
  readonly region: string;

}

/**
 * Converts an object of type 'CloudFrontOriginAccessIdentitySpecForProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudFrontOriginAccessIdentitySpecForProvider(obj: CloudFrontOriginAccessIdentitySpecForProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'cloudFrontOriginAccessIdentityConfig': toJson_CloudFrontOriginAccessIdentitySpecForProviderCloudFrontOriginAccessIdentityConfig(obj.cloudFrontOriginAccessIdentityConfig),
    'region': obj.region,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A ManagementAction represents an action that the Crossplane controllers can take on an external resource.
 *
 * @schema CloudFrontOriginAccessIdentitySpecManagementPolicies
 */
export enum CloudFrontOriginAccessIdentitySpecManagementPolicies {
  /** Observe */
  OBSERVE = "Observe",
  /** Create */
  CREATE = "Create",
  /** Update */
  UPDATE = "Update",
  /** Delete */
  DELETE = "Delete",
  /** LateInitialize */
  LATE_INITIALIZE = "LateInitialize",
  /** * */
  VALUE_ASTERISK = "*",
}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema CloudFrontOriginAccessIdentitySpecProviderConfigRef
 */
export interface CloudFrontOriginAccessIdentitySpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema CloudFrontOriginAccessIdentitySpecProviderConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema CloudFrontOriginAccessIdentitySpecProviderConfigRef#policy
   */
  readonly policy?: CloudFrontOriginAccessIdentitySpecProviderConfigRefPolicy;

}

/**
 * Converts an object of type 'CloudFrontOriginAccessIdentitySpecProviderConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudFrontOriginAccessIdentitySpecProviderConfigRef(obj: CloudFrontOriginAccessIdentitySpecProviderConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_CloudFrontOriginAccessIdentitySpecProviderConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema CloudFrontOriginAccessIdentitySpecPublishConnectionDetailsTo
 */
export interface CloudFrontOriginAccessIdentitySpecPublishConnectionDetailsTo {
  /**
   * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
   *
   * @schema CloudFrontOriginAccessIdentitySpecPublishConnectionDetailsTo#configRef
   */
  readonly configRef?: CloudFrontOriginAccessIdentitySpecPublishConnectionDetailsToConfigRef;

  /**
   * Metadata is the metadata for connection secret.
   *
   * @schema CloudFrontOriginAccessIdentitySpecPublishConnectionDetailsTo#metadata
   */
  readonly metadata?: CloudFrontOriginAccessIdentitySpecPublishConnectionDetailsToMetadata;

  /**
   * Name is the name of the connection secret.
   *
   * @schema CloudFrontOriginAccessIdentitySpecPublishConnectionDetailsTo#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'CloudFrontOriginAccessIdentitySpecPublishConnectionDetailsTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudFrontOriginAccessIdentitySpecPublishConnectionDetailsTo(obj: CloudFrontOriginAccessIdentitySpecPublishConnectionDetailsTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configRef': toJson_CloudFrontOriginAccessIdentitySpecPublishConnectionDetailsToConfigRef(obj.configRef),
    'metadata': toJson_CloudFrontOriginAccessIdentitySpecPublishConnectionDetailsToMetadata(obj.metadata),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
 *
 * @schema CloudFrontOriginAccessIdentitySpecWriteConnectionSecretToRef
 */
export interface CloudFrontOriginAccessIdentitySpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema CloudFrontOriginAccessIdentitySpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema CloudFrontOriginAccessIdentitySpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'CloudFrontOriginAccessIdentitySpecWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudFrontOriginAccessIdentitySpecWriteConnectionSecretToRef(obj: CloudFrontOriginAccessIdentitySpecWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The current configuration information for the identity.
 *
 * @schema CloudFrontOriginAccessIdentitySpecForProviderCloudFrontOriginAccessIdentityConfig
 */
export interface CloudFrontOriginAccessIdentitySpecForProviderCloudFrontOriginAccessIdentityConfig {
  /**
   * @schema CloudFrontOriginAccessIdentitySpecForProviderCloudFrontOriginAccessIdentityConfig#comment
   */
  readonly comment?: string;

}

/**
 * Converts an object of type 'CloudFrontOriginAccessIdentitySpecForProviderCloudFrontOriginAccessIdentityConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudFrontOriginAccessIdentitySpecForProviderCloudFrontOriginAccessIdentityConfig(obj: CloudFrontOriginAccessIdentitySpecForProviderCloudFrontOriginAccessIdentityConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'comment': obj.comment,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema CloudFrontOriginAccessIdentitySpecProviderConfigRefPolicy
 */
export interface CloudFrontOriginAccessIdentitySpecProviderConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema CloudFrontOriginAccessIdentitySpecProviderConfigRefPolicy#resolution
   */
  readonly resolution?: CloudFrontOriginAccessIdentitySpecProviderConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema CloudFrontOriginAccessIdentitySpecProviderConfigRefPolicy#resolve
   */
  readonly resolve?: CloudFrontOriginAccessIdentitySpecProviderConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'CloudFrontOriginAccessIdentitySpecProviderConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudFrontOriginAccessIdentitySpecProviderConfigRefPolicy(obj: CloudFrontOriginAccessIdentitySpecProviderConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
 *
 * @schema CloudFrontOriginAccessIdentitySpecPublishConnectionDetailsToConfigRef
 */
export interface CloudFrontOriginAccessIdentitySpecPublishConnectionDetailsToConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema CloudFrontOriginAccessIdentitySpecPublishConnectionDetailsToConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema CloudFrontOriginAccessIdentitySpecPublishConnectionDetailsToConfigRef#policy
   */
  readonly policy?: CloudFrontOriginAccessIdentitySpecPublishConnectionDetailsToConfigRefPolicy;

}

/**
 * Converts an object of type 'CloudFrontOriginAccessIdentitySpecPublishConnectionDetailsToConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudFrontOriginAccessIdentitySpecPublishConnectionDetailsToConfigRef(obj: CloudFrontOriginAccessIdentitySpecPublishConnectionDetailsToConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_CloudFrontOriginAccessIdentitySpecPublishConnectionDetailsToConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Metadata is the metadata for connection secret.
 *
 * @schema CloudFrontOriginAccessIdentitySpecPublishConnectionDetailsToMetadata
 */
export interface CloudFrontOriginAccessIdentitySpecPublishConnectionDetailsToMetadata {
  /**
   * Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
   *
   * @schema CloudFrontOriginAccessIdentitySpecPublishConnectionDetailsToMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
   *
   * @schema CloudFrontOriginAccessIdentitySpecPublishConnectionDetailsToMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
   *
   * @schema CloudFrontOriginAccessIdentitySpecPublishConnectionDetailsToMetadata#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'CloudFrontOriginAccessIdentitySpecPublishConnectionDetailsToMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudFrontOriginAccessIdentitySpecPublishConnectionDetailsToMetadata(obj: CloudFrontOriginAccessIdentitySpecPublishConnectionDetailsToMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema CloudFrontOriginAccessIdentitySpecProviderConfigRefPolicyResolution
 */
export enum CloudFrontOriginAccessIdentitySpecProviderConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema CloudFrontOriginAccessIdentitySpecProviderConfigRefPolicyResolve
 */
export enum CloudFrontOriginAccessIdentitySpecProviderConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Policies for referencing.
 *
 * @schema CloudFrontOriginAccessIdentitySpecPublishConnectionDetailsToConfigRefPolicy
 */
export interface CloudFrontOriginAccessIdentitySpecPublishConnectionDetailsToConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema CloudFrontOriginAccessIdentitySpecPublishConnectionDetailsToConfigRefPolicy#resolution
   */
  readonly resolution?: CloudFrontOriginAccessIdentitySpecPublishConnectionDetailsToConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema CloudFrontOriginAccessIdentitySpecPublishConnectionDetailsToConfigRefPolicy#resolve
   */
  readonly resolve?: CloudFrontOriginAccessIdentitySpecPublishConnectionDetailsToConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'CloudFrontOriginAccessIdentitySpecPublishConnectionDetailsToConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudFrontOriginAccessIdentitySpecPublishConnectionDetailsToConfigRefPolicy(obj: CloudFrontOriginAccessIdentitySpecPublishConnectionDetailsToConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema CloudFrontOriginAccessIdentitySpecPublishConnectionDetailsToConfigRefPolicyResolution
 */
export enum CloudFrontOriginAccessIdentitySpecPublishConnectionDetailsToConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema CloudFrontOriginAccessIdentitySpecPublishConnectionDetailsToConfigRefPolicyResolve
 */
export enum CloudFrontOriginAccessIdentitySpecPublishConnectionDetailsToConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}


/**
 * Distribution is the Schema for the Distributions API
 *
 * @schema Distribution
 */
export class Distribution extends ApiObject {
  /**
   * Returns the apiVersion and kind for "Distribution"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'cloudfront.aws.crossplane.io/v1alpha1',
    kind: 'Distribution',
  }

  /**
   * Renders a Kubernetes manifest for "Distribution".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: DistributionProps): any {
    return {
      ...Distribution.GVK,
      ...toJson_DistributionProps(props),
    };
  }

  /**
   * Defines a "Distribution" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: DistributionProps) {
    super(scope, id, {
      ...Distribution.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...Distribution.GVK,
      ...toJson_DistributionProps(resolved),
    };
  }
}

/**
 * Distribution is the Schema for the Distributions API
 *
 * @schema Distribution
 */
export interface DistributionProps {
  /**
   * @schema Distribution#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * DistributionSpec defines the desired state of Distribution
   *
   * @schema Distribution#spec
   */
  readonly spec: DistributionSpec;

}

/**
 * Converts an object of type 'DistributionProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DistributionProps(obj: DistributionProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_DistributionSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DistributionSpec defines the desired state of Distribution
 *
 * @schema DistributionSpec
 */
export interface DistributionSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
   *
   * @schema DistributionSpec#deletionPolicy
   */
  readonly deletionPolicy?: DistributionSpecDeletionPolicy;

  /**
   * DistributionParameters defines the desired state of Distribution
   *
   * @schema DistributionSpec#forProvider
   */
  readonly forProvider: DistributionSpecForProvider;

  /**
   * THIS IS A BETA FIELD. It is on by default but can be opted out through a Crossplane feature flag. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
   *
   * @schema DistributionSpec#managementPolicies
   */
  readonly managementPolicies?: DistributionSpecManagementPolicies[];

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema DistributionSpec#providerConfigRef
   */
  readonly providerConfigRef?: DistributionSpecProviderConfigRef;

  /**
   * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema DistributionSpec#publishConnectionDetailsTo
   */
  readonly publishConnectionDetailsTo?: DistributionSpecPublishConnectionDetailsTo;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
   *
   * @schema DistributionSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: DistributionSpecWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'DistributionSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DistributionSpec(obj: DistributionSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'deletionPolicy': obj.deletionPolicy,
    'forProvider': toJson_DistributionSpecForProvider(obj.forProvider),
    'managementPolicies': obj.managementPolicies?.map(y => y),
    'providerConfigRef': toJson_DistributionSpecProviderConfigRef(obj.providerConfigRef),
    'publishConnectionDetailsTo': toJson_DistributionSpecPublishConnectionDetailsTo(obj.publishConnectionDetailsTo),
    'writeConnectionSecretToRef': toJson_DistributionSpecWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
 *
 * @schema DistributionSpecDeletionPolicy
 */
export enum DistributionSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * DistributionParameters defines the desired state of Distribution
 *
 * @schema DistributionSpecForProvider
 */
export interface DistributionSpecForProvider {
  /**
   * The distribution's configuration information.
   *
   * @schema DistributionSpecForProvider#distributionConfig
   */
  readonly distributionConfig: DistributionSpecForProviderDistributionConfig;

  /**
   * Region is which region the Distribution will be created.
   *
   * @schema DistributionSpecForProvider#region
   */
  readonly region: string;

}

/**
 * Converts an object of type 'DistributionSpecForProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DistributionSpecForProvider(obj: DistributionSpecForProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'distributionConfig': toJson_DistributionSpecForProviderDistributionConfig(obj.distributionConfig),
    'region': obj.region,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A ManagementAction represents an action that the Crossplane controllers can take on an external resource.
 *
 * @schema DistributionSpecManagementPolicies
 */
export enum DistributionSpecManagementPolicies {
  /** Observe */
  OBSERVE = "Observe",
  /** Create */
  CREATE = "Create",
  /** Update */
  UPDATE = "Update",
  /** Delete */
  DELETE = "Delete",
  /** LateInitialize */
  LATE_INITIALIZE = "LateInitialize",
  /** * */
  VALUE_ASTERISK = "*",
}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema DistributionSpecProviderConfigRef
 */
export interface DistributionSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema DistributionSpecProviderConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema DistributionSpecProviderConfigRef#policy
   */
  readonly policy?: DistributionSpecProviderConfigRefPolicy;

}

/**
 * Converts an object of type 'DistributionSpecProviderConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DistributionSpecProviderConfigRef(obj: DistributionSpecProviderConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_DistributionSpecProviderConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema DistributionSpecPublishConnectionDetailsTo
 */
export interface DistributionSpecPublishConnectionDetailsTo {
  /**
   * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
   *
   * @schema DistributionSpecPublishConnectionDetailsTo#configRef
   */
  readonly configRef?: DistributionSpecPublishConnectionDetailsToConfigRef;

  /**
   * Metadata is the metadata for connection secret.
   *
   * @schema DistributionSpecPublishConnectionDetailsTo#metadata
   */
  readonly metadata?: DistributionSpecPublishConnectionDetailsToMetadata;

  /**
   * Name is the name of the connection secret.
   *
   * @schema DistributionSpecPublishConnectionDetailsTo#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'DistributionSpecPublishConnectionDetailsTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DistributionSpecPublishConnectionDetailsTo(obj: DistributionSpecPublishConnectionDetailsTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configRef': toJson_DistributionSpecPublishConnectionDetailsToConfigRef(obj.configRef),
    'metadata': toJson_DistributionSpecPublishConnectionDetailsToMetadata(obj.metadata),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
 *
 * @schema DistributionSpecWriteConnectionSecretToRef
 */
export interface DistributionSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema DistributionSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema DistributionSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'DistributionSpecWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DistributionSpecWriteConnectionSecretToRef(obj: DistributionSpecWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The distribution's configuration information.
 *
 * @schema DistributionSpecForProviderDistributionConfig
 */
export interface DistributionSpecForProviderDistributionConfig {
  /**
   * A complex type that contains information about CNAMEs (alternate domain names), if any, for this distribution.
   *
   * @schema DistributionSpecForProviderDistributionConfig#aliases
   */
  readonly aliases?: DistributionSpecForProviderDistributionConfigAliases;

  /**
   * A complex type that contains zero or more CacheBehavior elements.
   *
   * @schema DistributionSpecForProviderDistributionConfig#cacheBehaviors
   */
  readonly cacheBehaviors?: DistributionSpecForProviderDistributionConfigCacheBehaviors;

  /**
   * @schema DistributionSpecForProviderDistributionConfig#callerReference
   */
  readonly callerReference?: string;

  /**
   * @schema DistributionSpecForProviderDistributionConfig#comment
   */
  readonly comment?: string;

  /**
   * @schema DistributionSpecForProviderDistributionConfig#continuousDeploymentPolicyID
   */
  readonly continuousDeploymentPolicyId?: string;

  /**
   * A complex type that controls:
   * * Whether CloudFront replaces HTTP status codes in the 4xx and 5xx range with custom error messages before returning the response to the viewer.
   * * How long CloudFront caches HTTP status codes in the 4xx and 5xx range.
   * For more information about custom error pages, see Customizing Error Responses (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/custom-error-pages.html) in the Amazon CloudFront Developer Guide.
   *
   * @schema DistributionSpecForProviderDistributionConfig#customErrorResponses
   */
  readonly customErrorResponses?: DistributionSpecForProviderDistributionConfigCustomErrorResponses;

  /**
   * A complex type that describes the default cache behavior if you don't specify a CacheBehavior element or if request URLs don't match any of the values of PathPattern in CacheBehavior elements. You must create exactly one default cache behavior.
   *
   * @schema DistributionSpecForProviderDistributionConfig#defaultCacheBehavior
   */
  readonly defaultCacheBehavior?: DistributionSpecForProviderDistributionConfigDefaultCacheBehavior;

  /**
   * @schema DistributionSpecForProviderDistributionConfig#defaultRootObject
   */
  readonly defaultRootObject?: string;

  /**
   * @schema DistributionSpecForProviderDistributionConfig#enabled
   */
  readonly enabled?: boolean;

  /**
   * @schema DistributionSpecForProviderDistributionConfig#httpVersion
   */
  readonly httpVersion?: string;

  /**
   * @schema DistributionSpecForProviderDistributionConfig#isIPV6Enabled
   */
  readonly isIpv6Enabled?: boolean;

  /**
   * A complex type that controls whether access logs are written for the distribution.
   *
   * @schema DistributionSpecForProviderDistributionConfig#logging
   */
  readonly logging?: DistributionSpecForProviderDistributionConfigLogging;

  /**
   * A complex data type for the origin groups specified for a distribution.
   *
   * @schema DistributionSpecForProviderDistributionConfig#originGroups
   */
  readonly originGroups?: DistributionSpecForProviderDistributionConfigOriginGroups;

  /**
   * Contains information about the origins for this distribution.
   *
   * @schema DistributionSpecForProviderDistributionConfig#origins
   */
  readonly origins?: DistributionSpecForProviderDistributionConfigOrigins;

  /**
   * @schema DistributionSpecForProviderDistributionConfig#priceClass
   */
  readonly priceClass?: string;

  /**
   * A complex type that identifies ways in which you want to restrict distribution of your content.
   *
   * @schema DistributionSpecForProviderDistributionConfig#restrictions
   */
  readonly restrictions?: DistributionSpecForProviderDistributionConfigRestrictions;

  /**
   * @schema DistributionSpecForProviderDistributionConfig#staging
   */
  readonly staging?: boolean;

  /**
   * A complex type that determines the distribution's SSL/TLS configuration for communicating with viewers.
   * If the distribution doesn't use Aliases (also known as alternate domain names or CNAMEs)—that is, if the distribution uses the CloudFront domain name such as d111111abcdef8.cloudfront.net—set CloudFrontDefaultCertificate to true and leave all other fields empty.
   * If the distribution uses Aliases (alternate domain names or CNAMEs), use the fields in this type to specify the following settings:
   * * Which viewers the distribution accepts HTTPS connections from: only viewers that support server name indication (SNI) (https://en.wikipedia.org/wiki/Server_Name_Indication) (recommended), or all viewers including those that don't support SNI. To accept HTTPS connections from only viewers that support SNI, set SSLSupportMethod to sni-only. This is recommended. Most browsers and clients support SNI. To accept HTTPS connections from all viewers, including those that don't support SNI, set SSLSupportMethod to vip. This is not recommended, and results in additional monthly charges from CloudFront.
   * * The minimum SSL/TLS protocol version that the distribution can use to communicate with viewers. To specify a minimum version, choose a value for MinimumProtocolVersion. For more information, see Security Policy (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValues-security-policy) in the Amazon CloudFront Developer Guide.
   * * The location of the SSL/TLS certificate, Certificate Manager (ACM) (https://docs.aws.amazon.com/acm/latest/userguide/acm-overview.html) (recommended) or Identity and Access Management (IAM) (https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html). You specify the location by setting a value in one of the following fields (not both): ACMCertificateArn IAMCertificateId
   * All distributions support HTTPS connections from viewers. To require viewers to use HTTPS only, or to redirect them from HTTP to HTTPS, use ViewerProtocolPolicy in the CacheBehavior or DefaultCacheBehavior. To specify how CloudFront should use SSL/TLS to communicate with your custom origin, use CustomOriginConfig.
   * For more information, see Using HTTPS with CloudFront (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-https.html) and Using Alternate Domain Names and HTTPS (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-https-alternate-domain-names.html) in the Amazon CloudFront Developer Guide.
   *
   * @schema DistributionSpecForProviderDistributionConfig#viewerCertificate
   */
  readonly viewerCertificate?: DistributionSpecForProviderDistributionConfigViewerCertificate;

  /**
   * @schema DistributionSpecForProviderDistributionConfig#webACLID
   */
  readonly webAclid?: string;

}

/**
 * Converts an object of type 'DistributionSpecForProviderDistributionConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DistributionSpecForProviderDistributionConfig(obj: DistributionSpecForProviderDistributionConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'aliases': toJson_DistributionSpecForProviderDistributionConfigAliases(obj.aliases),
    'cacheBehaviors': toJson_DistributionSpecForProviderDistributionConfigCacheBehaviors(obj.cacheBehaviors),
    'callerReference': obj.callerReference,
    'comment': obj.comment,
    'continuousDeploymentPolicyID': obj.continuousDeploymentPolicyId,
    'customErrorResponses': toJson_DistributionSpecForProviderDistributionConfigCustomErrorResponses(obj.customErrorResponses),
    'defaultCacheBehavior': toJson_DistributionSpecForProviderDistributionConfigDefaultCacheBehavior(obj.defaultCacheBehavior),
    'defaultRootObject': obj.defaultRootObject,
    'enabled': obj.enabled,
    'httpVersion': obj.httpVersion,
    'isIPV6Enabled': obj.isIpv6Enabled,
    'logging': toJson_DistributionSpecForProviderDistributionConfigLogging(obj.logging),
    'originGroups': toJson_DistributionSpecForProviderDistributionConfigOriginGroups(obj.originGroups),
    'origins': toJson_DistributionSpecForProviderDistributionConfigOrigins(obj.origins),
    'priceClass': obj.priceClass,
    'restrictions': toJson_DistributionSpecForProviderDistributionConfigRestrictions(obj.restrictions),
    'staging': obj.staging,
    'viewerCertificate': toJson_DistributionSpecForProviderDistributionConfigViewerCertificate(obj.viewerCertificate),
    'webACLID': obj.webAclid,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema DistributionSpecProviderConfigRefPolicy
 */
export interface DistributionSpecProviderConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema DistributionSpecProviderConfigRefPolicy#resolution
   */
  readonly resolution?: DistributionSpecProviderConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema DistributionSpecProviderConfigRefPolicy#resolve
   */
  readonly resolve?: DistributionSpecProviderConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'DistributionSpecProviderConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DistributionSpecProviderConfigRefPolicy(obj: DistributionSpecProviderConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
 *
 * @schema DistributionSpecPublishConnectionDetailsToConfigRef
 */
export interface DistributionSpecPublishConnectionDetailsToConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema DistributionSpecPublishConnectionDetailsToConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema DistributionSpecPublishConnectionDetailsToConfigRef#policy
   */
  readonly policy?: DistributionSpecPublishConnectionDetailsToConfigRefPolicy;

}

/**
 * Converts an object of type 'DistributionSpecPublishConnectionDetailsToConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DistributionSpecPublishConnectionDetailsToConfigRef(obj: DistributionSpecPublishConnectionDetailsToConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_DistributionSpecPublishConnectionDetailsToConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Metadata is the metadata for connection secret.
 *
 * @schema DistributionSpecPublishConnectionDetailsToMetadata
 */
export interface DistributionSpecPublishConnectionDetailsToMetadata {
  /**
   * Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
   *
   * @schema DistributionSpecPublishConnectionDetailsToMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
   *
   * @schema DistributionSpecPublishConnectionDetailsToMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
   *
   * @schema DistributionSpecPublishConnectionDetailsToMetadata#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'DistributionSpecPublishConnectionDetailsToMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DistributionSpecPublishConnectionDetailsToMetadata(obj: DistributionSpecPublishConnectionDetailsToMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A complex type that contains information about CNAMEs (alternate domain names), if any, for this distribution.
 *
 * @schema DistributionSpecForProviderDistributionConfigAliases
 */
export interface DistributionSpecForProviderDistributionConfigAliases {
  /**
   * @schema DistributionSpecForProviderDistributionConfigAliases#items
   */
  readonly items?: string[];

}

/**
 * Converts an object of type 'DistributionSpecForProviderDistributionConfigAliases' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DistributionSpecForProviderDistributionConfigAliases(obj: DistributionSpecForProviderDistributionConfigAliases | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'items': obj.items?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A complex type that contains zero or more CacheBehavior elements.
 *
 * @schema DistributionSpecForProviderDistributionConfigCacheBehaviors
 */
export interface DistributionSpecForProviderDistributionConfigCacheBehaviors {
  /**
   * @schema DistributionSpecForProviderDistributionConfigCacheBehaviors#items
   */
  readonly items?: DistributionSpecForProviderDistributionConfigCacheBehaviorsItems[];

}

/**
 * Converts an object of type 'DistributionSpecForProviderDistributionConfigCacheBehaviors' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DistributionSpecForProviderDistributionConfigCacheBehaviors(obj: DistributionSpecForProviderDistributionConfigCacheBehaviors | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'items': obj.items?.map(y => toJson_DistributionSpecForProviderDistributionConfigCacheBehaviorsItems(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A complex type that controls:
 * * Whether CloudFront replaces HTTP status codes in the 4xx and 5xx range with custom error messages before returning the response to the viewer.
 * * How long CloudFront caches HTTP status codes in the 4xx and 5xx range.
 * For more information about custom error pages, see Customizing Error Responses (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/custom-error-pages.html) in the Amazon CloudFront Developer Guide.
 *
 * @schema DistributionSpecForProviderDistributionConfigCustomErrorResponses
 */
export interface DistributionSpecForProviderDistributionConfigCustomErrorResponses {
  /**
   * @schema DistributionSpecForProviderDistributionConfigCustomErrorResponses#items
   */
  readonly items?: DistributionSpecForProviderDistributionConfigCustomErrorResponsesItems[];

}

/**
 * Converts an object of type 'DistributionSpecForProviderDistributionConfigCustomErrorResponses' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DistributionSpecForProviderDistributionConfigCustomErrorResponses(obj: DistributionSpecForProviderDistributionConfigCustomErrorResponses | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'items': obj.items?.map(y => toJson_DistributionSpecForProviderDistributionConfigCustomErrorResponsesItems(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A complex type that describes the default cache behavior if you don't specify a CacheBehavior element or if request URLs don't match any of the values of PathPattern in CacheBehavior elements. You must create exactly one default cache behavior.
 *
 * @schema DistributionSpecForProviderDistributionConfigDefaultCacheBehavior
 */
export interface DistributionSpecForProviderDistributionConfigDefaultCacheBehavior {
  /**
   * A complex type that controls which HTTP methods CloudFront processes and forwards to your Amazon S3 bucket or your custom origin. There are three choices:
   * * CloudFront forwards only GET and HEAD requests.
   * * CloudFront forwards only GET, HEAD, and OPTIONS requests.
   * * CloudFront forwards GET, HEAD, OPTIONS, PUT, PATCH, POST, and DELETE requests.
   * If you pick the third choice, you may need to restrict access to your Amazon S3 bucket or to your custom origin so users can't perform operations that you don't want them to. For example, you might not want users to have permissions to delete objects from your origin.
   *
   * @schema DistributionSpecForProviderDistributionConfigDefaultCacheBehavior#allowedMethods
   */
  readonly allowedMethods?: DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorAllowedMethods;

  /**
   * @schema DistributionSpecForProviderDistributionConfigDefaultCacheBehavior#cachePolicyID
   */
  readonly cachePolicyId?: string;

  /**
   * @schema DistributionSpecForProviderDistributionConfigDefaultCacheBehavior#compress
   */
  readonly compress?: boolean;

  /**
   * @schema DistributionSpecForProviderDistributionConfigDefaultCacheBehavior#defaultTTL
   */
  readonly defaultTtl?: number;

  /**
   * @schema DistributionSpecForProviderDistributionConfigDefaultCacheBehavior#fieldLevelEncryptionID
   */
  readonly fieldLevelEncryptionId?: string;

  /**
   * This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this field.
   * If you want to include values in the cache key, use a cache policy. For more information, see Creating cache policies (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy) in the Amazon CloudFront Developer Guide.
   * If you want to send values to the origin but not include them in the cache key, use an origin request policy. For more information, see Creating origin request policies (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy) in the Amazon CloudFront Developer Guide.
   * A complex type that specifies how CloudFront handles query strings, cookies, and HTTP headers.
   *
   * @schema DistributionSpecForProviderDistributionConfigDefaultCacheBehavior#forwardedValues
   */
  readonly forwardedValues?: DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorForwardedValues;

  /**
   * A list of CloudFront functions that are associated with a cache behavior in a CloudFront distribution. CloudFront functions must be published to the LIVE stage to associate them with a cache behavior.
   *
   * @schema DistributionSpecForProviderDistributionConfigDefaultCacheBehavior#functionAssociations
   */
  readonly functionAssociations?: DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorFunctionAssociations;

  /**
   * A complex type that specifies a list of Lambda@Edge functions associations for a cache behavior.
   * If you want to invoke one or more Lambda@Edge functions triggered by requests that match the PathPattern of the cache behavior, specify the applicable values for Quantity and Items. Note that there can be up to 4 LambdaFunctionAssociation items in this list (one for each possible value of EventType) and each EventType can be associated with only one function.
   * If you don't want to invoke any Lambda@Edge functions for the requests that match PathPattern, specify 0 for Quantity and omit Items.
   *
   * @schema DistributionSpecForProviderDistributionConfigDefaultCacheBehavior#lambdaFunctionAssociations
   */
  readonly lambdaFunctionAssociations?: DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorLambdaFunctionAssociations;

  /**
   * @schema DistributionSpecForProviderDistributionConfigDefaultCacheBehavior#maxTTL
   */
  readonly maxTtl?: number;

  /**
   * @schema DistributionSpecForProviderDistributionConfigDefaultCacheBehavior#minTTL
   */
  readonly minTtl?: number;

  /**
   * @schema DistributionSpecForProviderDistributionConfigDefaultCacheBehavior#originRequestPolicyID
   */
  readonly originRequestPolicyId?: string;

  /**
   * @schema DistributionSpecForProviderDistributionConfigDefaultCacheBehavior#realtimeLogConfigARN
   */
  readonly realtimeLogConfigArn?: string;

  /**
   * @schema DistributionSpecForProviderDistributionConfigDefaultCacheBehavior#responseHeadersPolicyID
   */
  readonly responseHeadersPolicyId?: string;

  /**
   * @schema DistributionSpecForProviderDistributionConfigDefaultCacheBehavior#smoothStreaming
   */
  readonly smoothStreaming?: boolean;

  /**
   * @schema DistributionSpecForProviderDistributionConfigDefaultCacheBehavior#targetOriginID
   */
  readonly targetOriginId?: string;

  /**
   * A list of key groups whose public keys CloudFront can use to verify the signatures of signed URLs and signed cookies.
   *
   * @schema DistributionSpecForProviderDistributionConfigDefaultCacheBehavior#trustedKeyGroups
   */
  readonly trustedKeyGroups?: DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorTrustedKeyGroups;

  /**
   * A list of Amazon Web Services accounts whose public keys CloudFront can use to verify the signatures of signed URLs and signed cookies.
   *
   * @schema DistributionSpecForProviderDistributionConfigDefaultCacheBehavior#trustedSigners
   */
  readonly trustedSigners?: DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorTrustedSigners;

  /**
   * @schema DistributionSpecForProviderDistributionConfigDefaultCacheBehavior#viewerProtocolPolicy
   */
  readonly viewerProtocolPolicy?: string;

}

/**
 * Converts an object of type 'DistributionSpecForProviderDistributionConfigDefaultCacheBehavior' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DistributionSpecForProviderDistributionConfigDefaultCacheBehavior(obj: DistributionSpecForProviderDistributionConfigDefaultCacheBehavior | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'allowedMethods': toJson_DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorAllowedMethods(obj.allowedMethods),
    'cachePolicyID': obj.cachePolicyId,
    'compress': obj.compress,
    'defaultTTL': obj.defaultTtl,
    'fieldLevelEncryptionID': obj.fieldLevelEncryptionId,
    'forwardedValues': toJson_DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorForwardedValues(obj.forwardedValues),
    'functionAssociations': toJson_DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorFunctionAssociations(obj.functionAssociations),
    'lambdaFunctionAssociations': toJson_DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorLambdaFunctionAssociations(obj.lambdaFunctionAssociations),
    'maxTTL': obj.maxTtl,
    'minTTL': obj.minTtl,
    'originRequestPolicyID': obj.originRequestPolicyId,
    'realtimeLogConfigARN': obj.realtimeLogConfigArn,
    'responseHeadersPolicyID': obj.responseHeadersPolicyId,
    'smoothStreaming': obj.smoothStreaming,
    'targetOriginID': obj.targetOriginId,
    'trustedKeyGroups': toJson_DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorTrustedKeyGroups(obj.trustedKeyGroups),
    'trustedSigners': toJson_DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorTrustedSigners(obj.trustedSigners),
    'viewerProtocolPolicy': obj.viewerProtocolPolicy,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A complex type that controls whether access logs are written for the distribution.
 *
 * @schema DistributionSpecForProviderDistributionConfigLogging
 */
export interface DistributionSpecForProviderDistributionConfigLogging {
  /**
   * @schema DistributionSpecForProviderDistributionConfigLogging#bucket
   */
  readonly bucket?: string;

  /**
   * @schema DistributionSpecForProviderDistributionConfigLogging#enabled
   */
  readonly enabled?: boolean;

  /**
   * @schema DistributionSpecForProviderDistributionConfigLogging#includeCookies
   */
  readonly includeCookies?: boolean;

  /**
   * @schema DistributionSpecForProviderDistributionConfigLogging#prefix
   */
  readonly prefix?: string;

}

/**
 * Converts an object of type 'DistributionSpecForProviderDistributionConfigLogging' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DistributionSpecForProviderDistributionConfigLogging(obj: DistributionSpecForProviderDistributionConfigLogging | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'bucket': obj.bucket,
    'enabled': obj.enabled,
    'includeCookies': obj.includeCookies,
    'prefix': obj.prefix,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A complex data type for the origin groups specified for a distribution.
 *
 * @schema DistributionSpecForProviderDistributionConfigOriginGroups
 */
export interface DistributionSpecForProviderDistributionConfigOriginGroups {
  /**
   * List of origin groups for a distribution.
   *
   * @schema DistributionSpecForProviderDistributionConfigOriginGroups#items
   */
  readonly items?: DistributionSpecForProviderDistributionConfigOriginGroupsItems[];

}

/**
 * Converts an object of type 'DistributionSpecForProviderDistributionConfigOriginGroups' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DistributionSpecForProviderDistributionConfigOriginGroups(obj: DistributionSpecForProviderDistributionConfigOriginGroups | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'items': obj.items?.map(y => toJson_DistributionSpecForProviderDistributionConfigOriginGroupsItems(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Contains information about the origins for this distribution.
 *
 * @schema DistributionSpecForProviderDistributionConfigOrigins
 */
export interface DistributionSpecForProviderDistributionConfigOrigins {
  /**
   * @schema DistributionSpecForProviderDistributionConfigOrigins#items
   */
  readonly items?: DistributionSpecForProviderDistributionConfigOriginsItems[];

}

/**
 * Converts an object of type 'DistributionSpecForProviderDistributionConfigOrigins' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DistributionSpecForProviderDistributionConfigOrigins(obj: DistributionSpecForProviderDistributionConfigOrigins | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'items': obj.items?.map(y => toJson_DistributionSpecForProviderDistributionConfigOriginsItems(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A complex type that identifies ways in which you want to restrict distribution of your content.
 *
 * @schema DistributionSpecForProviderDistributionConfigRestrictions
 */
export interface DistributionSpecForProviderDistributionConfigRestrictions {
  /**
   * A complex type that controls the countries in which your content is distributed. CloudFront determines the location of your users using MaxMind GeoIP databases.
   *
   * @schema DistributionSpecForProviderDistributionConfigRestrictions#geoRestriction
   */
  readonly geoRestriction?: DistributionSpecForProviderDistributionConfigRestrictionsGeoRestriction;

}

/**
 * Converts an object of type 'DistributionSpecForProviderDistributionConfigRestrictions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DistributionSpecForProviderDistributionConfigRestrictions(obj: DistributionSpecForProviderDistributionConfigRestrictions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'geoRestriction': toJson_DistributionSpecForProviderDistributionConfigRestrictionsGeoRestriction(obj.geoRestriction),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A complex type that determines the distribution's SSL/TLS configuration for communicating with viewers.
 * If the distribution doesn't use Aliases (also known as alternate domain names or CNAMEs)—that is, if the distribution uses the CloudFront domain name such as d111111abcdef8.cloudfront.net—set CloudFrontDefaultCertificate to true and leave all other fields empty.
 * If the distribution uses Aliases (alternate domain names or CNAMEs), use the fields in this type to specify the following settings:
 * * Which viewers the distribution accepts HTTPS connections from: only viewers that support server name indication (SNI) (https://en.wikipedia.org/wiki/Server_Name_Indication) (recommended), or all viewers including those that don't support SNI. To accept HTTPS connections from only viewers that support SNI, set SSLSupportMethod to sni-only. This is recommended. Most browsers and clients support SNI. To accept HTTPS connections from all viewers, including those that don't support SNI, set SSLSupportMethod to vip. This is not recommended, and results in additional monthly charges from CloudFront.
 * * The minimum SSL/TLS protocol version that the distribution can use to communicate with viewers. To specify a minimum version, choose a value for MinimumProtocolVersion. For more information, see Security Policy (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValues-security-policy) in the Amazon CloudFront Developer Guide.
 * * The location of the SSL/TLS certificate, Certificate Manager (ACM) (https://docs.aws.amazon.com/acm/latest/userguide/acm-overview.html) (recommended) or Identity and Access Management (IAM) (https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html). You specify the location by setting a value in one of the following fields (not both): ACMCertificateArn IAMCertificateId
 * All distributions support HTTPS connections from viewers. To require viewers to use HTTPS only, or to redirect them from HTTP to HTTPS, use ViewerProtocolPolicy in the CacheBehavior or DefaultCacheBehavior. To specify how CloudFront should use SSL/TLS to communicate with your custom origin, use CustomOriginConfig.
 * For more information, see Using HTTPS with CloudFront (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-https.html) and Using Alternate Domain Names and HTTPS (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-https-alternate-domain-names.html) in the Amazon CloudFront Developer Guide.
 *
 * @schema DistributionSpecForProviderDistributionConfigViewerCertificate
 */
export interface DistributionSpecForProviderDistributionConfigViewerCertificate {
  /**
   * @schema DistributionSpecForProviderDistributionConfigViewerCertificate#aCMCertificateARN
   */
  readonly aCmCertificateArn?: string;

  /**
   * @schema DistributionSpecForProviderDistributionConfigViewerCertificate#certificate
   */
  readonly certificate?: string;

  /**
   * @schema DistributionSpecForProviderDistributionConfigViewerCertificate#certificateSource
   */
  readonly certificateSource?: string;

  /**
   * @schema DistributionSpecForProviderDistributionConfigViewerCertificate#cloudFrontDefaultCertificate
   */
  readonly cloudFrontDefaultCertificate?: boolean;

  /**
   * @schema DistributionSpecForProviderDistributionConfigViewerCertificate#iamCertificateID
   */
  readonly iamCertificateId?: string;

  /**
   * @schema DistributionSpecForProviderDistributionConfigViewerCertificate#minimumProtocolVersion
   */
  readonly minimumProtocolVersion?: string;

  /**
   * @schema DistributionSpecForProviderDistributionConfigViewerCertificate#sslSupportMethod
   */
  readonly sslSupportMethod?: string;

}

/**
 * Converts an object of type 'DistributionSpecForProviderDistributionConfigViewerCertificate' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DistributionSpecForProviderDistributionConfigViewerCertificate(obj: DistributionSpecForProviderDistributionConfigViewerCertificate | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'aCMCertificateARN': obj.aCmCertificateArn,
    'certificate': obj.certificate,
    'certificateSource': obj.certificateSource,
    'cloudFrontDefaultCertificate': obj.cloudFrontDefaultCertificate,
    'iamCertificateID': obj.iamCertificateId,
    'minimumProtocolVersion': obj.minimumProtocolVersion,
    'sslSupportMethod': obj.sslSupportMethod,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema DistributionSpecProviderConfigRefPolicyResolution
 */
export enum DistributionSpecProviderConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema DistributionSpecProviderConfigRefPolicyResolve
 */
export enum DistributionSpecProviderConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Policies for referencing.
 *
 * @schema DistributionSpecPublishConnectionDetailsToConfigRefPolicy
 */
export interface DistributionSpecPublishConnectionDetailsToConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema DistributionSpecPublishConnectionDetailsToConfigRefPolicy#resolution
   */
  readonly resolution?: DistributionSpecPublishConnectionDetailsToConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema DistributionSpecPublishConnectionDetailsToConfigRefPolicy#resolve
   */
  readonly resolve?: DistributionSpecPublishConnectionDetailsToConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'DistributionSpecPublishConnectionDetailsToConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DistributionSpecPublishConnectionDetailsToConfigRefPolicy(obj: DistributionSpecPublishConnectionDetailsToConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DistributionSpecForProviderDistributionConfigCacheBehaviorsItems
 */
export interface DistributionSpecForProviderDistributionConfigCacheBehaviorsItems {
  /**
   * A complex type that controls which HTTP methods CloudFront processes and forwards to your Amazon S3 bucket or your custom origin. There are three choices:
   * * CloudFront forwards only GET and HEAD requests.
   * * CloudFront forwards only GET, HEAD, and OPTIONS requests.
   * * CloudFront forwards GET, HEAD, OPTIONS, PUT, PATCH, POST, and DELETE requests.
   * If you pick the third choice, you may need to restrict access to your Amazon S3 bucket or to your custom origin so users can't perform operations that you don't want them to. For example, you might not want users to have permissions to delete objects from your origin.
   *
   * @schema DistributionSpecForProviderDistributionConfigCacheBehaviorsItems#allowedMethods
   */
  readonly allowedMethods?: DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsAllowedMethods;

  /**
   * @schema DistributionSpecForProviderDistributionConfigCacheBehaviorsItems#cachePolicyID
   */
  readonly cachePolicyId?: string;

  /**
   * @schema DistributionSpecForProviderDistributionConfigCacheBehaviorsItems#compress
   */
  readonly compress?: boolean;

  /**
   * @schema DistributionSpecForProviderDistributionConfigCacheBehaviorsItems#defaultTTL
   */
  readonly defaultTtl?: number;

  /**
   * @schema DistributionSpecForProviderDistributionConfigCacheBehaviorsItems#fieldLevelEncryptionID
   */
  readonly fieldLevelEncryptionId?: string;

  /**
   * This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this field.
   * If you want to include values in the cache key, use a cache policy. For more information, see Creating cache policies (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy) in the Amazon CloudFront Developer Guide.
   * If you want to send values to the origin but not include them in the cache key, use an origin request policy. For more information, see Creating origin request policies (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy) in the Amazon CloudFront Developer Guide.
   * A complex type that specifies how CloudFront handles query strings, cookies, and HTTP headers.
   *
   * @schema DistributionSpecForProviderDistributionConfigCacheBehaviorsItems#forwardedValues
   */
  readonly forwardedValues?: DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsForwardedValues;

  /**
   * A list of CloudFront functions that are associated with a cache behavior in a CloudFront distribution. CloudFront functions must be published to the LIVE stage to associate them with a cache behavior.
   *
   * @schema DistributionSpecForProviderDistributionConfigCacheBehaviorsItems#functionAssociations
   */
  readonly functionAssociations?: DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsFunctionAssociations;

  /**
   * A complex type that specifies a list of Lambda@Edge functions associations for a cache behavior.
   * If you want to invoke one or more Lambda@Edge functions triggered by requests that match the PathPattern of the cache behavior, specify the applicable values for Quantity and Items. Note that there can be up to 4 LambdaFunctionAssociation items in this list (one for each possible value of EventType) and each EventType can be associated with only one function.
   * If you don't want to invoke any Lambda@Edge functions for the requests that match PathPattern, specify 0 for Quantity and omit Items.
   *
   * @schema DistributionSpecForProviderDistributionConfigCacheBehaviorsItems#lambdaFunctionAssociations
   */
  readonly lambdaFunctionAssociations?: DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsLambdaFunctionAssociations;

  /**
   * @schema DistributionSpecForProviderDistributionConfigCacheBehaviorsItems#maxTTL
   */
  readonly maxTtl?: number;

  /**
   * @schema DistributionSpecForProviderDistributionConfigCacheBehaviorsItems#minTTL
   */
  readonly minTtl?: number;

  /**
   * @schema DistributionSpecForProviderDistributionConfigCacheBehaviorsItems#originRequestPolicyID
   */
  readonly originRequestPolicyId?: string;

  /**
   * @schema DistributionSpecForProviderDistributionConfigCacheBehaviorsItems#pathPattern
   */
  readonly pathPattern?: string;

  /**
   * @schema DistributionSpecForProviderDistributionConfigCacheBehaviorsItems#realtimeLogConfigARN
   */
  readonly realtimeLogConfigArn?: string;

  /**
   * @schema DistributionSpecForProviderDistributionConfigCacheBehaviorsItems#responseHeadersPolicyID
   */
  readonly responseHeadersPolicyId?: string;

  /**
   * @schema DistributionSpecForProviderDistributionConfigCacheBehaviorsItems#smoothStreaming
   */
  readonly smoothStreaming?: boolean;

  /**
   * @schema DistributionSpecForProviderDistributionConfigCacheBehaviorsItems#targetOriginID
   */
  readonly targetOriginId?: string;

  /**
   * A list of key groups whose public keys CloudFront can use to verify the signatures of signed URLs and signed cookies.
   *
   * @schema DistributionSpecForProviderDistributionConfigCacheBehaviorsItems#trustedKeyGroups
   */
  readonly trustedKeyGroups?: DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsTrustedKeyGroups;

  /**
   * A list of Amazon Web Services accounts whose public keys CloudFront can use to verify the signatures of signed URLs and signed cookies.
   *
   * @schema DistributionSpecForProviderDistributionConfigCacheBehaviorsItems#trustedSigners
   */
  readonly trustedSigners?: DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsTrustedSigners;

  /**
   * @schema DistributionSpecForProviderDistributionConfigCacheBehaviorsItems#viewerProtocolPolicy
   */
  readonly viewerProtocolPolicy?: string;

}

/**
 * Converts an object of type 'DistributionSpecForProviderDistributionConfigCacheBehaviorsItems' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DistributionSpecForProviderDistributionConfigCacheBehaviorsItems(obj: DistributionSpecForProviderDistributionConfigCacheBehaviorsItems | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'allowedMethods': toJson_DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsAllowedMethods(obj.allowedMethods),
    'cachePolicyID': obj.cachePolicyId,
    'compress': obj.compress,
    'defaultTTL': obj.defaultTtl,
    'fieldLevelEncryptionID': obj.fieldLevelEncryptionId,
    'forwardedValues': toJson_DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsForwardedValues(obj.forwardedValues),
    'functionAssociations': toJson_DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsFunctionAssociations(obj.functionAssociations),
    'lambdaFunctionAssociations': toJson_DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsLambdaFunctionAssociations(obj.lambdaFunctionAssociations),
    'maxTTL': obj.maxTtl,
    'minTTL': obj.minTtl,
    'originRequestPolicyID': obj.originRequestPolicyId,
    'pathPattern': obj.pathPattern,
    'realtimeLogConfigARN': obj.realtimeLogConfigArn,
    'responseHeadersPolicyID': obj.responseHeadersPolicyId,
    'smoothStreaming': obj.smoothStreaming,
    'targetOriginID': obj.targetOriginId,
    'trustedKeyGroups': toJson_DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsTrustedKeyGroups(obj.trustedKeyGroups),
    'trustedSigners': toJson_DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsTrustedSigners(obj.trustedSigners),
    'viewerProtocolPolicy': obj.viewerProtocolPolicy,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DistributionSpecForProviderDistributionConfigCustomErrorResponsesItems
 */
export interface DistributionSpecForProviderDistributionConfigCustomErrorResponsesItems {
  /**
   * @schema DistributionSpecForProviderDistributionConfigCustomErrorResponsesItems#errorCachingMinTTL
   */
  readonly errorCachingMinTtl?: number;

  /**
   * @schema DistributionSpecForProviderDistributionConfigCustomErrorResponsesItems#errorCode
   */
  readonly errorCode?: number;

  /**
   * @schema DistributionSpecForProviderDistributionConfigCustomErrorResponsesItems#responseCode
   */
  readonly responseCode?: string;

  /**
   * @schema DistributionSpecForProviderDistributionConfigCustomErrorResponsesItems#responsePagePath
   */
  readonly responsePagePath?: string;

}

/**
 * Converts an object of type 'DistributionSpecForProviderDistributionConfigCustomErrorResponsesItems' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DistributionSpecForProviderDistributionConfigCustomErrorResponsesItems(obj: DistributionSpecForProviderDistributionConfigCustomErrorResponsesItems | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'errorCachingMinTTL': obj.errorCachingMinTtl,
    'errorCode': obj.errorCode,
    'responseCode': obj.responseCode,
    'responsePagePath': obj.responsePagePath,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A complex type that controls which HTTP methods CloudFront processes and forwards to your Amazon S3 bucket or your custom origin. There are three choices:
 * * CloudFront forwards only GET and HEAD requests.
 * * CloudFront forwards only GET, HEAD, and OPTIONS requests.
 * * CloudFront forwards GET, HEAD, OPTIONS, PUT, PATCH, POST, and DELETE requests.
 * If you pick the third choice, you may need to restrict access to your Amazon S3 bucket or to your custom origin so users can't perform operations that you don't want them to. For example, you might not want users to have permissions to delete objects from your origin.
 *
 * @schema DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorAllowedMethods
 */
export interface DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorAllowedMethods {
  /**
   * A complex type that controls whether CloudFront caches the response to requests using the specified HTTP methods. There are two choices:
   * * CloudFront caches responses to GET and HEAD requests.
   * * CloudFront caches responses to GET, HEAD, and OPTIONS requests.
   * If you pick the second choice for your Amazon S3 Origin, you may need to forward Access-Control-Request-Method, Access-Control-Request-Headers, and Origin headers for the responses to be cached correctly.
   *
   * @schema DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorAllowedMethods#cachedMethods
   */
  readonly cachedMethods?: DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorAllowedMethodsCachedMethods;

  /**
   * @schema DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorAllowedMethods#items
   */
  readonly items?: string[];

}

/**
 * Converts an object of type 'DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorAllowedMethods' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorAllowedMethods(obj: DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorAllowedMethods | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'cachedMethods': toJson_DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorAllowedMethodsCachedMethods(obj.cachedMethods),
    'items': obj.items?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this field.
 * If you want to include values in the cache key, use a cache policy. For more information, see Creating cache policies (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy) in the Amazon CloudFront Developer Guide.
 * If you want to send values to the origin but not include them in the cache key, use an origin request policy. For more information, see Creating origin request policies (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy) in the Amazon CloudFront Developer Guide.
 * A complex type that specifies how CloudFront handles query strings, cookies, and HTTP headers.
 *
 * @schema DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorForwardedValues
 */
export interface DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorForwardedValues {
  /**
   * This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this field.
   * If you want to include cookies in the cache key, use CookiesConfig in a cache policy. See CachePolicy.
   * If you want to send cookies to the origin but not include them in the cache key, use CookiesConfig in an origin request policy. See OriginRequestPolicy.
   * A complex type that specifies whether you want CloudFront to forward cookies to the origin and, if so, which ones. For more information about forwarding cookies to the origin, see Caching Content Based on Cookies (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Cookies.html) in the Amazon CloudFront Developer Guide.
   *
   * @schema DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorForwardedValues#cookies
   */
  readonly cookies?: DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorForwardedValuesCookies;

  /**
   * Contains a list of HTTP header names.
   *
   * @schema DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorForwardedValues#headers
   */
  readonly headers?: DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorForwardedValuesHeaders;

  /**
   * @schema DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorForwardedValues#queryString
   */
  readonly queryString?: boolean;

  /**
   * This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this field.
   * If you want to include query strings in the cache key, use QueryStringsConfig in a cache policy. See CachePolicy.
   * If you want to send query strings to the origin but not include them in the cache key, use QueryStringsConfig in an origin request policy. See OriginRequestPolicy.
   * A complex type that contains information about the query string parameters that you want CloudFront to use for caching for a cache behavior.
   *
   * @schema DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorForwardedValues#queryStringCacheKeys
   */
  readonly queryStringCacheKeys?: DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorForwardedValuesQueryStringCacheKeys;

}

/**
 * Converts an object of type 'DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorForwardedValues' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorForwardedValues(obj: DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorForwardedValues | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'cookies': toJson_DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorForwardedValuesCookies(obj.cookies),
    'headers': toJson_DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorForwardedValuesHeaders(obj.headers),
    'queryString': obj.queryString,
    'queryStringCacheKeys': toJson_DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorForwardedValuesQueryStringCacheKeys(obj.queryStringCacheKeys),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A list of CloudFront functions that are associated with a cache behavior in a CloudFront distribution. CloudFront functions must be published to the LIVE stage to associate them with a cache behavior.
 *
 * @schema DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorFunctionAssociations
 */
export interface DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorFunctionAssociations {
  /**
   * @schema DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorFunctionAssociations#items
   */
  readonly items?: DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorFunctionAssociationsItems[];

}

/**
 * Converts an object of type 'DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorFunctionAssociations' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorFunctionAssociations(obj: DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorFunctionAssociations | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'items': obj.items?.map(y => toJson_DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorFunctionAssociationsItems(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A complex type that specifies a list of Lambda@Edge functions associations for a cache behavior.
 * If you want to invoke one or more Lambda@Edge functions triggered by requests that match the PathPattern of the cache behavior, specify the applicable values for Quantity and Items. Note that there can be up to 4 LambdaFunctionAssociation items in this list (one for each possible value of EventType) and each EventType can be associated with only one function.
 * If you don't want to invoke any Lambda@Edge functions for the requests that match PathPattern, specify 0 for Quantity and omit Items.
 *
 * @schema DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorLambdaFunctionAssociations
 */
export interface DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorLambdaFunctionAssociations {
  /**
   * @schema DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorLambdaFunctionAssociations#items
   */
  readonly items?: DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorLambdaFunctionAssociationsItems[];

}

/**
 * Converts an object of type 'DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorLambdaFunctionAssociations' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorLambdaFunctionAssociations(obj: DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorLambdaFunctionAssociations | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'items': obj.items?.map(y => toJson_DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorLambdaFunctionAssociationsItems(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A list of key groups whose public keys CloudFront can use to verify the signatures of signed URLs and signed cookies.
 *
 * @schema DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorTrustedKeyGroups
 */
export interface DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorTrustedKeyGroups {
  /**
   * @schema DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorTrustedKeyGroups#enabled
   */
  readonly enabled?: boolean;

  /**
   * @schema DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorTrustedKeyGroups#items
   */
  readonly items?: string[];

}

/**
 * Converts an object of type 'DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorTrustedKeyGroups' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorTrustedKeyGroups(obj: DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorTrustedKeyGroups | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
    'items': obj.items?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A list of Amazon Web Services accounts whose public keys CloudFront can use to verify the signatures of signed URLs and signed cookies.
 *
 * @schema DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorTrustedSigners
 */
export interface DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorTrustedSigners {
  /**
   * @schema DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorTrustedSigners#enabled
   */
  readonly enabled?: boolean;

  /**
   * @schema DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorTrustedSigners#items
   */
  readonly items?: string[];

}

/**
 * Converts an object of type 'DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorTrustedSigners' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorTrustedSigners(obj: DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorTrustedSigners | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
    'items': obj.items?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DistributionSpecForProviderDistributionConfigOriginGroupsItems
 */
export interface DistributionSpecForProviderDistributionConfigOriginGroupsItems {
  /**
   * A complex data type that includes information about the failover criteria for an origin group, including the status codes for which CloudFront will failover from the primary origin to the second origin.
   *
   * @schema DistributionSpecForProviderDistributionConfigOriginGroupsItems#failoverCriteria
   */
  readonly failoverCriteria?: DistributionSpecForProviderDistributionConfigOriginGroupsItemsFailoverCriteria;

  /**
   * @schema DistributionSpecForProviderDistributionConfigOriginGroupsItems#id
   */
  readonly id?: string;

  /**
   * A complex data type for the origins included in an origin group.
   *
   * @schema DistributionSpecForProviderDistributionConfigOriginGroupsItems#members
   */
  readonly members?: DistributionSpecForProviderDistributionConfigOriginGroupsItemsMembers;

}

/**
 * Converts an object of type 'DistributionSpecForProviderDistributionConfigOriginGroupsItems' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DistributionSpecForProviderDistributionConfigOriginGroupsItems(obj: DistributionSpecForProviderDistributionConfigOriginGroupsItems | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'failoverCriteria': toJson_DistributionSpecForProviderDistributionConfigOriginGroupsItemsFailoverCriteria(obj.failoverCriteria),
    'id': obj.id,
    'members': toJson_DistributionSpecForProviderDistributionConfigOriginGroupsItemsMembers(obj.members),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DistributionSpecForProviderDistributionConfigOriginsItems
 */
export interface DistributionSpecForProviderDistributionConfigOriginsItems {
  /**
   * @schema DistributionSpecForProviderDistributionConfigOriginsItems#connectionAttempts
   */
  readonly connectionAttempts?: number;

  /**
   * @schema DistributionSpecForProviderDistributionConfigOriginsItems#connectionTimeout
   */
  readonly connectionTimeout?: number;

  /**
   * A complex type that contains the list of Custom Headers for each origin.
   *
   * @schema DistributionSpecForProviderDistributionConfigOriginsItems#customHeaders
   */
  readonly customHeaders?: DistributionSpecForProviderDistributionConfigOriginsItemsCustomHeaders;

  /**
   * A custom origin. A custom origin is any origin that is not an Amazon S3 bucket, with one exception. An Amazon S3 bucket that is configured with static website hosting (https://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteHosting.html) is a custom origin.
   *
   * @schema DistributionSpecForProviderDistributionConfigOriginsItems#customOriginConfig
   */
  readonly customOriginConfig?: DistributionSpecForProviderDistributionConfigOriginsItemsCustomOriginConfig;

  /**
   * @schema DistributionSpecForProviderDistributionConfigOriginsItems#domainName
   */
  readonly domainName?: string;

  /**
   * @schema DistributionSpecForProviderDistributionConfigOriginsItems#id
   */
  readonly id?: string;

  /**
   * @schema DistributionSpecForProviderDistributionConfigOriginsItems#originAccessControlID
   */
  readonly originAccessControlId?: string;

  /**
   * @schema DistributionSpecForProviderDistributionConfigOriginsItems#originPath
   */
  readonly originPath?: string;

  /**
   * CloudFront Origin Shield.
   * Using Origin Shield can help reduce the load on your origin. For more information, see Using Origin Shield (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/origin-shield.html) in the Amazon CloudFront Developer Guide.
   *
   * @schema DistributionSpecForProviderDistributionConfigOriginsItems#originShield
   */
  readonly originShield?: DistributionSpecForProviderDistributionConfigOriginsItemsOriginShield;

  /**
   * A complex type that contains information about the Amazon S3 origin. If the origin is a custom origin or an S3 bucket that is configured as a website endpoint, use the CustomOriginConfig element instead.
   *
   * @schema DistributionSpecForProviderDistributionConfigOriginsItems#s3OriginConfig
   */
  readonly s3OriginConfig?: DistributionSpecForProviderDistributionConfigOriginsItemsS3OriginConfig;

}

/**
 * Converts an object of type 'DistributionSpecForProviderDistributionConfigOriginsItems' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DistributionSpecForProviderDistributionConfigOriginsItems(obj: DistributionSpecForProviderDistributionConfigOriginsItems | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'connectionAttempts': obj.connectionAttempts,
    'connectionTimeout': obj.connectionTimeout,
    'customHeaders': toJson_DistributionSpecForProviderDistributionConfigOriginsItemsCustomHeaders(obj.customHeaders),
    'customOriginConfig': toJson_DistributionSpecForProviderDistributionConfigOriginsItemsCustomOriginConfig(obj.customOriginConfig),
    'domainName': obj.domainName,
    'id': obj.id,
    'originAccessControlID': obj.originAccessControlId,
    'originPath': obj.originPath,
    'originShield': toJson_DistributionSpecForProviderDistributionConfigOriginsItemsOriginShield(obj.originShield),
    's3OriginConfig': toJson_DistributionSpecForProviderDistributionConfigOriginsItemsS3OriginConfig(obj.s3OriginConfig),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A complex type that controls the countries in which your content is distributed. CloudFront determines the location of your users using MaxMind GeoIP databases.
 *
 * @schema DistributionSpecForProviderDistributionConfigRestrictionsGeoRestriction
 */
export interface DistributionSpecForProviderDistributionConfigRestrictionsGeoRestriction {
  /**
   * @schema DistributionSpecForProviderDistributionConfigRestrictionsGeoRestriction#items
   */
  readonly items?: string[];

  /**
   * @schema DistributionSpecForProviderDistributionConfigRestrictionsGeoRestriction#restrictionType
   */
  readonly restrictionType?: string;

}

/**
 * Converts an object of type 'DistributionSpecForProviderDistributionConfigRestrictionsGeoRestriction' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DistributionSpecForProviderDistributionConfigRestrictionsGeoRestriction(obj: DistributionSpecForProviderDistributionConfigRestrictionsGeoRestriction | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'items': obj.items?.map(y => y),
    'restrictionType': obj.restrictionType,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema DistributionSpecPublishConnectionDetailsToConfigRefPolicyResolution
 */
export enum DistributionSpecPublishConnectionDetailsToConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema DistributionSpecPublishConnectionDetailsToConfigRefPolicyResolve
 */
export enum DistributionSpecPublishConnectionDetailsToConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * A complex type that controls which HTTP methods CloudFront processes and forwards to your Amazon S3 bucket or your custom origin. There are three choices:
 * * CloudFront forwards only GET and HEAD requests.
 * * CloudFront forwards only GET, HEAD, and OPTIONS requests.
 * * CloudFront forwards GET, HEAD, OPTIONS, PUT, PATCH, POST, and DELETE requests.
 * If you pick the third choice, you may need to restrict access to your Amazon S3 bucket or to your custom origin so users can't perform operations that you don't want them to. For example, you might not want users to have permissions to delete objects from your origin.
 *
 * @schema DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsAllowedMethods
 */
export interface DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsAllowedMethods {
  /**
   * A complex type that controls whether CloudFront caches the response to requests using the specified HTTP methods. There are two choices:
   * * CloudFront caches responses to GET and HEAD requests.
   * * CloudFront caches responses to GET, HEAD, and OPTIONS requests.
   * If you pick the second choice for your Amazon S3 Origin, you may need to forward Access-Control-Request-Method, Access-Control-Request-Headers, and Origin headers for the responses to be cached correctly.
   *
   * @schema DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsAllowedMethods#cachedMethods
   */
  readonly cachedMethods?: DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsAllowedMethodsCachedMethods;

  /**
   * @schema DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsAllowedMethods#items
   */
  readonly items?: string[];

}

/**
 * Converts an object of type 'DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsAllowedMethods' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsAllowedMethods(obj: DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsAllowedMethods | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'cachedMethods': toJson_DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsAllowedMethodsCachedMethods(obj.cachedMethods),
    'items': obj.items?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this field.
 * If you want to include values in the cache key, use a cache policy. For more information, see Creating cache policies (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy) in the Amazon CloudFront Developer Guide.
 * If you want to send values to the origin but not include them in the cache key, use an origin request policy. For more information, see Creating origin request policies (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy) in the Amazon CloudFront Developer Guide.
 * A complex type that specifies how CloudFront handles query strings, cookies, and HTTP headers.
 *
 * @schema DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsForwardedValues
 */
export interface DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsForwardedValues {
  /**
   * This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this field.
   * If you want to include cookies in the cache key, use CookiesConfig in a cache policy. See CachePolicy.
   * If you want to send cookies to the origin but not include them in the cache key, use CookiesConfig in an origin request policy. See OriginRequestPolicy.
   * A complex type that specifies whether you want CloudFront to forward cookies to the origin and, if so, which ones. For more information about forwarding cookies to the origin, see Caching Content Based on Cookies (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Cookies.html) in the Amazon CloudFront Developer Guide.
   *
   * @schema DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsForwardedValues#cookies
   */
  readonly cookies?: DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsForwardedValuesCookies;

  /**
   * Contains a list of HTTP header names.
   *
   * @schema DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsForwardedValues#headers
   */
  readonly headers?: DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsForwardedValuesHeaders;

  /**
   * @schema DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsForwardedValues#queryString
   */
  readonly queryString?: boolean;

  /**
   * This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this field.
   * If you want to include query strings in the cache key, use QueryStringsConfig in a cache policy. See CachePolicy.
   * If you want to send query strings to the origin but not include them in the cache key, use QueryStringsConfig in an origin request policy. See OriginRequestPolicy.
   * A complex type that contains information about the query string parameters that you want CloudFront to use for caching for a cache behavior.
   *
   * @schema DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsForwardedValues#queryStringCacheKeys
   */
  readonly queryStringCacheKeys?: DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsForwardedValuesQueryStringCacheKeys;

}

/**
 * Converts an object of type 'DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsForwardedValues' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsForwardedValues(obj: DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsForwardedValues | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'cookies': toJson_DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsForwardedValuesCookies(obj.cookies),
    'headers': toJson_DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsForwardedValuesHeaders(obj.headers),
    'queryString': obj.queryString,
    'queryStringCacheKeys': toJson_DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsForwardedValuesQueryStringCacheKeys(obj.queryStringCacheKeys),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A list of CloudFront functions that are associated with a cache behavior in a CloudFront distribution. CloudFront functions must be published to the LIVE stage to associate them with a cache behavior.
 *
 * @schema DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsFunctionAssociations
 */
export interface DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsFunctionAssociations {
  /**
   * @schema DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsFunctionAssociations#items
   */
  readonly items?: DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsFunctionAssociationsItems[];

}

/**
 * Converts an object of type 'DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsFunctionAssociations' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsFunctionAssociations(obj: DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsFunctionAssociations | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'items': obj.items?.map(y => toJson_DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsFunctionAssociationsItems(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A complex type that specifies a list of Lambda@Edge functions associations for a cache behavior.
 * If you want to invoke one or more Lambda@Edge functions triggered by requests that match the PathPattern of the cache behavior, specify the applicable values for Quantity and Items. Note that there can be up to 4 LambdaFunctionAssociation items in this list (one for each possible value of EventType) and each EventType can be associated with only one function.
 * If you don't want to invoke any Lambda@Edge functions for the requests that match PathPattern, specify 0 for Quantity and omit Items.
 *
 * @schema DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsLambdaFunctionAssociations
 */
export interface DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsLambdaFunctionAssociations {
  /**
   * @schema DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsLambdaFunctionAssociations#items
   */
  readonly items?: DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsLambdaFunctionAssociationsItems[];

}

/**
 * Converts an object of type 'DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsLambdaFunctionAssociations' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsLambdaFunctionAssociations(obj: DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsLambdaFunctionAssociations | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'items': obj.items?.map(y => toJson_DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsLambdaFunctionAssociationsItems(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A list of key groups whose public keys CloudFront can use to verify the signatures of signed URLs and signed cookies.
 *
 * @schema DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsTrustedKeyGroups
 */
export interface DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsTrustedKeyGroups {
  /**
   * @schema DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsTrustedKeyGroups#enabled
   */
  readonly enabled?: boolean;

  /**
   * @schema DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsTrustedKeyGroups#items
   */
  readonly items?: string[];

}

/**
 * Converts an object of type 'DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsTrustedKeyGroups' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsTrustedKeyGroups(obj: DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsTrustedKeyGroups | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
    'items': obj.items?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A list of Amazon Web Services accounts whose public keys CloudFront can use to verify the signatures of signed URLs and signed cookies.
 *
 * @schema DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsTrustedSigners
 */
export interface DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsTrustedSigners {
  /**
   * @schema DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsTrustedSigners#enabled
   */
  readonly enabled?: boolean;

  /**
   * @schema DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsTrustedSigners#items
   */
  readonly items?: string[];

}

/**
 * Converts an object of type 'DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsTrustedSigners' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsTrustedSigners(obj: DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsTrustedSigners | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
    'items': obj.items?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A complex type that controls whether CloudFront caches the response to requests using the specified HTTP methods. There are two choices:
 * * CloudFront caches responses to GET and HEAD requests.
 * * CloudFront caches responses to GET, HEAD, and OPTIONS requests.
 * If you pick the second choice for your Amazon S3 Origin, you may need to forward Access-Control-Request-Method, Access-Control-Request-Headers, and Origin headers for the responses to be cached correctly.
 *
 * @schema DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorAllowedMethodsCachedMethods
 */
export interface DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorAllowedMethodsCachedMethods {
  /**
   * @schema DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorAllowedMethodsCachedMethods#items
   */
  readonly items?: string[];

}

/**
 * Converts an object of type 'DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorAllowedMethodsCachedMethods' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorAllowedMethodsCachedMethods(obj: DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorAllowedMethodsCachedMethods | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'items': obj.items?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this field.
 * If you want to include cookies in the cache key, use CookiesConfig in a cache policy. See CachePolicy.
 * If you want to send cookies to the origin but not include them in the cache key, use CookiesConfig in an origin request policy. See OriginRequestPolicy.
 * A complex type that specifies whether you want CloudFront to forward cookies to the origin and, if so, which ones. For more information about forwarding cookies to the origin, see Caching Content Based on Cookies (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Cookies.html) in the Amazon CloudFront Developer Guide.
 *
 * @schema DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorForwardedValuesCookies
 */
export interface DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorForwardedValuesCookies {
  /**
   * @schema DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorForwardedValuesCookies#forward
   */
  readonly forward?: string;

  /**
   * Contains a list of cookie names.
   *
   * @schema DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorForwardedValuesCookies#whitelistedNames
   */
  readonly whitelistedNames?: DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorForwardedValuesCookiesWhitelistedNames;

}

/**
 * Converts an object of type 'DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorForwardedValuesCookies' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorForwardedValuesCookies(obj: DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorForwardedValuesCookies | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'forward': obj.forward,
    'whitelistedNames': toJson_DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorForwardedValuesCookiesWhitelistedNames(obj.whitelistedNames),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Contains a list of HTTP header names.
 *
 * @schema DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorForwardedValuesHeaders
 */
export interface DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorForwardedValuesHeaders {
  /**
   * @schema DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorForwardedValuesHeaders#items
   */
  readonly items?: string[];

}

/**
 * Converts an object of type 'DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorForwardedValuesHeaders' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorForwardedValuesHeaders(obj: DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorForwardedValuesHeaders | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'items': obj.items?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this field.
 * If you want to include query strings in the cache key, use QueryStringsConfig in a cache policy. See CachePolicy.
 * If you want to send query strings to the origin but not include them in the cache key, use QueryStringsConfig in an origin request policy. See OriginRequestPolicy.
 * A complex type that contains information about the query string parameters that you want CloudFront to use for caching for a cache behavior.
 *
 * @schema DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorForwardedValuesQueryStringCacheKeys
 */
export interface DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorForwardedValuesQueryStringCacheKeys {
  /**
   * @schema DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorForwardedValuesQueryStringCacheKeys#items
   */
  readonly items?: string[];

}

/**
 * Converts an object of type 'DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorForwardedValuesQueryStringCacheKeys' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorForwardedValuesQueryStringCacheKeys(obj: DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorForwardedValuesQueryStringCacheKeys | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'items': obj.items?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorFunctionAssociationsItems
 */
export interface DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorFunctionAssociationsItems {
  /**
   * @schema DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorFunctionAssociationsItems#eventType
   */
  readonly eventType?: string;

  /**
   * @schema DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorFunctionAssociationsItems#functionARN
   */
  readonly functionArn?: string;

}

/**
 * Converts an object of type 'DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorFunctionAssociationsItems' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorFunctionAssociationsItems(obj: DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorFunctionAssociationsItems | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'eventType': obj.eventType,
    'functionARN': obj.functionArn,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorLambdaFunctionAssociationsItems
 */
export interface DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorLambdaFunctionAssociationsItems {
  /**
   * @schema DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorLambdaFunctionAssociationsItems#eventType
   */
  readonly eventType?: string;

  /**
   * @schema DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorLambdaFunctionAssociationsItems#includeBody
   */
  readonly includeBody?: boolean;

  /**
   * @schema DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorLambdaFunctionAssociationsItems#lambdaFunctionARN
   */
  readonly lambdaFunctionArn?: string;

}

/**
 * Converts an object of type 'DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorLambdaFunctionAssociationsItems' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorLambdaFunctionAssociationsItems(obj: DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorLambdaFunctionAssociationsItems | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'eventType': obj.eventType,
    'includeBody': obj.includeBody,
    'lambdaFunctionARN': obj.lambdaFunctionArn,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A complex data type that includes information about the failover criteria for an origin group, including the status codes for which CloudFront will failover from the primary origin to the second origin.
 *
 * @schema DistributionSpecForProviderDistributionConfigOriginGroupsItemsFailoverCriteria
 */
export interface DistributionSpecForProviderDistributionConfigOriginGroupsItemsFailoverCriteria {
  /**
   * A complex data type for the status codes that you specify that, when returned by a primary origin, trigger CloudFront to failover to a second origin.
   *
   * @schema DistributionSpecForProviderDistributionConfigOriginGroupsItemsFailoverCriteria#statusCodes
   */
  readonly statusCodes?: DistributionSpecForProviderDistributionConfigOriginGroupsItemsFailoverCriteriaStatusCodes;

}

/**
 * Converts an object of type 'DistributionSpecForProviderDistributionConfigOriginGroupsItemsFailoverCriteria' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DistributionSpecForProviderDistributionConfigOriginGroupsItemsFailoverCriteria(obj: DistributionSpecForProviderDistributionConfigOriginGroupsItemsFailoverCriteria | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'statusCodes': toJson_DistributionSpecForProviderDistributionConfigOriginGroupsItemsFailoverCriteriaStatusCodes(obj.statusCodes),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A complex data type for the origins included in an origin group.
 *
 * @schema DistributionSpecForProviderDistributionConfigOriginGroupsItemsMembers
 */
export interface DistributionSpecForProviderDistributionConfigOriginGroupsItemsMembers {
  /**
   * List of origins in an origin group.
   *
   * @schema DistributionSpecForProviderDistributionConfigOriginGroupsItemsMembers#items
   */
  readonly items?: DistributionSpecForProviderDistributionConfigOriginGroupsItemsMembersItems[];

  /**
   * @schema DistributionSpecForProviderDistributionConfigOriginGroupsItemsMembers#quantity
   */
  readonly quantity?: number;

}

/**
 * Converts an object of type 'DistributionSpecForProviderDistributionConfigOriginGroupsItemsMembers' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DistributionSpecForProviderDistributionConfigOriginGroupsItemsMembers(obj: DistributionSpecForProviderDistributionConfigOriginGroupsItemsMembers | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'items': obj.items?.map(y => toJson_DistributionSpecForProviderDistributionConfigOriginGroupsItemsMembersItems(y)),
    'quantity': obj.quantity,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A complex type that contains the list of Custom Headers for each origin.
 *
 * @schema DistributionSpecForProviderDistributionConfigOriginsItemsCustomHeaders
 */
export interface DistributionSpecForProviderDistributionConfigOriginsItemsCustomHeaders {
  /**
   * @schema DistributionSpecForProviderDistributionConfigOriginsItemsCustomHeaders#items
   */
  readonly items?: DistributionSpecForProviderDistributionConfigOriginsItemsCustomHeadersItems[];

}

/**
 * Converts an object of type 'DistributionSpecForProviderDistributionConfigOriginsItemsCustomHeaders' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DistributionSpecForProviderDistributionConfigOriginsItemsCustomHeaders(obj: DistributionSpecForProviderDistributionConfigOriginsItemsCustomHeaders | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'items': obj.items?.map(y => toJson_DistributionSpecForProviderDistributionConfigOriginsItemsCustomHeadersItems(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A custom origin. A custom origin is any origin that is not an Amazon S3 bucket, with one exception. An Amazon S3 bucket that is configured with static website hosting (https://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteHosting.html) is a custom origin.
 *
 * @schema DistributionSpecForProviderDistributionConfigOriginsItemsCustomOriginConfig
 */
export interface DistributionSpecForProviderDistributionConfigOriginsItemsCustomOriginConfig {
  /**
   * @schema DistributionSpecForProviderDistributionConfigOriginsItemsCustomOriginConfig#httpPort
   */
  readonly httpPort?: number;

  /**
   * @schema DistributionSpecForProviderDistributionConfigOriginsItemsCustomOriginConfig#httpSPort
   */
  readonly httpSPort?: number;

  /**
   * @schema DistributionSpecForProviderDistributionConfigOriginsItemsCustomOriginConfig#originKeepaliveTimeout
   */
  readonly originKeepaliveTimeout?: number;

  /**
   * @schema DistributionSpecForProviderDistributionConfigOriginsItemsCustomOriginConfig#originProtocolPolicy
   */
  readonly originProtocolPolicy?: string;

  /**
   * @schema DistributionSpecForProviderDistributionConfigOriginsItemsCustomOriginConfig#originReadTimeout
   */
  readonly originReadTimeout?: number;

  /**
   * A complex type that contains information about the SSL/TLS protocols that CloudFront can use when establishing an HTTPS connection with your origin.
   *
   * @schema DistributionSpecForProviderDistributionConfigOriginsItemsCustomOriginConfig#originSSLProtocols
   */
  readonly originSslProtocols?: DistributionSpecForProviderDistributionConfigOriginsItemsCustomOriginConfigOriginSslProtocols;

}

/**
 * Converts an object of type 'DistributionSpecForProviderDistributionConfigOriginsItemsCustomOriginConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DistributionSpecForProviderDistributionConfigOriginsItemsCustomOriginConfig(obj: DistributionSpecForProviderDistributionConfigOriginsItemsCustomOriginConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'httpPort': obj.httpPort,
    'httpSPort': obj.httpSPort,
    'originKeepaliveTimeout': obj.originKeepaliveTimeout,
    'originProtocolPolicy': obj.originProtocolPolicy,
    'originReadTimeout': obj.originReadTimeout,
    'originSSLProtocols': toJson_DistributionSpecForProviderDistributionConfigOriginsItemsCustomOriginConfigOriginSslProtocols(obj.originSslProtocols),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CloudFront Origin Shield.
 * Using Origin Shield can help reduce the load on your origin. For more information, see Using Origin Shield (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/origin-shield.html) in the Amazon CloudFront Developer Guide.
 *
 * @schema DistributionSpecForProviderDistributionConfigOriginsItemsOriginShield
 */
export interface DistributionSpecForProviderDistributionConfigOriginsItemsOriginShield {
  /**
   * @schema DistributionSpecForProviderDistributionConfigOriginsItemsOriginShield#enabled
   */
  readonly enabled?: boolean;

  /**
   * @schema DistributionSpecForProviderDistributionConfigOriginsItemsOriginShield#originShieldRegion
   */
  readonly originShieldRegion?: string;

}

/**
 * Converts an object of type 'DistributionSpecForProviderDistributionConfigOriginsItemsOriginShield' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DistributionSpecForProviderDistributionConfigOriginsItemsOriginShield(obj: DistributionSpecForProviderDistributionConfigOriginsItemsOriginShield | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
    'originShieldRegion': obj.originShieldRegion,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A complex type that contains information about the Amazon S3 origin. If the origin is a custom origin or an S3 bucket that is configured as a website endpoint, use the CustomOriginConfig element instead.
 *
 * @schema DistributionSpecForProviderDistributionConfigOriginsItemsS3OriginConfig
 */
export interface DistributionSpecForProviderDistributionConfigOriginsItemsS3OriginConfig {
  /**
   * @schema DistributionSpecForProviderDistributionConfigOriginsItemsS3OriginConfig#originAccessIdentity
   */
  readonly originAccessIdentity?: string;

}

/**
 * Converts an object of type 'DistributionSpecForProviderDistributionConfigOriginsItemsS3OriginConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DistributionSpecForProviderDistributionConfigOriginsItemsS3OriginConfig(obj: DistributionSpecForProviderDistributionConfigOriginsItemsS3OriginConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'originAccessIdentity': obj.originAccessIdentity,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A complex type that controls whether CloudFront caches the response to requests using the specified HTTP methods. There are two choices:
 * * CloudFront caches responses to GET and HEAD requests.
 * * CloudFront caches responses to GET, HEAD, and OPTIONS requests.
 * If you pick the second choice for your Amazon S3 Origin, you may need to forward Access-Control-Request-Method, Access-Control-Request-Headers, and Origin headers for the responses to be cached correctly.
 *
 * @schema DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsAllowedMethodsCachedMethods
 */
export interface DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsAllowedMethodsCachedMethods {
  /**
   * @schema DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsAllowedMethodsCachedMethods#items
   */
  readonly items?: string[];

}

/**
 * Converts an object of type 'DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsAllowedMethodsCachedMethods' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsAllowedMethodsCachedMethods(obj: DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsAllowedMethodsCachedMethods | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'items': obj.items?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this field.
 * If you want to include cookies in the cache key, use CookiesConfig in a cache policy. See CachePolicy.
 * If you want to send cookies to the origin but not include them in the cache key, use CookiesConfig in an origin request policy. See OriginRequestPolicy.
 * A complex type that specifies whether you want CloudFront to forward cookies to the origin and, if so, which ones. For more information about forwarding cookies to the origin, see Caching Content Based on Cookies (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Cookies.html) in the Amazon CloudFront Developer Guide.
 *
 * @schema DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsForwardedValuesCookies
 */
export interface DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsForwardedValuesCookies {
  /**
   * @schema DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsForwardedValuesCookies#forward
   */
  readonly forward?: string;

  /**
   * Contains a list of cookie names.
   *
   * @schema DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsForwardedValuesCookies#whitelistedNames
   */
  readonly whitelistedNames?: DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsForwardedValuesCookiesWhitelistedNames;

}

/**
 * Converts an object of type 'DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsForwardedValuesCookies' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsForwardedValuesCookies(obj: DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsForwardedValuesCookies | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'forward': obj.forward,
    'whitelistedNames': toJson_DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsForwardedValuesCookiesWhitelistedNames(obj.whitelistedNames),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Contains a list of HTTP header names.
 *
 * @schema DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsForwardedValuesHeaders
 */
export interface DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsForwardedValuesHeaders {
  /**
   * @schema DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsForwardedValuesHeaders#items
   */
  readonly items?: string[];

}

/**
 * Converts an object of type 'DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsForwardedValuesHeaders' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsForwardedValuesHeaders(obj: DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsForwardedValuesHeaders | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'items': obj.items?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this field.
 * If you want to include query strings in the cache key, use QueryStringsConfig in a cache policy. See CachePolicy.
 * If you want to send query strings to the origin but not include them in the cache key, use QueryStringsConfig in an origin request policy. See OriginRequestPolicy.
 * A complex type that contains information about the query string parameters that you want CloudFront to use for caching for a cache behavior.
 *
 * @schema DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsForwardedValuesQueryStringCacheKeys
 */
export interface DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsForwardedValuesQueryStringCacheKeys {
  /**
   * @schema DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsForwardedValuesQueryStringCacheKeys#items
   */
  readonly items?: string[];

}

/**
 * Converts an object of type 'DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsForwardedValuesQueryStringCacheKeys' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsForwardedValuesQueryStringCacheKeys(obj: DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsForwardedValuesQueryStringCacheKeys | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'items': obj.items?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsFunctionAssociationsItems
 */
export interface DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsFunctionAssociationsItems {
  /**
   * @schema DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsFunctionAssociationsItems#eventType
   */
  readonly eventType?: string;

  /**
   * @schema DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsFunctionAssociationsItems#functionARN
   */
  readonly functionArn?: string;

}

/**
 * Converts an object of type 'DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsFunctionAssociationsItems' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsFunctionAssociationsItems(obj: DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsFunctionAssociationsItems | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'eventType': obj.eventType,
    'functionARN': obj.functionArn,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsLambdaFunctionAssociationsItems
 */
export interface DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsLambdaFunctionAssociationsItems {
  /**
   * @schema DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsLambdaFunctionAssociationsItems#eventType
   */
  readonly eventType?: string;

  /**
   * @schema DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsLambdaFunctionAssociationsItems#includeBody
   */
  readonly includeBody?: boolean;

  /**
   * @schema DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsLambdaFunctionAssociationsItems#lambdaFunctionARN
   */
  readonly lambdaFunctionArn?: string;

}

/**
 * Converts an object of type 'DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsLambdaFunctionAssociationsItems' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsLambdaFunctionAssociationsItems(obj: DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsLambdaFunctionAssociationsItems | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'eventType': obj.eventType,
    'includeBody': obj.includeBody,
    'lambdaFunctionARN': obj.lambdaFunctionArn,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Contains a list of cookie names.
 *
 * @schema DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorForwardedValuesCookiesWhitelistedNames
 */
export interface DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorForwardedValuesCookiesWhitelistedNames {
  /**
   * @schema DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorForwardedValuesCookiesWhitelistedNames#items
   */
  readonly items?: string[];

  /**
   * @schema DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorForwardedValuesCookiesWhitelistedNames#quantity
   */
  readonly quantity?: number;

}

/**
 * Converts an object of type 'DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorForwardedValuesCookiesWhitelistedNames' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorForwardedValuesCookiesWhitelistedNames(obj: DistributionSpecForProviderDistributionConfigDefaultCacheBehaviorForwardedValuesCookiesWhitelistedNames | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'items': obj.items?.map(y => y),
    'quantity': obj.quantity,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A complex data type for the status codes that you specify that, when returned by a primary origin, trigger CloudFront to failover to a second origin.
 *
 * @schema DistributionSpecForProviderDistributionConfigOriginGroupsItemsFailoverCriteriaStatusCodes
 */
export interface DistributionSpecForProviderDistributionConfigOriginGroupsItemsFailoverCriteriaStatusCodes {
  /**
   * List of status codes for origin failover.
   *
   * @schema DistributionSpecForProviderDistributionConfigOriginGroupsItemsFailoverCriteriaStatusCodes#items
   */
  readonly items?: number[];

}

/**
 * Converts an object of type 'DistributionSpecForProviderDistributionConfigOriginGroupsItemsFailoverCriteriaStatusCodes' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DistributionSpecForProviderDistributionConfigOriginGroupsItemsFailoverCriteriaStatusCodes(obj: DistributionSpecForProviderDistributionConfigOriginGroupsItemsFailoverCriteriaStatusCodes | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'items': obj.items?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DistributionSpecForProviderDistributionConfigOriginGroupsItemsMembersItems
 */
export interface DistributionSpecForProviderDistributionConfigOriginGroupsItemsMembersItems {
  /**
   * @schema DistributionSpecForProviderDistributionConfigOriginGroupsItemsMembersItems#originID
   */
  readonly originId?: string;

}

/**
 * Converts an object of type 'DistributionSpecForProviderDistributionConfigOriginGroupsItemsMembersItems' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DistributionSpecForProviderDistributionConfigOriginGroupsItemsMembersItems(obj: DistributionSpecForProviderDistributionConfigOriginGroupsItemsMembersItems | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'originID': obj.originId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DistributionSpecForProviderDistributionConfigOriginsItemsCustomHeadersItems
 */
export interface DistributionSpecForProviderDistributionConfigOriginsItemsCustomHeadersItems {
  /**
   * @schema DistributionSpecForProviderDistributionConfigOriginsItemsCustomHeadersItems#headerName
   */
  readonly headerName?: string;

  /**
   * @schema DistributionSpecForProviderDistributionConfigOriginsItemsCustomHeadersItems#headerValue
   */
  readonly headerValue?: string;

}

/**
 * Converts an object of type 'DistributionSpecForProviderDistributionConfigOriginsItemsCustomHeadersItems' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DistributionSpecForProviderDistributionConfigOriginsItemsCustomHeadersItems(obj: DistributionSpecForProviderDistributionConfigOriginsItemsCustomHeadersItems | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'headerName': obj.headerName,
    'headerValue': obj.headerValue,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A complex type that contains information about the SSL/TLS protocols that CloudFront can use when establishing an HTTPS connection with your origin.
 *
 * @schema DistributionSpecForProviderDistributionConfigOriginsItemsCustomOriginConfigOriginSslProtocols
 */
export interface DistributionSpecForProviderDistributionConfigOriginsItemsCustomOriginConfigOriginSslProtocols {
  /**
   * @schema DistributionSpecForProviderDistributionConfigOriginsItemsCustomOriginConfigOriginSslProtocols#items
   */
  readonly items?: string[];

}

/**
 * Converts an object of type 'DistributionSpecForProviderDistributionConfigOriginsItemsCustomOriginConfigOriginSslProtocols' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DistributionSpecForProviderDistributionConfigOriginsItemsCustomOriginConfigOriginSslProtocols(obj: DistributionSpecForProviderDistributionConfigOriginsItemsCustomOriginConfigOriginSslProtocols | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'items': obj.items?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Contains a list of cookie names.
 *
 * @schema DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsForwardedValuesCookiesWhitelistedNames
 */
export interface DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsForwardedValuesCookiesWhitelistedNames {
  /**
   * @schema DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsForwardedValuesCookiesWhitelistedNames#items
   */
  readonly items?: string[];

  /**
   * @schema DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsForwardedValuesCookiesWhitelistedNames#quantity
   */
  readonly quantity?: number;

}

/**
 * Converts an object of type 'DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsForwardedValuesCookiesWhitelistedNames' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsForwardedValuesCookiesWhitelistedNames(obj: DistributionSpecForProviderDistributionConfigCacheBehaviorsItemsForwardedValuesCookiesWhitelistedNames | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'items': obj.items?.map(y => y),
    'quantity': obj.quantity,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * ResponseHeadersPolicy is the Schema for the ResponseHeadersPolicies API
 *
 * @schema ResponseHeadersPolicy
 */
export class ResponseHeadersPolicy extends ApiObject {
  /**
   * Returns the apiVersion and kind for "ResponseHeadersPolicy"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'cloudfront.aws.crossplane.io/v1alpha1',
    kind: 'ResponseHeadersPolicy',
  }

  /**
   * Renders a Kubernetes manifest for "ResponseHeadersPolicy".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: ResponseHeadersPolicyProps): any {
    return {
      ...ResponseHeadersPolicy.GVK,
      ...toJson_ResponseHeadersPolicyProps(props),
    };
  }

  /**
   * Defines a "ResponseHeadersPolicy" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: ResponseHeadersPolicyProps) {
    super(scope, id, {
      ...ResponseHeadersPolicy.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...ResponseHeadersPolicy.GVK,
      ...toJson_ResponseHeadersPolicyProps(resolved),
    };
  }
}

/**
 * ResponseHeadersPolicy is the Schema for the ResponseHeadersPolicies API
 *
 * @schema ResponseHeadersPolicy
 */
export interface ResponseHeadersPolicyProps {
  /**
   * @schema ResponseHeadersPolicy#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * ResponseHeadersPolicySpec defines the desired state of ResponseHeadersPolicy
   *
   * @schema ResponseHeadersPolicy#spec
   */
  readonly spec: ResponseHeadersPolicySpec;

}

/**
 * Converts an object of type 'ResponseHeadersPolicyProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResponseHeadersPolicyProps(obj: ResponseHeadersPolicyProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_ResponseHeadersPolicySpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ResponseHeadersPolicySpec defines the desired state of ResponseHeadersPolicy
 *
 * @schema ResponseHeadersPolicySpec
 */
export interface ResponseHeadersPolicySpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
   *
   * @schema ResponseHeadersPolicySpec#deletionPolicy
   */
  readonly deletionPolicy?: ResponseHeadersPolicySpecDeletionPolicy;

  /**
   * ResponseHeadersPolicyParameters defines the desired state of ResponseHeadersPolicy
   *
   * @schema ResponseHeadersPolicySpec#forProvider
   */
  readonly forProvider: ResponseHeadersPolicySpecForProvider;

  /**
   * THIS IS A BETA FIELD. It is on by default but can be opted out through a Crossplane feature flag. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
   *
   * @schema ResponseHeadersPolicySpec#managementPolicies
   */
  readonly managementPolicies?: ResponseHeadersPolicySpecManagementPolicies[];

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema ResponseHeadersPolicySpec#providerConfigRef
   */
  readonly providerConfigRef?: ResponseHeadersPolicySpecProviderConfigRef;

  /**
   * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema ResponseHeadersPolicySpec#publishConnectionDetailsTo
   */
  readonly publishConnectionDetailsTo?: ResponseHeadersPolicySpecPublishConnectionDetailsTo;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
   *
   * @schema ResponseHeadersPolicySpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: ResponseHeadersPolicySpecWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'ResponseHeadersPolicySpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResponseHeadersPolicySpec(obj: ResponseHeadersPolicySpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'deletionPolicy': obj.deletionPolicy,
    'forProvider': toJson_ResponseHeadersPolicySpecForProvider(obj.forProvider),
    'managementPolicies': obj.managementPolicies?.map(y => y),
    'providerConfigRef': toJson_ResponseHeadersPolicySpecProviderConfigRef(obj.providerConfigRef),
    'publishConnectionDetailsTo': toJson_ResponseHeadersPolicySpecPublishConnectionDetailsTo(obj.publishConnectionDetailsTo),
    'writeConnectionSecretToRef': toJson_ResponseHeadersPolicySpecWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
 *
 * @schema ResponseHeadersPolicySpecDeletionPolicy
 */
export enum ResponseHeadersPolicySpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * ResponseHeadersPolicyParameters defines the desired state of ResponseHeadersPolicy
 *
 * @schema ResponseHeadersPolicySpecForProvider
 */
export interface ResponseHeadersPolicySpecForProvider {
  /**
   * Region is which region the ResponseHeadersPolicy will be created.
   *
   * @schema ResponseHeadersPolicySpecForProvider#region
   */
  readonly region: string;

  /**
   * Contains metadata about the response headers policy, and a set of configurations that specify the HTTP headers.
   *
   * @schema ResponseHeadersPolicySpecForProvider#responseHeadersPolicyConfig
   */
  readonly responseHeadersPolicyConfig: ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfig;

}

/**
 * Converts an object of type 'ResponseHeadersPolicySpecForProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResponseHeadersPolicySpecForProvider(obj: ResponseHeadersPolicySpecForProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'region': obj.region,
    'responseHeadersPolicyConfig': toJson_ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfig(obj.responseHeadersPolicyConfig),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A ManagementAction represents an action that the Crossplane controllers can take on an external resource.
 *
 * @schema ResponseHeadersPolicySpecManagementPolicies
 */
export enum ResponseHeadersPolicySpecManagementPolicies {
  /** Observe */
  OBSERVE = "Observe",
  /** Create */
  CREATE = "Create",
  /** Update */
  UPDATE = "Update",
  /** Delete */
  DELETE = "Delete",
  /** LateInitialize */
  LATE_INITIALIZE = "LateInitialize",
  /** * */
  VALUE_ASTERISK = "*",
}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema ResponseHeadersPolicySpecProviderConfigRef
 */
export interface ResponseHeadersPolicySpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema ResponseHeadersPolicySpecProviderConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema ResponseHeadersPolicySpecProviderConfigRef#policy
   */
  readonly policy?: ResponseHeadersPolicySpecProviderConfigRefPolicy;

}

/**
 * Converts an object of type 'ResponseHeadersPolicySpecProviderConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResponseHeadersPolicySpecProviderConfigRef(obj: ResponseHeadersPolicySpecProviderConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_ResponseHeadersPolicySpecProviderConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema ResponseHeadersPolicySpecPublishConnectionDetailsTo
 */
export interface ResponseHeadersPolicySpecPublishConnectionDetailsTo {
  /**
   * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
   *
   * @schema ResponseHeadersPolicySpecPublishConnectionDetailsTo#configRef
   */
  readonly configRef?: ResponseHeadersPolicySpecPublishConnectionDetailsToConfigRef;

  /**
   * Metadata is the metadata for connection secret.
   *
   * @schema ResponseHeadersPolicySpecPublishConnectionDetailsTo#metadata
   */
  readonly metadata?: ResponseHeadersPolicySpecPublishConnectionDetailsToMetadata;

  /**
   * Name is the name of the connection secret.
   *
   * @schema ResponseHeadersPolicySpecPublishConnectionDetailsTo#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'ResponseHeadersPolicySpecPublishConnectionDetailsTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResponseHeadersPolicySpecPublishConnectionDetailsTo(obj: ResponseHeadersPolicySpecPublishConnectionDetailsTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configRef': toJson_ResponseHeadersPolicySpecPublishConnectionDetailsToConfigRef(obj.configRef),
    'metadata': toJson_ResponseHeadersPolicySpecPublishConnectionDetailsToMetadata(obj.metadata),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
 *
 * @schema ResponseHeadersPolicySpecWriteConnectionSecretToRef
 */
export interface ResponseHeadersPolicySpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema ResponseHeadersPolicySpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema ResponseHeadersPolicySpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'ResponseHeadersPolicySpecWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResponseHeadersPolicySpecWriteConnectionSecretToRef(obj: ResponseHeadersPolicySpecWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Contains metadata about the response headers policy, and a set of configurations that specify the HTTP headers.
 *
 * @schema ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfig
 */
export interface ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfig {
  /**
   * @schema ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfig#comment
   */
  readonly comment?: string;

  /**
   * A configuration for a set of HTTP response headers that are used for cross-origin resource sharing (CORS). CloudFront adds these headers to HTTP responses that it sends for CORS requests that match a cache behavior associated with this response headers policy.
   * For more information about CORS, see Cross-Origin Resource Sharing (CORS) (https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) in the MDN Web Docs.
   *
   * @schema ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfig#corsConfig
   */
  readonly corsConfig?: ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigCorsConfig;

  /**
   * A list of HTTP response header names and their values. CloudFront includes these headers in HTTP responses that it sends for requests that match a cache behavior that's associated with this response headers policy.
   *
   * @schema ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfig#customHeadersConfig
   */
  readonly customHeadersConfig?: ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigCustomHeadersConfig;

  /**
   * @schema ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfig#name
   */
  readonly name?: string;

  /**
   * A list of HTTP header names that CloudFront removes from HTTP responses to requests that match the cache behavior that this response headers policy is attached to.
   *
   * @schema ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfig#removeHeadersConfig
   */
  readonly removeHeadersConfig?: ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigRemoveHeadersConfig;

  /**
   * A configuration for a set of security-related HTTP response headers. CloudFront adds these headers to HTTP responses that it sends for requests that match a cache behavior associated with this response headers policy.
   *
   * @schema ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfig#securityHeadersConfig
   */
  readonly securityHeadersConfig?: ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigSecurityHeadersConfig;

  /**
   * A configuration for enabling the Server-Timing header in HTTP responses sent from CloudFront. CloudFront adds this header to HTTP responses that it sends in response to requests that match a cache behavior that's associated with this response headers policy.
   * You can use the Server-Timing header to view metrics that can help you gain insights about the behavior and performance of CloudFront. For example, you can see which cache layer served a cache hit, or the first byte latency from the origin when there was a cache miss. You can use the metrics in the Server-Timing header to troubleshoot issues or test the efficiency of your CloudFront configuration. For more information, see Server-Timing header (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/understanding-response-headers-policies.html#server-timing-header) in the Amazon CloudFront Developer Guide.
   *
   * @schema ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfig#serverTimingHeadersConfig
   */
  readonly serverTimingHeadersConfig?: ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigServerTimingHeadersConfig;

}

/**
 * Converts an object of type 'ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfig(obj: ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'comment': obj.comment,
    'corsConfig': toJson_ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigCorsConfig(obj.corsConfig),
    'customHeadersConfig': toJson_ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigCustomHeadersConfig(obj.customHeadersConfig),
    'name': obj.name,
    'removeHeadersConfig': toJson_ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigRemoveHeadersConfig(obj.removeHeadersConfig),
    'securityHeadersConfig': toJson_ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigSecurityHeadersConfig(obj.securityHeadersConfig),
    'serverTimingHeadersConfig': toJson_ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigServerTimingHeadersConfig(obj.serverTimingHeadersConfig),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema ResponseHeadersPolicySpecProviderConfigRefPolicy
 */
export interface ResponseHeadersPolicySpecProviderConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema ResponseHeadersPolicySpecProviderConfigRefPolicy#resolution
   */
  readonly resolution?: ResponseHeadersPolicySpecProviderConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema ResponseHeadersPolicySpecProviderConfigRefPolicy#resolve
   */
  readonly resolve?: ResponseHeadersPolicySpecProviderConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'ResponseHeadersPolicySpecProviderConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResponseHeadersPolicySpecProviderConfigRefPolicy(obj: ResponseHeadersPolicySpecProviderConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
 *
 * @schema ResponseHeadersPolicySpecPublishConnectionDetailsToConfigRef
 */
export interface ResponseHeadersPolicySpecPublishConnectionDetailsToConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema ResponseHeadersPolicySpecPublishConnectionDetailsToConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema ResponseHeadersPolicySpecPublishConnectionDetailsToConfigRef#policy
   */
  readonly policy?: ResponseHeadersPolicySpecPublishConnectionDetailsToConfigRefPolicy;

}

/**
 * Converts an object of type 'ResponseHeadersPolicySpecPublishConnectionDetailsToConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResponseHeadersPolicySpecPublishConnectionDetailsToConfigRef(obj: ResponseHeadersPolicySpecPublishConnectionDetailsToConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_ResponseHeadersPolicySpecPublishConnectionDetailsToConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Metadata is the metadata for connection secret.
 *
 * @schema ResponseHeadersPolicySpecPublishConnectionDetailsToMetadata
 */
export interface ResponseHeadersPolicySpecPublishConnectionDetailsToMetadata {
  /**
   * Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
   *
   * @schema ResponseHeadersPolicySpecPublishConnectionDetailsToMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
   *
   * @schema ResponseHeadersPolicySpecPublishConnectionDetailsToMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
   *
   * @schema ResponseHeadersPolicySpecPublishConnectionDetailsToMetadata#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'ResponseHeadersPolicySpecPublishConnectionDetailsToMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResponseHeadersPolicySpecPublishConnectionDetailsToMetadata(obj: ResponseHeadersPolicySpecPublishConnectionDetailsToMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A configuration for a set of HTTP response headers that are used for cross-origin resource sharing (CORS). CloudFront adds these headers to HTTP responses that it sends for CORS requests that match a cache behavior associated with this response headers policy.
 * For more information about CORS, see Cross-Origin Resource Sharing (CORS) (https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) in the MDN Web Docs.
 *
 * @schema ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigCorsConfig
 */
export interface ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigCorsConfig {
  /**
   * @schema ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigCorsConfig#accessControlAllowCredentials
   */
  readonly accessControlAllowCredentials?: boolean;

  /**
   * A list of HTTP header names that CloudFront includes as values for the Access-Control-Allow-Headers HTTP response header.
   * For more information about the Access-Control-Allow-Headers HTTP response header, see Access-Control-Allow-Headers (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Headers) in the MDN Web Docs.
   *
   * @schema ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigCorsConfig#accessControlAllowHeaders
   */
  readonly accessControlAllowHeaders?: ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigCorsConfigAccessControlAllowHeaders;

  /**
   * A list of HTTP methods that CloudFront includes as values for the Access-Control-Allow-Methods HTTP response header.
   * For more information about the Access-Control-Allow-Methods HTTP response header, see Access-Control-Allow-Methods (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Methods) in the MDN Web Docs.
   *
   * @schema ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigCorsConfig#accessControlAllowMethods
   */
  readonly accessControlAllowMethods?: ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigCorsConfigAccessControlAllowMethods;

  /**
   * A list of origins (domain names) that CloudFront can use as the value for the Access-Control-Allow-Origin HTTP response header.
   * For more information about the Access-Control-Allow-Origin HTTP response header, see Access-Control-Allow-Origin (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin) in the MDN Web Docs.
   *
   * @schema ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigCorsConfig#accessControlAllowOrigins
   */
  readonly accessControlAllowOrigins?: ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigCorsConfigAccessControlAllowOrigins;

  /**
   * A list of HTTP headers that CloudFront includes as values for the Access-Control-Expose-Headers HTTP response header.
   * For more information about the Access-Control-Expose-Headers HTTP response header, see Access-Control-Expose-Headers (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Expose-Headers) in the MDN Web Docs.
   *
   * @schema ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigCorsConfig#accessControlExposeHeaders
   */
  readonly accessControlExposeHeaders?: ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigCorsConfigAccessControlExposeHeaders;

  /**
   * @schema ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigCorsConfig#accessControlMaxAgeSec
   */
  readonly accessControlMaxAgeSec?: number;

  /**
   * @schema ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigCorsConfig#originOverride
   */
  readonly originOverride?: boolean;

}

/**
 * Converts an object of type 'ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigCorsConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigCorsConfig(obj: ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigCorsConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'accessControlAllowCredentials': obj.accessControlAllowCredentials,
    'accessControlAllowHeaders': toJson_ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigCorsConfigAccessControlAllowHeaders(obj.accessControlAllowHeaders),
    'accessControlAllowMethods': toJson_ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigCorsConfigAccessControlAllowMethods(obj.accessControlAllowMethods),
    'accessControlAllowOrigins': toJson_ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigCorsConfigAccessControlAllowOrigins(obj.accessControlAllowOrigins),
    'accessControlExposeHeaders': toJson_ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigCorsConfigAccessControlExposeHeaders(obj.accessControlExposeHeaders),
    'accessControlMaxAgeSec': obj.accessControlMaxAgeSec,
    'originOverride': obj.originOverride,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A list of HTTP response header names and their values. CloudFront includes these headers in HTTP responses that it sends for requests that match a cache behavior that's associated with this response headers policy.
 *
 * @schema ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigCustomHeadersConfig
 */
export interface ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigCustomHeadersConfig {
  /**
   * @schema ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigCustomHeadersConfig#items
   */
  readonly items?: ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigCustomHeadersConfigItems[];

}

/**
 * Converts an object of type 'ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigCustomHeadersConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigCustomHeadersConfig(obj: ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigCustomHeadersConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'items': obj.items?.map(y => toJson_ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigCustomHeadersConfigItems(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A list of HTTP header names that CloudFront removes from HTTP responses to requests that match the cache behavior that this response headers policy is attached to.
 *
 * @schema ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigRemoveHeadersConfig
 */
export interface ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigRemoveHeadersConfig {
  /**
   * @schema ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigRemoveHeadersConfig#items
   */
  readonly items?: ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigRemoveHeadersConfigItems[];

  /**
   * @schema ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigRemoveHeadersConfig#quantity
   */
  readonly quantity?: number;

}

/**
 * Converts an object of type 'ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigRemoveHeadersConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigRemoveHeadersConfig(obj: ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigRemoveHeadersConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'items': obj.items?.map(y => toJson_ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigRemoveHeadersConfigItems(y)),
    'quantity': obj.quantity,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A configuration for a set of security-related HTTP response headers. CloudFront adds these headers to HTTP responses that it sends for requests that match a cache behavior associated with this response headers policy.
 *
 * @schema ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigSecurityHeadersConfig
 */
export interface ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigSecurityHeadersConfig {
  /**
   * The policy directives and their values that CloudFront includes as values for the Content-Security-Policy HTTP response header.
   * For more information about the Content-Security-Policy HTTP response header, see Content-Security-Policy (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy) in the MDN Web Docs.
   *
   * @schema ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigSecurityHeadersConfig#contentSecurityPolicy
   */
  readonly contentSecurityPolicy?: ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigSecurityHeadersConfigContentSecurityPolicy;

  /**
   * Determines whether CloudFront includes the X-Content-Type-Options HTTP response header with its value set to nosniff.
   * For more information about the X-Content-Type-Options HTTP response header, see X-Content-Type-Options (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options) in the MDN Web Docs.
   *
   * @schema ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigSecurityHeadersConfig#contentTypeOptions
   */
  readonly contentTypeOptions?: ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigSecurityHeadersConfigContentTypeOptions;

  /**
   * Determines whether CloudFront includes the X-Frame-Options HTTP response header and the header's value.
   * For more information about the X-Frame-Options HTTP response header, see X-Frame-Options (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options) in the MDN Web Docs.
   *
   * @schema ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigSecurityHeadersConfig#frameOptions
   */
  readonly frameOptions?: ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigSecurityHeadersConfigFrameOptions;

  /**
   * Determines whether CloudFront includes the Referrer-Policy HTTP response header and the header's value.
   * For more information about the Referrer-Policy HTTP response header, see Referrer-Policy (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy) in the MDN Web Docs.
   *
   * @schema ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigSecurityHeadersConfig#referrerPolicy
   */
  readonly referrerPolicy?: ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigSecurityHeadersConfigReferrerPolicy;

  /**
   * Determines whether CloudFront includes the Strict-Transport-Security HTTP response header and the header's value.
   * For more information about the Strict-Transport-Security HTTP response header, see Strict-Transport-Security (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security) in the MDN Web Docs.
   *
   * @schema ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigSecurityHeadersConfig#strictTransportSecurity
   */
  readonly strictTransportSecurity?: ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigSecurityHeadersConfigStrictTransportSecurity;

  /**
   * Determines whether CloudFront includes the X-XSS-Protection HTTP response header and the header's value.
   * For more information about the X-XSS-Protection HTTP response header, see X-XSS-Protection (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection) in the MDN Web Docs.
   *
   * @schema ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigSecurityHeadersConfig#xSSProtection
   */
  readonly xSsProtection?: ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigSecurityHeadersConfigXSsProtection;

}

/**
 * Converts an object of type 'ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigSecurityHeadersConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigSecurityHeadersConfig(obj: ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigSecurityHeadersConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'contentSecurityPolicy': toJson_ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigSecurityHeadersConfigContentSecurityPolicy(obj.contentSecurityPolicy),
    'contentTypeOptions': toJson_ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigSecurityHeadersConfigContentTypeOptions(obj.contentTypeOptions),
    'frameOptions': toJson_ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigSecurityHeadersConfigFrameOptions(obj.frameOptions),
    'referrerPolicy': toJson_ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigSecurityHeadersConfigReferrerPolicy(obj.referrerPolicy),
    'strictTransportSecurity': toJson_ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigSecurityHeadersConfigStrictTransportSecurity(obj.strictTransportSecurity),
    'xSSProtection': toJson_ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigSecurityHeadersConfigXSsProtection(obj.xSsProtection),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A configuration for enabling the Server-Timing header in HTTP responses sent from CloudFront. CloudFront adds this header to HTTP responses that it sends in response to requests that match a cache behavior that's associated with this response headers policy.
 * You can use the Server-Timing header to view metrics that can help you gain insights about the behavior and performance of CloudFront. For example, you can see which cache layer served a cache hit, or the first byte latency from the origin when there was a cache miss. You can use the metrics in the Server-Timing header to troubleshoot issues or test the efficiency of your CloudFront configuration. For more information, see Server-Timing header (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/understanding-response-headers-policies.html#server-timing-header) in the Amazon CloudFront Developer Guide.
 *
 * @schema ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigServerTimingHeadersConfig
 */
export interface ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigServerTimingHeadersConfig {
  /**
   * @schema ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigServerTimingHeadersConfig#enabled
   */
  readonly enabled?: boolean;

  /**
   * @schema ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigServerTimingHeadersConfig#samplingRate
   */
  readonly samplingRate?: number;

}

/**
 * Converts an object of type 'ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigServerTimingHeadersConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigServerTimingHeadersConfig(obj: ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigServerTimingHeadersConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
    'samplingRate': obj.samplingRate,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema ResponseHeadersPolicySpecProviderConfigRefPolicyResolution
 */
export enum ResponseHeadersPolicySpecProviderConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema ResponseHeadersPolicySpecProviderConfigRefPolicyResolve
 */
export enum ResponseHeadersPolicySpecProviderConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Policies for referencing.
 *
 * @schema ResponseHeadersPolicySpecPublishConnectionDetailsToConfigRefPolicy
 */
export interface ResponseHeadersPolicySpecPublishConnectionDetailsToConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema ResponseHeadersPolicySpecPublishConnectionDetailsToConfigRefPolicy#resolution
   */
  readonly resolution?: ResponseHeadersPolicySpecPublishConnectionDetailsToConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema ResponseHeadersPolicySpecPublishConnectionDetailsToConfigRefPolicy#resolve
   */
  readonly resolve?: ResponseHeadersPolicySpecPublishConnectionDetailsToConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'ResponseHeadersPolicySpecPublishConnectionDetailsToConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResponseHeadersPolicySpecPublishConnectionDetailsToConfigRefPolicy(obj: ResponseHeadersPolicySpecPublishConnectionDetailsToConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A list of HTTP header names that CloudFront includes as values for the Access-Control-Allow-Headers HTTP response header.
 * For more information about the Access-Control-Allow-Headers HTTP response header, see Access-Control-Allow-Headers (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Headers) in the MDN Web Docs.
 *
 * @schema ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigCorsConfigAccessControlAllowHeaders
 */
export interface ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigCorsConfigAccessControlAllowHeaders {
  /**
   * @schema ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigCorsConfigAccessControlAllowHeaders#items
   */
  readonly items?: string[];

}

/**
 * Converts an object of type 'ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigCorsConfigAccessControlAllowHeaders' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigCorsConfigAccessControlAllowHeaders(obj: ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigCorsConfigAccessControlAllowHeaders | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'items': obj.items?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A list of HTTP methods that CloudFront includes as values for the Access-Control-Allow-Methods HTTP response header.
 * For more information about the Access-Control-Allow-Methods HTTP response header, see Access-Control-Allow-Methods (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Methods) in the MDN Web Docs.
 *
 * @schema ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigCorsConfigAccessControlAllowMethods
 */
export interface ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigCorsConfigAccessControlAllowMethods {
  /**
   * @schema ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigCorsConfigAccessControlAllowMethods#items
   */
  readonly items?: string[];

}

/**
 * Converts an object of type 'ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigCorsConfigAccessControlAllowMethods' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigCorsConfigAccessControlAllowMethods(obj: ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigCorsConfigAccessControlAllowMethods | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'items': obj.items?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A list of origins (domain names) that CloudFront can use as the value for the Access-Control-Allow-Origin HTTP response header.
 * For more information about the Access-Control-Allow-Origin HTTP response header, see Access-Control-Allow-Origin (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin) in the MDN Web Docs.
 *
 * @schema ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigCorsConfigAccessControlAllowOrigins
 */
export interface ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigCorsConfigAccessControlAllowOrigins {
  /**
   * @schema ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigCorsConfigAccessControlAllowOrigins#items
   */
  readonly items?: string[];

}

/**
 * Converts an object of type 'ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigCorsConfigAccessControlAllowOrigins' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigCorsConfigAccessControlAllowOrigins(obj: ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigCorsConfigAccessControlAllowOrigins | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'items': obj.items?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A list of HTTP headers that CloudFront includes as values for the Access-Control-Expose-Headers HTTP response header.
 * For more information about the Access-Control-Expose-Headers HTTP response header, see Access-Control-Expose-Headers (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Expose-Headers) in the MDN Web Docs.
 *
 * @schema ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigCorsConfigAccessControlExposeHeaders
 */
export interface ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigCorsConfigAccessControlExposeHeaders {
  /**
   * @schema ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigCorsConfigAccessControlExposeHeaders#items
   */
  readonly items?: string[];

}

/**
 * Converts an object of type 'ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigCorsConfigAccessControlExposeHeaders' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigCorsConfigAccessControlExposeHeaders(obj: ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigCorsConfigAccessControlExposeHeaders | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'items': obj.items?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigCustomHeadersConfigItems
 */
export interface ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigCustomHeadersConfigItems {
  /**
   * @schema ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigCustomHeadersConfigItems#header
   */
  readonly header?: string;

  /**
   * @schema ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigCustomHeadersConfigItems#override
   */
  readonly override?: boolean;

  /**
   * @schema ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigCustomHeadersConfigItems#value
   */
  readonly value?: string;

}

/**
 * Converts an object of type 'ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigCustomHeadersConfigItems' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigCustomHeadersConfigItems(obj: ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigCustomHeadersConfigItems | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'header': obj.header,
    'override': obj.override,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigRemoveHeadersConfigItems
 */
export interface ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigRemoveHeadersConfigItems {
  /**
   * @schema ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigRemoveHeadersConfigItems#header
   */
  readonly header?: string;

}

/**
 * Converts an object of type 'ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigRemoveHeadersConfigItems' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigRemoveHeadersConfigItems(obj: ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigRemoveHeadersConfigItems | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'header': obj.header,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The policy directives and their values that CloudFront includes as values for the Content-Security-Policy HTTP response header.
 * For more information about the Content-Security-Policy HTTP response header, see Content-Security-Policy (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy) in the MDN Web Docs.
 *
 * @schema ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigSecurityHeadersConfigContentSecurityPolicy
 */
export interface ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigSecurityHeadersConfigContentSecurityPolicy {
  /**
   * @schema ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigSecurityHeadersConfigContentSecurityPolicy#contentSecurityPolicy
   */
  readonly contentSecurityPolicy?: string;

  /**
   * @schema ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigSecurityHeadersConfigContentSecurityPolicy#override
   */
  readonly override?: boolean;

}

/**
 * Converts an object of type 'ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigSecurityHeadersConfigContentSecurityPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigSecurityHeadersConfigContentSecurityPolicy(obj: ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigSecurityHeadersConfigContentSecurityPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'contentSecurityPolicy': obj.contentSecurityPolicy,
    'override': obj.override,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Determines whether CloudFront includes the X-Content-Type-Options HTTP response header with its value set to nosniff.
 * For more information about the X-Content-Type-Options HTTP response header, see X-Content-Type-Options (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options) in the MDN Web Docs.
 *
 * @schema ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigSecurityHeadersConfigContentTypeOptions
 */
export interface ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigSecurityHeadersConfigContentTypeOptions {
  /**
   * @schema ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigSecurityHeadersConfigContentTypeOptions#override
   */
  readonly override?: boolean;

}

/**
 * Converts an object of type 'ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigSecurityHeadersConfigContentTypeOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigSecurityHeadersConfigContentTypeOptions(obj: ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigSecurityHeadersConfigContentTypeOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'override': obj.override,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Determines whether CloudFront includes the X-Frame-Options HTTP response header and the header's value.
 * For more information about the X-Frame-Options HTTP response header, see X-Frame-Options (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options) in the MDN Web Docs.
 *
 * @schema ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigSecurityHeadersConfigFrameOptions
 */
export interface ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigSecurityHeadersConfigFrameOptions {
  /**
   * @schema ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigSecurityHeadersConfigFrameOptions#frameOption
   */
  readonly frameOption?: string;

  /**
   * @schema ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigSecurityHeadersConfigFrameOptions#override
   */
  readonly override?: boolean;

}

/**
 * Converts an object of type 'ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigSecurityHeadersConfigFrameOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigSecurityHeadersConfigFrameOptions(obj: ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigSecurityHeadersConfigFrameOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'frameOption': obj.frameOption,
    'override': obj.override,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Determines whether CloudFront includes the Referrer-Policy HTTP response header and the header's value.
 * For more information about the Referrer-Policy HTTP response header, see Referrer-Policy (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy) in the MDN Web Docs.
 *
 * @schema ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigSecurityHeadersConfigReferrerPolicy
 */
export interface ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigSecurityHeadersConfigReferrerPolicy {
  /**
   * @schema ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigSecurityHeadersConfigReferrerPolicy#override
   */
  readonly override?: boolean;

  /**
   * @schema ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigSecurityHeadersConfigReferrerPolicy#referrerPolicy
   */
  readonly referrerPolicy?: string;

}

/**
 * Converts an object of type 'ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigSecurityHeadersConfigReferrerPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigSecurityHeadersConfigReferrerPolicy(obj: ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigSecurityHeadersConfigReferrerPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'override': obj.override,
    'referrerPolicy': obj.referrerPolicy,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Determines whether CloudFront includes the Strict-Transport-Security HTTP response header and the header's value.
 * For more information about the Strict-Transport-Security HTTP response header, see Strict-Transport-Security (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security) in the MDN Web Docs.
 *
 * @schema ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigSecurityHeadersConfigStrictTransportSecurity
 */
export interface ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigSecurityHeadersConfigStrictTransportSecurity {
  /**
   * @schema ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigSecurityHeadersConfigStrictTransportSecurity#accessControlMaxAgeSec
   */
  readonly accessControlMaxAgeSec?: number;

  /**
   * @schema ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigSecurityHeadersConfigStrictTransportSecurity#includeSubdomains
   */
  readonly includeSubdomains?: boolean;

  /**
   * @schema ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigSecurityHeadersConfigStrictTransportSecurity#override
   */
  readonly override?: boolean;

  /**
   * @schema ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigSecurityHeadersConfigStrictTransportSecurity#preload
   */
  readonly preload?: boolean;

}

/**
 * Converts an object of type 'ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigSecurityHeadersConfigStrictTransportSecurity' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigSecurityHeadersConfigStrictTransportSecurity(obj: ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigSecurityHeadersConfigStrictTransportSecurity | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'accessControlMaxAgeSec': obj.accessControlMaxAgeSec,
    'includeSubdomains': obj.includeSubdomains,
    'override': obj.override,
    'preload': obj.preload,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Determines whether CloudFront includes the X-XSS-Protection HTTP response header and the header's value.
 * For more information about the X-XSS-Protection HTTP response header, see X-XSS-Protection (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection) in the MDN Web Docs.
 *
 * @schema ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigSecurityHeadersConfigXSsProtection
 */
export interface ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigSecurityHeadersConfigXSsProtection {
  /**
   * @schema ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigSecurityHeadersConfigXSsProtection#modeBlock
   */
  readonly modeBlock?: boolean;

  /**
   * @schema ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigSecurityHeadersConfigXSsProtection#override
   */
  readonly override?: boolean;

  /**
   * @schema ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigSecurityHeadersConfigXSsProtection#protection
   */
  readonly protection?: boolean;

  /**
   * @schema ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigSecurityHeadersConfigXSsProtection#reportURI
   */
  readonly reportUri?: string;

}

/**
 * Converts an object of type 'ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigSecurityHeadersConfigXSsProtection' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigSecurityHeadersConfigXSsProtection(obj: ResponseHeadersPolicySpecForProviderResponseHeadersPolicyConfigSecurityHeadersConfigXSsProtection | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'modeBlock': obj.modeBlock,
    'override': obj.override,
    'protection': obj.protection,
    'reportURI': obj.reportUri,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema ResponseHeadersPolicySpecPublishConnectionDetailsToConfigRefPolicyResolution
 */
export enum ResponseHeadersPolicySpecPublishConnectionDetailsToConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema ResponseHeadersPolicySpecPublishConnectionDetailsToConfigRefPolicyResolve
 */
export enum ResponseHeadersPolicySpecPublishConnectionDetailsToConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

