// @ts-nocheck
// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 * ProvisionedProduct is the Schema for the ProvisionedProducts API
 *
 * @schema ProvisionedProduct
 */
export class ProvisionedProduct extends ApiObject {
  /**
   * Returns the apiVersion and kind for "ProvisionedProduct"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'servicecatalog.aws.crossplane.io/v1alpha1',
    kind: 'ProvisionedProduct',
  }

  /**
   * Renders a Kubernetes manifest for "ProvisionedProduct".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: ProvisionedProductProps): any {
    return {
      ...ProvisionedProduct.GVK,
      ...toJson_ProvisionedProductProps(props),
    };
  }

  /**
   * Defines a "ProvisionedProduct" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: ProvisionedProductProps) {
    super(scope, id, {
      ...ProvisionedProduct.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...ProvisionedProduct.GVK,
      ...toJson_ProvisionedProductProps(resolved),
    };
  }
}

/**
 * ProvisionedProduct is the Schema for the ProvisionedProducts API
 *
 * @schema ProvisionedProduct
 */
export interface ProvisionedProductProps {
  /**
   * @schema ProvisionedProduct#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * ProvisionedProductSpec defines the desired state of ProvisionedProduct
   *
   * @schema ProvisionedProduct#spec
   */
  readonly spec: ProvisionedProductSpec;

}

/**
 * Converts an object of type 'ProvisionedProductProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProvisionedProductProps(obj: ProvisionedProductProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_ProvisionedProductSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ProvisionedProductSpec defines the desired state of ProvisionedProduct
 *
 * @schema ProvisionedProductSpec
 */
export interface ProvisionedProductSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
   *
   * @schema ProvisionedProductSpec#deletionPolicy
   */
  readonly deletionPolicy?: ProvisionedProductSpecDeletionPolicy;

  /**
   * ProvisionedProductParameters defines the desired state of ProvisionedProduct
   *
   * @schema ProvisionedProductSpec#forProvider
   */
  readonly forProvider: ProvisionedProductSpecForProvider;

  /**
   * THIS IS A BETA FIELD. It is on by default but can be opted out through a Crossplane feature flag. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
   *
   * @schema ProvisionedProductSpec#managementPolicies
   */
  readonly managementPolicies?: ProvisionedProductSpecManagementPolicies[];

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema ProvisionedProductSpec#providerConfigRef
   */
  readonly providerConfigRef?: ProvisionedProductSpecProviderConfigRef;

  /**
   * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema ProvisionedProductSpec#publishConnectionDetailsTo
   */
  readonly publishConnectionDetailsTo?: ProvisionedProductSpecPublishConnectionDetailsTo;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
   *
   * @schema ProvisionedProductSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: ProvisionedProductSpecWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'ProvisionedProductSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProvisionedProductSpec(obj: ProvisionedProductSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'deletionPolicy': obj.deletionPolicy,
    'forProvider': toJson_ProvisionedProductSpecForProvider(obj.forProvider),
    'managementPolicies': obj.managementPolicies?.map(y => y),
    'providerConfigRef': toJson_ProvisionedProductSpecProviderConfigRef(obj.providerConfigRef),
    'publishConnectionDetailsTo': toJson_ProvisionedProductSpecPublishConnectionDetailsTo(obj.publishConnectionDetailsTo),
    'writeConnectionSecretToRef': toJson_ProvisionedProductSpecWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
 *
 * @schema ProvisionedProductSpecDeletionPolicy
 */
export enum ProvisionedProductSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * ProvisionedProductParameters defines the desired state of ProvisionedProduct
 *
 * @schema ProvisionedProductSpecForProvider
 */
export interface ProvisionedProductSpecForProvider {
  /**
   * The language code.
   * * jp - Japanese
   * * zh - Chinese
   *
   * @schema ProvisionedProductSpecForProvider#acceptLanguage
   */
  readonly acceptLanguage?: string;

  /**
   * Passed to CloudFormation. The SNS topic ARNs to which to publish stack-related events.
   *
   * @schema ProvisionedProductSpecForProvider#notificationARNs
   */
  readonly notificationArNs?: string[];

  /**
   * The path identifier of the product. This value is optional if the product has a default path, and required if the product has more than one path. To list the paths for a product, use ListLaunchPaths. You must provide the name or ID, but not both.
   *
   * @schema ProvisionedProductSpecForProvider#pathID
   */
  readonly pathId?: string;

  /**
   * The name of the path. You must provide the name or ID, but not both.
   *
   * @schema ProvisionedProductSpecForProvider#pathName
   */
  readonly pathName?: string;

  /**
   * The product identifier. You must provide the name or ID, but not both.
   *
   * @schema ProvisionedProductSpecForProvider#productID
   */
  readonly productId?: string;

  /**
   * The name of the product. You must provide the name or ID, but not both.
   *
   * @schema ProvisionedProductSpecForProvider#productName
   */
  readonly productName?: string;

  /**
   * The identifier of the provisioning artifact. You must provide the name or ID, but not both.
   *
   * @schema ProvisionedProductSpecForProvider#provisioningArtifactID
   */
  readonly provisioningArtifactId?: string;

  /**
   * The name of the provisioning artifact. You must provide the name or ID, but not both.
   *
   * @schema ProvisionedProductSpecForProvider#provisioningArtifactName
   */
  readonly provisioningArtifactName?: string;

  /**
   * Parameters specified by the administrator that are required for provisioning the product.
   *
   * @schema ProvisionedProductSpecForProvider#provisioningParameters
   */
  readonly provisioningParameters?: ProvisionedProductSpecForProviderProvisioningParameters[];

  /**
   * An object that contains information about the provisioning preferences for a stack set.
   *
   * @schema ProvisionedProductSpecForProvider#provisioningPreferences
   */
  readonly provisioningPreferences?: ProvisionedProductSpecForProviderProvisioningPreferences;

  /**
   * Region is which region the ProvisionedProduct will be created.
   *
   * @schema ProvisionedProductSpecForProvider#region
   */
  readonly region: string;

  /**
   * One or more tags.
   *
   * @schema ProvisionedProductSpecForProvider#tags
   */
  readonly tags?: ProvisionedProductSpecForProviderTags[];

}

/**
 * Converts an object of type 'ProvisionedProductSpecForProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProvisionedProductSpecForProvider(obj: ProvisionedProductSpecForProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'acceptLanguage': obj.acceptLanguage,
    'notificationARNs': obj.notificationArNs?.map(y => y),
    'pathID': obj.pathId,
    'pathName': obj.pathName,
    'productID': obj.productId,
    'productName': obj.productName,
    'provisioningArtifactID': obj.provisioningArtifactId,
    'provisioningArtifactName': obj.provisioningArtifactName,
    'provisioningParameters': obj.provisioningParameters?.map(y => toJson_ProvisionedProductSpecForProviderProvisioningParameters(y)),
    'provisioningPreferences': toJson_ProvisionedProductSpecForProviderProvisioningPreferences(obj.provisioningPreferences),
    'region': obj.region,
    'tags': obj.tags?.map(y => toJson_ProvisionedProductSpecForProviderTags(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A ManagementAction represents an action that the Crossplane controllers can take on an external resource.
 *
 * @schema ProvisionedProductSpecManagementPolicies
 */
export enum ProvisionedProductSpecManagementPolicies {
  /** Observe */
  OBSERVE = "Observe",
  /** Create */
  CREATE = "Create",
  /** Update */
  UPDATE = "Update",
  /** Delete */
  DELETE = "Delete",
  /** LateInitialize */
  LATE_INITIALIZE = "LateInitialize",
  /** * */
  VALUE_ASTERISK = "*",
}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema ProvisionedProductSpecProviderConfigRef
 */
export interface ProvisionedProductSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema ProvisionedProductSpecProviderConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema ProvisionedProductSpecProviderConfigRef#policy
   */
  readonly policy?: ProvisionedProductSpecProviderConfigRefPolicy;

}

/**
 * Converts an object of type 'ProvisionedProductSpecProviderConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProvisionedProductSpecProviderConfigRef(obj: ProvisionedProductSpecProviderConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_ProvisionedProductSpecProviderConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema ProvisionedProductSpecPublishConnectionDetailsTo
 */
export interface ProvisionedProductSpecPublishConnectionDetailsTo {
  /**
   * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
   *
   * @schema ProvisionedProductSpecPublishConnectionDetailsTo#configRef
   */
  readonly configRef?: ProvisionedProductSpecPublishConnectionDetailsToConfigRef;

  /**
   * Metadata is the metadata for connection secret.
   *
   * @schema ProvisionedProductSpecPublishConnectionDetailsTo#metadata
   */
  readonly metadata?: ProvisionedProductSpecPublishConnectionDetailsToMetadata;

  /**
   * Name is the name of the connection secret.
   *
   * @schema ProvisionedProductSpecPublishConnectionDetailsTo#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'ProvisionedProductSpecPublishConnectionDetailsTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProvisionedProductSpecPublishConnectionDetailsTo(obj: ProvisionedProductSpecPublishConnectionDetailsTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configRef': toJson_ProvisionedProductSpecPublishConnectionDetailsToConfigRef(obj.configRef),
    'metadata': toJson_ProvisionedProductSpecPublishConnectionDetailsToMetadata(obj.metadata),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
 *
 * @schema ProvisionedProductSpecWriteConnectionSecretToRef
 */
export interface ProvisionedProductSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema ProvisionedProductSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema ProvisionedProductSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'ProvisionedProductSpecWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProvisionedProductSpecWriteConnectionSecretToRef(obj: ProvisionedProductSpecWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ProvisionedProductSpecForProviderProvisioningParameters
 */
export interface ProvisionedProductSpecForProviderProvisioningParameters {
  /**
   * @schema ProvisionedProductSpecForProviderProvisioningParameters#key
   */
  readonly key?: string;

  /**
   * @schema ProvisionedProductSpecForProviderProvisioningParameters#value
   */
  readonly value?: string;

}

/**
 * Converts an object of type 'ProvisionedProductSpecForProviderProvisioningParameters' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProvisionedProductSpecForProviderProvisioningParameters(obj: ProvisionedProductSpecForProviderProvisioningParameters | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An object that contains information about the provisioning preferences for a stack set.
 *
 * @schema ProvisionedProductSpecForProviderProvisioningPreferences
 */
export interface ProvisionedProductSpecForProviderProvisioningPreferences {
  /**
   * @schema ProvisionedProductSpecForProviderProvisioningPreferences#stackSetAccounts
   */
  readonly stackSetAccounts?: string[];

  /**
   * @schema ProvisionedProductSpecForProviderProvisioningPreferences#stackSetFailureToleranceCount
   */
  readonly stackSetFailureToleranceCount?: number;

  /**
   * @schema ProvisionedProductSpecForProviderProvisioningPreferences#stackSetFailureTolerancePercentage
   */
  readonly stackSetFailureTolerancePercentage?: number;

  /**
   * @schema ProvisionedProductSpecForProviderProvisioningPreferences#stackSetMaxConcurrencyCount
   */
  readonly stackSetMaxConcurrencyCount?: number;

  /**
   * @schema ProvisionedProductSpecForProviderProvisioningPreferences#stackSetMaxConcurrencyPercentage
   */
  readonly stackSetMaxConcurrencyPercentage?: number;

  /**
   * @schema ProvisionedProductSpecForProviderProvisioningPreferences#stackSetRegions
   */
  readonly stackSetRegions?: string[];

}

/**
 * Converts an object of type 'ProvisionedProductSpecForProviderProvisioningPreferences' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProvisionedProductSpecForProviderProvisioningPreferences(obj: ProvisionedProductSpecForProviderProvisioningPreferences | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'stackSetAccounts': obj.stackSetAccounts?.map(y => y),
    'stackSetFailureToleranceCount': obj.stackSetFailureToleranceCount,
    'stackSetFailureTolerancePercentage': obj.stackSetFailureTolerancePercentage,
    'stackSetMaxConcurrencyCount': obj.stackSetMaxConcurrencyCount,
    'stackSetMaxConcurrencyPercentage': obj.stackSetMaxConcurrencyPercentage,
    'stackSetRegions': obj.stackSetRegions?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ProvisionedProductSpecForProviderTags
 */
export interface ProvisionedProductSpecForProviderTags {
  /**
   * @schema ProvisionedProductSpecForProviderTags#key
   */
  readonly key?: string;

  /**
   * @schema ProvisionedProductSpecForProviderTags#value
   */
  readonly value?: string;

}

/**
 * Converts an object of type 'ProvisionedProductSpecForProviderTags' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProvisionedProductSpecForProviderTags(obj: ProvisionedProductSpecForProviderTags | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema ProvisionedProductSpecProviderConfigRefPolicy
 */
export interface ProvisionedProductSpecProviderConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema ProvisionedProductSpecProviderConfigRefPolicy#resolution
   */
  readonly resolution?: ProvisionedProductSpecProviderConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema ProvisionedProductSpecProviderConfigRefPolicy#resolve
   */
  readonly resolve?: ProvisionedProductSpecProviderConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'ProvisionedProductSpecProviderConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProvisionedProductSpecProviderConfigRefPolicy(obj: ProvisionedProductSpecProviderConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
 *
 * @schema ProvisionedProductSpecPublishConnectionDetailsToConfigRef
 */
export interface ProvisionedProductSpecPublishConnectionDetailsToConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema ProvisionedProductSpecPublishConnectionDetailsToConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema ProvisionedProductSpecPublishConnectionDetailsToConfigRef#policy
   */
  readonly policy?: ProvisionedProductSpecPublishConnectionDetailsToConfigRefPolicy;

}

/**
 * Converts an object of type 'ProvisionedProductSpecPublishConnectionDetailsToConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProvisionedProductSpecPublishConnectionDetailsToConfigRef(obj: ProvisionedProductSpecPublishConnectionDetailsToConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_ProvisionedProductSpecPublishConnectionDetailsToConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Metadata is the metadata for connection secret.
 *
 * @schema ProvisionedProductSpecPublishConnectionDetailsToMetadata
 */
export interface ProvisionedProductSpecPublishConnectionDetailsToMetadata {
  /**
   * Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
   *
   * @schema ProvisionedProductSpecPublishConnectionDetailsToMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
   *
   * @schema ProvisionedProductSpecPublishConnectionDetailsToMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
   *
   * @schema ProvisionedProductSpecPublishConnectionDetailsToMetadata#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'ProvisionedProductSpecPublishConnectionDetailsToMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProvisionedProductSpecPublishConnectionDetailsToMetadata(obj: ProvisionedProductSpecPublishConnectionDetailsToMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema ProvisionedProductSpecProviderConfigRefPolicyResolution
 */
export enum ProvisionedProductSpecProviderConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema ProvisionedProductSpecProviderConfigRefPolicyResolve
 */
export enum ProvisionedProductSpecProviderConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Policies for referencing.
 *
 * @schema ProvisionedProductSpecPublishConnectionDetailsToConfigRefPolicy
 */
export interface ProvisionedProductSpecPublishConnectionDetailsToConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema ProvisionedProductSpecPublishConnectionDetailsToConfigRefPolicy#resolution
   */
  readonly resolution?: ProvisionedProductSpecPublishConnectionDetailsToConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema ProvisionedProductSpecPublishConnectionDetailsToConfigRefPolicy#resolve
   */
  readonly resolve?: ProvisionedProductSpecPublishConnectionDetailsToConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'ProvisionedProductSpecPublishConnectionDetailsToConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProvisionedProductSpecPublishConnectionDetailsToConfigRefPolicy(obj: ProvisionedProductSpecPublishConnectionDetailsToConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema ProvisionedProductSpecPublishConnectionDetailsToConfigRefPolicyResolution
 */
export enum ProvisionedProductSpecPublishConnectionDetailsToConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema ProvisionedProductSpecPublishConnectionDetailsToConfigRefPolicyResolve
 */
export enum ProvisionedProductSpecPublishConnectionDetailsToConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

