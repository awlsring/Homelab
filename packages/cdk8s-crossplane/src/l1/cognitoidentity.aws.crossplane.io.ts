// @ts-nocheck
// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 * IdentityPool is the Schema for the IdentityPools API
 *
 * @schema IdentityPool
 */
export class IdentityPool extends ApiObject {
  /**
   * Returns the apiVersion and kind for "IdentityPool"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'cognitoidentity.aws.crossplane.io/v1alpha1',
    kind: 'IdentityPool',
  }

  /**
   * Renders a Kubernetes manifest for "IdentityPool".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: IdentityPoolProps): any {
    return {
      ...IdentityPool.GVK,
      ...toJson_IdentityPoolProps(props),
    };
  }

  /**
   * Defines a "IdentityPool" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: IdentityPoolProps) {
    super(scope, id, {
      ...IdentityPool.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...IdentityPool.GVK,
      ...toJson_IdentityPoolProps(resolved),
    };
  }
}

/**
 * IdentityPool is the Schema for the IdentityPools API
 *
 * @schema IdentityPool
 */
export interface IdentityPoolProps {
  /**
   * @schema IdentityPool#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * IdentityPoolSpec defines the desired state of IdentityPool
   *
   * @schema IdentityPool#spec
   */
  readonly spec: IdentityPoolSpec;

}

/**
 * Converts an object of type 'IdentityPoolProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IdentityPoolProps(obj: IdentityPoolProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_IdentityPoolSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * IdentityPoolSpec defines the desired state of IdentityPool
 *
 * @schema IdentityPoolSpec
 */
export interface IdentityPoolSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
   *
   * @schema IdentityPoolSpec#deletionPolicy
   */
  readonly deletionPolicy?: IdentityPoolSpecDeletionPolicy;

  /**
   * IdentityPoolParameters defines the desired state of IdentityPool
   *
   * @schema IdentityPoolSpec#forProvider
   */
  readonly forProvider: IdentityPoolSpecForProvider;

  /**
   * THIS IS A BETA FIELD. It is on by default but can be opted out through a Crossplane feature flag. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
   *
   * @schema IdentityPoolSpec#managementPolicies
   */
  readonly managementPolicies?: IdentityPoolSpecManagementPolicies[];

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema IdentityPoolSpec#providerConfigRef
   */
  readonly providerConfigRef?: IdentityPoolSpecProviderConfigRef;

  /**
   * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema IdentityPoolSpec#publishConnectionDetailsTo
   */
  readonly publishConnectionDetailsTo?: IdentityPoolSpecPublishConnectionDetailsTo;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
   *
   * @schema IdentityPoolSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: IdentityPoolSpecWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'IdentityPoolSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IdentityPoolSpec(obj: IdentityPoolSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'deletionPolicy': obj.deletionPolicy,
    'forProvider': toJson_IdentityPoolSpecForProvider(obj.forProvider),
    'managementPolicies': obj.managementPolicies?.map(y => y),
    'providerConfigRef': toJson_IdentityPoolSpecProviderConfigRef(obj.providerConfigRef),
    'publishConnectionDetailsTo': toJson_IdentityPoolSpecPublishConnectionDetailsTo(obj.publishConnectionDetailsTo),
    'writeConnectionSecretToRef': toJson_IdentityPoolSpecWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
 *
 * @schema IdentityPoolSpecDeletionPolicy
 */
export enum IdentityPoolSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * IdentityPoolParameters defines the desired state of IdentityPool
 *
 * @schema IdentityPoolSpecForProvider
 */
export interface IdentityPoolSpecForProvider {
  /**
   * Enables or disables the Basic (Classic) authentication flow. For more information, see Identity Pools (Federated Identities) Authentication Flow (https://docs.aws.amazon.com/cognito/latest/developerguide/authentication-flow.html) in the Amazon Cognito Developer Guide.
   *
   * @schema IdentityPoolSpecForProvider#allowClassicFlow
   */
  readonly allowClassicFlow?: boolean;

  /**
   * TRUE if the identity pool supports unauthenticated logins.
   *
   * @schema IdentityPoolSpecForProvider#allowUnauthenticatedIdentities
   */
  readonly allowUnauthenticatedIdentities: boolean;

  /**
   * An array of Amazon Cognito user pools and their client IDs.
   *
   * @schema IdentityPoolSpecForProvider#cognitoIdentityProviders
   */
  readonly cognitoIdentityProviders?: IdentityPoolSpecForProviderCognitoIdentityProviders[];

  /**
   * The "domain" by which Cognito will refer to your users. This name acts as a placeholder that allows your backend and the Cognito service to communicate about the developer provider. For the DeveloperProviderName, you can use letters as well as period (.), underscore (_), and dash (-).
   * Once you have set a developer provider name, you cannot change it. Please take care in setting this parameter.
   *
   * @schema IdentityPoolSpecForProvider#developerProviderName
   */
  readonly developerProviderName?: string;

  /**
   * A string that you provide.
   *
   * @schema IdentityPoolSpecForProvider#identityPoolName
   */
  readonly identityPoolName: string;

  /**
   * Tags to assign to the identity pool. A tag is a label that you can apply to identity pools to categorize and manage them in different ways, such as by purpose, owner, environment, or other criteria.
   *
   * @schema IdentityPoolSpecForProvider#identityPoolTags
   */
  readonly identityPoolTags?: { [key: string]: string };

  /**
   * OpenIDConnectProviderARNRefs is a list of references to OpenIDConnectProviderARNs.
   *
   * @schema IdentityPoolSpecForProvider#openIdConnectProviderARNRefs
   */
  readonly openIdConnectProviderArnRefs?: IdentityPoolSpecForProviderOpenIdConnectProviderArnRefs[];

  /**
   * OpenIDConnectProviderARNSelector selects references to OpenIDConnectProviderARNs.
   *
   * @schema IdentityPoolSpecForProvider#openIdConnectProviderARNSelector
   */
  readonly openIdConnectProviderArnSelector?: IdentityPoolSpecForProviderOpenIdConnectProviderArnSelector;

  /**
   * The Amazon Resource Names (ARN) of the OpenID Connect providers.
   *
   * @schema IdentityPoolSpecForProvider#openIdConnectProviderARNs
   */
  readonly openIdConnectProviderArNs?: string[];

  /**
   * Region is which region the IdentityPool will be created.
   *
   * @schema IdentityPoolSpecForProvider#region
   */
  readonly region: string;

  /**
   * An array of Amazon Resource Names (ARNs) of the SAML provider for your identity pool.
   *
   * @schema IdentityPoolSpecForProvider#samlProviderARNs
   */
  readonly samlProviderArNs?: string[];

  /**
   * Optional key:value pairs mapping provider names to provider app IDs.
   *
   * @schema IdentityPoolSpecForProvider#supportedLoginProviders
   */
  readonly supportedLoginProviders?: { [key: string]: string };

}

/**
 * Converts an object of type 'IdentityPoolSpecForProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IdentityPoolSpecForProvider(obj: IdentityPoolSpecForProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'allowClassicFlow': obj.allowClassicFlow,
    'allowUnauthenticatedIdentities': obj.allowUnauthenticatedIdentities,
    'cognitoIdentityProviders': obj.cognitoIdentityProviders?.map(y => toJson_IdentityPoolSpecForProviderCognitoIdentityProviders(y)),
    'developerProviderName': obj.developerProviderName,
    'identityPoolName': obj.identityPoolName,
    'identityPoolTags': ((obj.identityPoolTags) === undefined) ? undefined : (Object.entries(obj.identityPoolTags).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'openIdConnectProviderARNRefs': obj.openIdConnectProviderArnRefs?.map(y => toJson_IdentityPoolSpecForProviderOpenIdConnectProviderArnRefs(y)),
    'openIdConnectProviderARNSelector': toJson_IdentityPoolSpecForProviderOpenIdConnectProviderArnSelector(obj.openIdConnectProviderArnSelector),
    'openIdConnectProviderARNs': obj.openIdConnectProviderArNs?.map(y => y),
    'region': obj.region,
    'samlProviderARNs': obj.samlProviderArNs?.map(y => y),
    'supportedLoginProviders': ((obj.supportedLoginProviders) === undefined) ? undefined : (Object.entries(obj.supportedLoginProviders).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A ManagementAction represents an action that the Crossplane controllers can take on an external resource.
 *
 * @schema IdentityPoolSpecManagementPolicies
 */
export enum IdentityPoolSpecManagementPolicies {
  /** Observe */
  OBSERVE = "Observe",
  /** Create */
  CREATE = "Create",
  /** Update */
  UPDATE = "Update",
  /** Delete */
  DELETE = "Delete",
  /** LateInitialize */
  LATE_INITIALIZE = "LateInitialize",
  /** * */
  VALUE_ASTERISK = "*",
}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema IdentityPoolSpecProviderConfigRef
 */
export interface IdentityPoolSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema IdentityPoolSpecProviderConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema IdentityPoolSpecProviderConfigRef#policy
   */
  readonly policy?: IdentityPoolSpecProviderConfigRefPolicy;

}

/**
 * Converts an object of type 'IdentityPoolSpecProviderConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IdentityPoolSpecProviderConfigRef(obj: IdentityPoolSpecProviderConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_IdentityPoolSpecProviderConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema IdentityPoolSpecPublishConnectionDetailsTo
 */
export interface IdentityPoolSpecPublishConnectionDetailsTo {
  /**
   * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
   *
   * @schema IdentityPoolSpecPublishConnectionDetailsTo#configRef
   */
  readonly configRef?: IdentityPoolSpecPublishConnectionDetailsToConfigRef;

  /**
   * Metadata is the metadata for connection secret.
   *
   * @schema IdentityPoolSpecPublishConnectionDetailsTo#metadata
   */
  readonly metadata?: IdentityPoolSpecPublishConnectionDetailsToMetadata;

  /**
   * Name is the name of the connection secret.
   *
   * @schema IdentityPoolSpecPublishConnectionDetailsTo#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'IdentityPoolSpecPublishConnectionDetailsTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IdentityPoolSpecPublishConnectionDetailsTo(obj: IdentityPoolSpecPublishConnectionDetailsTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configRef': toJson_IdentityPoolSpecPublishConnectionDetailsToConfigRef(obj.configRef),
    'metadata': toJson_IdentityPoolSpecPublishConnectionDetailsToMetadata(obj.metadata),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
 *
 * @schema IdentityPoolSpecWriteConnectionSecretToRef
 */
export interface IdentityPoolSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema IdentityPoolSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema IdentityPoolSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'IdentityPoolSpecWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IdentityPoolSpecWriteConnectionSecretToRef(obj: IdentityPoolSpecWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Provider contains information to Cognito UserPools and UserPoolClients
 *
 * @schema IdentityPoolSpecForProviderCognitoIdentityProviders
 */
export interface IdentityPoolSpecForProviderCognitoIdentityProviders {
  /**
   * The client ID for the Amazon Cognito user pool client.
   *
   * @schema IdentityPoolSpecForProviderCognitoIdentityProviders#clientId
   */
  readonly clientId?: string;

  /**
   * ClientIDRef is a reference to an ClientID.
   *
   * @schema IdentityPoolSpecForProviderCognitoIdentityProviders#clientIdRef
   */
  readonly clientIdRef?: IdentityPoolSpecForProviderCognitoIdentityProvidersClientIdRef;

  /**
   * ClientIDSelector selects references to ClientID.
   *
   * @schema IdentityPoolSpecForProviderCognitoIdentityProviders#clientIdSelector
   */
  readonly clientIdSelector?: IdentityPoolSpecForProviderCognitoIdentityProvidersClientIdSelector;

  /**
   * The provider name for an Amazon Cognito user pool.
   *
   * @schema IdentityPoolSpecForProviderCognitoIdentityProviders#providerName
   */
  readonly providerName?: string;

  /**
   * ProviderNameRef is a reference to an ProviderName.
   *
   * @schema IdentityPoolSpecForProviderCognitoIdentityProviders#providerNameRef
   */
  readonly providerNameRef?: IdentityPoolSpecForProviderCognitoIdentityProvidersProviderNameRef;

  /**
   * ProviderNameSelector selects references to ProviderName.
   *
   * @schema IdentityPoolSpecForProviderCognitoIdentityProviders#providerNameSelector
   */
  readonly providerNameSelector?: IdentityPoolSpecForProviderCognitoIdentityProvidersProviderNameSelector;

  /**
   * Whether the server-side token validation is enabled for the identity provider’s token.
   *
   * @schema IdentityPoolSpecForProviderCognitoIdentityProviders#serverSideTokenCheck
   */
  readonly serverSideTokenCheck?: boolean;

}

/**
 * Converts an object of type 'IdentityPoolSpecForProviderCognitoIdentityProviders' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IdentityPoolSpecForProviderCognitoIdentityProviders(obj: IdentityPoolSpecForProviderCognitoIdentityProviders | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'clientId': obj.clientId,
    'clientIdRef': toJson_IdentityPoolSpecForProviderCognitoIdentityProvidersClientIdRef(obj.clientIdRef),
    'clientIdSelector': toJson_IdentityPoolSpecForProviderCognitoIdentityProvidersClientIdSelector(obj.clientIdSelector),
    'providerName': obj.providerName,
    'providerNameRef': toJson_IdentityPoolSpecForProviderCognitoIdentityProvidersProviderNameRef(obj.providerNameRef),
    'providerNameSelector': toJson_IdentityPoolSpecForProviderCognitoIdentityProvidersProviderNameSelector(obj.providerNameSelector),
    'serverSideTokenCheck': obj.serverSideTokenCheck,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A Reference to a named object.
 *
 * @schema IdentityPoolSpecForProviderOpenIdConnectProviderArnRefs
 */
export interface IdentityPoolSpecForProviderOpenIdConnectProviderArnRefs {
  /**
   * Name of the referenced object.
   *
   * @schema IdentityPoolSpecForProviderOpenIdConnectProviderArnRefs#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema IdentityPoolSpecForProviderOpenIdConnectProviderArnRefs#policy
   */
  readonly policy?: IdentityPoolSpecForProviderOpenIdConnectProviderArnRefsPolicy;

}

/**
 * Converts an object of type 'IdentityPoolSpecForProviderOpenIdConnectProviderArnRefs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IdentityPoolSpecForProviderOpenIdConnectProviderArnRefs(obj: IdentityPoolSpecForProviderOpenIdConnectProviderArnRefs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_IdentityPoolSpecForProviderOpenIdConnectProviderArnRefsPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * OpenIDConnectProviderARNSelector selects references to OpenIDConnectProviderARNs.
 *
 * @schema IdentityPoolSpecForProviderOpenIdConnectProviderArnSelector
 */
export interface IdentityPoolSpecForProviderOpenIdConnectProviderArnSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema IdentityPoolSpecForProviderOpenIdConnectProviderArnSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema IdentityPoolSpecForProviderOpenIdConnectProviderArnSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

  /**
   * Policies for selection.
   *
   * @schema IdentityPoolSpecForProviderOpenIdConnectProviderArnSelector#policy
   */
  readonly policy?: IdentityPoolSpecForProviderOpenIdConnectProviderArnSelectorPolicy;

}

/**
 * Converts an object of type 'IdentityPoolSpecForProviderOpenIdConnectProviderArnSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IdentityPoolSpecForProviderOpenIdConnectProviderArnSelector(obj: IdentityPoolSpecForProviderOpenIdConnectProviderArnSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchControllerRef': obj.matchControllerRef,
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'policy': toJson_IdentityPoolSpecForProviderOpenIdConnectProviderArnSelectorPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema IdentityPoolSpecProviderConfigRefPolicy
 */
export interface IdentityPoolSpecProviderConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema IdentityPoolSpecProviderConfigRefPolicy#resolution
   */
  readonly resolution?: IdentityPoolSpecProviderConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema IdentityPoolSpecProviderConfigRefPolicy#resolve
   */
  readonly resolve?: IdentityPoolSpecProviderConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'IdentityPoolSpecProviderConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IdentityPoolSpecProviderConfigRefPolicy(obj: IdentityPoolSpecProviderConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
 *
 * @schema IdentityPoolSpecPublishConnectionDetailsToConfigRef
 */
export interface IdentityPoolSpecPublishConnectionDetailsToConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema IdentityPoolSpecPublishConnectionDetailsToConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema IdentityPoolSpecPublishConnectionDetailsToConfigRef#policy
   */
  readonly policy?: IdentityPoolSpecPublishConnectionDetailsToConfigRefPolicy;

}

/**
 * Converts an object of type 'IdentityPoolSpecPublishConnectionDetailsToConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IdentityPoolSpecPublishConnectionDetailsToConfigRef(obj: IdentityPoolSpecPublishConnectionDetailsToConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_IdentityPoolSpecPublishConnectionDetailsToConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Metadata is the metadata for connection secret.
 *
 * @schema IdentityPoolSpecPublishConnectionDetailsToMetadata
 */
export interface IdentityPoolSpecPublishConnectionDetailsToMetadata {
  /**
   * Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
   *
   * @schema IdentityPoolSpecPublishConnectionDetailsToMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
   *
   * @schema IdentityPoolSpecPublishConnectionDetailsToMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
   *
   * @schema IdentityPoolSpecPublishConnectionDetailsToMetadata#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'IdentityPoolSpecPublishConnectionDetailsToMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IdentityPoolSpecPublishConnectionDetailsToMetadata(obj: IdentityPoolSpecPublishConnectionDetailsToMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ClientIDRef is a reference to an ClientID.
 *
 * @schema IdentityPoolSpecForProviderCognitoIdentityProvidersClientIdRef
 */
export interface IdentityPoolSpecForProviderCognitoIdentityProvidersClientIdRef {
  /**
   * Name of the referenced object.
   *
   * @schema IdentityPoolSpecForProviderCognitoIdentityProvidersClientIdRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema IdentityPoolSpecForProviderCognitoIdentityProvidersClientIdRef#policy
   */
  readonly policy?: IdentityPoolSpecForProviderCognitoIdentityProvidersClientIdRefPolicy;

}

/**
 * Converts an object of type 'IdentityPoolSpecForProviderCognitoIdentityProvidersClientIdRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IdentityPoolSpecForProviderCognitoIdentityProvidersClientIdRef(obj: IdentityPoolSpecForProviderCognitoIdentityProvidersClientIdRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_IdentityPoolSpecForProviderCognitoIdentityProvidersClientIdRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ClientIDSelector selects references to ClientID.
 *
 * @schema IdentityPoolSpecForProviderCognitoIdentityProvidersClientIdSelector
 */
export interface IdentityPoolSpecForProviderCognitoIdentityProvidersClientIdSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema IdentityPoolSpecForProviderCognitoIdentityProvidersClientIdSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema IdentityPoolSpecForProviderCognitoIdentityProvidersClientIdSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

  /**
   * Policies for selection.
   *
   * @schema IdentityPoolSpecForProviderCognitoIdentityProvidersClientIdSelector#policy
   */
  readonly policy?: IdentityPoolSpecForProviderCognitoIdentityProvidersClientIdSelectorPolicy;

}

/**
 * Converts an object of type 'IdentityPoolSpecForProviderCognitoIdentityProvidersClientIdSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IdentityPoolSpecForProviderCognitoIdentityProvidersClientIdSelector(obj: IdentityPoolSpecForProviderCognitoIdentityProvidersClientIdSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchControllerRef': obj.matchControllerRef,
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'policy': toJson_IdentityPoolSpecForProviderCognitoIdentityProvidersClientIdSelectorPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ProviderNameRef is a reference to an ProviderName.
 *
 * @schema IdentityPoolSpecForProviderCognitoIdentityProvidersProviderNameRef
 */
export interface IdentityPoolSpecForProviderCognitoIdentityProvidersProviderNameRef {
  /**
   * Name of the referenced object.
   *
   * @schema IdentityPoolSpecForProviderCognitoIdentityProvidersProviderNameRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema IdentityPoolSpecForProviderCognitoIdentityProvidersProviderNameRef#policy
   */
  readonly policy?: IdentityPoolSpecForProviderCognitoIdentityProvidersProviderNameRefPolicy;

}

/**
 * Converts an object of type 'IdentityPoolSpecForProviderCognitoIdentityProvidersProviderNameRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IdentityPoolSpecForProviderCognitoIdentityProvidersProviderNameRef(obj: IdentityPoolSpecForProviderCognitoIdentityProvidersProviderNameRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_IdentityPoolSpecForProviderCognitoIdentityProvidersProviderNameRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ProviderNameSelector selects references to ProviderName.
 *
 * @schema IdentityPoolSpecForProviderCognitoIdentityProvidersProviderNameSelector
 */
export interface IdentityPoolSpecForProviderCognitoIdentityProvidersProviderNameSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema IdentityPoolSpecForProviderCognitoIdentityProvidersProviderNameSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema IdentityPoolSpecForProviderCognitoIdentityProvidersProviderNameSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

  /**
   * Policies for selection.
   *
   * @schema IdentityPoolSpecForProviderCognitoIdentityProvidersProviderNameSelector#policy
   */
  readonly policy?: IdentityPoolSpecForProviderCognitoIdentityProvidersProviderNameSelectorPolicy;

}

/**
 * Converts an object of type 'IdentityPoolSpecForProviderCognitoIdentityProvidersProviderNameSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IdentityPoolSpecForProviderCognitoIdentityProvidersProviderNameSelector(obj: IdentityPoolSpecForProviderCognitoIdentityProvidersProviderNameSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchControllerRef': obj.matchControllerRef,
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'policy': toJson_IdentityPoolSpecForProviderCognitoIdentityProvidersProviderNameSelectorPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema IdentityPoolSpecForProviderOpenIdConnectProviderArnRefsPolicy
 */
export interface IdentityPoolSpecForProviderOpenIdConnectProviderArnRefsPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema IdentityPoolSpecForProviderOpenIdConnectProviderArnRefsPolicy#resolution
   */
  readonly resolution?: IdentityPoolSpecForProviderOpenIdConnectProviderArnRefsPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema IdentityPoolSpecForProviderOpenIdConnectProviderArnRefsPolicy#resolve
   */
  readonly resolve?: IdentityPoolSpecForProviderOpenIdConnectProviderArnRefsPolicyResolve;

}

/**
 * Converts an object of type 'IdentityPoolSpecForProviderOpenIdConnectProviderArnRefsPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IdentityPoolSpecForProviderOpenIdConnectProviderArnRefsPolicy(obj: IdentityPoolSpecForProviderOpenIdConnectProviderArnRefsPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for selection.
 *
 * @schema IdentityPoolSpecForProviderOpenIdConnectProviderArnSelectorPolicy
 */
export interface IdentityPoolSpecForProviderOpenIdConnectProviderArnSelectorPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema IdentityPoolSpecForProviderOpenIdConnectProviderArnSelectorPolicy#resolution
   */
  readonly resolution?: IdentityPoolSpecForProviderOpenIdConnectProviderArnSelectorPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema IdentityPoolSpecForProviderOpenIdConnectProviderArnSelectorPolicy#resolve
   */
  readonly resolve?: IdentityPoolSpecForProviderOpenIdConnectProviderArnSelectorPolicyResolve;

}

/**
 * Converts an object of type 'IdentityPoolSpecForProviderOpenIdConnectProviderArnSelectorPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IdentityPoolSpecForProviderOpenIdConnectProviderArnSelectorPolicy(obj: IdentityPoolSpecForProviderOpenIdConnectProviderArnSelectorPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema IdentityPoolSpecProviderConfigRefPolicyResolution
 */
export enum IdentityPoolSpecProviderConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema IdentityPoolSpecProviderConfigRefPolicyResolve
 */
export enum IdentityPoolSpecProviderConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Policies for referencing.
 *
 * @schema IdentityPoolSpecPublishConnectionDetailsToConfigRefPolicy
 */
export interface IdentityPoolSpecPublishConnectionDetailsToConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema IdentityPoolSpecPublishConnectionDetailsToConfigRefPolicy#resolution
   */
  readonly resolution?: IdentityPoolSpecPublishConnectionDetailsToConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema IdentityPoolSpecPublishConnectionDetailsToConfigRefPolicy#resolve
   */
  readonly resolve?: IdentityPoolSpecPublishConnectionDetailsToConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'IdentityPoolSpecPublishConnectionDetailsToConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IdentityPoolSpecPublishConnectionDetailsToConfigRefPolicy(obj: IdentityPoolSpecPublishConnectionDetailsToConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema IdentityPoolSpecForProviderCognitoIdentityProvidersClientIdRefPolicy
 */
export interface IdentityPoolSpecForProviderCognitoIdentityProvidersClientIdRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema IdentityPoolSpecForProviderCognitoIdentityProvidersClientIdRefPolicy#resolution
   */
  readonly resolution?: IdentityPoolSpecForProviderCognitoIdentityProvidersClientIdRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema IdentityPoolSpecForProviderCognitoIdentityProvidersClientIdRefPolicy#resolve
   */
  readonly resolve?: IdentityPoolSpecForProviderCognitoIdentityProvidersClientIdRefPolicyResolve;

}

/**
 * Converts an object of type 'IdentityPoolSpecForProviderCognitoIdentityProvidersClientIdRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IdentityPoolSpecForProviderCognitoIdentityProvidersClientIdRefPolicy(obj: IdentityPoolSpecForProviderCognitoIdentityProvidersClientIdRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for selection.
 *
 * @schema IdentityPoolSpecForProviderCognitoIdentityProvidersClientIdSelectorPolicy
 */
export interface IdentityPoolSpecForProviderCognitoIdentityProvidersClientIdSelectorPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema IdentityPoolSpecForProviderCognitoIdentityProvidersClientIdSelectorPolicy#resolution
   */
  readonly resolution?: IdentityPoolSpecForProviderCognitoIdentityProvidersClientIdSelectorPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema IdentityPoolSpecForProviderCognitoIdentityProvidersClientIdSelectorPolicy#resolve
   */
  readonly resolve?: IdentityPoolSpecForProviderCognitoIdentityProvidersClientIdSelectorPolicyResolve;

}

/**
 * Converts an object of type 'IdentityPoolSpecForProviderCognitoIdentityProvidersClientIdSelectorPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IdentityPoolSpecForProviderCognitoIdentityProvidersClientIdSelectorPolicy(obj: IdentityPoolSpecForProviderCognitoIdentityProvidersClientIdSelectorPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema IdentityPoolSpecForProviderCognitoIdentityProvidersProviderNameRefPolicy
 */
export interface IdentityPoolSpecForProviderCognitoIdentityProvidersProviderNameRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema IdentityPoolSpecForProviderCognitoIdentityProvidersProviderNameRefPolicy#resolution
   */
  readonly resolution?: IdentityPoolSpecForProviderCognitoIdentityProvidersProviderNameRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema IdentityPoolSpecForProviderCognitoIdentityProvidersProviderNameRefPolicy#resolve
   */
  readonly resolve?: IdentityPoolSpecForProviderCognitoIdentityProvidersProviderNameRefPolicyResolve;

}

/**
 * Converts an object of type 'IdentityPoolSpecForProviderCognitoIdentityProvidersProviderNameRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IdentityPoolSpecForProviderCognitoIdentityProvidersProviderNameRefPolicy(obj: IdentityPoolSpecForProviderCognitoIdentityProvidersProviderNameRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for selection.
 *
 * @schema IdentityPoolSpecForProviderCognitoIdentityProvidersProviderNameSelectorPolicy
 */
export interface IdentityPoolSpecForProviderCognitoIdentityProvidersProviderNameSelectorPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema IdentityPoolSpecForProviderCognitoIdentityProvidersProviderNameSelectorPolicy#resolution
   */
  readonly resolution?: IdentityPoolSpecForProviderCognitoIdentityProvidersProviderNameSelectorPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema IdentityPoolSpecForProviderCognitoIdentityProvidersProviderNameSelectorPolicy#resolve
   */
  readonly resolve?: IdentityPoolSpecForProviderCognitoIdentityProvidersProviderNameSelectorPolicyResolve;

}

/**
 * Converts an object of type 'IdentityPoolSpecForProviderCognitoIdentityProvidersProviderNameSelectorPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_IdentityPoolSpecForProviderCognitoIdentityProvidersProviderNameSelectorPolicy(obj: IdentityPoolSpecForProviderCognitoIdentityProvidersProviderNameSelectorPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema IdentityPoolSpecForProviderOpenIdConnectProviderArnRefsPolicyResolution
 */
export enum IdentityPoolSpecForProviderOpenIdConnectProviderArnRefsPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema IdentityPoolSpecForProviderOpenIdConnectProviderArnRefsPolicyResolve
 */
export enum IdentityPoolSpecForProviderOpenIdConnectProviderArnRefsPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema IdentityPoolSpecForProviderOpenIdConnectProviderArnSelectorPolicyResolution
 */
export enum IdentityPoolSpecForProviderOpenIdConnectProviderArnSelectorPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema IdentityPoolSpecForProviderOpenIdConnectProviderArnSelectorPolicyResolve
 */
export enum IdentityPoolSpecForProviderOpenIdConnectProviderArnSelectorPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema IdentityPoolSpecPublishConnectionDetailsToConfigRefPolicyResolution
 */
export enum IdentityPoolSpecPublishConnectionDetailsToConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema IdentityPoolSpecPublishConnectionDetailsToConfigRefPolicyResolve
 */
export enum IdentityPoolSpecPublishConnectionDetailsToConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema IdentityPoolSpecForProviderCognitoIdentityProvidersClientIdRefPolicyResolution
 */
export enum IdentityPoolSpecForProviderCognitoIdentityProvidersClientIdRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema IdentityPoolSpecForProviderCognitoIdentityProvidersClientIdRefPolicyResolve
 */
export enum IdentityPoolSpecForProviderCognitoIdentityProvidersClientIdRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema IdentityPoolSpecForProviderCognitoIdentityProvidersClientIdSelectorPolicyResolution
 */
export enum IdentityPoolSpecForProviderCognitoIdentityProvidersClientIdSelectorPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema IdentityPoolSpecForProviderCognitoIdentityProvidersClientIdSelectorPolicyResolve
 */
export enum IdentityPoolSpecForProviderCognitoIdentityProvidersClientIdSelectorPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema IdentityPoolSpecForProviderCognitoIdentityProvidersProviderNameRefPolicyResolution
 */
export enum IdentityPoolSpecForProviderCognitoIdentityProvidersProviderNameRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema IdentityPoolSpecForProviderCognitoIdentityProvidersProviderNameRefPolicyResolve
 */
export enum IdentityPoolSpecForProviderCognitoIdentityProvidersProviderNameRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema IdentityPoolSpecForProviderCognitoIdentityProvidersProviderNameSelectorPolicyResolution
 */
export enum IdentityPoolSpecForProviderCognitoIdentityProvidersProviderNameSelectorPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema IdentityPoolSpecForProviderCognitoIdentityProvidersProviderNameSelectorPolicyResolve
 */
export enum IdentityPoolSpecForProviderCognitoIdentityProvidersProviderNameSelectorPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

