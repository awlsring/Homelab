// @ts-nocheck
// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 * A DBSubnetGroup is a managed resource that represents an AWS VPC Database Subnet Group.
 *
 * @schema DBSubnetGroup
 */
export class DbSubnetGroup extends ApiObject {
  /**
   * Returns the apiVersion and kind for "DBSubnetGroup"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'database.aws.crossplane.io/v1beta1',
    kind: 'DBSubnetGroup',
  }

  /**
   * Renders a Kubernetes manifest for "DBSubnetGroup".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: DbSubnetGroupProps): any {
    return {
      ...DbSubnetGroup.GVK,
      ...toJson_DbSubnetGroupProps(props),
    };
  }

  /**
   * Defines a "DBSubnetGroup" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: DbSubnetGroupProps) {
    super(scope, id, {
      ...DbSubnetGroup.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...DbSubnetGroup.GVK,
      ...toJson_DbSubnetGroupProps(resolved),
    };
  }
}

/**
 * A DBSubnetGroup is a managed resource that represents an AWS VPC Database Subnet Group.
 *
 * @schema DBSubnetGroup
 */
export interface DbSubnetGroupProps {
  /**
   * @schema DBSubnetGroup#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * A DBSubnetGroupSpec defines the desired state of a DBSubnetGroup.
   *
   * @schema DBSubnetGroup#spec
   */
  readonly spec: DbSubnetGroupSpec;

}

/**
 * Converts an object of type 'DbSubnetGroupProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DbSubnetGroupProps(obj: DbSubnetGroupProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_DbSubnetGroupSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A DBSubnetGroupSpec defines the desired state of a DBSubnetGroup.
 *
 * @schema DbSubnetGroupSpec
 */
export interface DbSubnetGroupSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
   *
   * @schema DbSubnetGroupSpec#deletionPolicy
   */
  readonly deletionPolicy?: DbSubnetGroupSpecDeletionPolicy;

  /**
   * DBSubnetGroupParameters define the desired state of an AWS VPC Database Subnet Group.
   *
   * @schema DbSubnetGroupSpec#forProvider
   */
  readonly forProvider?: DbSubnetGroupSpecForProvider;

  /**
   * THIS IS A BETA FIELD. It is on by default but can be opted out through a Crossplane feature flag. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
   *
   * @schema DbSubnetGroupSpec#managementPolicies
   */
  readonly managementPolicies?: DbSubnetGroupSpecManagementPolicies[];

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema DbSubnetGroupSpec#providerConfigRef
   */
  readonly providerConfigRef?: DbSubnetGroupSpecProviderConfigRef;

  /**
   * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema DbSubnetGroupSpec#publishConnectionDetailsTo
   */
  readonly publishConnectionDetailsTo?: DbSubnetGroupSpecPublishConnectionDetailsTo;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
   *
   * @schema DbSubnetGroupSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: DbSubnetGroupSpecWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'DbSubnetGroupSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DbSubnetGroupSpec(obj: DbSubnetGroupSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'deletionPolicy': obj.deletionPolicy,
    'forProvider': toJson_DbSubnetGroupSpecForProvider(obj.forProvider),
    'managementPolicies': obj.managementPolicies?.map(y => y),
    'providerConfigRef': toJson_DbSubnetGroupSpecProviderConfigRef(obj.providerConfigRef),
    'publishConnectionDetailsTo': toJson_DbSubnetGroupSpecPublishConnectionDetailsTo(obj.publishConnectionDetailsTo),
    'writeConnectionSecretToRef': toJson_DbSubnetGroupSpecWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
 *
 * @schema DbSubnetGroupSpecDeletionPolicy
 */
export enum DbSubnetGroupSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * DBSubnetGroupParameters define the desired state of an AWS VPC Database Subnet Group.
 *
 * @schema DbSubnetGroupSpecForProvider
 */
export interface DbSubnetGroupSpecForProvider {
  /**
   * The description for the DB subnet group.
   *
   * @schema DbSubnetGroupSpecForProvider#description
   */
  readonly description: string;

  /**
   * Region is the region you'd like your DBSubnetGroup to be created in.
   *
   * @schema DbSubnetGroupSpecForProvider#region
   */
  readonly region?: string;

  /**
   * SubnetIDRefs is a set of references that each retrieve the subnetID from the referenced Subnet
   *
   * @schema DbSubnetGroupSpecForProvider#subnetIdRefs
   */
  readonly subnetIdRefs?: DbSubnetGroupSpecForProviderSubnetIdRefs[];

  /**
   * SubnetIDSelector selects a set of references that each retrieve the subnetID from the referenced Subnet
   *
   * @schema DbSubnetGroupSpecForProvider#subnetIdSelector
   */
  readonly subnetIdSelector?: DbSubnetGroupSpecForProviderSubnetIdSelector;

  /**
   * The EC2 Subnet IDs for the DB subnet group.
   *
   * @schema DbSubnetGroupSpecForProvider#subnetIds
   */
  readonly subnetIds?: string[];

  /**
   * A list of tags. For more information, see Tagging Amazon RDS Resources (http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html) in the Amazon RDS User Guide.
   *
   * @schema DbSubnetGroupSpecForProvider#tags
   */
  readonly tags?: DbSubnetGroupSpecForProviderTags[];

}

/**
 * Converts an object of type 'DbSubnetGroupSpecForProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DbSubnetGroupSpecForProvider(obj: DbSubnetGroupSpecForProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'description': obj.description,
    'region': obj.region,
    'subnetIdRefs': obj.subnetIdRefs?.map(y => toJson_DbSubnetGroupSpecForProviderSubnetIdRefs(y)),
    'subnetIdSelector': toJson_DbSubnetGroupSpecForProviderSubnetIdSelector(obj.subnetIdSelector),
    'subnetIds': obj.subnetIds?.map(y => y),
    'tags': obj.tags?.map(y => toJson_DbSubnetGroupSpecForProviderTags(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A ManagementAction represents an action that the Crossplane controllers can take on an external resource.
 *
 * @schema DbSubnetGroupSpecManagementPolicies
 */
export enum DbSubnetGroupSpecManagementPolicies {
  /** Observe */
  OBSERVE = "Observe",
  /** Create */
  CREATE = "Create",
  /** Update */
  UPDATE = "Update",
  /** Delete */
  DELETE = "Delete",
  /** LateInitialize */
  LATE_INITIALIZE = "LateInitialize",
  /** * */
  VALUE_ASTERISK = "*",
}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema DbSubnetGroupSpecProviderConfigRef
 */
export interface DbSubnetGroupSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema DbSubnetGroupSpecProviderConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema DbSubnetGroupSpecProviderConfigRef#policy
   */
  readonly policy?: DbSubnetGroupSpecProviderConfigRefPolicy;

}

/**
 * Converts an object of type 'DbSubnetGroupSpecProviderConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DbSubnetGroupSpecProviderConfigRef(obj: DbSubnetGroupSpecProviderConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_DbSubnetGroupSpecProviderConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema DbSubnetGroupSpecPublishConnectionDetailsTo
 */
export interface DbSubnetGroupSpecPublishConnectionDetailsTo {
  /**
   * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
   *
   * @schema DbSubnetGroupSpecPublishConnectionDetailsTo#configRef
   */
  readonly configRef?: DbSubnetGroupSpecPublishConnectionDetailsToConfigRef;

  /**
   * Metadata is the metadata for connection secret.
   *
   * @schema DbSubnetGroupSpecPublishConnectionDetailsTo#metadata
   */
  readonly metadata?: DbSubnetGroupSpecPublishConnectionDetailsToMetadata;

  /**
   * Name is the name of the connection secret.
   *
   * @schema DbSubnetGroupSpecPublishConnectionDetailsTo#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'DbSubnetGroupSpecPublishConnectionDetailsTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DbSubnetGroupSpecPublishConnectionDetailsTo(obj: DbSubnetGroupSpecPublishConnectionDetailsTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configRef': toJson_DbSubnetGroupSpecPublishConnectionDetailsToConfigRef(obj.configRef),
    'metadata': toJson_DbSubnetGroupSpecPublishConnectionDetailsToMetadata(obj.metadata),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
 *
 * @schema DbSubnetGroupSpecWriteConnectionSecretToRef
 */
export interface DbSubnetGroupSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema DbSubnetGroupSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema DbSubnetGroupSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'DbSubnetGroupSpecWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DbSubnetGroupSpecWriteConnectionSecretToRef(obj: DbSubnetGroupSpecWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A Reference to a named object.
 *
 * @schema DbSubnetGroupSpecForProviderSubnetIdRefs
 */
export interface DbSubnetGroupSpecForProviderSubnetIdRefs {
  /**
   * Name of the referenced object.
   *
   * @schema DbSubnetGroupSpecForProviderSubnetIdRefs#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema DbSubnetGroupSpecForProviderSubnetIdRefs#policy
   */
  readonly policy?: DbSubnetGroupSpecForProviderSubnetIdRefsPolicy;

}

/**
 * Converts an object of type 'DbSubnetGroupSpecForProviderSubnetIdRefs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DbSubnetGroupSpecForProviderSubnetIdRefs(obj: DbSubnetGroupSpecForProviderSubnetIdRefs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_DbSubnetGroupSpecForProviderSubnetIdRefsPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SubnetIDSelector selects a set of references that each retrieve the subnetID from the referenced Subnet
 *
 * @schema DbSubnetGroupSpecForProviderSubnetIdSelector
 */
export interface DbSubnetGroupSpecForProviderSubnetIdSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema DbSubnetGroupSpecForProviderSubnetIdSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema DbSubnetGroupSpecForProviderSubnetIdSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

  /**
   * Policies for selection.
   *
   * @schema DbSubnetGroupSpecForProviderSubnetIdSelector#policy
   */
  readonly policy?: DbSubnetGroupSpecForProviderSubnetIdSelectorPolicy;

}

/**
 * Converts an object of type 'DbSubnetGroupSpecForProviderSubnetIdSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DbSubnetGroupSpecForProviderSubnetIdSelector(obj: DbSubnetGroupSpecForProviderSubnetIdSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchControllerRef': obj.matchControllerRef,
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'policy': toJson_DbSubnetGroupSpecForProviderSubnetIdSelectorPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Tag is a metadata assigned to an Amazon RDS resource consisting of a key-value pair. Please also see https://docs.aws.amazon.com/goto/WebAPI/rds-2014-10-31/Tag
 *
 * @schema DbSubnetGroupSpecForProviderTags
 */
export interface DbSubnetGroupSpecForProviderTags {
  /**
   * A key is the required name of the tag. The string value can be from 1 to 128 Unicode characters in length and can't be prefixed with "aws:" or "rds:". The string can only contain only the set of Unicode letters, digits, white-space, '_', '.', '/', '=', '+', '-' (Java regex: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-]*)$").
   *
   * @schema DbSubnetGroupSpecForProviderTags#key
   */
  readonly key?: string;

  /**
   * A value is the optional value of the tag. The string value can be from 1 to 256 Unicode characters in length and can't be prefixed with "aws:" or "rds:". The string can only contain only the set of Unicode letters, digits, white-space, '_', '.', '/', '=', '+', '-' (Java regex: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-]*)$").
   *
   * @schema DbSubnetGroupSpecForProviderTags#value
   */
  readonly value?: string;

}

/**
 * Converts an object of type 'DbSubnetGroupSpecForProviderTags' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DbSubnetGroupSpecForProviderTags(obj: DbSubnetGroupSpecForProviderTags | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema DbSubnetGroupSpecProviderConfigRefPolicy
 */
export interface DbSubnetGroupSpecProviderConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema DbSubnetGroupSpecProviderConfigRefPolicy#resolution
   */
  readonly resolution?: DbSubnetGroupSpecProviderConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema DbSubnetGroupSpecProviderConfigRefPolicy#resolve
   */
  readonly resolve?: DbSubnetGroupSpecProviderConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'DbSubnetGroupSpecProviderConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DbSubnetGroupSpecProviderConfigRefPolicy(obj: DbSubnetGroupSpecProviderConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
 *
 * @schema DbSubnetGroupSpecPublishConnectionDetailsToConfigRef
 */
export interface DbSubnetGroupSpecPublishConnectionDetailsToConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema DbSubnetGroupSpecPublishConnectionDetailsToConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema DbSubnetGroupSpecPublishConnectionDetailsToConfigRef#policy
   */
  readonly policy?: DbSubnetGroupSpecPublishConnectionDetailsToConfigRefPolicy;

}

/**
 * Converts an object of type 'DbSubnetGroupSpecPublishConnectionDetailsToConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DbSubnetGroupSpecPublishConnectionDetailsToConfigRef(obj: DbSubnetGroupSpecPublishConnectionDetailsToConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_DbSubnetGroupSpecPublishConnectionDetailsToConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Metadata is the metadata for connection secret.
 *
 * @schema DbSubnetGroupSpecPublishConnectionDetailsToMetadata
 */
export interface DbSubnetGroupSpecPublishConnectionDetailsToMetadata {
  /**
   * Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
   *
   * @schema DbSubnetGroupSpecPublishConnectionDetailsToMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
   *
   * @schema DbSubnetGroupSpecPublishConnectionDetailsToMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
   *
   * @schema DbSubnetGroupSpecPublishConnectionDetailsToMetadata#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'DbSubnetGroupSpecPublishConnectionDetailsToMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DbSubnetGroupSpecPublishConnectionDetailsToMetadata(obj: DbSubnetGroupSpecPublishConnectionDetailsToMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema DbSubnetGroupSpecForProviderSubnetIdRefsPolicy
 */
export interface DbSubnetGroupSpecForProviderSubnetIdRefsPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema DbSubnetGroupSpecForProviderSubnetIdRefsPolicy#resolution
   */
  readonly resolution?: DbSubnetGroupSpecForProviderSubnetIdRefsPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema DbSubnetGroupSpecForProviderSubnetIdRefsPolicy#resolve
   */
  readonly resolve?: DbSubnetGroupSpecForProviderSubnetIdRefsPolicyResolve;

}

/**
 * Converts an object of type 'DbSubnetGroupSpecForProviderSubnetIdRefsPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DbSubnetGroupSpecForProviderSubnetIdRefsPolicy(obj: DbSubnetGroupSpecForProviderSubnetIdRefsPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for selection.
 *
 * @schema DbSubnetGroupSpecForProviderSubnetIdSelectorPolicy
 */
export interface DbSubnetGroupSpecForProviderSubnetIdSelectorPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema DbSubnetGroupSpecForProviderSubnetIdSelectorPolicy#resolution
   */
  readonly resolution?: DbSubnetGroupSpecForProviderSubnetIdSelectorPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema DbSubnetGroupSpecForProviderSubnetIdSelectorPolicy#resolve
   */
  readonly resolve?: DbSubnetGroupSpecForProviderSubnetIdSelectorPolicyResolve;

}

/**
 * Converts an object of type 'DbSubnetGroupSpecForProviderSubnetIdSelectorPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DbSubnetGroupSpecForProviderSubnetIdSelectorPolicy(obj: DbSubnetGroupSpecForProviderSubnetIdSelectorPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema DbSubnetGroupSpecProviderConfigRefPolicyResolution
 */
export enum DbSubnetGroupSpecProviderConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema DbSubnetGroupSpecProviderConfigRefPolicyResolve
 */
export enum DbSubnetGroupSpecProviderConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Policies for referencing.
 *
 * @schema DbSubnetGroupSpecPublishConnectionDetailsToConfigRefPolicy
 */
export interface DbSubnetGroupSpecPublishConnectionDetailsToConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema DbSubnetGroupSpecPublishConnectionDetailsToConfigRefPolicy#resolution
   */
  readonly resolution?: DbSubnetGroupSpecPublishConnectionDetailsToConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema DbSubnetGroupSpecPublishConnectionDetailsToConfigRefPolicy#resolve
   */
  readonly resolve?: DbSubnetGroupSpecPublishConnectionDetailsToConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'DbSubnetGroupSpecPublishConnectionDetailsToConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DbSubnetGroupSpecPublishConnectionDetailsToConfigRefPolicy(obj: DbSubnetGroupSpecPublishConnectionDetailsToConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema DbSubnetGroupSpecForProviderSubnetIdRefsPolicyResolution
 */
export enum DbSubnetGroupSpecForProviderSubnetIdRefsPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema DbSubnetGroupSpecForProviderSubnetIdRefsPolicyResolve
 */
export enum DbSubnetGroupSpecForProviderSubnetIdRefsPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema DbSubnetGroupSpecForProviderSubnetIdSelectorPolicyResolution
 */
export enum DbSubnetGroupSpecForProviderSubnetIdSelectorPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema DbSubnetGroupSpecForProviderSubnetIdSelectorPolicyResolve
 */
export enum DbSubnetGroupSpecForProviderSubnetIdSelectorPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema DbSubnetGroupSpecPublishConnectionDetailsToConfigRefPolicyResolution
 */
export enum DbSubnetGroupSpecPublishConnectionDetailsToConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema DbSubnetGroupSpecPublishConnectionDetailsToConfigRefPolicyResolve
 */
export enum DbSubnetGroupSpecPublishConnectionDetailsToConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}


/**
 * An RDSInstance is a managed resource that represents an AWS Relational Database Service instance.
 *
 * @schema RDSInstance
 */
export class RdsInstance extends ApiObject {
  /**
   * Returns the apiVersion and kind for "RDSInstance"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'database.aws.crossplane.io/v1beta1',
    kind: 'RDSInstance',
  }

  /**
   * Renders a Kubernetes manifest for "RDSInstance".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: RdsInstanceProps): any {
    return {
      ...RdsInstance.GVK,
      ...toJson_RdsInstanceProps(props),
    };
  }

  /**
   * Defines a "RDSInstance" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: RdsInstanceProps) {
    super(scope, id, {
      ...RdsInstance.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...RdsInstance.GVK,
      ...toJson_RdsInstanceProps(resolved),
    };
  }
}

/**
 * An RDSInstance is a managed resource that represents an AWS Relational Database Service instance.
 *
 * @schema RDSInstance
 */
export interface RdsInstanceProps {
  /**
   * @schema RDSInstance#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * An RDSInstanceSpec defines the desired state of an RDSInstance.
   *
   * @schema RDSInstance#spec
   */
  readonly spec: RdsInstanceSpec;

}

/**
 * Converts an object of type 'RdsInstanceProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RdsInstanceProps(obj: RdsInstanceProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_RdsInstanceSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An RDSInstanceSpec defines the desired state of an RDSInstance.
 *
 * @schema RdsInstanceSpec
 */
export interface RdsInstanceSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
   *
   * @schema RdsInstanceSpec#deletionPolicy
   */
  readonly deletionPolicy?: RdsInstanceSpecDeletionPolicy;

  /**
   * RDSInstanceParameters define the desired state of an AWS Relational Database Service instance.
   *
   * @schema RdsInstanceSpec#forProvider
   */
  readonly forProvider: RdsInstanceSpecForProvider;

  /**
   * THIS IS A BETA FIELD. It is on by default but can be opted out through a Crossplane feature flag. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
   *
   * @schema RdsInstanceSpec#managementPolicies
   */
  readonly managementPolicies?: RdsInstanceSpecManagementPolicies[];

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema RdsInstanceSpec#providerConfigRef
   */
  readonly providerConfigRef?: RdsInstanceSpecProviderConfigRef;

  /**
   * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema RdsInstanceSpec#publishConnectionDetailsTo
   */
  readonly publishConnectionDetailsTo?: RdsInstanceSpecPublishConnectionDetailsTo;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
   *
   * @schema RdsInstanceSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: RdsInstanceSpecWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'RdsInstanceSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RdsInstanceSpec(obj: RdsInstanceSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'deletionPolicy': obj.deletionPolicy,
    'forProvider': toJson_RdsInstanceSpecForProvider(obj.forProvider),
    'managementPolicies': obj.managementPolicies?.map(y => y),
    'providerConfigRef': toJson_RdsInstanceSpecProviderConfigRef(obj.providerConfigRef),
    'publishConnectionDetailsTo': toJson_RdsInstanceSpecPublishConnectionDetailsTo(obj.publishConnectionDetailsTo),
    'writeConnectionSecretToRef': toJson_RdsInstanceSpecWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
 *
 * @schema RdsInstanceSpecDeletionPolicy
 */
export enum RdsInstanceSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * RDSInstanceParameters define the desired state of an AWS Relational Database Service instance.
 *
 * @schema RdsInstanceSpecForProvider
 */
export interface RdsInstanceSpecForProvider {
  /**
   * AllocatedStorage is the amount of storage (in gibibytes) to allocate for the DB instance. Type: Integer Amazon Aurora Not applicable. Aurora cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in an Aurora cluster volume. MySQL Constraints to the amount of storage for each storage type are the following: * General Purpose (SSD) storage (gp2): Must be an integer from 20 to 16384. * Provisioned IOPS storage (io1): Must be an integer from 100 to 16384. * Magnetic storage (standard): Must be an integer from 5 to 3072. MariaDB Constraints to the amount of storage for each storage type are the following: * General Purpose (SSD) storage (gp2): Must be an integer from 20 to 16384. * Provisioned IOPS storage (io1): Must be an integer from 100 to 16384. * Magnetic storage (standard): Must be an integer from 5 to 3072. PostgreSQL Constraints to the amount of storage for each storage type are the following: * General Purpose (SSD) storage (gp2): Must be an integer from 20 to 16384. * Provisioned IOPS storage (io1): Must be an integer from 100 to 16384. * Magnetic storage (standard): Must be an integer from 5 to 3072. Oracle Constraints to the amount of storage for each storage type are the following: * General Purpose (SSD) storage (gp2): Must be an integer from 20 to 16384. * Provisioned IOPS storage (io1): Must be an integer from 100 to 16384. * Magnetic storage (standard): Must be an integer from 10 to 3072. SQL Server Constraints to the amount of storage for each storage type are the following: * General Purpose (SSD) storage (gp2): Enterprise and Standard editions: Must be an integer from 200 to 16384. Web and Express editions: Must be an integer from 20 to 16384. * Provisioned IOPS storage (io1): Enterprise and Standard editions: Must be an integer from 200 to 16384. Web and Express editions: Must be an integer from 100 to 16384. * Magnetic storage (standard): Enterprise and Standard editions: Must be an integer from 200 to 1024. Web and Express editions: Must be an integer from 20 to 1024.
   *
   * @schema RdsInstanceSpecForProvider#allocatedStorage
   */
  readonly allocatedStorage?: number;

  /**
   * AllowMajorVersionUpgrade indicates that major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. Constraints: This parameter must be set to true when specifying a value for the EngineVersion parameter that is a different major version than the DB instance's current version.
   *
   * @schema RdsInstanceSpecForProvider#allowMajorVersionUpgrade
   */
  readonly allowMajorVersionUpgrade?: boolean;

  /**
   * ApplyModificationsImmediately specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the PreferredMaintenanceWindow setting for the DB instance. If this parameter is set to false, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to RebootDBInstance, or the next failure reboot. Review the table of parameters in Modifying a DB Instance and Using the Apply Immediately Parameter (http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.DBInstance.Modifying.html) in the Amazon RDS User Guide. to see the impact that setting ApplyImmediately to true or false has for each modified parameter and to determine when the changes are applied. Default: false
   *
   * @schema RdsInstanceSpecForProvider#applyModificationsImmediately
   */
  readonly applyModificationsImmediately?: boolean;

  /**
   * AutoMinorVersionUpgrade indicates that minor engine upgrades are applied automatically to the DB instance during the maintenance window. Default: true
   *
   * @schema RdsInstanceSpecForProvider#autoMinorVersionUpgrade
   */
  readonly autoMinorVersionUpgrade?: boolean;

  /**
   * AvailabilityZone is the EC2 Availability Zone that the DB instance is created in. For information on AWS Regions and Availability Zones, see Regions and Availability Zones (http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html). Default: A random, system-chosen Availability Zone in the endpoint's AWS Region. Example: us-east-1d Constraint: The AvailabilityZone parameter is ignored if the MultiAZ is set to true. The specified Availability Zone must be in the same AWS Region as the current endpoint.
   *
   * @schema RdsInstanceSpecForProvider#availabilityZone
   */
  readonly availabilityZone?: string;

  /**
   * BackupRetentionPeriod is the number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups. Amazon Aurora Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see CreateDBCluster. Default: 1 Constraints: * Must be a value from 0 to 35 * Cannot be set to 0 if the DB instance is a source to Read Replicas
   *
   * @schema RdsInstanceSpecForProvider#backupRetentionPeriod
   */
  readonly backupRetentionPeriod?: number;

  /**
   * CACertificateIdentifier indicates the certificate that needs to be associated with the instance.
   *
   * @schema RdsInstanceSpecForProvider#caCertificateIdentifier
   */
  readonly caCertificateIdentifier?: string;

  /**
   * CharacterSetName indicates that the DB instance should be associated with the specified CharacterSet for supported engines, Amazon Aurora Not applicable. The character set is managed by the DB cluster. For more information, see CreateDBCluster.
   *
   * @schema RdsInstanceSpecForProvider#characterSetName
   */
  readonly characterSetName?: string;

  /**
   * Deprecated: This field will be removed. Use `enableCloudwatchLogsExports` instead. CloudwatchLogsExportConfiguration is the configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance.
   *
   * @schema RdsInstanceSpecForProvider#cloudwatchLogsExportConfiguration
   */
  readonly cloudwatchLogsExportConfiguration?: RdsInstanceSpecForProviderCloudwatchLogsExportConfiguration;

  /**
   * CopyTagsToSnapshot should be true to copy all tags from the DB instance to snapshots of the DB instance, and otherwise false. The default is false.
   *
   * @schema RdsInstanceSpecForProvider#copyTagsToSnapshot
   */
  readonly copyTagsToSnapshot?: boolean;

  /**
   * DBClusterIdentifier is the identifier of the DB cluster that the instance will belong to. For information on creating a DB cluster, see CreateDBCluster. Type: String
   *
   * @schema RdsInstanceSpecForProvider#dbClusterIdentifier
   */
  readonly dbClusterIdentifier?: string;

  /**
   * DBInstanceClass is the compute and memory capacity of the DB instance, for example, db.m4.large. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see DB Instance Class (http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html) in the Amazon RDS User Guide.
   *
   * @schema RdsInstanceSpecForProvider#dbInstanceClass
   */
  readonly dbInstanceClass: string;

  /**
   * DBName is the meaning of this parameter differs according to the database engine you use. Type: String MySQL The name of the database to create when the DB instance is created. If this parameter is not specified, no database is created in the DB instance. Constraints: * Must contain 1 to 64 letters or numbers. * Cannot be a word reserved by the specified database engine MariaDB The name of the database to create when the DB instance is created. If this parameter is not specified, no database is created in the DB instance. Constraints: * Must contain 1 to 64 letters or numbers. * Cannot be a word reserved by the specified database engine PostgreSQL The name of the database to create when the DB instance is created. If this parameter is not specified, the default "postgres" database is created in the DB instance. Constraints: * Must contain 1 to 63 letters, numbers, or underscores. * Must begin with a letter or an underscore. Subsequent characters can be letters, underscores, or digits (0-9). * Cannot be a word reserved by the specified database engine Oracle The Oracle System ID (SID) of the created DB instance. If you specify null, the default value ORCL is used. You can't specify the string NULL, or any other reserved word, for DBName. Default: ORCL Constraints: * Cannot be longer than 8 characters SQL Server Not applicable. Must be null. Amazon Aurora The name of the database to create when the primary instance of the DB cluster is created. If this parameter is not specified, no database is created in the DB instance. Constraints: * Must contain 1 to 64 letters or numbers. * Cannot be a word reserved by the specified database engine
   *
   * @schema RdsInstanceSpecForProvider#dbName
   */
  readonly dbName?: string;

  /**
   * DBParameterGroupName is the name of the DB parameter group to associate with this DB instance. If this argument is omitted, the default DBParameterGroup for the specified engine is used. Constraints: * Must be 1 to 255 letters, numbers, or hyphens. * First character must be a letter * Cannot end with a hyphen or contain two consecutive hyphens
   *
   * @schema RdsInstanceSpecForProvider#dbParameterGroupName
   */
  readonly dbParameterGroupName?: string;

  /**
   * DBSecurityGroups is a list of DB security groups to associate with this DB instance. Default: The default DB security group for the database engine.
   *
   * @schema RdsInstanceSpecForProvider#dbSecurityGroups
   */
  readonly dbSecurityGroups?: string[];

  /**
   * DBSubnetGroupName is a DB subnet group to associate with this DB instance. If there is no DB subnet group, then it is a non-VPC DB instance.
   *
   * @schema RdsInstanceSpecForProvider#dbSubnetGroupName
   */
  readonly dbSubnetGroupName?: string;

  /**
   * DBSubnetGroupNameRef is a reference to a DBSubnetGroup used to set DBSubnetGroupName.
   *
   * @schema RdsInstanceSpecForProvider#dbSubnetGroupNameRef
   */
  readonly dbSubnetGroupNameRef?: RdsInstanceSpecForProviderDbSubnetGroupNameRef;

  /**
   * DBSubnetGroupNameSelector selects a reference to a DBSubnetGroup used to set DBSubnetGroupName.
   *
   * @schema RdsInstanceSpecForProvider#dbSubnetGroupNameSelector
   */
  readonly dbSubnetGroupNameSelector?: RdsInstanceSpecForProviderDbSubnetGroupNameSelector;

  /**
   * DeleteAutomatedBackups indicates whether to remove automated backups immediately after the DB instance is deleted. The default is to remove automated backups immediately after the DB instance is deleted.
   *
   * @schema RdsInstanceSpecForProvider#deleteAutomatedBackups
   */
  readonly deleteAutomatedBackups?: boolean;

  /**
   * DeletionProtection indicates if the DB instance should have deletion protection enabled. The database can't be deleted when this value is set to true. The default is false. For more information, see  Deleting a DB Instance (http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html).
   *
   * @schema RdsInstanceSpecForProvider#deletionProtection
   */
  readonly deletionProtection?: boolean;

  /**
   * Domain specifies the Active Directory Domain to create the instance in.
   *
   * @schema RdsInstanceSpecForProvider#domain
   */
  readonly domain?: string;

  /**
   * DomainIAMRoleName specifies the name of the IAM role to be used when making API calls to the Directory Service.
   *
   * @schema RdsInstanceSpecForProvider#domainIAMRoleName
   */
  readonly domainIamRoleName?: string;

  /**
   * DomainIAMRoleNameRef is a reference to an IAMRole used to set DomainIAMRoleName.
   *
   * @schema RdsInstanceSpecForProvider#domainIAMRoleNameRef
   */
  readonly domainIamRoleNameRef?: RdsInstanceSpecForProviderDomainIamRoleNameRef;

  /**
   * DomainIAMRoleNameSelector selects a reference to an IAMRole used to set DomainIAMRoleName.
   *
   * @schema RdsInstanceSpecForProvider#domainIAMRoleNameSelector
   */
  readonly domainIamRoleNameSelector?: RdsInstanceSpecForProviderDomainIamRoleNameSelector;

  /**
   * EnableCloudwatchLogsExports is the list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see Publishing Database Logs to Amazon CloudWatch Logs  (http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch) in the Amazon Relational Database Service User Guide.
   *
   * @schema RdsInstanceSpecForProvider#enableCloudwatchLogsExports
   */
  readonly enableCloudwatchLogsExports?: string[];

  /**
   * EnableIAMDatabaseAuthentication should be true to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false. You can enable IAM database authentication for the following database engines: Amazon Aurora Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster. For more information, see CreateDBCluster. MySQL * For MySQL 5.6, minor version 5.6.34 or higher * For MySQL 5.7, minor version 5.7.16 or higher Default: false
   *
   * @schema RdsInstanceSpecForProvider#enableIAMDatabaseAuthentication
   */
  readonly enableIamDatabaseAuthentication?: boolean;

  /**
   * EnablePerformanceInsights should be true to enable Performance Insights for the DB instance, and otherwise false. For more information, see Using Amazon Performance Insights (http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html) in the Amazon Relational Database Service User Guide.
   *
   * @schema RdsInstanceSpecForProvider#enablePerformanceInsights
   */
  readonly enablePerformanceInsights?: boolean;

  /**
   * Engine is the name of the database engine to be used for this instance. Not every database engine is available for every AWS Region. Valid Values: * aurora (for MySQL 5.6-compatible Aurora) * aurora-mysql (for MySQL 5.7-compatible Aurora) * aurora-postgresql * mariadb * mysql * oracle-ee * oracle-se2 * oracle-se1 * oracle-se * postgres * sqlserver-ee * sqlserver-se * sqlserver-ex * sqlserver-web Engine is a required field
   *
   * @schema RdsInstanceSpecForProvider#engine
   */
  readonly engine: string;

  /**
   * EngineVersion is the version number of the database engine to use. For a list of valid engine versions, call DescribeDBEngineVersions. The following are the database engines and links to information about the major and minor versions that are available with Amazon RDS. Not every database engine is available for every AWS Region. Amazon Aurora Not applicable. The version number of the database engine to be used by the DB instance is managed by the DB cluster. For more information, see CreateDBCluster. MariaDB See MariaDB on Amazon RDS Versions (http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MariaDB.html#MariaDB.Concepts.VersionMgmt) in the Amazon RDS User Guide. Microsoft SQL Server See Version and Feature Support on Amazon RDS (http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.FeatureSupport) in the Amazon RDS User Guide. MySQL See MySQL on Amazon RDS Versions (http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MySQL.html#MySQL.Concepts.VersionMgmt) in the Amazon RDS User Guide. Oracle See Oracle Database Engine Release Notes (http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.Oracle.PatchComposition.html) in the Amazon RDS User Guide. PostgreSQL See Supported PostgreSQL Database Versions (http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html#PostgreSQL.Concepts.General.DBVersions) in the Amazon RDS User Guide.
   * Note: Downgrades are not allowed by AWS and attempts to set a lower version will be ignored.
   *
   * @schema RdsInstanceSpecForProvider#engineVersion
   */
  readonly engineVersion?: string;

  /**
   * The DBSnapshotIdentifier of the new DBSnapshot created when SkipFinalSnapshot is set to false. Specifying this parameter and also setting the SkipFinalShapshot parameter to true results in an error. Constraints: * Must be 1 to 255 letters or numbers. * First character must be a letter * Cannot end with a hyphen or contain two consecutive hyphens * Cannot be specified when deleting a Read Replica.
   *
   * @schema RdsInstanceSpecForProvider#finalDBSnapshotIdentifier
   */
  readonly finalDbSnapshotIdentifier?: string;

  /**
   * IOPS is the amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance. For information about valid IOPS values, see see Amazon RDS Provisioned IOPS Storage to Improve Performance (http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS) in the Amazon RDS User Guide. Constraints: Must be a multiple between 1 and 50 of the storage amount for the DB instance. Must also be an integer multiple of 1000. For example, if the size of your DB instance is 500 GiB, then your IOPS value can be 2000, 3000, 4000, or 5000.
   *
   * @schema RdsInstanceSpecForProvider#iops
   */
  readonly iops?: number;

  /**
   * KMSKeyID for an encrypted DB instance. The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key. Amazon Aurora Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see CreateDBCluster. If the StorageEncrypted parameter is true, and you do not specify a value for the KMSKeyID parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.
   *
   * @schema RdsInstanceSpecForProvider#kmsKeyId
   */
  readonly kmsKeyId?: string;

  /**
   * LicenseModel information for this DB instance. Valid values: license-included | bring-your-own-license | general-public-license
   *
   * @schema RdsInstanceSpecForProvider#licenseModel
   */
  readonly licenseModel?: string;

  /**
   * MasterPasswordSecretRef references the secret that contains the password used in the creation of this RDS instance. If no reference is given, a password will be auto-generated.
   *
   * @schema RdsInstanceSpecForProvider#masterPasswordSecretRef
   */
  readonly masterPasswordSecretRef?: RdsInstanceSpecForProviderMasterPasswordSecretRef;

  /**
   * MasterUsername is the name for the master user. Amazon Aurora Not applicable. The name for the master user is managed by the DB cluster. For more information, see CreateDBCluster.
   * Constraints:
   * * Must be 1 to 16 letters or numbers.
   * * First character must be a letter.
   * * Can't be a reserved word for the chosen database engine.
   *
   * @schema RdsInstanceSpecForProvider#masterUsername
   */
  readonly masterUsername?: string;

  /**
   * The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
   * For more information about this setting, including limitations that apply to it, see Managing capacity automatically with Amazon RDS storage autoscaling (https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PIOPS.StorageTypes.html#USER_PIOPS.Autoscaling) in the Amazon RDS User Guide.
   *
   * @schema RdsInstanceSpecForProvider#maxAllocatedStorage
   */
  readonly maxAllocatedStorage?: number;

  /**
   * MonitoringInterval is the interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0. If MonitoringRoleARN is specified, then you must also set MonitoringInterval to a value other than 0. Valid Values: 0, 1, 5, 10, 15, 30, 60
   *
   * @schema RdsInstanceSpecForProvider#monitoringInterval
   */
  readonly monitoringInterval?: number;

  /**
   * MonitoringRoleARN is the ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, arn:aws:iam:123456789012:role/emaccess. For information on creating a monitoring role, go to Setting Up and Enabling Enhanced Monitoring (http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling) in the Amazon RDS User Guide. If MonitoringInterval is set to a value other than 0, then you must supply a MonitoringRoleARN value.
   *
   * @schema RdsInstanceSpecForProvider#monitoringRoleArn
   */
  readonly monitoringRoleArn?: string;

  /**
   * MonitoringRoleARNRef is a reference to an IAMRole used to set MonitoringRoleARN.
   *
   * @schema RdsInstanceSpecForProvider#monitoringRoleArnRef
   */
  readonly monitoringRoleArnRef?: RdsInstanceSpecForProviderMonitoringRoleArnRef;

  /**
   * MonitoringRoleARNSelector selects a reference to an IAMRole used to set MonitoringRoleARN.
   *
   * @schema RdsInstanceSpecForProvider#monitoringRoleArnSelector
   */
  readonly monitoringRoleArnSelector?: RdsInstanceSpecForProviderMonitoringRoleArnSelector;

  /**
   * MultiAZ specifies if the DB instance is a Multi-AZ deployment. You can't set the AvailabilityZone parameter if the MultiAZ parameter is set to true.
   *
   * @schema RdsInstanceSpecForProvider#multiAZ
   */
  readonly multiAz?: boolean;

  /**
   * OptionGroupName indicates that the DB instance should be associated with the specified option group. Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance
   *
   * @schema RdsInstanceSpecForProvider#optionGroupName
   */
  readonly optionGroupName?: string;

  /**
   * PerformanceInsightsKMSKeyID is the AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.
   *
   * @schema RdsInstanceSpecForProvider#performanceInsightsKMSKeyId
   */
  readonly performanceInsightsKmsKeyId?: string;

  /**
   * PerformanceInsightsRetentionPeriod is the amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years).
   *
   * @schema RdsInstanceSpecForProvider#performanceInsightsRetentionPeriod
   */
  readonly performanceInsightsRetentionPeriod?: number;

  /**
   * Port number on which the database accepts connections. MySQL Default: 3306 Valid Values: 1150-65535 Type: Integer MariaDB Default: 3306 Valid Values: 1150-65535 Type: Integer PostgreSQL Default: 5432 Valid Values: 1150-65535 Type: Integer Oracle Default: 1521 Valid Values: 1150-65535 SQL Server Default: 1433 Valid Values: 1150-65535 except for 1434, 3389, 47001, 49152, and 49152 through 49156. Amazon Aurora Default: 3306 Valid Values: 1150-65535 Type: Integer
   *
   * @schema RdsInstanceSpecForProvider#port
   */
  readonly port?: number;

  /**
   * PreferredBackupWindow is the daily time range during which automated backups are created if automated backups are enabled, using the BackupRetentionPeriod parameter. For more information, see The Backup Window (http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow) in the Amazon RDS User Guide. Amazon Aurora Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see CreateDBCluster. The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see  Adjusting the Preferred DB Instance Maintenance Window (http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow) in the Amazon RDS User Guide. Constraints: * Must be in the format hh24:mi-hh24:mi. * Must be in Universal Coordinated Time (UTC). * Must not conflict with the preferred maintenance window. * Must be at least 30 minutes.
   *
   * @schema RdsInstanceSpecForProvider#preferredBackupWindow
   */
  readonly preferredBackupWindow?: string;

  /**
   * PreferredMaintenanceWindow is the time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see Amazon RDS Maintenance Window (http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance). Format: ddd:hh24:mi-ddd:hh24:mi The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun. Constraints: Minimum 30-minute window.
   *
   * @schema RdsInstanceSpecForProvider#preferredMaintenanceWindow
   */
  readonly preferredMaintenanceWindow?: string;

  /**
   * ProcessorFeatures is the number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
   *
   * @schema RdsInstanceSpecForProvider#processorFeatures
   */
  readonly processorFeatures?: RdsInstanceSpecForProviderProcessorFeatures[];

  /**
   * PromotionTier specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see  Fault Tolerance for an Aurora DB Cluster (http://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance) in the Amazon Aurora User Guide. Default: 1 Valid Values: 0 - 15
   *
   * @schema RdsInstanceSpecForProvider#promotionTier
   */
  readonly promotionTier?: number;

  /**
   * PubliclyAccessible specifies the accessibility options for the DB instance. A value of true specifies an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. A value of false specifies an internal instance with a DNS name that resolves to a private IP address. Default: The default behavior varies depending on whether DBSubnetGroupName is specified. If DBSubnetGroupName is not specified, and PubliclyAccessible is not specified, the following applies: * If the default VPC in the target region doesn’t have an Internet gateway attached to it, the DB instance is private. * If the default VPC in the target region has an Internet gateway attached to it, the DB instance is public. If DBSubnetGroupName is specified, and PubliclyAccessible is not specified, the following applies: * If the subnets are part of a VPC that doesn’t have an Internet gateway attached to it, the DB instance is private. * If the subnets are part of a VPC that has an Internet gateway attached to it, the DB instance is public.
   *
   * @schema RdsInstanceSpecForProvider#publiclyAccessible
   */
  readonly publiclyAccessible?: boolean;

  /**
   * Region is the region you'd like your RDSInstance to be created in.
   *
   * @schema RdsInstanceSpecForProvider#region
   */
  readonly region?: string;

  /**
   * RestoreFrom specifies the details of the backup to restore when creating a new RDS instance. (If the RDS instance already exists, this property will be ignored.)
   *
   * @schema RdsInstanceSpecForProvider#restoreFrom
   */
  readonly restoreFrom?: RdsInstanceSpecForProviderRestoreFrom;

  /**
   * ScalingConfiguration is the scaling properties of the DB cluster. You can only modify scaling properties for DB clusters in serverless DB engine mode.
   *
   * @schema RdsInstanceSpecForProvider#scalingConfiguration
   */
  readonly scalingConfiguration?: RdsInstanceSpecForProviderScalingConfiguration;

  /**
   * Determines whether a final DB snapshot is created before the DB instance is deleted. If true is specified, no DBSnapshot is created. If false is specified, a DB snapshot is created before the DB instance is deleted. Note that when a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when the SkipFinalSnapshotBeforeDeletion parameter is set to "true". Specify true when deleting a Read Replica. The FinalDBSnapshotIdentifier parameter must be specified if SkipFinalSnapshotBeforeDeletion is false. Default: false
   *
   * @schema RdsInstanceSpecForProvider#skipFinalSnapshotBeforeDeletion
   */
  readonly skipFinalSnapshotBeforeDeletion?: boolean;

  /**
   * StorageEncrypted specifies whether the DB instance is encrypted. Amazon Aurora Not applicable. The encryption for DB instances is managed by the DB cluster. For more information, see CreateDBCluster. Default: false
   *
   * @schema RdsInstanceSpecForProvider#storageEncrypted
   */
  readonly storageEncrypted?: boolean;

  /**
   * StorageType specifies the storage type to be associated with the DB instance. Valid values: standard | gp2 | io1 If you specify io1, you must also include a value for the IOPS parameter. Default: io1 if the IOPS parameter is specified, otherwise standard
   *
   * @schema RdsInstanceSpecForProvider#storageType
   */
  readonly storageType?: string;

  /**
   * Tags. For more information, see Tagging Amazon RDS Resources (http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html) in the Amazon RDS User Guide.
   *
   * @schema RdsInstanceSpecForProvider#tags
   */
  readonly tags?: RdsInstanceSpecForProviderTags[];

  /**
   * Timezone of the DB instance. The time zone parameter is currently supported only by Microsoft SQL Server (http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.TimeZone).
   *
   * @schema RdsInstanceSpecForProvider#timezone
   */
  readonly timezone?: string;

  /**
   * A value that specifies that the DB instance class of the DB instance uses its default processor features.
   *
   * @schema RdsInstanceSpecForProvider#useDefaultProcessorFeatures
   */
  readonly useDefaultProcessorFeatures?: boolean;

  /**
   * VPCSecurityGroupIDRefs are references to VPCSecurityGroups used to set the VPCSecurityGroupIDs.
   *
   * @schema RdsInstanceSpecForProvider#vpcSecurityGroupIDRefs
   */
  readonly vpcSecurityGroupIdRefs?: RdsInstanceSpecForProviderVpcSecurityGroupIdRefs[];

  /**
   * VPCSecurityGroupIDSelector selects references to VPCSecurityGroups used to set the VPCSecurityGroupIDs.
   *
   * @schema RdsInstanceSpecForProvider#vpcSecurityGroupIDSelector
   */
  readonly vpcSecurityGroupIdSelector?: RdsInstanceSpecForProviderVpcSecurityGroupIdSelector;

  /**
   * VPCSecurityGroupIDs is a list of EC2 VPC security groups to associate with this DB instance. Amazon Aurora Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see CreateDBCluster. Default: The default EC2 VPC security group for the DB subnet group's VPC.
   *
   * @schema RdsInstanceSpecForProvider#vpcSecurityGroupIds
   */
  readonly vpcSecurityGroupIds?: string[];

}

/**
 * Converts an object of type 'RdsInstanceSpecForProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RdsInstanceSpecForProvider(obj: RdsInstanceSpecForProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'allocatedStorage': obj.allocatedStorage,
    'allowMajorVersionUpgrade': obj.allowMajorVersionUpgrade,
    'applyModificationsImmediately': obj.applyModificationsImmediately,
    'autoMinorVersionUpgrade': obj.autoMinorVersionUpgrade,
    'availabilityZone': obj.availabilityZone,
    'backupRetentionPeriod': obj.backupRetentionPeriod,
    'caCertificateIdentifier': obj.caCertificateIdentifier,
    'characterSetName': obj.characterSetName,
    'cloudwatchLogsExportConfiguration': toJson_RdsInstanceSpecForProviderCloudwatchLogsExportConfiguration(obj.cloudwatchLogsExportConfiguration),
    'copyTagsToSnapshot': obj.copyTagsToSnapshot,
    'dbClusterIdentifier': obj.dbClusterIdentifier,
    'dbInstanceClass': obj.dbInstanceClass,
    'dbName': obj.dbName,
    'dbParameterGroupName': obj.dbParameterGroupName,
    'dbSecurityGroups': obj.dbSecurityGroups?.map(y => y),
    'dbSubnetGroupName': obj.dbSubnetGroupName,
    'dbSubnetGroupNameRef': toJson_RdsInstanceSpecForProviderDbSubnetGroupNameRef(obj.dbSubnetGroupNameRef),
    'dbSubnetGroupNameSelector': toJson_RdsInstanceSpecForProviderDbSubnetGroupNameSelector(obj.dbSubnetGroupNameSelector),
    'deleteAutomatedBackups': obj.deleteAutomatedBackups,
    'deletionProtection': obj.deletionProtection,
    'domain': obj.domain,
    'domainIAMRoleName': obj.domainIamRoleName,
    'domainIAMRoleNameRef': toJson_RdsInstanceSpecForProviderDomainIamRoleNameRef(obj.domainIamRoleNameRef),
    'domainIAMRoleNameSelector': toJson_RdsInstanceSpecForProviderDomainIamRoleNameSelector(obj.domainIamRoleNameSelector),
    'enableCloudwatchLogsExports': obj.enableCloudwatchLogsExports?.map(y => y),
    'enableIAMDatabaseAuthentication': obj.enableIamDatabaseAuthentication,
    'enablePerformanceInsights': obj.enablePerformanceInsights,
    'engine': obj.engine,
    'engineVersion': obj.engineVersion,
    'finalDBSnapshotIdentifier': obj.finalDbSnapshotIdentifier,
    'iops': obj.iops,
    'kmsKeyId': obj.kmsKeyId,
    'licenseModel': obj.licenseModel,
    'masterPasswordSecretRef': toJson_RdsInstanceSpecForProviderMasterPasswordSecretRef(obj.masterPasswordSecretRef),
    'masterUsername': obj.masterUsername,
    'maxAllocatedStorage': obj.maxAllocatedStorage,
    'monitoringInterval': obj.monitoringInterval,
    'monitoringRoleArn': obj.monitoringRoleArn,
    'monitoringRoleArnRef': toJson_RdsInstanceSpecForProviderMonitoringRoleArnRef(obj.monitoringRoleArnRef),
    'monitoringRoleArnSelector': toJson_RdsInstanceSpecForProviderMonitoringRoleArnSelector(obj.monitoringRoleArnSelector),
    'multiAZ': obj.multiAz,
    'optionGroupName': obj.optionGroupName,
    'performanceInsightsKMSKeyId': obj.performanceInsightsKmsKeyId,
    'performanceInsightsRetentionPeriod': obj.performanceInsightsRetentionPeriod,
    'port': obj.port,
    'preferredBackupWindow': obj.preferredBackupWindow,
    'preferredMaintenanceWindow': obj.preferredMaintenanceWindow,
    'processorFeatures': obj.processorFeatures?.map(y => toJson_RdsInstanceSpecForProviderProcessorFeatures(y)),
    'promotionTier': obj.promotionTier,
    'publiclyAccessible': obj.publiclyAccessible,
    'region': obj.region,
    'restoreFrom': toJson_RdsInstanceSpecForProviderRestoreFrom(obj.restoreFrom),
    'scalingConfiguration': toJson_RdsInstanceSpecForProviderScalingConfiguration(obj.scalingConfiguration),
    'skipFinalSnapshotBeforeDeletion': obj.skipFinalSnapshotBeforeDeletion,
    'storageEncrypted': obj.storageEncrypted,
    'storageType': obj.storageType,
    'tags': obj.tags?.map(y => toJson_RdsInstanceSpecForProviderTags(y)),
    'timezone': obj.timezone,
    'useDefaultProcessorFeatures': obj.useDefaultProcessorFeatures,
    'vpcSecurityGroupIDRefs': obj.vpcSecurityGroupIdRefs?.map(y => toJson_RdsInstanceSpecForProviderVpcSecurityGroupIdRefs(y)),
    'vpcSecurityGroupIDSelector': toJson_RdsInstanceSpecForProviderVpcSecurityGroupIdSelector(obj.vpcSecurityGroupIdSelector),
    'vpcSecurityGroupIds': obj.vpcSecurityGroupIds?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A ManagementAction represents an action that the Crossplane controllers can take on an external resource.
 *
 * @schema RdsInstanceSpecManagementPolicies
 */
export enum RdsInstanceSpecManagementPolicies {
  /** Observe */
  OBSERVE = "Observe",
  /** Create */
  CREATE = "Create",
  /** Update */
  UPDATE = "Update",
  /** Delete */
  DELETE = "Delete",
  /** LateInitialize */
  LATE_INITIALIZE = "LateInitialize",
  /** * */
  VALUE_ASTERISK = "*",
}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema RdsInstanceSpecProviderConfigRef
 */
export interface RdsInstanceSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema RdsInstanceSpecProviderConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema RdsInstanceSpecProviderConfigRef#policy
   */
  readonly policy?: RdsInstanceSpecProviderConfigRefPolicy;

}

/**
 * Converts an object of type 'RdsInstanceSpecProviderConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RdsInstanceSpecProviderConfigRef(obj: RdsInstanceSpecProviderConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_RdsInstanceSpecProviderConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema RdsInstanceSpecPublishConnectionDetailsTo
 */
export interface RdsInstanceSpecPublishConnectionDetailsTo {
  /**
   * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
   *
   * @schema RdsInstanceSpecPublishConnectionDetailsTo#configRef
   */
  readonly configRef?: RdsInstanceSpecPublishConnectionDetailsToConfigRef;

  /**
   * Metadata is the metadata for connection secret.
   *
   * @schema RdsInstanceSpecPublishConnectionDetailsTo#metadata
   */
  readonly metadata?: RdsInstanceSpecPublishConnectionDetailsToMetadata;

  /**
   * Name is the name of the connection secret.
   *
   * @schema RdsInstanceSpecPublishConnectionDetailsTo#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'RdsInstanceSpecPublishConnectionDetailsTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RdsInstanceSpecPublishConnectionDetailsTo(obj: RdsInstanceSpecPublishConnectionDetailsTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configRef': toJson_RdsInstanceSpecPublishConnectionDetailsToConfigRef(obj.configRef),
    'metadata': toJson_RdsInstanceSpecPublishConnectionDetailsToMetadata(obj.metadata),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
 *
 * @schema RdsInstanceSpecWriteConnectionSecretToRef
 */
export interface RdsInstanceSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema RdsInstanceSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema RdsInstanceSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'RdsInstanceSpecWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RdsInstanceSpecWriteConnectionSecretToRef(obj: RdsInstanceSpecWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Deprecated: This field will be removed. Use `enableCloudwatchLogsExports` instead. CloudwatchLogsExportConfiguration is the configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance.
 *
 * @schema RdsInstanceSpecForProviderCloudwatchLogsExportConfiguration
 */
export interface RdsInstanceSpecForProviderCloudwatchLogsExportConfiguration {
  /**
   * DisableLogTypes is the list of log types to disable.
   *
   * @schema RdsInstanceSpecForProviderCloudwatchLogsExportConfiguration#disableLogTypes
   */
  readonly disableLogTypes?: string[];

  /**
   * EnableLogTypes is the list of log types to enable.
   *
   * @schema RdsInstanceSpecForProviderCloudwatchLogsExportConfiguration#enableLogTypes
   */
  readonly enableLogTypes?: string[];

}

/**
 * Converts an object of type 'RdsInstanceSpecForProviderCloudwatchLogsExportConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RdsInstanceSpecForProviderCloudwatchLogsExportConfiguration(obj: RdsInstanceSpecForProviderCloudwatchLogsExportConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'disableLogTypes': obj.disableLogTypes?.map(y => y),
    'enableLogTypes': obj.enableLogTypes?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DBSubnetGroupNameRef is a reference to a DBSubnetGroup used to set DBSubnetGroupName.
 *
 * @schema RdsInstanceSpecForProviderDbSubnetGroupNameRef
 */
export interface RdsInstanceSpecForProviderDbSubnetGroupNameRef {
  /**
   * Name of the referenced object.
   *
   * @schema RdsInstanceSpecForProviderDbSubnetGroupNameRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema RdsInstanceSpecForProviderDbSubnetGroupNameRef#policy
   */
  readonly policy?: RdsInstanceSpecForProviderDbSubnetGroupNameRefPolicy;

}

/**
 * Converts an object of type 'RdsInstanceSpecForProviderDbSubnetGroupNameRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RdsInstanceSpecForProviderDbSubnetGroupNameRef(obj: RdsInstanceSpecForProviderDbSubnetGroupNameRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_RdsInstanceSpecForProviderDbSubnetGroupNameRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DBSubnetGroupNameSelector selects a reference to a DBSubnetGroup used to set DBSubnetGroupName.
 *
 * @schema RdsInstanceSpecForProviderDbSubnetGroupNameSelector
 */
export interface RdsInstanceSpecForProviderDbSubnetGroupNameSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema RdsInstanceSpecForProviderDbSubnetGroupNameSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema RdsInstanceSpecForProviderDbSubnetGroupNameSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

  /**
   * Policies for selection.
   *
   * @schema RdsInstanceSpecForProviderDbSubnetGroupNameSelector#policy
   */
  readonly policy?: RdsInstanceSpecForProviderDbSubnetGroupNameSelectorPolicy;

}

/**
 * Converts an object of type 'RdsInstanceSpecForProviderDbSubnetGroupNameSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RdsInstanceSpecForProviderDbSubnetGroupNameSelector(obj: RdsInstanceSpecForProviderDbSubnetGroupNameSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchControllerRef': obj.matchControllerRef,
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'policy': toJson_RdsInstanceSpecForProviderDbSubnetGroupNameSelectorPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DomainIAMRoleNameRef is a reference to an IAMRole used to set DomainIAMRoleName.
 *
 * @schema RdsInstanceSpecForProviderDomainIamRoleNameRef
 */
export interface RdsInstanceSpecForProviderDomainIamRoleNameRef {
  /**
   * Name of the referenced object.
   *
   * @schema RdsInstanceSpecForProviderDomainIamRoleNameRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema RdsInstanceSpecForProviderDomainIamRoleNameRef#policy
   */
  readonly policy?: RdsInstanceSpecForProviderDomainIamRoleNameRefPolicy;

}

/**
 * Converts an object of type 'RdsInstanceSpecForProviderDomainIamRoleNameRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RdsInstanceSpecForProviderDomainIamRoleNameRef(obj: RdsInstanceSpecForProviderDomainIamRoleNameRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_RdsInstanceSpecForProviderDomainIamRoleNameRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DomainIAMRoleNameSelector selects a reference to an IAMRole used to set DomainIAMRoleName.
 *
 * @schema RdsInstanceSpecForProviderDomainIamRoleNameSelector
 */
export interface RdsInstanceSpecForProviderDomainIamRoleNameSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema RdsInstanceSpecForProviderDomainIamRoleNameSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema RdsInstanceSpecForProviderDomainIamRoleNameSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

  /**
   * Policies for selection.
   *
   * @schema RdsInstanceSpecForProviderDomainIamRoleNameSelector#policy
   */
  readonly policy?: RdsInstanceSpecForProviderDomainIamRoleNameSelectorPolicy;

}

/**
 * Converts an object of type 'RdsInstanceSpecForProviderDomainIamRoleNameSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RdsInstanceSpecForProviderDomainIamRoleNameSelector(obj: RdsInstanceSpecForProviderDomainIamRoleNameSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchControllerRef': obj.matchControllerRef,
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'policy': toJson_RdsInstanceSpecForProviderDomainIamRoleNameSelectorPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * MasterPasswordSecretRef references the secret that contains the password used in the creation of this RDS instance. If no reference is given, a password will be auto-generated.
 *
 * @schema RdsInstanceSpecForProviderMasterPasswordSecretRef
 */
export interface RdsInstanceSpecForProviderMasterPasswordSecretRef {
  /**
   * The key to select.
   *
   * @schema RdsInstanceSpecForProviderMasterPasswordSecretRef#key
   */
  readonly key: string;

  /**
   * Name of the secret.
   *
   * @schema RdsInstanceSpecForProviderMasterPasswordSecretRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema RdsInstanceSpecForProviderMasterPasswordSecretRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'RdsInstanceSpecForProviderMasterPasswordSecretRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RdsInstanceSpecForProviderMasterPasswordSecretRef(obj: RdsInstanceSpecForProviderMasterPasswordSecretRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * MonitoringRoleARNRef is a reference to an IAMRole used to set MonitoringRoleARN.
 *
 * @schema RdsInstanceSpecForProviderMonitoringRoleArnRef
 */
export interface RdsInstanceSpecForProviderMonitoringRoleArnRef {
  /**
   * Name of the referenced object.
   *
   * @schema RdsInstanceSpecForProviderMonitoringRoleArnRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema RdsInstanceSpecForProviderMonitoringRoleArnRef#policy
   */
  readonly policy?: RdsInstanceSpecForProviderMonitoringRoleArnRefPolicy;

}

/**
 * Converts an object of type 'RdsInstanceSpecForProviderMonitoringRoleArnRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RdsInstanceSpecForProviderMonitoringRoleArnRef(obj: RdsInstanceSpecForProviderMonitoringRoleArnRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_RdsInstanceSpecForProviderMonitoringRoleArnRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * MonitoringRoleARNSelector selects a reference to an IAMRole used to set MonitoringRoleARN.
 *
 * @schema RdsInstanceSpecForProviderMonitoringRoleArnSelector
 */
export interface RdsInstanceSpecForProviderMonitoringRoleArnSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema RdsInstanceSpecForProviderMonitoringRoleArnSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema RdsInstanceSpecForProviderMonitoringRoleArnSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

  /**
   * Policies for selection.
   *
   * @schema RdsInstanceSpecForProviderMonitoringRoleArnSelector#policy
   */
  readonly policy?: RdsInstanceSpecForProviderMonitoringRoleArnSelectorPolicy;

}

/**
 * Converts an object of type 'RdsInstanceSpecForProviderMonitoringRoleArnSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RdsInstanceSpecForProviderMonitoringRoleArnSelector(obj: RdsInstanceSpecForProviderMonitoringRoleArnSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchControllerRef': obj.matchControllerRef,
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'policy': toJson_RdsInstanceSpecForProviderMonitoringRoleArnSelectorPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ProcessorFeature is a processor feature entry. For more information, see Configuring the Processor of the DB Instance Class (http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html#USER_ConfigureProcessor) in the Amazon RDS User Guide. Please also see https://docs.aws.amazon.com/goto/WebAPI/rds-2014-10-31/ProcessorFeature
 *
 * @schema RdsInstanceSpecForProviderProcessorFeatures
 */
export interface RdsInstanceSpecForProviderProcessorFeatures {
  /**
   * Name of the processor feature. Valid names are coreCount and threadsPerCore.
   *
   * @schema RdsInstanceSpecForProviderProcessorFeatures#name
   */
  readonly name: string;

  /**
   * Value of a processor feature name.
   *
   * @schema RdsInstanceSpecForProviderProcessorFeatures#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'RdsInstanceSpecForProviderProcessorFeatures' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RdsInstanceSpecForProviderProcessorFeatures(obj: RdsInstanceSpecForProviderProcessorFeatures | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RestoreFrom specifies the details of the backup to restore when creating a new RDS instance. (If the RDS instance already exists, this property will be ignored.)
 *
 * @schema RdsInstanceSpecForProviderRestoreFrom
 */
export interface RdsInstanceSpecForProviderRestoreFrom {
  /**
   * PointInTime specifies the details of the point in time restore.
   *
   * @schema RdsInstanceSpecForProviderRestoreFrom#pointInTime
   */
  readonly pointInTime?: RdsInstanceSpecForProviderRestoreFromPointInTime;

  /**
   * S3 specifies the details of the S3 backup to restore from.
   *
   * @schema RdsInstanceSpecForProviderRestoreFrom#s3
   */
  readonly s3?: RdsInstanceSpecForProviderRestoreFromS3;

  /**
   * Snapshot specifies the details of the database snapshot to restore from.
   *
   * @schema RdsInstanceSpecForProviderRestoreFrom#snapshot
   */
  readonly snapshot?: RdsInstanceSpecForProviderRestoreFromSnapshot;

  /**
   * Source is the type of the backup to restore when creating a new RDS instance. S3, Snapshot and PointInTime are supported.
   *
   * @schema RdsInstanceSpecForProviderRestoreFrom#source
   */
  readonly source: RdsInstanceSpecForProviderRestoreFromSource;

}

/**
 * Converts an object of type 'RdsInstanceSpecForProviderRestoreFrom' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RdsInstanceSpecForProviderRestoreFrom(obj: RdsInstanceSpecForProviderRestoreFrom | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'pointInTime': toJson_RdsInstanceSpecForProviderRestoreFromPointInTime(obj.pointInTime),
    's3': toJson_RdsInstanceSpecForProviderRestoreFromS3(obj.s3),
    'snapshot': toJson_RdsInstanceSpecForProviderRestoreFromSnapshot(obj.snapshot),
    'source': obj.source,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ScalingConfiguration is the scaling properties of the DB cluster. You can only modify scaling properties for DB clusters in serverless DB engine mode.
 *
 * @schema RdsInstanceSpecForProviderScalingConfiguration
 */
export interface RdsInstanceSpecForProviderScalingConfiguration {
  /**
   * AutoPause specifies whether to allow or disallow automatic pause for an Aurora DB cluster in serverless DB engine mode. A DB cluster can be paused only when it's idle (it has no connections). If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it.
   *
   * @schema RdsInstanceSpecForProviderScalingConfiguration#autoPause
   */
  readonly autoPause?: boolean;

  /**
   * MaxCapacity is the maximum capacity for an Aurora DB cluster in serverless DB engine mode. Valid capacity values are 2, 4, 8, 16, 32, 64, 128, and 256. The maximum capacity must be greater than or equal to the minimum capacity.
   *
   * @schema RdsInstanceSpecForProviderScalingConfiguration#maxCapacity
   */
  readonly maxCapacity?: number;

  /**
   * MinCapacity is the minimum capacity for an Aurora DB cluster in serverless DB engine mode. Valid capacity values are 2, 4, 8, 16, 32, 64, 128, and 256. The minimum capacity must be less than or equal to the maximum capacity.
   *
   * @schema RdsInstanceSpecForProviderScalingConfiguration#minCapacity
   */
  readonly minCapacity?: number;

  /**
   * SecondsUntilAutoPause is the time, in seconds, before an Aurora DB cluster in serverless mode is paused.
   *
   * @schema RdsInstanceSpecForProviderScalingConfiguration#secondsUntilAutoPause
   */
  readonly secondsUntilAutoPause?: number;

}

/**
 * Converts an object of type 'RdsInstanceSpecForProviderScalingConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RdsInstanceSpecForProviderScalingConfiguration(obj: RdsInstanceSpecForProviderScalingConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'autoPause': obj.autoPause,
    'maxCapacity': obj.maxCapacity,
    'minCapacity': obj.minCapacity,
    'secondsUntilAutoPause': obj.secondsUntilAutoPause,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Tag is a metadata assigned to an Amazon RDS resource consisting of a key-value pair. Please also see https://docs.aws.amazon.com/goto/WebAPI/rds-2014-10-31/Tag
 *
 * @schema RdsInstanceSpecForProviderTags
 */
export interface RdsInstanceSpecForProviderTags {
  /**
   * A key is the required name of the tag. The string value can be from 1 to 128 Unicode characters in length and can't be prefixed with "aws:" or "rds:". The string can only contain only the set of Unicode letters, digits, white-space, '_', '.', '/', '=', '+', '-' (Java regex: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-]*)$").
   *
   * @schema RdsInstanceSpecForProviderTags#key
   */
  readonly key?: string;

  /**
   * A value is the optional value of the tag. The string value can be from 1 to 256 Unicode characters in length and can't be prefixed with "aws:" or "rds:". The string can only contain only the set of Unicode letters, digits, white-space, '_', '.', '/', '=', '+', '-' (Java regex: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-]*)$").
   *
   * @schema RdsInstanceSpecForProviderTags#value
   */
  readonly value?: string;

}

/**
 * Converts an object of type 'RdsInstanceSpecForProviderTags' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RdsInstanceSpecForProviderTags(obj: RdsInstanceSpecForProviderTags | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A Reference to a named object.
 *
 * @schema RdsInstanceSpecForProviderVpcSecurityGroupIdRefs
 */
export interface RdsInstanceSpecForProviderVpcSecurityGroupIdRefs {
  /**
   * Name of the referenced object.
   *
   * @schema RdsInstanceSpecForProviderVpcSecurityGroupIdRefs#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema RdsInstanceSpecForProviderVpcSecurityGroupIdRefs#policy
   */
  readonly policy?: RdsInstanceSpecForProviderVpcSecurityGroupIdRefsPolicy;

}

/**
 * Converts an object of type 'RdsInstanceSpecForProviderVpcSecurityGroupIdRefs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RdsInstanceSpecForProviderVpcSecurityGroupIdRefs(obj: RdsInstanceSpecForProviderVpcSecurityGroupIdRefs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_RdsInstanceSpecForProviderVpcSecurityGroupIdRefsPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * VPCSecurityGroupIDSelector selects references to VPCSecurityGroups used to set the VPCSecurityGroupIDs.
 *
 * @schema RdsInstanceSpecForProviderVpcSecurityGroupIdSelector
 */
export interface RdsInstanceSpecForProviderVpcSecurityGroupIdSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema RdsInstanceSpecForProviderVpcSecurityGroupIdSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema RdsInstanceSpecForProviderVpcSecurityGroupIdSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

  /**
   * Policies for selection.
   *
   * @schema RdsInstanceSpecForProviderVpcSecurityGroupIdSelector#policy
   */
  readonly policy?: RdsInstanceSpecForProviderVpcSecurityGroupIdSelectorPolicy;

}

/**
 * Converts an object of type 'RdsInstanceSpecForProviderVpcSecurityGroupIdSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RdsInstanceSpecForProviderVpcSecurityGroupIdSelector(obj: RdsInstanceSpecForProviderVpcSecurityGroupIdSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchControllerRef': obj.matchControllerRef,
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'policy': toJson_RdsInstanceSpecForProviderVpcSecurityGroupIdSelectorPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema RdsInstanceSpecProviderConfigRefPolicy
 */
export interface RdsInstanceSpecProviderConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema RdsInstanceSpecProviderConfigRefPolicy#resolution
   */
  readonly resolution?: RdsInstanceSpecProviderConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema RdsInstanceSpecProviderConfigRefPolicy#resolve
   */
  readonly resolve?: RdsInstanceSpecProviderConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'RdsInstanceSpecProviderConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RdsInstanceSpecProviderConfigRefPolicy(obj: RdsInstanceSpecProviderConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
 *
 * @schema RdsInstanceSpecPublishConnectionDetailsToConfigRef
 */
export interface RdsInstanceSpecPublishConnectionDetailsToConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema RdsInstanceSpecPublishConnectionDetailsToConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema RdsInstanceSpecPublishConnectionDetailsToConfigRef#policy
   */
  readonly policy?: RdsInstanceSpecPublishConnectionDetailsToConfigRefPolicy;

}

/**
 * Converts an object of type 'RdsInstanceSpecPublishConnectionDetailsToConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RdsInstanceSpecPublishConnectionDetailsToConfigRef(obj: RdsInstanceSpecPublishConnectionDetailsToConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_RdsInstanceSpecPublishConnectionDetailsToConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Metadata is the metadata for connection secret.
 *
 * @schema RdsInstanceSpecPublishConnectionDetailsToMetadata
 */
export interface RdsInstanceSpecPublishConnectionDetailsToMetadata {
  /**
   * Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
   *
   * @schema RdsInstanceSpecPublishConnectionDetailsToMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
   *
   * @schema RdsInstanceSpecPublishConnectionDetailsToMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
   *
   * @schema RdsInstanceSpecPublishConnectionDetailsToMetadata#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'RdsInstanceSpecPublishConnectionDetailsToMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RdsInstanceSpecPublishConnectionDetailsToMetadata(obj: RdsInstanceSpecPublishConnectionDetailsToMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema RdsInstanceSpecForProviderDbSubnetGroupNameRefPolicy
 */
export interface RdsInstanceSpecForProviderDbSubnetGroupNameRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema RdsInstanceSpecForProviderDbSubnetGroupNameRefPolicy#resolution
   */
  readonly resolution?: RdsInstanceSpecForProviderDbSubnetGroupNameRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema RdsInstanceSpecForProviderDbSubnetGroupNameRefPolicy#resolve
   */
  readonly resolve?: RdsInstanceSpecForProviderDbSubnetGroupNameRefPolicyResolve;

}

/**
 * Converts an object of type 'RdsInstanceSpecForProviderDbSubnetGroupNameRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RdsInstanceSpecForProviderDbSubnetGroupNameRefPolicy(obj: RdsInstanceSpecForProviderDbSubnetGroupNameRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for selection.
 *
 * @schema RdsInstanceSpecForProviderDbSubnetGroupNameSelectorPolicy
 */
export interface RdsInstanceSpecForProviderDbSubnetGroupNameSelectorPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema RdsInstanceSpecForProviderDbSubnetGroupNameSelectorPolicy#resolution
   */
  readonly resolution?: RdsInstanceSpecForProviderDbSubnetGroupNameSelectorPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema RdsInstanceSpecForProviderDbSubnetGroupNameSelectorPolicy#resolve
   */
  readonly resolve?: RdsInstanceSpecForProviderDbSubnetGroupNameSelectorPolicyResolve;

}

/**
 * Converts an object of type 'RdsInstanceSpecForProviderDbSubnetGroupNameSelectorPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RdsInstanceSpecForProviderDbSubnetGroupNameSelectorPolicy(obj: RdsInstanceSpecForProviderDbSubnetGroupNameSelectorPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema RdsInstanceSpecForProviderDomainIamRoleNameRefPolicy
 */
export interface RdsInstanceSpecForProviderDomainIamRoleNameRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema RdsInstanceSpecForProviderDomainIamRoleNameRefPolicy#resolution
   */
  readonly resolution?: RdsInstanceSpecForProviderDomainIamRoleNameRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema RdsInstanceSpecForProviderDomainIamRoleNameRefPolicy#resolve
   */
  readonly resolve?: RdsInstanceSpecForProviderDomainIamRoleNameRefPolicyResolve;

}

/**
 * Converts an object of type 'RdsInstanceSpecForProviderDomainIamRoleNameRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RdsInstanceSpecForProviderDomainIamRoleNameRefPolicy(obj: RdsInstanceSpecForProviderDomainIamRoleNameRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for selection.
 *
 * @schema RdsInstanceSpecForProviderDomainIamRoleNameSelectorPolicy
 */
export interface RdsInstanceSpecForProviderDomainIamRoleNameSelectorPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema RdsInstanceSpecForProviderDomainIamRoleNameSelectorPolicy#resolution
   */
  readonly resolution?: RdsInstanceSpecForProviderDomainIamRoleNameSelectorPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema RdsInstanceSpecForProviderDomainIamRoleNameSelectorPolicy#resolve
   */
  readonly resolve?: RdsInstanceSpecForProviderDomainIamRoleNameSelectorPolicyResolve;

}

/**
 * Converts an object of type 'RdsInstanceSpecForProviderDomainIamRoleNameSelectorPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RdsInstanceSpecForProviderDomainIamRoleNameSelectorPolicy(obj: RdsInstanceSpecForProviderDomainIamRoleNameSelectorPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema RdsInstanceSpecForProviderMonitoringRoleArnRefPolicy
 */
export interface RdsInstanceSpecForProviderMonitoringRoleArnRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema RdsInstanceSpecForProviderMonitoringRoleArnRefPolicy#resolution
   */
  readonly resolution?: RdsInstanceSpecForProviderMonitoringRoleArnRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema RdsInstanceSpecForProviderMonitoringRoleArnRefPolicy#resolve
   */
  readonly resolve?: RdsInstanceSpecForProviderMonitoringRoleArnRefPolicyResolve;

}

/**
 * Converts an object of type 'RdsInstanceSpecForProviderMonitoringRoleArnRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RdsInstanceSpecForProviderMonitoringRoleArnRefPolicy(obj: RdsInstanceSpecForProviderMonitoringRoleArnRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for selection.
 *
 * @schema RdsInstanceSpecForProviderMonitoringRoleArnSelectorPolicy
 */
export interface RdsInstanceSpecForProviderMonitoringRoleArnSelectorPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema RdsInstanceSpecForProviderMonitoringRoleArnSelectorPolicy#resolution
   */
  readonly resolution?: RdsInstanceSpecForProviderMonitoringRoleArnSelectorPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema RdsInstanceSpecForProviderMonitoringRoleArnSelectorPolicy#resolve
   */
  readonly resolve?: RdsInstanceSpecForProviderMonitoringRoleArnSelectorPolicyResolve;

}

/**
 * Converts an object of type 'RdsInstanceSpecForProviderMonitoringRoleArnSelectorPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RdsInstanceSpecForProviderMonitoringRoleArnSelectorPolicy(obj: RdsInstanceSpecForProviderMonitoringRoleArnSelectorPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PointInTime specifies the details of the point in time restore.
 *
 * @schema RdsInstanceSpecForProviderRestoreFromPointInTime
 */
export interface RdsInstanceSpecForProviderRestoreFromPointInTime {
  /**
   * RestoreTime is the date and time (UTC) to restore from. Must be before the latest restorable time for the DB instance. Can't be specified if the useLatestRestorableTime parameter is enabled. Example: 2011-09-07T23:45:00Z
   *
   * @schema RdsInstanceSpecForProviderRestoreFromPointInTime#restoreTime
   */
  readonly restoreTime?: Date;

  /**
   * SourceDBInstanceAutomatedBackupsArn specifies the Amazon Resource Name (ARN) of the replicated automated backups from which to restore. Example: arn:aws:rds:useast-1:123456789012:auto-backup:ab-L2IJCEXJP7XQ7HOJ4SIEXAMPLE
   *
   * @schema RdsInstanceSpecForProviderRestoreFromPointInTime#sourceDBInstanceAutomatedBackupsArn
   */
  readonly sourceDbInstanceAutomatedBackupsArn?: string;

  /**
   * SourceDBInstanceIdentifier specifies the identifier of the source DB instance from which to restore. Constraints: Must match the identifier of an existing DB instance.
   *
   * @schema RdsInstanceSpecForProviderRestoreFromPointInTime#sourceDBInstanceIdentifier
   */
  readonly sourceDbInstanceIdentifier?: string;

  /**
   * SourceDbiResourceID specifies the resource ID of the source DB instance from which to restore.
   *
   * @schema RdsInstanceSpecForProviderRestoreFromPointInTime#sourceDbiResourceId
   */
  readonly sourceDbiResourceId?: string;

  /**
   * UseLatestRestorableTime indicates that the DB instance is restored from the latest backup Can't be specified if the restoreTime parameter is provided.
   *
   * @schema RdsInstanceSpecForProviderRestoreFromPointInTime#useLatestRestorableTime
   */
  readonly useLatestRestorableTime?: boolean;

}

/**
 * Converts an object of type 'RdsInstanceSpecForProviderRestoreFromPointInTime' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RdsInstanceSpecForProviderRestoreFromPointInTime(obj: RdsInstanceSpecForProviderRestoreFromPointInTime | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'restoreTime': obj.restoreTime?.toISOString(),
    'sourceDBInstanceAutomatedBackupsArn': obj.sourceDbInstanceAutomatedBackupsArn,
    'sourceDBInstanceIdentifier': obj.sourceDbInstanceIdentifier,
    'sourceDbiResourceId': obj.sourceDbiResourceId,
    'useLatestRestorableTime': obj.useLatestRestorableTime,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * S3 specifies the details of the S3 backup to restore from.
 *
 * @schema RdsInstanceSpecForProviderRestoreFromS3
 */
export interface RdsInstanceSpecForProviderRestoreFromS3 {
  /**
   * BucketName is the name of the S3 bucket containing the backup to restore.
   *
   * @schema RdsInstanceSpecForProviderRestoreFromS3#bucketName
   */
  readonly bucketName?: string;

  /**
   * BucketNameRef is a reference to a Bucket used to set BucketName.
   *
   * @schema RdsInstanceSpecForProviderRestoreFromS3#bucketNameRef
   */
  readonly bucketNameRef?: RdsInstanceSpecForProviderRestoreFromS3BucketNameRef;

  /**
   * BucketNameSelector selects a reference to a Bucket used to set BucketName.
   *
   * @schema RdsInstanceSpecForProviderRestoreFromS3#bucketNameSelector
   */
  readonly bucketNameSelector?: RdsInstanceSpecForProviderRestoreFromS3BucketNameSelector;

  /**
   * IngestionRoleARN is the IAM role RDS can assume that will allow it to access the contents of the S3 bucket.
   *
   * @schema RdsInstanceSpecForProviderRestoreFromS3#ingestionRoleARN
   */
  readonly ingestionRoleArn?: string;

  /**
   * IngestionRoleARNRef is a reference to a IAM Role used to set IngestionRoleARN.
   *
   * @schema RdsInstanceSpecForProviderRestoreFromS3#ingestionRoleARNRef
   */
  readonly ingestionRoleArnRef?: RdsInstanceSpecForProviderRestoreFromS3IngestionRoleArnRef;

  /**
   * IngestionRoleARNSelector selects a reference to a IAM Role used to set IngestionRoleARN.
   *
   * @schema RdsInstanceSpecForProviderRestoreFromS3#ingestionRoleARNSelector
   */
  readonly ingestionRoleArnSelector?: RdsInstanceSpecForProviderRestoreFromS3IngestionRoleArnSelector;

  /**
   * Prefix is the path prefix of the S3 bucket within which the backup to restore is located.
   *
   * @schema RdsInstanceSpecForProviderRestoreFromS3#prefix
   */
  readonly prefix?: string;

  /**
   * SourceEngine is the engine used to create the backup. Must be "mysql".
   *
   * @schema RdsInstanceSpecForProviderRestoreFromS3#sourceEngine
   */
  readonly sourceEngine: string;

  /**
   * SourceEngineVersion is the version of the engine used to create the backup. Example: "5.7.30"
   *
   * @schema RdsInstanceSpecForProviderRestoreFromS3#sourceEngineVersion
   */
  readonly sourceEngineVersion: string;

}

/**
 * Converts an object of type 'RdsInstanceSpecForProviderRestoreFromS3' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RdsInstanceSpecForProviderRestoreFromS3(obj: RdsInstanceSpecForProviderRestoreFromS3 | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'bucketName': obj.bucketName,
    'bucketNameRef': toJson_RdsInstanceSpecForProviderRestoreFromS3BucketNameRef(obj.bucketNameRef),
    'bucketNameSelector': toJson_RdsInstanceSpecForProviderRestoreFromS3BucketNameSelector(obj.bucketNameSelector),
    'ingestionRoleARN': obj.ingestionRoleArn,
    'ingestionRoleARNRef': toJson_RdsInstanceSpecForProviderRestoreFromS3IngestionRoleArnRef(obj.ingestionRoleArnRef),
    'ingestionRoleARNSelector': toJson_RdsInstanceSpecForProviderRestoreFromS3IngestionRoleArnSelector(obj.ingestionRoleArnSelector),
    'prefix': obj.prefix,
    'sourceEngine': obj.sourceEngine,
    'sourceEngineVersion': obj.sourceEngineVersion,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Snapshot specifies the details of the database snapshot to restore from.
 *
 * @schema RdsInstanceSpecForProviderRestoreFromSnapshot
 */
export interface RdsInstanceSpecForProviderRestoreFromSnapshot {
  /**
   * SnapshotIdentifier is the identifier of the database snapshot to restore.
   *
   * @schema RdsInstanceSpecForProviderRestoreFromSnapshot#snapshotIdentifier
   */
  readonly snapshotIdentifier: string;

}

/**
 * Converts an object of type 'RdsInstanceSpecForProviderRestoreFromSnapshot' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RdsInstanceSpecForProviderRestoreFromSnapshot(obj: RdsInstanceSpecForProviderRestoreFromSnapshot | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'snapshotIdentifier': obj.snapshotIdentifier,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Source is the type of the backup to restore when creating a new RDS instance. S3, Snapshot and PointInTime are supported.
 *
 * @schema RdsInstanceSpecForProviderRestoreFromSource
 */
export enum RdsInstanceSpecForProviderRestoreFromSource {
  /** S3 */
  S3 = "S3",
  /** Snapshot */
  SNAPSHOT = "Snapshot",
  /** PointInTime */
  POINT_IN_TIME = "PointInTime",
}

/**
 * Policies for referencing.
 *
 * @schema RdsInstanceSpecForProviderVpcSecurityGroupIdRefsPolicy
 */
export interface RdsInstanceSpecForProviderVpcSecurityGroupIdRefsPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema RdsInstanceSpecForProviderVpcSecurityGroupIdRefsPolicy#resolution
   */
  readonly resolution?: RdsInstanceSpecForProviderVpcSecurityGroupIdRefsPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema RdsInstanceSpecForProviderVpcSecurityGroupIdRefsPolicy#resolve
   */
  readonly resolve?: RdsInstanceSpecForProviderVpcSecurityGroupIdRefsPolicyResolve;

}

/**
 * Converts an object of type 'RdsInstanceSpecForProviderVpcSecurityGroupIdRefsPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RdsInstanceSpecForProviderVpcSecurityGroupIdRefsPolicy(obj: RdsInstanceSpecForProviderVpcSecurityGroupIdRefsPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for selection.
 *
 * @schema RdsInstanceSpecForProviderVpcSecurityGroupIdSelectorPolicy
 */
export interface RdsInstanceSpecForProviderVpcSecurityGroupIdSelectorPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema RdsInstanceSpecForProviderVpcSecurityGroupIdSelectorPolicy#resolution
   */
  readonly resolution?: RdsInstanceSpecForProviderVpcSecurityGroupIdSelectorPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema RdsInstanceSpecForProviderVpcSecurityGroupIdSelectorPolicy#resolve
   */
  readonly resolve?: RdsInstanceSpecForProviderVpcSecurityGroupIdSelectorPolicyResolve;

}

/**
 * Converts an object of type 'RdsInstanceSpecForProviderVpcSecurityGroupIdSelectorPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RdsInstanceSpecForProviderVpcSecurityGroupIdSelectorPolicy(obj: RdsInstanceSpecForProviderVpcSecurityGroupIdSelectorPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema RdsInstanceSpecProviderConfigRefPolicyResolution
 */
export enum RdsInstanceSpecProviderConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema RdsInstanceSpecProviderConfigRefPolicyResolve
 */
export enum RdsInstanceSpecProviderConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Policies for referencing.
 *
 * @schema RdsInstanceSpecPublishConnectionDetailsToConfigRefPolicy
 */
export interface RdsInstanceSpecPublishConnectionDetailsToConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema RdsInstanceSpecPublishConnectionDetailsToConfigRefPolicy#resolution
   */
  readonly resolution?: RdsInstanceSpecPublishConnectionDetailsToConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema RdsInstanceSpecPublishConnectionDetailsToConfigRefPolicy#resolve
   */
  readonly resolve?: RdsInstanceSpecPublishConnectionDetailsToConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'RdsInstanceSpecPublishConnectionDetailsToConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RdsInstanceSpecPublishConnectionDetailsToConfigRefPolicy(obj: RdsInstanceSpecPublishConnectionDetailsToConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema RdsInstanceSpecForProviderDbSubnetGroupNameRefPolicyResolution
 */
export enum RdsInstanceSpecForProviderDbSubnetGroupNameRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema RdsInstanceSpecForProviderDbSubnetGroupNameRefPolicyResolve
 */
export enum RdsInstanceSpecForProviderDbSubnetGroupNameRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema RdsInstanceSpecForProviderDbSubnetGroupNameSelectorPolicyResolution
 */
export enum RdsInstanceSpecForProviderDbSubnetGroupNameSelectorPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema RdsInstanceSpecForProviderDbSubnetGroupNameSelectorPolicyResolve
 */
export enum RdsInstanceSpecForProviderDbSubnetGroupNameSelectorPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema RdsInstanceSpecForProviderDomainIamRoleNameRefPolicyResolution
 */
export enum RdsInstanceSpecForProviderDomainIamRoleNameRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema RdsInstanceSpecForProviderDomainIamRoleNameRefPolicyResolve
 */
export enum RdsInstanceSpecForProviderDomainIamRoleNameRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema RdsInstanceSpecForProviderDomainIamRoleNameSelectorPolicyResolution
 */
export enum RdsInstanceSpecForProviderDomainIamRoleNameSelectorPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema RdsInstanceSpecForProviderDomainIamRoleNameSelectorPolicyResolve
 */
export enum RdsInstanceSpecForProviderDomainIamRoleNameSelectorPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema RdsInstanceSpecForProviderMonitoringRoleArnRefPolicyResolution
 */
export enum RdsInstanceSpecForProviderMonitoringRoleArnRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema RdsInstanceSpecForProviderMonitoringRoleArnRefPolicyResolve
 */
export enum RdsInstanceSpecForProviderMonitoringRoleArnRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema RdsInstanceSpecForProviderMonitoringRoleArnSelectorPolicyResolution
 */
export enum RdsInstanceSpecForProviderMonitoringRoleArnSelectorPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema RdsInstanceSpecForProviderMonitoringRoleArnSelectorPolicyResolve
 */
export enum RdsInstanceSpecForProviderMonitoringRoleArnSelectorPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * BucketNameRef is a reference to a Bucket used to set BucketName.
 *
 * @schema RdsInstanceSpecForProviderRestoreFromS3BucketNameRef
 */
export interface RdsInstanceSpecForProviderRestoreFromS3BucketNameRef {
  /**
   * Name of the referenced object.
   *
   * @schema RdsInstanceSpecForProviderRestoreFromS3BucketNameRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema RdsInstanceSpecForProviderRestoreFromS3BucketNameRef#policy
   */
  readonly policy?: RdsInstanceSpecForProviderRestoreFromS3BucketNameRefPolicy;

}

/**
 * Converts an object of type 'RdsInstanceSpecForProviderRestoreFromS3BucketNameRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RdsInstanceSpecForProviderRestoreFromS3BucketNameRef(obj: RdsInstanceSpecForProviderRestoreFromS3BucketNameRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_RdsInstanceSpecForProviderRestoreFromS3BucketNameRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * BucketNameSelector selects a reference to a Bucket used to set BucketName.
 *
 * @schema RdsInstanceSpecForProviderRestoreFromS3BucketNameSelector
 */
export interface RdsInstanceSpecForProviderRestoreFromS3BucketNameSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema RdsInstanceSpecForProviderRestoreFromS3BucketNameSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema RdsInstanceSpecForProviderRestoreFromS3BucketNameSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

  /**
   * Policies for selection.
   *
   * @schema RdsInstanceSpecForProviderRestoreFromS3BucketNameSelector#policy
   */
  readonly policy?: RdsInstanceSpecForProviderRestoreFromS3BucketNameSelectorPolicy;

}

/**
 * Converts an object of type 'RdsInstanceSpecForProviderRestoreFromS3BucketNameSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RdsInstanceSpecForProviderRestoreFromS3BucketNameSelector(obj: RdsInstanceSpecForProviderRestoreFromS3BucketNameSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchControllerRef': obj.matchControllerRef,
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'policy': toJson_RdsInstanceSpecForProviderRestoreFromS3BucketNameSelectorPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * IngestionRoleARNRef is a reference to a IAM Role used to set IngestionRoleARN.
 *
 * @schema RdsInstanceSpecForProviderRestoreFromS3IngestionRoleArnRef
 */
export interface RdsInstanceSpecForProviderRestoreFromS3IngestionRoleArnRef {
  /**
   * Name of the referenced object.
   *
   * @schema RdsInstanceSpecForProviderRestoreFromS3IngestionRoleArnRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema RdsInstanceSpecForProviderRestoreFromS3IngestionRoleArnRef#policy
   */
  readonly policy?: RdsInstanceSpecForProviderRestoreFromS3IngestionRoleArnRefPolicy;

}

/**
 * Converts an object of type 'RdsInstanceSpecForProviderRestoreFromS3IngestionRoleArnRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RdsInstanceSpecForProviderRestoreFromS3IngestionRoleArnRef(obj: RdsInstanceSpecForProviderRestoreFromS3IngestionRoleArnRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_RdsInstanceSpecForProviderRestoreFromS3IngestionRoleArnRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * IngestionRoleARNSelector selects a reference to a IAM Role used to set IngestionRoleARN.
 *
 * @schema RdsInstanceSpecForProviderRestoreFromS3IngestionRoleArnSelector
 */
export interface RdsInstanceSpecForProviderRestoreFromS3IngestionRoleArnSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema RdsInstanceSpecForProviderRestoreFromS3IngestionRoleArnSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema RdsInstanceSpecForProviderRestoreFromS3IngestionRoleArnSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

  /**
   * Policies for selection.
   *
   * @schema RdsInstanceSpecForProviderRestoreFromS3IngestionRoleArnSelector#policy
   */
  readonly policy?: RdsInstanceSpecForProviderRestoreFromS3IngestionRoleArnSelectorPolicy;

}

/**
 * Converts an object of type 'RdsInstanceSpecForProviderRestoreFromS3IngestionRoleArnSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RdsInstanceSpecForProviderRestoreFromS3IngestionRoleArnSelector(obj: RdsInstanceSpecForProviderRestoreFromS3IngestionRoleArnSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchControllerRef': obj.matchControllerRef,
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'policy': toJson_RdsInstanceSpecForProviderRestoreFromS3IngestionRoleArnSelectorPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema RdsInstanceSpecForProviderVpcSecurityGroupIdRefsPolicyResolution
 */
export enum RdsInstanceSpecForProviderVpcSecurityGroupIdRefsPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema RdsInstanceSpecForProviderVpcSecurityGroupIdRefsPolicyResolve
 */
export enum RdsInstanceSpecForProviderVpcSecurityGroupIdRefsPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema RdsInstanceSpecForProviderVpcSecurityGroupIdSelectorPolicyResolution
 */
export enum RdsInstanceSpecForProviderVpcSecurityGroupIdSelectorPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema RdsInstanceSpecForProviderVpcSecurityGroupIdSelectorPolicyResolve
 */
export enum RdsInstanceSpecForProviderVpcSecurityGroupIdSelectorPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema RdsInstanceSpecPublishConnectionDetailsToConfigRefPolicyResolution
 */
export enum RdsInstanceSpecPublishConnectionDetailsToConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema RdsInstanceSpecPublishConnectionDetailsToConfigRefPolicyResolve
 */
export enum RdsInstanceSpecPublishConnectionDetailsToConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Policies for referencing.
 *
 * @schema RdsInstanceSpecForProviderRestoreFromS3BucketNameRefPolicy
 */
export interface RdsInstanceSpecForProviderRestoreFromS3BucketNameRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema RdsInstanceSpecForProviderRestoreFromS3BucketNameRefPolicy#resolution
   */
  readonly resolution?: RdsInstanceSpecForProviderRestoreFromS3BucketNameRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema RdsInstanceSpecForProviderRestoreFromS3BucketNameRefPolicy#resolve
   */
  readonly resolve?: RdsInstanceSpecForProviderRestoreFromS3BucketNameRefPolicyResolve;

}

/**
 * Converts an object of type 'RdsInstanceSpecForProviderRestoreFromS3BucketNameRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RdsInstanceSpecForProviderRestoreFromS3BucketNameRefPolicy(obj: RdsInstanceSpecForProviderRestoreFromS3BucketNameRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for selection.
 *
 * @schema RdsInstanceSpecForProviderRestoreFromS3BucketNameSelectorPolicy
 */
export interface RdsInstanceSpecForProviderRestoreFromS3BucketNameSelectorPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema RdsInstanceSpecForProviderRestoreFromS3BucketNameSelectorPolicy#resolution
   */
  readonly resolution?: RdsInstanceSpecForProviderRestoreFromS3BucketNameSelectorPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema RdsInstanceSpecForProviderRestoreFromS3BucketNameSelectorPolicy#resolve
   */
  readonly resolve?: RdsInstanceSpecForProviderRestoreFromS3BucketNameSelectorPolicyResolve;

}

/**
 * Converts an object of type 'RdsInstanceSpecForProviderRestoreFromS3BucketNameSelectorPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RdsInstanceSpecForProviderRestoreFromS3BucketNameSelectorPolicy(obj: RdsInstanceSpecForProviderRestoreFromS3BucketNameSelectorPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema RdsInstanceSpecForProviderRestoreFromS3IngestionRoleArnRefPolicy
 */
export interface RdsInstanceSpecForProviderRestoreFromS3IngestionRoleArnRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema RdsInstanceSpecForProviderRestoreFromS3IngestionRoleArnRefPolicy#resolution
   */
  readonly resolution?: RdsInstanceSpecForProviderRestoreFromS3IngestionRoleArnRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema RdsInstanceSpecForProviderRestoreFromS3IngestionRoleArnRefPolicy#resolve
   */
  readonly resolve?: RdsInstanceSpecForProviderRestoreFromS3IngestionRoleArnRefPolicyResolve;

}

/**
 * Converts an object of type 'RdsInstanceSpecForProviderRestoreFromS3IngestionRoleArnRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RdsInstanceSpecForProviderRestoreFromS3IngestionRoleArnRefPolicy(obj: RdsInstanceSpecForProviderRestoreFromS3IngestionRoleArnRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for selection.
 *
 * @schema RdsInstanceSpecForProviderRestoreFromS3IngestionRoleArnSelectorPolicy
 */
export interface RdsInstanceSpecForProviderRestoreFromS3IngestionRoleArnSelectorPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema RdsInstanceSpecForProviderRestoreFromS3IngestionRoleArnSelectorPolicy#resolution
   */
  readonly resolution?: RdsInstanceSpecForProviderRestoreFromS3IngestionRoleArnSelectorPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema RdsInstanceSpecForProviderRestoreFromS3IngestionRoleArnSelectorPolicy#resolve
   */
  readonly resolve?: RdsInstanceSpecForProviderRestoreFromS3IngestionRoleArnSelectorPolicyResolve;

}

/**
 * Converts an object of type 'RdsInstanceSpecForProviderRestoreFromS3IngestionRoleArnSelectorPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RdsInstanceSpecForProviderRestoreFromS3IngestionRoleArnSelectorPolicy(obj: RdsInstanceSpecForProviderRestoreFromS3IngestionRoleArnSelectorPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema RdsInstanceSpecForProviderRestoreFromS3BucketNameRefPolicyResolution
 */
export enum RdsInstanceSpecForProviderRestoreFromS3BucketNameRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema RdsInstanceSpecForProviderRestoreFromS3BucketNameRefPolicyResolve
 */
export enum RdsInstanceSpecForProviderRestoreFromS3BucketNameRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema RdsInstanceSpecForProviderRestoreFromS3BucketNameSelectorPolicyResolution
 */
export enum RdsInstanceSpecForProviderRestoreFromS3BucketNameSelectorPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema RdsInstanceSpecForProviderRestoreFromS3BucketNameSelectorPolicyResolve
 */
export enum RdsInstanceSpecForProviderRestoreFromS3BucketNameSelectorPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema RdsInstanceSpecForProviderRestoreFromS3IngestionRoleArnRefPolicyResolution
 */
export enum RdsInstanceSpecForProviderRestoreFromS3IngestionRoleArnRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema RdsInstanceSpecForProviderRestoreFromS3IngestionRoleArnRefPolicyResolve
 */
export enum RdsInstanceSpecForProviderRestoreFromS3IngestionRoleArnRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema RdsInstanceSpecForProviderRestoreFromS3IngestionRoleArnSelectorPolicyResolution
 */
export enum RdsInstanceSpecForProviderRestoreFromS3IngestionRoleArnSelectorPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema RdsInstanceSpecForProviderRestoreFromS3IngestionRoleArnSelectorPolicyResolve
 */
export enum RdsInstanceSpecForProviderRestoreFromS3IngestionRoleArnSelectorPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

