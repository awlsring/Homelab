// @ts-nocheck
// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 * A StoreConfig configures how Crossplane controllers should store connection details.
 *
 * @schema StoreConfig
 */
export class StoreConfig extends ApiObject {
  /**
   * Returns the apiVersion and kind for "StoreConfig"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'secrets.crossplane.io/v1alpha1',
    kind: 'StoreConfig',
  }

  /**
   * Renders a Kubernetes manifest for "StoreConfig".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: StoreConfigProps): any {
    return {
      ...StoreConfig.GVK,
      ...toJson_StoreConfigProps(props),
    };
  }

  /**
   * Defines a "StoreConfig" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: StoreConfigProps) {
    super(scope, id, {
      ...StoreConfig.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...StoreConfig.GVK,
      ...toJson_StoreConfigProps(resolved),
    };
  }
}

/**
 * A StoreConfig configures how Crossplane controllers should store connection details.
 *
 * @schema StoreConfig
 */
export interface StoreConfigProps {
  /**
   * @schema StoreConfig#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * A StoreConfigSpec defines the desired state of a StoreConfig.
   *
   * @schema StoreConfig#spec
   */
  readonly spec: StoreConfigSpec;

}

/**
 * Converts an object of type 'StoreConfigProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StoreConfigProps(obj: StoreConfigProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_StoreConfigSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A StoreConfigSpec defines the desired state of a StoreConfig.
 *
 * @schema StoreConfigSpec
 */
export interface StoreConfigSpec {
  /**
   * DefaultScope used for scoping secrets for "cluster-scoped" resources.
   * If store type is "Kubernetes", this would mean the default namespace to
   * store connection secrets for cluster scoped resources.
   * In case of "Vault", this would be used as the default parent path.
   * Typically, should be set as Crossplane installation namespace.
   *
   * @schema StoreConfigSpec#defaultScope
   */
  readonly defaultScope: string;

  /**
   * Kubernetes configures a Kubernetes secret store.
   * If the "type" is "Kubernetes" but no config provided, in cluster config
   * will be used.
   *
   * @schema StoreConfigSpec#kubernetes
   */
  readonly kubernetes?: StoreConfigSpecKubernetes;

  /**
   * Plugin configures External secret store as a plugin.
   *
   * @schema StoreConfigSpec#plugin
   */
  readonly plugin?: StoreConfigSpecPlugin;

  /**
   * Type configures which secret store to be used. Only the configuration
   * block for this store will be used and others will be ignored if provided.
   * Default is Kubernetes.
   *
   * @default Kubernetes.
   * @schema StoreConfigSpec#type
   */
  readonly type?: StoreConfigSpecType;

}

/**
 * Converts an object of type 'StoreConfigSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StoreConfigSpec(obj: StoreConfigSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'defaultScope': obj.defaultScope,
    'kubernetes': toJson_StoreConfigSpecKubernetes(obj.kubernetes),
    'plugin': toJson_StoreConfigSpecPlugin(obj.plugin),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Kubernetes configures a Kubernetes secret store.
 * If the "type" is "Kubernetes" but no config provided, in cluster config
 * will be used.
 *
 * @schema StoreConfigSpecKubernetes
 */
export interface StoreConfigSpecKubernetes {
  /**
   * Credentials used to connect to the Kubernetes API.
   *
   * @schema StoreConfigSpecKubernetes#auth
   */
  readonly auth: StoreConfigSpecKubernetesAuth;

}

/**
 * Converts an object of type 'StoreConfigSpecKubernetes' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StoreConfigSpecKubernetes(obj: StoreConfigSpecKubernetes | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'auth': toJson_StoreConfigSpecKubernetesAuth(obj.auth),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Plugin configures External secret store as a plugin.
 *
 * @schema StoreConfigSpecPlugin
 */
export interface StoreConfigSpecPlugin {
  /**
   * ConfigRef contains store config reference info.
   *
   * @schema StoreConfigSpecPlugin#configRef
   */
  readonly configRef?: StoreConfigSpecPluginConfigRef;

  /**
   * Endpoint is the endpoint of the gRPC server.
   *
   * @schema StoreConfigSpecPlugin#endpoint
   */
  readonly endpoint?: string;

}

/**
 * Converts an object of type 'StoreConfigSpecPlugin' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StoreConfigSpecPlugin(obj: StoreConfigSpecPlugin | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configRef': toJson_StoreConfigSpecPluginConfigRef(obj.configRef),
    'endpoint': obj.endpoint,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Type configures which secret store to be used. Only the configuration
 * block for this store will be used and others will be ignored if provided.
 * Default is Kubernetes.
 *
 * @default Kubernetes.
 * @schema StoreConfigSpecType
 */
export enum StoreConfigSpecType {
  /** Kubernetes */
  KUBERNETES = "Kubernetes",
  /** Vault */
  VAULT = "Vault",
  /** Plugin */
  PLUGIN = "Plugin",
}

/**
 * Credentials used to connect to the Kubernetes API.
 *
 * @schema StoreConfigSpecKubernetesAuth
 */
export interface StoreConfigSpecKubernetesAuth {
  /**
   * Env is a reference to an environment variable that contains credentials
   * that must be used to connect to the provider.
   *
   * @schema StoreConfigSpecKubernetesAuth#env
   */
  readonly env?: StoreConfigSpecKubernetesAuthEnv;

  /**
   * Fs is a reference to a filesystem location that contains credentials that
   * must be used to connect to the provider.
   *
   * @schema StoreConfigSpecKubernetesAuth#fs
   */
  readonly fs?: StoreConfigSpecKubernetesAuthFs;

  /**
   * A SecretRef is a reference to a secret key that contains the credentials
   * that must be used to connect to the provider.
   *
   * @schema StoreConfigSpecKubernetesAuth#secretRef
   */
  readonly secretRef?: StoreConfigSpecKubernetesAuthSecretRef;

  /**
   * Source of the credentials.
   *
   * @schema StoreConfigSpecKubernetesAuth#source
   */
  readonly source: StoreConfigSpecKubernetesAuthSource;

}

/**
 * Converts an object of type 'StoreConfigSpecKubernetesAuth' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StoreConfigSpecKubernetesAuth(obj: StoreConfigSpecKubernetesAuth | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'env': toJson_StoreConfigSpecKubernetesAuthEnv(obj.env),
    'fs': toJson_StoreConfigSpecKubernetesAuthFs(obj.fs),
    'secretRef': toJson_StoreConfigSpecKubernetesAuthSecretRef(obj.secretRef),
    'source': obj.source,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ConfigRef contains store config reference info.
 *
 * @schema StoreConfigSpecPluginConfigRef
 */
export interface StoreConfigSpecPluginConfigRef {
  /**
   * APIVersion of the referenced config.
   *
   * @schema StoreConfigSpecPluginConfigRef#apiVersion
   */
  readonly apiVersion: string;

  /**
   * Kind of the referenced config.
   *
   * @schema StoreConfigSpecPluginConfigRef#kind
   */
  readonly kind: string;

  /**
   * Name of the referenced config.
   *
   * @schema StoreConfigSpecPluginConfigRef#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'StoreConfigSpecPluginConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StoreConfigSpecPluginConfigRef(obj: StoreConfigSpecPluginConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'kind': obj.kind,
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Env is a reference to an environment variable that contains credentials
 * that must be used to connect to the provider.
 *
 * @schema StoreConfigSpecKubernetesAuthEnv
 */
export interface StoreConfigSpecKubernetesAuthEnv {
  /**
   * Name is the name of an environment variable.
   *
   * @schema StoreConfigSpecKubernetesAuthEnv#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'StoreConfigSpecKubernetesAuthEnv' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StoreConfigSpecKubernetesAuthEnv(obj: StoreConfigSpecKubernetesAuthEnv | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Fs is a reference to a filesystem location that contains credentials that
 * must be used to connect to the provider.
 *
 * @schema StoreConfigSpecKubernetesAuthFs
 */
export interface StoreConfigSpecKubernetesAuthFs {
  /**
   * Path is a filesystem path.
   *
   * @schema StoreConfigSpecKubernetesAuthFs#path
   */
  readonly path: string;

}

/**
 * Converts an object of type 'StoreConfigSpecKubernetesAuthFs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StoreConfigSpecKubernetesAuthFs(obj: StoreConfigSpecKubernetesAuthFs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'path': obj.path,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A SecretRef is a reference to a secret key that contains the credentials
 * that must be used to connect to the provider.
 *
 * @schema StoreConfigSpecKubernetesAuthSecretRef
 */
export interface StoreConfigSpecKubernetesAuthSecretRef {
  /**
   * The key to select.
   *
   * @schema StoreConfigSpecKubernetesAuthSecretRef#key
   */
  readonly key: string;

  /**
   * Name of the secret.
   *
   * @schema StoreConfigSpecKubernetesAuthSecretRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema StoreConfigSpecKubernetesAuthSecretRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'StoreConfigSpecKubernetesAuthSecretRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StoreConfigSpecKubernetesAuthSecretRef(obj: StoreConfigSpecKubernetesAuthSecretRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Source of the credentials.
 *
 * @schema StoreConfigSpecKubernetesAuthSource
 */
export enum StoreConfigSpecKubernetesAuthSource {
  /** None */
  NONE = "None",
  /** Secret */
  SECRET = "Secret",
  /** Environment */
  ENVIRONMENT = "Environment",
  /** Filesystem */
  FILESYSTEM = "Filesystem",
}

