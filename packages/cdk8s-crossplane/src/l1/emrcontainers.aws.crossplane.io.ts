// @ts-nocheck
// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 * JobRun is the Schema for the JobRuns API
 *
 * @schema JobRun
 */
export class JobRun extends ApiObject {
  /**
   * Returns the apiVersion and kind for "JobRun"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'emrcontainers.aws.crossplane.io/v1alpha1',
    kind: 'JobRun',
  }

  /**
   * Renders a Kubernetes manifest for "JobRun".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: JobRunProps): any {
    return {
      ...JobRun.GVK,
      ...toJson_JobRunProps(props),
    };
  }

  /**
   * Defines a "JobRun" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: JobRunProps) {
    super(scope, id, {
      ...JobRun.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...JobRun.GVK,
      ...toJson_JobRunProps(resolved),
    };
  }
}

/**
 * JobRun is the Schema for the JobRuns API
 *
 * @schema JobRun
 */
export interface JobRunProps {
  /**
   * @schema JobRun#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * JobRunSpec defines the desired state of JobRun
   *
   * @schema JobRun#spec
   */
  readonly spec: JobRunSpec;

}

/**
 * Converts an object of type 'JobRunProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobRunProps(obj: JobRunProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_JobRunSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * JobRunSpec defines the desired state of JobRun
 *
 * @schema JobRunSpec
 */
export interface JobRunSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
   *
   * @schema JobRunSpec#deletionPolicy
   */
  readonly deletionPolicy?: JobRunSpecDeletionPolicy;

  /**
   * JobRunParameters defines the desired state of JobRun
   *
   * @schema JobRunSpec#forProvider
   */
  readonly forProvider: JobRunSpecForProvider;

  /**
   * THIS IS A BETA FIELD. It is on by default but can be opted out through a Crossplane feature flag. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
   *
   * @schema JobRunSpec#managementPolicies
   */
  readonly managementPolicies?: JobRunSpecManagementPolicies[];

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema JobRunSpec#providerConfigRef
   */
  readonly providerConfigRef?: JobRunSpecProviderConfigRef;

  /**
   * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema JobRunSpec#publishConnectionDetailsTo
   */
  readonly publishConnectionDetailsTo?: JobRunSpecPublishConnectionDetailsTo;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
   *
   * @schema JobRunSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: JobRunSpecWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'JobRunSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobRunSpec(obj: JobRunSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'deletionPolicy': obj.deletionPolicy,
    'forProvider': toJson_JobRunSpecForProvider(obj.forProvider),
    'managementPolicies': obj.managementPolicies?.map(y => y),
    'providerConfigRef': toJson_JobRunSpecProviderConfigRef(obj.providerConfigRef),
    'publishConnectionDetailsTo': toJson_JobRunSpecPublishConnectionDetailsTo(obj.publishConnectionDetailsTo),
    'writeConnectionSecretToRef': toJson_JobRunSpecWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
 *
 * @schema JobRunSpecDeletionPolicy
 */
export enum JobRunSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * JobRunParameters defines the desired state of JobRun
 *
 * @schema JobRunSpecForProvider
 */
export interface JobRunSpecForProvider {
  /**
   * @schema JobRunSpecForProvider#configurationOverrides
   */
  readonly configurationOverrides?: string;

  /**
   * The execution role ARN for the job run.
   *
   * @schema JobRunSpecForProvider#executionRoleARN
   */
  readonly executionRoleArn?: string;

  /**
   * The job driver for the job run.
   *
   * @schema JobRunSpecForProvider#jobDriver
   */
  readonly jobDriver?: JobRunSpecForProviderJobDriver;

  /**
   * The job template ID to be used to start the job run.
   *
   * @schema JobRunSpecForProvider#jobTemplateID
   */
  readonly jobTemplateId?: string;

  /**
   * The values of job template parameters to start a job run.
   *
   * @schema JobRunSpecForProvider#jobTemplateParameters
   */
  readonly jobTemplateParameters?: { [key: string]: string };

  /**
   * Region is which region the JobRun will be created.
   *
   * @schema JobRunSpecForProvider#region
   */
  readonly region: string;

  /**
   * The Amazon EMR release version to use for the job run.
   *
   * @schema JobRunSpecForProvider#releaseLabel
   */
  readonly releaseLabel?: string;

  /**
   * The retry policy configuration for the job run.
   *
   * @schema JobRunSpecForProvider#retryPolicyConfiguration
   */
  readonly retryPolicyConfiguration?: JobRunSpecForProviderRetryPolicyConfiguration;

  /**
   * The tags assigned to job runs.
   *
   * @schema JobRunSpecForProvider#tags
   */
  readonly tags?: { [key: string]: string };

  /**
   * The virtual cluster ID for which the job run request is submitted.
   *
   * @schema JobRunSpecForProvider#virtualClusterId
   */
  readonly virtualClusterId?: string;

  /**
   * VirtualClusterIdRef is a reference to an API used to set the VirtualClusterId.
   *
   * @schema JobRunSpecForProvider#virtualClusterIdRef
   */
  readonly virtualClusterIdRef?: JobRunSpecForProviderVirtualClusterIdRef;

  /**
   * VirtualClusterIdSelector is a reference to an API used to set the VirtualClusterIdSelector.
   *
   * @schema JobRunSpecForProvider#virtualClusterIdSelector
   */
  readonly virtualClusterIdSelector?: JobRunSpecForProviderVirtualClusterIdSelector;

}

/**
 * Converts an object of type 'JobRunSpecForProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobRunSpecForProvider(obj: JobRunSpecForProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configurationOverrides': obj.configurationOverrides,
    'executionRoleARN': obj.executionRoleArn,
    'jobDriver': toJson_JobRunSpecForProviderJobDriver(obj.jobDriver),
    'jobTemplateID': obj.jobTemplateId,
    'jobTemplateParameters': ((obj.jobTemplateParameters) === undefined) ? undefined : (Object.entries(obj.jobTemplateParameters).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'region': obj.region,
    'releaseLabel': obj.releaseLabel,
    'retryPolicyConfiguration': toJson_JobRunSpecForProviderRetryPolicyConfiguration(obj.retryPolicyConfiguration),
    'tags': ((obj.tags) === undefined) ? undefined : (Object.entries(obj.tags).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'virtualClusterId': obj.virtualClusterId,
    'virtualClusterIdRef': toJson_JobRunSpecForProviderVirtualClusterIdRef(obj.virtualClusterIdRef),
    'virtualClusterIdSelector': toJson_JobRunSpecForProviderVirtualClusterIdSelector(obj.virtualClusterIdSelector),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A ManagementAction represents an action that the Crossplane controllers can take on an external resource.
 *
 * @schema JobRunSpecManagementPolicies
 */
export enum JobRunSpecManagementPolicies {
  /** Observe */
  OBSERVE = "Observe",
  /** Create */
  CREATE = "Create",
  /** Update */
  UPDATE = "Update",
  /** Delete */
  DELETE = "Delete",
  /** LateInitialize */
  LATE_INITIALIZE = "LateInitialize",
  /** * */
  VALUE_ASTERISK = "*",
}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema JobRunSpecProviderConfigRef
 */
export interface JobRunSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema JobRunSpecProviderConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema JobRunSpecProviderConfigRef#policy
   */
  readonly policy?: JobRunSpecProviderConfigRefPolicy;

}

/**
 * Converts an object of type 'JobRunSpecProviderConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobRunSpecProviderConfigRef(obj: JobRunSpecProviderConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_JobRunSpecProviderConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema JobRunSpecPublishConnectionDetailsTo
 */
export interface JobRunSpecPublishConnectionDetailsTo {
  /**
   * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
   *
   * @schema JobRunSpecPublishConnectionDetailsTo#configRef
   */
  readonly configRef?: JobRunSpecPublishConnectionDetailsToConfigRef;

  /**
   * Metadata is the metadata for connection secret.
   *
   * @schema JobRunSpecPublishConnectionDetailsTo#metadata
   */
  readonly metadata?: JobRunSpecPublishConnectionDetailsToMetadata;

  /**
   * Name is the name of the connection secret.
   *
   * @schema JobRunSpecPublishConnectionDetailsTo#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'JobRunSpecPublishConnectionDetailsTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobRunSpecPublishConnectionDetailsTo(obj: JobRunSpecPublishConnectionDetailsTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configRef': toJson_JobRunSpecPublishConnectionDetailsToConfigRef(obj.configRef),
    'metadata': toJson_JobRunSpecPublishConnectionDetailsToMetadata(obj.metadata),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
 *
 * @schema JobRunSpecWriteConnectionSecretToRef
 */
export interface JobRunSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema JobRunSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema JobRunSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'JobRunSpecWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobRunSpecWriteConnectionSecretToRef(obj: JobRunSpecWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The job driver for the job run.
 *
 * @schema JobRunSpecForProviderJobDriver
 */
export interface JobRunSpecForProviderJobDriver {
  /**
   * The job driver for job type.
   *
   * @schema JobRunSpecForProviderJobDriver#sparkSQLJobDriver
   */
  readonly sparkSqlJobDriver?: JobRunSpecForProviderJobDriverSparkSqlJobDriver;

  /**
   * The information about job driver for Spark submit.
   *
   * @schema JobRunSpecForProviderJobDriver#sparkSubmitJobDriver
   */
  readonly sparkSubmitJobDriver?: JobRunSpecForProviderJobDriverSparkSubmitJobDriver;

}

/**
 * Converts an object of type 'JobRunSpecForProviderJobDriver' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobRunSpecForProviderJobDriver(obj: JobRunSpecForProviderJobDriver | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'sparkSQLJobDriver': toJson_JobRunSpecForProviderJobDriverSparkSqlJobDriver(obj.sparkSqlJobDriver),
    'sparkSubmitJobDriver': toJson_JobRunSpecForProviderJobDriverSparkSubmitJobDriver(obj.sparkSubmitJobDriver),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The retry policy configuration for the job run.
 *
 * @schema JobRunSpecForProviderRetryPolicyConfiguration
 */
export interface JobRunSpecForProviderRetryPolicyConfiguration {
  /**
   * @schema JobRunSpecForProviderRetryPolicyConfiguration#maxAttempts
   */
  readonly maxAttempts?: number;

}

/**
 * Converts an object of type 'JobRunSpecForProviderRetryPolicyConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobRunSpecForProviderRetryPolicyConfiguration(obj: JobRunSpecForProviderRetryPolicyConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'maxAttempts': obj.maxAttempts,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * VirtualClusterIdRef is a reference to an API used to set the VirtualClusterId.
 *
 * @schema JobRunSpecForProviderVirtualClusterIdRef
 */
export interface JobRunSpecForProviderVirtualClusterIdRef {
  /**
   * Name of the referenced object.
   *
   * @schema JobRunSpecForProviderVirtualClusterIdRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema JobRunSpecForProviderVirtualClusterIdRef#policy
   */
  readonly policy?: JobRunSpecForProviderVirtualClusterIdRefPolicy;

}

/**
 * Converts an object of type 'JobRunSpecForProviderVirtualClusterIdRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobRunSpecForProviderVirtualClusterIdRef(obj: JobRunSpecForProviderVirtualClusterIdRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_JobRunSpecForProviderVirtualClusterIdRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * VirtualClusterIdSelector is a reference to an API used to set the VirtualClusterIdSelector.
 *
 * @schema JobRunSpecForProviderVirtualClusterIdSelector
 */
export interface JobRunSpecForProviderVirtualClusterIdSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema JobRunSpecForProviderVirtualClusterIdSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema JobRunSpecForProviderVirtualClusterIdSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

  /**
   * Policies for selection.
   *
   * @schema JobRunSpecForProviderVirtualClusterIdSelector#policy
   */
  readonly policy?: JobRunSpecForProviderVirtualClusterIdSelectorPolicy;

}

/**
 * Converts an object of type 'JobRunSpecForProviderVirtualClusterIdSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobRunSpecForProviderVirtualClusterIdSelector(obj: JobRunSpecForProviderVirtualClusterIdSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchControllerRef': obj.matchControllerRef,
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'policy': toJson_JobRunSpecForProviderVirtualClusterIdSelectorPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema JobRunSpecProviderConfigRefPolicy
 */
export interface JobRunSpecProviderConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema JobRunSpecProviderConfigRefPolicy#resolution
   */
  readonly resolution?: JobRunSpecProviderConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema JobRunSpecProviderConfigRefPolicy#resolve
   */
  readonly resolve?: JobRunSpecProviderConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'JobRunSpecProviderConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobRunSpecProviderConfigRefPolicy(obj: JobRunSpecProviderConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
 *
 * @schema JobRunSpecPublishConnectionDetailsToConfigRef
 */
export interface JobRunSpecPublishConnectionDetailsToConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema JobRunSpecPublishConnectionDetailsToConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema JobRunSpecPublishConnectionDetailsToConfigRef#policy
   */
  readonly policy?: JobRunSpecPublishConnectionDetailsToConfigRefPolicy;

}

/**
 * Converts an object of type 'JobRunSpecPublishConnectionDetailsToConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobRunSpecPublishConnectionDetailsToConfigRef(obj: JobRunSpecPublishConnectionDetailsToConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_JobRunSpecPublishConnectionDetailsToConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Metadata is the metadata for connection secret.
 *
 * @schema JobRunSpecPublishConnectionDetailsToMetadata
 */
export interface JobRunSpecPublishConnectionDetailsToMetadata {
  /**
   * Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
   *
   * @schema JobRunSpecPublishConnectionDetailsToMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
   *
   * @schema JobRunSpecPublishConnectionDetailsToMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
   *
   * @schema JobRunSpecPublishConnectionDetailsToMetadata#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'JobRunSpecPublishConnectionDetailsToMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobRunSpecPublishConnectionDetailsToMetadata(obj: JobRunSpecPublishConnectionDetailsToMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The job driver for job type.
 *
 * @schema JobRunSpecForProviderJobDriverSparkSqlJobDriver
 */
export interface JobRunSpecForProviderJobDriverSparkSqlJobDriver {
  /**
   * @schema JobRunSpecForProviderJobDriverSparkSqlJobDriver#entryPoint
   */
  readonly entryPoint?: string;

  /**
   * @schema JobRunSpecForProviderJobDriverSparkSqlJobDriver#sparkSQLParameters
   */
  readonly sparkSqlParameters?: string;

}

/**
 * Converts an object of type 'JobRunSpecForProviderJobDriverSparkSqlJobDriver' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobRunSpecForProviderJobDriverSparkSqlJobDriver(obj: JobRunSpecForProviderJobDriverSparkSqlJobDriver | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'entryPoint': obj.entryPoint,
    'sparkSQLParameters': obj.sparkSqlParameters,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The information about job driver for Spark submit.
 *
 * @schema JobRunSpecForProviderJobDriverSparkSubmitJobDriver
 */
export interface JobRunSpecForProviderJobDriverSparkSubmitJobDriver {
  /**
   * @schema JobRunSpecForProviderJobDriverSparkSubmitJobDriver#entryPoint
   */
  readonly entryPoint?: string;

  /**
   * @schema JobRunSpecForProviderJobDriverSparkSubmitJobDriver#entryPointArguments
   */
  readonly entryPointArguments?: string[];

  /**
   * @schema JobRunSpecForProviderJobDriverSparkSubmitJobDriver#sparkSubmitParameters
   */
  readonly sparkSubmitParameters?: string;

}

/**
 * Converts an object of type 'JobRunSpecForProviderJobDriverSparkSubmitJobDriver' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobRunSpecForProviderJobDriverSparkSubmitJobDriver(obj: JobRunSpecForProviderJobDriverSparkSubmitJobDriver | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'entryPoint': obj.entryPoint,
    'entryPointArguments': obj.entryPointArguments?.map(y => y),
    'sparkSubmitParameters': obj.sparkSubmitParameters,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema JobRunSpecForProviderVirtualClusterIdRefPolicy
 */
export interface JobRunSpecForProviderVirtualClusterIdRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema JobRunSpecForProviderVirtualClusterIdRefPolicy#resolution
   */
  readonly resolution?: JobRunSpecForProviderVirtualClusterIdRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema JobRunSpecForProviderVirtualClusterIdRefPolicy#resolve
   */
  readonly resolve?: JobRunSpecForProviderVirtualClusterIdRefPolicyResolve;

}

/**
 * Converts an object of type 'JobRunSpecForProviderVirtualClusterIdRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobRunSpecForProviderVirtualClusterIdRefPolicy(obj: JobRunSpecForProviderVirtualClusterIdRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for selection.
 *
 * @schema JobRunSpecForProviderVirtualClusterIdSelectorPolicy
 */
export interface JobRunSpecForProviderVirtualClusterIdSelectorPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema JobRunSpecForProviderVirtualClusterIdSelectorPolicy#resolution
   */
  readonly resolution?: JobRunSpecForProviderVirtualClusterIdSelectorPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema JobRunSpecForProviderVirtualClusterIdSelectorPolicy#resolve
   */
  readonly resolve?: JobRunSpecForProviderVirtualClusterIdSelectorPolicyResolve;

}

/**
 * Converts an object of type 'JobRunSpecForProviderVirtualClusterIdSelectorPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobRunSpecForProviderVirtualClusterIdSelectorPolicy(obj: JobRunSpecForProviderVirtualClusterIdSelectorPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema JobRunSpecProviderConfigRefPolicyResolution
 */
export enum JobRunSpecProviderConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema JobRunSpecProviderConfigRefPolicyResolve
 */
export enum JobRunSpecProviderConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Policies for referencing.
 *
 * @schema JobRunSpecPublishConnectionDetailsToConfigRefPolicy
 */
export interface JobRunSpecPublishConnectionDetailsToConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema JobRunSpecPublishConnectionDetailsToConfigRefPolicy#resolution
   */
  readonly resolution?: JobRunSpecPublishConnectionDetailsToConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema JobRunSpecPublishConnectionDetailsToConfigRefPolicy#resolve
   */
  readonly resolve?: JobRunSpecPublishConnectionDetailsToConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'JobRunSpecPublishConnectionDetailsToConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_JobRunSpecPublishConnectionDetailsToConfigRefPolicy(obj: JobRunSpecPublishConnectionDetailsToConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema JobRunSpecForProviderVirtualClusterIdRefPolicyResolution
 */
export enum JobRunSpecForProviderVirtualClusterIdRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema JobRunSpecForProviderVirtualClusterIdRefPolicyResolve
 */
export enum JobRunSpecForProviderVirtualClusterIdRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema JobRunSpecForProviderVirtualClusterIdSelectorPolicyResolution
 */
export enum JobRunSpecForProviderVirtualClusterIdSelectorPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema JobRunSpecForProviderVirtualClusterIdSelectorPolicyResolve
 */
export enum JobRunSpecForProviderVirtualClusterIdSelectorPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema JobRunSpecPublishConnectionDetailsToConfigRefPolicyResolution
 */
export enum JobRunSpecPublishConnectionDetailsToConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema JobRunSpecPublishConnectionDetailsToConfigRefPolicyResolve
 */
export enum JobRunSpecPublishConnectionDetailsToConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}


/**
 * VirtualCluster is the Schema for the VirtualClusters API
 *
 * @schema VirtualCluster
 */
export class VirtualCluster extends ApiObject {
  /**
   * Returns the apiVersion and kind for "VirtualCluster"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'emrcontainers.aws.crossplane.io/v1alpha1',
    kind: 'VirtualCluster',
  }

  /**
   * Renders a Kubernetes manifest for "VirtualCluster".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: VirtualClusterProps): any {
    return {
      ...VirtualCluster.GVK,
      ...toJson_VirtualClusterProps(props),
    };
  }

  /**
   * Defines a "VirtualCluster" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: VirtualClusterProps) {
    super(scope, id, {
      ...VirtualCluster.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...VirtualCluster.GVK,
      ...toJson_VirtualClusterProps(resolved),
    };
  }
}

/**
 * VirtualCluster is the Schema for the VirtualClusters API
 *
 * @schema VirtualCluster
 */
export interface VirtualClusterProps {
  /**
   * @schema VirtualCluster#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * VirtualClusterSpec defines the desired state of VirtualCluster
   *
   * @schema VirtualCluster#spec
   */
  readonly spec: VirtualClusterSpec;

}

/**
 * Converts an object of type 'VirtualClusterProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualClusterProps(obj: VirtualClusterProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_VirtualClusterSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * VirtualClusterSpec defines the desired state of VirtualCluster
 *
 * @schema VirtualClusterSpec
 */
export interface VirtualClusterSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
   *
   * @schema VirtualClusterSpec#deletionPolicy
   */
  readonly deletionPolicy?: VirtualClusterSpecDeletionPolicy;

  /**
   * VirtualClusterParameters defines the desired state of VirtualCluster
   *
   * @schema VirtualClusterSpec#forProvider
   */
  readonly forProvider: VirtualClusterSpecForProvider;

  /**
   * THIS IS A BETA FIELD. It is on by default but can be opted out through a Crossplane feature flag. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
   *
   * @schema VirtualClusterSpec#managementPolicies
   */
  readonly managementPolicies?: VirtualClusterSpecManagementPolicies[];

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema VirtualClusterSpec#providerConfigRef
   */
  readonly providerConfigRef?: VirtualClusterSpecProviderConfigRef;

  /**
   * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema VirtualClusterSpec#publishConnectionDetailsTo
   */
  readonly publishConnectionDetailsTo?: VirtualClusterSpecPublishConnectionDetailsTo;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
   *
   * @schema VirtualClusterSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: VirtualClusterSpecWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'VirtualClusterSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualClusterSpec(obj: VirtualClusterSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'deletionPolicy': obj.deletionPolicy,
    'forProvider': toJson_VirtualClusterSpecForProvider(obj.forProvider),
    'managementPolicies': obj.managementPolicies?.map(y => y),
    'providerConfigRef': toJson_VirtualClusterSpecProviderConfigRef(obj.providerConfigRef),
    'publishConnectionDetailsTo': toJson_VirtualClusterSpecPublishConnectionDetailsTo(obj.publishConnectionDetailsTo),
    'writeConnectionSecretToRef': toJson_VirtualClusterSpecWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
 *
 * @schema VirtualClusterSpecDeletionPolicy
 */
export enum VirtualClusterSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * VirtualClusterParameters defines the desired state of VirtualCluster
 *
 * @schema VirtualClusterSpecForProvider
 */
export interface VirtualClusterSpecForProvider {
  /**
   * The container provider of the virtual cluster.
   *
   * @schema VirtualClusterSpecForProvider#containerProvider
   */
  readonly containerProvider: VirtualClusterSpecForProviderContainerProvider;

  /**
   * Region is which region the VirtualCluster will be created.
   *
   * @schema VirtualClusterSpecForProvider#region
   */
  readonly region: string;

  /**
   * The tags assigned to the virtual cluster.
   *
   * @schema VirtualClusterSpecForProvider#tags
   */
  readonly tags?: { [key: string]: string };

}

/**
 * Converts an object of type 'VirtualClusterSpecForProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualClusterSpecForProvider(obj: VirtualClusterSpecForProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'containerProvider': toJson_VirtualClusterSpecForProviderContainerProvider(obj.containerProvider),
    'region': obj.region,
    'tags': ((obj.tags) === undefined) ? undefined : (Object.entries(obj.tags).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A ManagementAction represents an action that the Crossplane controllers can take on an external resource.
 *
 * @schema VirtualClusterSpecManagementPolicies
 */
export enum VirtualClusterSpecManagementPolicies {
  /** Observe */
  OBSERVE = "Observe",
  /** Create */
  CREATE = "Create",
  /** Update */
  UPDATE = "Update",
  /** Delete */
  DELETE = "Delete",
  /** LateInitialize */
  LATE_INITIALIZE = "LateInitialize",
  /** * */
  VALUE_ASTERISK = "*",
}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema VirtualClusterSpecProviderConfigRef
 */
export interface VirtualClusterSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema VirtualClusterSpecProviderConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema VirtualClusterSpecProviderConfigRef#policy
   */
  readonly policy?: VirtualClusterSpecProviderConfigRefPolicy;

}

/**
 * Converts an object of type 'VirtualClusterSpecProviderConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualClusterSpecProviderConfigRef(obj: VirtualClusterSpecProviderConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_VirtualClusterSpecProviderConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema VirtualClusterSpecPublishConnectionDetailsTo
 */
export interface VirtualClusterSpecPublishConnectionDetailsTo {
  /**
   * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
   *
   * @schema VirtualClusterSpecPublishConnectionDetailsTo#configRef
   */
  readonly configRef?: VirtualClusterSpecPublishConnectionDetailsToConfigRef;

  /**
   * Metadata is the metadata for connection secret.
   *
   * @schema VirtualClusterSpecPublishConnectionDetailsTo#metadata
   */
  readonly metadata?: VirtualClusterSpecPublishConnectionDetailsToMetadata;

  /**
   * Name is the name of the connection secret.
   *
   * @schema VirtualClusterSpecPublishConnectionDetailsTo#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'VirtualClusterSpecPublishConnectionDetailsTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualClusterSpecPublishConnectionDetailsTo(obj: VirtualClusterSpecPublishConnectionDetailsTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configRef': toJson_VirtualClusterSpecPublishConnectionDetailsToConfigRef(obj.configRef),
    'metadata': toJson_VirtualClusterSpecPublishConnectionDetailsToMetadata(obj.metadata),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
 *
 * @schema VirtualClusterSpecWriteConnectionSecretToRef
 */
export interface VirtualClusterSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema VirtualClusterSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema VirtualClusterSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'VirtualClusterSpecWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualClusterSpecWriteConnectionSecretToRef(obj: VirtualClusterSpecWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The container provider of the virtual cluster.
 *
 * @schema VirtualClusterSpecForProviderContainerProvider
 */
export interface VirtualClusterSpecForProviderContainerProvider {
  /**
   * @schema VirtualClusterSpecForProviderContainerProvider#id
   */
  readonly id?: string;

  /**
   * The information about the container used for a job run or a managed endpoint.
   *
   * @schema VirtualClusterSpecForProviderContainerProvider#info
   */
  readonly info?: VirtualClusterSpecForProviderContainerProviderInfo;

  /**
   * @schema VirtualClusterSpecForProviderContainerProvider#type_
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'VirtualClusterSpecForProviderContainerProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualClusterSpecForProviderContainerProvider(obj: VirtualClusterSpecForProviderContainerProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'id': obj.id,
    'info': toJson_VirtualClusterSpecForProviderContainerProviderInfo(obj.info),
    'type_': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema VirtualClusterSpecProviderConfigRefPolicy
 */
export interface VirtualClusterSpecProviderConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema VirtualClusterSpecProviderConfigRefPolicy#resolution
   */
  readonly resolution?: VirtualClusterSpecProviderConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema VirtualClusterSpecProviderConfigRefPolicy#resolve
   */
  readonly resolve?: VirtualClusterSpecProviderConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'VirtualClusterSpecProviderConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualClusterSpecProviderConfigRefPolicy(obj: VirtualClusterSpecProviderConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
 *
 * @schema VirtualClusterSpecPublishConnectionDetailsToConfigRef
 */
export interface VirtualClusterSpecPublishConnectionDetailsToConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema VirtualClusterSpecPublishConnectionDetailsToConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema VirtualClusterSpecPublishConnectionDetailsToConfigRef#policy
   */
  readonly policy?: VirtualClusterSpecPublishConnectionDetailsToConfigRefPolicy;

}

/**
 * Converts an object of type 'VirtualClusterSpecPublishConnectionDetailsToConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualClusterSpecPublishConnectionDetailsToConfigRef(obj: VirtualClusterSpecPublishConnectionDetailsToConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_VirtualClusterSpecPublishConnectionDetailsToConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Metadata is the metadata for connection secret.
 *
 * @schema VirtualClusterSpecPublishConnectionDetailsToMetadata
 */
export interface VirtualClusterSpecPublishConnectionDetailsToMetadata {
  /**
   * Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
   *
   * @schema VirtualClusterSpecPublishConnectionDetailsToMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
   *
   * @schema VirtualClusterSpecPublishConnectionDetailsToMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
   *
   * @schema VirtualClusterSpecPublishConnectionDetailsToMetadata#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'VirtualClusterSpecPublishConnectionDetailsToMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualClusterSpecPublishConnectionDetailsToMetadata(obj: VirtualClusterSpecPublishConnectionDetailsToMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The information about the container used for a job run or a managed endpoint.
 *
 * @schema VirtualClusterSpecForProviderContainerProviderInfo
 */
export interface VirtualClusterSpecForProviderContainerProviderInfo {
  /**
   * The information about the Amazon EKS cluster.
   *
   * @schema VirtualClusterSpecForProviderContainerProviderInfo#eksInfo
   */
  readonly eksInfo?: VirtualClusterSpecForProviderContainerProviderInfoEksInfo;

}

/**
 * Converts an object of type 'VirtualClusterSpecForProviderContainerProviderInfo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualClusterSpecForProviderContainerProviderInfo(obj: VirtualClusterSpecForProviderContainerProviderInfo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'eksInfo': toJson_VirtualClusterSpecForProviderContainerProviderInfoEksInfo(obj.eksInfo),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema VirtualClusterSpecProviderConfigRefPolicyResolution
 */
export enum VirtualClusterSpecProviderConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema VirtualClusterSpecProviderConfigRefPolicyResolve
 */
export enum VirtualClusterSpecProviderConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Policies for referencing.
 *
 * @schema VirtualClusterSpecPublishConnectionDetailsToConfigRefPolicy
 */
export interface VirtualClusterSpecPublishConnectionDetailsToConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema VirtualClusterSpecPublishConnectionDetailsToConfigRefPolicy#resolution
   */
  readonly resolution?: VirtualClusterSpecPublishConnectionDetailsToConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema VirtualClusterSpecPublishConnectionDetailsToConfigRefPolicy#resolve
   */
  readonly resolve?: VirtualClusterSpecPublishConnectionDetailsToConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'VirtualClusterSpecPublishConnectionDetailsToConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualClusterSpecPublishConnectionDetailsToConfigRefPolicy(obj: VirtualClusterSpecPublishConnectionDetailsToConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The information about the Amazon EKS cluster.
 *
 * @schema VirtualClusterSpecForProviderContainerProviderInfoEksInfo
 */
export interface VirtualClusterSpecForProviderContainerProviderInfoEksInfo {
  /**
   * @schema VirtualClusterSpecForProviderContainerProviderInfoEksInfo#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'VirtualClusterSpecForProviderContainerProviderInfoEksInfo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualClusterSpecForProviderContainerProviderInfoEksInfo(obj: VirtualClusterSpecForProviderContainerProviderInfoEksInfo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema VirtualClusterSpecPublishConnectionDetailsToConfigRefPolicyResolution
 */
export enum VirtualClusterSpecPublishConnectionDetailsToConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema VirtualClusterSpecPublishConnectionDetailsToConfigRefPolicyResolve
 */
export enum VirtualClusterSpecPublishConnectionDetailsToConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

